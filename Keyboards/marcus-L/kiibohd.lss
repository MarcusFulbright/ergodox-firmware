
kiibohd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009988  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .usbdescriptortable 00000120  1fff8000  1fff8000  00018000  2**2
                  ALLOC
  2 .dmabuffers   00000000  1fff8120  1fff8120  00010fe0  2**0
                  CONTENTS
  3 .usbbuffers   00000870  1fff8120  1fff8120  00018000  2**0
                  ALLOC
  4 .data         00000650  1fff8990  0000b988  00010990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000123c  1fff8fe0  0000bfd8  00010fe0  2**2
                  ALLOC
  6 .debug_info   0000f6d2  00000000  00000000  00010fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002956  00000000  00000000  000206b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000007f8  00000000  00000000  00023008  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000b70  00000000  00000000  00023800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000980e  00000000  00000000  00024370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004cfc  00000000  00000000  0002db7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0002348b  00000000  00000000  0003287a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000020  00000000  00000000  00055d05  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000033  00000000  00000000  00055d25  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001568  00000000  00000000  00055d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000070af  00000000  00000000  000572c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <gVectors>:
    2000:	00 80 00 20 bd 21 00 00 81 24 00 00 8d 24 00 00     ... .!...$...$..
    2010:	c1 24 00 00 01 25 00 00 41 25 00 00 3d 24 00 00     .$...%..A%..=$..
    2020:	3d 24 00 00 3d 24 00 00 3d 24 00 00 79 24 00 00     =$..=$..=$..y$..
    2030:	79 24 00 00 3d 24 00 00 79 24 00 00 2d 24 00 00     y$..=$..y$..-$..
    2040:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2050:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2060:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2070:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2080:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2090:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20a0:	0d 27 00 00 79 24 00 00 79 24 00 00 79 24 00 00     .'..y$..y$..y$..
    20b0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20c0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20d0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20e0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20f0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2100:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2110:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2120:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2130:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2140:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2150:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2160:	79 24 00 00 d1 63 00 00 79 24 00 00 79 24 00 00     y$...c..y$..y$..
    2170:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2180:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2190:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    21a0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    21b0:	79 24 00 00 79 24 00 00 79 24 00 00                 y$..y$..y$..

000021bc <ResetHandler>:

// ----- Chip Entry Point -----

__attribute__ ((section(".startup")))
void ResetHandler()
{
    21bc:	b508      	push	{r3, lr}
		SCB_VTOR = addr; // relocate vector table
		jump_to_app( addr );
	}
#endif
	// Disable Watchdog
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
    21be:	4b3e      	ldr	r3, [pc, #248]	; (22b8 <ResetHandler+0xfc>)
    21c0:	f24c 5220 	movw	r2, #50464	; 0xc520
    21c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    21c6:	f64d 1228 	movw	r2, #55592	; 0xd928
    21ca:	801a      	strh	r2, [r3, #0]
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    21cc:	2210      	movs	r2, #16
    21ce:	f823 2c0e 	strh.w	r2, [r3, #-14]

	uint32_t *src = (uint32_t*)&_etext;
	uint32_t *dest = (uint32_t*)&_sdata;

	// Enable clocks to always-used peripherals
	SIM_SCGC5 = 0x00043F82; // Clocks active to all GPIO
    21d2:	f5a3 431f 	sub.w	r3, r3, #40704	; 0x9f00
    21d6:	3bd6      	subs	r3, #214	; 0xd6
    21d8:	4a38      	ldr	r2, [pc, #224]	; (22bc <ResetHandler+0x100>)
    21da:	601a      	str	r2, [r3, #0]
	SIM_SCGC6 = SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
    21dc:	4a38      	ldr	r2, [pc, #224]	; (22c0 <ResetHandler+0x104>)
    21de:	605a      	str	r2, [r3, #4]
#if defined(_mk20dx128_)
	SIM_SCGC6 |= SIM_SCGC6_RTC;
#elif defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
    21e0:	4a38      	ldr	r2, [pc, #224]	; (22c4 <ResetHandler+0x108>)
    21e2:	f04f 6110 	mov.w	r1, #150994944	; 0x9000000
    21e6:	6011      	str	r1, [r2, #0]
	SIM_SCGC6 |= SIM_SCGC6_RTC;
    21e8:	685a      	ldr	r2, [r3, #4]
    21ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    21ee:	605a      	str	r2, [r3, #4]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// release I/O pins hold, if we woke up from VLLS mode
	if ( PMC_REGSC & PMC_REGSC_ACKISO )
    21f0:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
    21f4:	f203 33ca 	addw	r3, r3, #970	; 0x3ca
    21f8:	781a      	ldrb	r2, [r3, #0]
    21fa:	0711      	lsls	r1, r2, #28
    21fc:	d503      	bpl.n	2206 <ResetHandler+0x4a>
	{
		PMC_REGSC |= PMC_REGSC_ACKISO;
    21fe:	781a      	ldrb	r2, [r3, #0]
    2200:	f042 0208 	orr.w	r2, r2, #8
    2204:	701a      	strb	r2, [r3, #0]

// ----- Chip Entry Point -----

__attribute__ ((section(".startup")))
void ResetHandler()
{
    2206:	2300      	movs	r3, #0
    2208:	4a2f      	ldr	r2, [pc, #188]	; (22c8 <ResetHandler+0x10c>)
	{
		PMC_REGSC |= PMC_REGSC_ACKISO;
	}

	// Prepare RAM
	while ( dest < (uint32_t*)&_edata ) *dest++ = *src++;
    220a:	4930      	ldr	r1, [pc, #192]	; (22cc <ResetHandler+0x110>)
    220c:	1898      	adds	r0, r3, r2
    220e:	4288      	cmp	r0, r1
    2210:	d204      	bcs.n	221c <ResetHandler+0x60>
    2212:	492f      	ldr	r1, [pc, #188]	; (22d0 <ResetHandler+0x114>)
    2214:	5859      	ldr	r1, [r3, r1]
    2216:	5099      	str	r1, [r3, r2]
    2218:	3304      	adds	r3, #4
    221a:	e7f5      	b.n	2208 <ResetHandler+0x4c>
    221c:	4b2d      	ldr	r3, [pc, #180]	; (22d4 <ResetHandler+0x118>)
	dest = (uint32_t*)&_sbss;
	while ( dest < (uint32_t*)&_ebss ) *dest++ = 0;
    221e:	4a2e      	ldr	r2, [pc, #184]	; (22d8 <ResetHandler+0x11c>)
    2220:	4293      	cmp	r3, r2
    2222:	d203      	bcs.n	222c <ResetHandler+0x70>
    2224:	2200      	movs	r2, #0
    2226:	f843 2b04 	str.w	r2, [r3], #4
    222a:	e7f8      	b.n	221e <ResetHandler+0x62>
    222c:	4b2b      	ldr	r3, [pc, #172]	; (22dc <ResetHandler+0x120>)
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
	{
		NVIC_SET_PRIORITY( i, 128 );
    222e:	2280      	movs	r2, #128	; 0x80
    2230:	f803 2b01 	strb.w	r2, [r3], #1
	// use vector table in flash
	SCB_VTOR = 0;
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
    2234:	4a2a      	ldr	r2, [pc, #168]	; (22e0 <ResetHandler+0x124>)
    2236:	4293      	cmp	r3, r2
    2238:	d1f9      	bne.n	222e <ResetHandler+0x72>
		NVIC_SET_PRIORITY( i, 128 );
	}

	// start in FEI mode
	// enable capacitors for crystal
	OSC0_CR = OSC_SC8P | OSC_SC2P;
    223a:	4b2a      	ldr	r3, [pc, #168]	; (22e4 <ResetHandler+0x128>)
    223c:	220a      	movs	r2, #10
    223e:	701a      	strb	r2, [r3, #0]

	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0( 2 ) | MCG_C2_EREFS;
    2240:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
    2244:	2224      	movs	r2, #36	; 0x24
    2246:	701a      	strb	r2, [r3, #0]

	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS( 2 ) | MCG_C1_FRDIV( 4 );
    2248:	22a0      	movs	r2, #160	; 0xa0
    224a:	f803 2c01 	strb.w	r2, [r3, #-1]

	// wait for crystal oscillator to begin
	while ( (MCG_S & MCG_S_OSCINIT0) == 0 );
    224e:	4b26      	ldr	r3, [pc, #152]	; (22e8 <ResetHandler+0x12c>)
    2250:	781a      	ldrb	r2, [r3, #0]
    2252:	0792      	lsls	r2, r2, #30
    2254:	d5fb      	bpl.n	224e <ResetHandler+0x92>

	// wait for FLL to use oscillator
	while ( (MCG_S & MCG_S_IREFST) != 0 );
    2256:	781a      	ldrb	r2, [r3, #0]
    2258:	06d0      	lsls	r0, r2, #27
    225a:	d4fc      	bmi.n	2256 <ResetHandler+0x9a>

	// wait for MCGOUT to use oscillator
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 2 ) );
    225c:	781a      	ldrb	r2, [r3, #0]
    225e:	f002 020c 	and.w	r2, r2, #12
    2262:	2a08      	cmp	r2, #8
    2264:	d1fa      	bne.n	225c <ResetHandler+0xa0>

	// now we're in FBE mode
#if F_CPU == 72000000
	// config PLL input for 16 MHz Crystal / 8 = 2 MHz
	MCG_C5 = MCG_C5_PRDIV0( 7 );
    2266:	4b21      	ldr	r3, [pc, #132]	; (22ec <ResetHandler+0x130>)
    2268:	2207      	movs	r2, #7
    226a:	701a      	strb	r2, [r3, #0]
	MCG_C5 = MCG_C5_PRDIV0( 3 );
#endif

#if F_CPU == 72000000
	// config PLL for 72 MHz output (36 * 2 MHz Ext PLL)
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 12 );
    226c:	224c      	movs	r2, #76	; 0x4c
    226e:	705a      	strb	r2, [r3, #1]
	// config PLL for 96 MHz output
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 0 );
#endif

	// wait for PLL to start using xtal as its input
	while ( !(MCG_S & MCG_S_PLLST) );
    2270:	4b1d      	ldr	r3, [pc, #116]	; (22e8 <ResetHandler+0x12c>)
    2272:	781a      	ldrb	r2, [r3, #0]
    2274:	0691      	lsls	r1, r2, #26
    2276:	d5fb      	bpl.n	2270 <ResetHandler+0xb4>

	// wait for PLL to lock
	while ( !(MCG_S & MCG_S_LOCK0) );
    2278:	781a      	ldrb	r2, [r3, #0]
    227a:	0652      	lsls	r2, r2, #25
    227c:	d5fc      	bpl.n	2278 <ResetHandler+0xbc>
#if F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 2 );
    227e:	4b1c      	ldr	r3, [pc, #112]	; (22f0 <ResetHandler+0x134>)
    2280:	f04f 7281 	mov.w	r2, #16908288	; 0x1020000
    2284:	601a      	str	r2, [r3, #0]
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 3 ) | SIM_CLKDIV1_OUTDIV2( 3 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#else
#error "Error, F_CPU must be 96000000, 72000000, 48000000, or 24000000"
#endif
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS( 0 ) | MCG_C1_FRDIV( 4 );
    2286:	4b1b      	ldr	r3, [pc, #108]	; (22f4 <ResetHandler+0x138>)
    2288:	2220      	movs	r2, #32
    228a:	701a      	strb	r2, [r3, #0]

	// wait for PLL clock to be used
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 3 ) );
    228c:	4b16      	ldr	r3, [pc, #88]	; (22e8 <ResetHandler+0x12c>)
    228e:	781b      	ldrb	r3, [r3, #0]
    2290:	f003 030c 	and.w	r3, r3, #12
    2294:	2b0c      	cmp	r3, #12
    2296:	d1f9      	bne.n	228c <ResetHandler+0xd0>

	// now we're in PEE mode
#if F_CPU == 72000000
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 2 ) | SIM_CLKDIV2_USBFRAC; // USB = 72 MHz PLL / 1.5
    2298:	4b17      	ldr	r3, [pc, #92]	; (22f8 <ResetHandler+0x13c>)
    229a:	2205      	movs	r2, #5
    229c:	601a      	str	r2, [r3, #0]
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 1 ); // USB = 96 MHz PLL / 2
#endif

	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL( 6 );
    229e:	4a17      	ldr	r2, [pc, #92]	; (22fc <ResetHandler+0x140>)
    22a0:	f843 2c44 	str.w	r2, [r3, #-68]

#endif

#if !defined(_bootloader_)
	// Initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
    22a4:	4b16      	ldr	r3, [pc, #88]	; (2300 <ResetHandler+0x144>)
    22a6:	4a17      	ldr	r2, [pc, #92]	; (2304 <ResetHandler+0x148>)
    22a8:	601a      	str	r2, [r3, #0]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
    22aa:	2207      	movs	r2, #7
    22ac:	f843 2c04 	str.w	r2, [r3, #-4]

	__enable_irq();
    22b0:	b662      	cpsie	i
#else
	// Disable Watchdog for bootloader
	WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN;
#endif

	main();
    22b2:	f000 f8a5 	bl	2400 <main>
    22b6:	e7fe      	b.n	22b6 <ResetHandler+0xfa>
    22b8:	4005200e 	.word	0x4005200e
    22bc:	00043f82 	.word	0x00043f82
    22c0:	0b000001 	.word	0x0b000001
    22c4:	40048030 	.word	0x40048030
    22c8:	1fff8990 	.word	0x1fff8990
    22cc:	1fff8fe0 	.word	0x1fff8fe0
    22d0:	0000b988 	.word	0x0000b988
    22d4:	1fff8fe0 	.word	0x1fff8fe0
    22d8:	1fffa21c 	.word	0x1fffa21c
    22dc:	e000e400 	.word	0xe000e400
    22e0:	e000e45f 	.word	0xe000e45f
    22e4:	40065000 	.word	0x40065000
    22e8:	40064006 	.word	0x40064006
    22ec:	40064004 	.word	0x40064004
    22f0:	40048044 	.word	0x40048044
    22f4:	40064000 	.word	0x40064000
    22f8:	40048048 	.word	0x40048048
    22fc:	000510c0 	.word	0x000510c0
    2300:	e000e014 	.word	0xe000e014
    2304:	0001193f 	.word	0x0001193f
    2308:	00000000 	.word	0x00000000
    230c:	00000000 	.word	0x00000000
    2310:	00000000 	.word	0x00000000
    2314:	00000000 	.word	0x00000000
    2318:	00000000 	.word	0x00000000
    231c:	00000000 	.word	0x00000000
    2320:	00000000 	.word	0x00000000
    2324:	00000000 	.word	0x00000000
    2328:	00000000 	.word	0x00000000
    232c:	00000000 	.word	0x00000000
    2330:	00000000 	.word	0x00000000
    2334:	00000000 	.word	0x00000000
    2338:	00000000 	.word	0x00000000
    233c:	00000000 	.word	0x00000000
    2340:	00000000 	.word	0x00000000
    2344:	00000000 	.word	0x00000000
    2348:	00000000 	.word	0x00000000
    234c:	00000000 	.word	0x00000000
    2350:	00000000 	.word	0x00000000
    2354:	00000000 	.word	0x00000000
    2358:	00000000 	.word	0x00000000
    235c:	00000000 	.word	0x00000000
    2360:	00000000 	.word	0x00000000
    2364:	00000000 	.word	0x00000000
    2368:	00000000 	.word	0x00000000
    236c:	00000000 	.word	0x00000000
    2370:	00000000 	.word	0x00000000
    2374:	00000000 	.word	0x00000000
    2378:	00000000 	.word	0x00000000
    237c:	00000000 	.word	0x00000000
    2380:	00000000 	.word	0x00000000
    2384:	00000000 	.word	0x00000000
    2388:	00000000 	.word	0x00000000
    238c:	00000000 	.word	0x00000000
    2390:	00000000 	.word	0x00000000
    2394:	00000000 	.word	0x00000000
    2398:	00000000 	.word	0x00000000
    239c:	00000000 	.word	0x00000000
    23a0:	00000000 	.word	0x00000000
    23a4:	00000000 	.word	0x00000000
    23a8:	00000000 	.word	0x00000000
    23ac:	00000000 	.word	0x00000000
    23b0:	00000000 	.word	0x00000000
    23b4:	00000000 	.word	0x00000000
    23b8:	00000000 	.word	0x00000000
    23bc:	00000000 	.word	0x00000000
    23c0:	00000000 	.word	0x00000000
    23c4:	00000000 	.word	0x00000000
    23c8:	00000000 	.word	0x00000000
    23cc:	00000000 	.word	0x00000000
    23d0:	00000000 	.word	0x00000000
    23d4:	00000000 	.word	0x00000000
    23d8:	00000000 	.word	0x00000000
    23dc:	00000000 	.word	0x00000000
    23e0:	00000000 	.word	0x00000000
    23e4:	00000000 	.word	0x00000000
    23e8:	00000000 	.word	0x00000000
    23ec:	00000000 	.word	0x00000000
    23f0:	00000000 	.word	0x00000000
    23f4:	00000000 	.word	0x00000000
    23f8:	00000000 	.word	0x00000000
    23fc:	00000000 	.word	0x00000000

00002400 <main>:


// ----- Functions -----

int main()
{
    2400:	b508      	push	{r3, lr}
	CLKPR = 0x80;
	CLKPR = 0x00;
#endif

	// Enable CLI
	CLI_init();
    2402:	f004 ffdb 	bl	73bc <CLI_init>

	// Setup Modules
	Output_setup();
    2406:	f003 fead 	bl	6164 <Output_setup>
	Macro_setup();
    240a:	f003 faf5 	bl	59f8 <Macro_setup>
	Scan_setup();
    240e:	f002 fb33 	bl	4a78 <Scan_setup>

	// Main Detection Loop
	while ( 1 )
	{
		// Process CLI
		CLI_process();
    2412:	f005 f8b5 	bl	7580 <CLI_process>

		// Acquire Key Indices
		// Loop continuously until scan_loop returns 0
		cli();
    2416:	b672      	cpsid	i
		while ( Scan_loop() );
    2418:	f002 fb42 	bl	4aa0 <Scan_loop>
    241c:	2800      	cmp	r0, #0
    241e:	d1fb      	bne.n	2418 <main+0x18>
		sei();
    2420:	b662      	cpsie	i

		// Run Macros over Key Indices and convert to USB Keys
		Macro_process();
    2422:	f003 f915 	bl	5650 <Macro_process>

		// Sends USB data only if changed
		Output_send();
    2426:	f003 fead 	bl	6184 <Output_send>
	}
    242a:	e7f2      	b.n	2412 <main+0x12>

0000242c <systick_default_isr>:

// NVIC - SysTick ISR
extern volatile uint32_t systick_millis_count;
void systick_default_isr()
{
	systick_millis_count++;
    242c:	4b02      	ldr	r3, [pc, #8]	; (2438 <systick_default_isr+0xc>)
    242e:	681a      	ldr	r2, [r3, #0]
    2430:	3201      	adds	r2, #1
    2432:	601a      	str	r2, [r3, #0]
    2434:	4770      	bx	lr
    2436:	bf00      	nop
    2438:	1fff8fe0 	.word	0x1fff8fe0

0000243c <fault_isr>:

// ----- Interrupts -----

// NVIC - Default ISR
void fault_isr()
{
    243c:	b508      	push	{r3, lr}
	print("Fault!" NL );
    243e:	480c      	ldr	r0, [pc, #48]	; (2470 <fault_isr+0x34>)
    2440:	f005 f9de 	bl	7800 <_print>
	while ( 1 )
	{
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if ( SIM_SCGC4 & SIM_SCGC4_USBOTG ) usb_isr();
    2444:	4c0b      	ldr	r4, [pc, #44]	; (2474 <fault_isr+0x38>)
    2446:	6823      	ldr	r3, [r4, #0]
    2448:	0358      	lsls	r0, r3, #13
    244a:	d501      	bpl.n	2450 <fault_isr+0x14>
    244c:	f003 ffc0 	bl	63d0 <usb_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART0 )  uart0_status_isr();
    2450:	6823      	ldr	r3, [r4, #0]
    2452:	0559      	lsls	r1, r3, #21
    2454:	d501      	bpl.n	245a <fault_isr+0x1e>
    2456:	f000 f80f 	bl	2478 <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART1 )  uart1_status_isr();
    245a:	6823      	ldr	r3, [r4, #0]
    245c:	051a      	lsls	r2, r3, #20
    245e:	d501      	bpl.n	2464 <fault_isr+0x28>
    2460:	f000 f80a 	bl	2478 <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART2 )  uart2_status_isr();
    2464:	6823      	ldr	r3, [r4, #0]
    2466:	04db      	lsls	r3, r3, #19
    2468:	d5ec      	bpl.n	2444 <fault_isr+0x8>
    246a:	f000 f805 	bl	2478 <unused_isr>
    246e:	e7e9      	b.n	2444 <fault_isr+0x8>
    2470:	00008d78 	.word	0x00008d78
    2474:	40048034 	.word	0x40048034

00002478 <unused_isr>:
	}
}

void unused_isr()
{
    2478:	b508      	push	{r3, lr}
	fault_isr();
    247a:	f7ff ffdf 	bl	243c <fault_isr>
    247e:	0000      	movs	r0, r0

00002480 <nmi_default_isr>:


// NVIC - Non-Maskable Interrupt ISR
void nmi_default_isr()
{
	print("NMI!" NL );
    2480:	4801      	ldr	r0, [pc, #4]	; (2488 <nmi_default_isr+0x8>)
    2482:	f005 b9bd 	b.w	7800 <_print>
    2486:	bf00      	nop
    2488:	00007a46 	.word	0x00007a46

0000248c <hard_fault_default_isr>:
}


// NVIC - Hard Fault ISR
void hard_fault_default_isr()
{
    248c:	b508      	push	{r3, lr}
	print("Hard Fault! SCB_HFSR: ");
    248e:	4807      	ldr	r0, [pc, #28]	; (24ac <hard_fault_default_isr+0x20>)
    2490:	f005 f9b6 	bl	7800 <_print>
	printHex32( SCB_HFSR );
    2494:	4b06      	ldr	r3, [pc, #24]	; (24b0 <hard_fault_default_isr+0x24>)
    2496:	2101      	movs	r1, #1
    2498:	6818      	ldr	r0, [r3, #0]
    249a:	f005 fa6f 	bl	797c <printHex32_op>
	print( NL );
    249e:	4805      	ldr	r0, [pc, #20]	; (24b4 <hard_fault_default_isr+0x28>)
    24a0:	f005 f9ae 	bl	7800 <_print>
	SOFTWARE_RESET();
    24a4:	4b04      	ldr	r3, [pc, #16]	; (24b8 <hard_fault_default_isr+0x2c>)
    24a6:	4a05      	ldr	r2, [pc, #20]	; (24bc <hard_fault_default_isr+0x30>)
    24a8:	601a      	str	r2, [r3, #0]
    24aa:	bd08      	pop	{r3, pc}
    24ac:	00007a4d 	.word	0x00007a4d
    24b0:	e000ed2c 	.word	0xe000ed2c
    24b4:	0000b26f 	.word	0x0000b26f
    24b8:	e000ed0c 	.word	0xe000ed0c
    24bc:	05fa0004 	.word	0x05fa0004

000024c0 <memmanage_fault_default_isr>:
}


// NVIC - Memory Manager Fault ISR
void memmanage_fault_default_isr()
{
    24c0:	b508      	push	{r3, lr}
	print("Memory Manager Fault! SCB_CFSR: ");
    24c2:	480a      	ldr	r0, [pc, #40]	; (24ec <memmanage_fault_default_isr+0x2c>)
    24c4:	f005 f99c 	bl	7800 <_print>
	printHex32( SCB_CFSR );
    24c8:	4b09      	ldr	r3, [pc, #36]	; (24f0 <memmanage_fault_default_isr+0x30>)
    24ca:	2101      	movs	r1, #1
    24cc:	6818      	ldr	r0, [r3, #0]
    24ce:	f005 fa55 	bl	797c <printHex32_op>
	print(" SCB_MMAR: ");
    24d2:	4808      	ldr	r0, [pc, #32]	; (24f4 <memmanage_fault_default_isr+0x34>)
    24d4:	f005 f994 	bl	7800 <_print>
	printHex32( SCB_MMAR );
    24d8:	4b07      	ldr	r3, [pc, #28]	; (24f8 <memmanage_fault_default_isr+0x38>)
    24da:	2101      	movs	r1, #1
    24dc:	6818      	ldr	r0, [r3, #0]
    24de:	f005 fa4d 	bl	797c <printHex32_op>
	print( NL );
    24e2:	4806      	ldr	r0, [pc, #24]	; (24fc <memmanage_fault_default_isr+0x3c>)
}
    24e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Memory Manager Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_MMAR: ");
	printHex32( SCB_MMAR );
	print( NL );
    24e8:	f005 b98a 	b.w	7800 <_print>
    24ec:	00007a64 	.word	0x00007a64
    24f0:	e000ed28 	.word	0xe000ed28
    24f4:	00007a85 	.word	0x00007a85
    24f8:	e000ed34 	.word	0xe000ed34
    24fc:	0000b26f 	.word	0x0000b26f

00002500 <bus_fault_default_isr>:
}


// NVIC - Bus Fault ISR
void bus_fault_default_isr()
{
    2500:	b508      	push	{r3, lr}
	print("Bus Fault! SCB_CFSR: ");
    2502:	480a      	ldr	r0, [pc, #40]	; (252c <bus_fault_default_isr+0x2c>)
    2504:	f005 f97c 	bl	7800 <_print>
	printHex32( SCB_CFSR );
    2508:	4b09      	ldr	r3, [pc, #36]	; (2530 <bus_fault_default_isr+0x30>)
    250a:	2101      	movs	r1, #1
    250c:	6818      	ldr	r0, [r3, #0]
    250e:	f005 fa35 	bl	797c <printHex32_op>
	print(" SCB_BFAR: ");
    2512:	4808      	ldr	r0, [pc, #32]	; (2534 <bus_fault_default_isr+0x34>)
    2514:	f005 f974 	bl	7800 <_print>
	printHex32( SCB_BFAR );
    2518:	4b07      	ldr	r3, [pc, #28]	; (2538 <bus_fault_default_isr+0x38>)
    251a:	2101      	movs	r1, #1
    251c:	6818      	ldr	r0, [r3, #0]
    251e:	f005 fa2d 	bl	797c <printHex32_op>
	print( NL );
    2522:	4806      	ldr	r0, [pc, #24]	; (253c <bus_fault_default_isr+0x3c>)
}
    2524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Bus Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_BFAR: ");
	printHex32( SCB_BFAR );
	print( NL );
    2528:	f005 b96a 	b.w	7800 <_print>
    252c:	00007a91 	.word	0x00007a91
    2530:	e000ed28 	.word	0xe000ed28
    2534:	00007aa7 	.word	0x00007aa7
    2538:	e000ed38 	.word	0xe000ed38
    253c:	0000b26f 	.word	0x0000b26f

00002540 <usage_fault_default_isr>:
}


// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
    2540:	b508      	push	{r3, lr}
	print("Usage Fault! SCB_CFSR: ");
    2542:	4806      	ldr	r0, [pc, #24]	; (255c <usage_fault_default_isr+0x1c>)
    2544:	f005 f95c 	bl	7800 <_print>
	printHex32( SCB_CFSR );
    2548:	4b05      	ldr	r3, [pc, #20]	; (2560 <usage_fault_default_isr+0x20>)
    254a:	2101      	movs	r1, #1
    254c:	6818      	ldr	r0, [r3, #0]
    254e:	f005 fa15 	bl	797c <printHex32_op>
	print( NL );
    2552:	4804      	ldr	r0, [pc, #16]	; (2564 <usage_fault_default_isr+0x24>)
}
    2554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
	print("Usage Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print( NL );
    2558:	f005 b952 	b.w	7800 <_print>
    255c:	00007ab3 	.word	0x00007ab3
    2560:	e000ed28 	.word	0xe000ed28
    2564:	0000b26f 	.word	0x0000b26f

00002568 <memset>:
	__builtin_unreachable();
}
#endif

void *memset( void *addr, int val, unsigned int len )
{
    2568:	4402      	add	r2, r0
	char *buf = addr;
    256a:	4603      	mov	r3, r0

	for (; len > 0; --len, ++buf)
    256c:	4293      	cmp	r3, r2
    256e:	d002      	beq.n	2576 <memset+0xe>
		*buf = val;
    2570:	f803 1b01 	strb.w	r1, [r3], #1
    2574:	e7fa      	b.n	256c <memset+0x4>
	return (addr);
}
    2576:	4770      	bx	lr

00002578 <memcpy>:
		/* NOTHING */;
	return (val);
}

void *memcpy( void *dst, const void *src, unsigned int len )
{
    2578:	b510      	push	{r4, lr}
	char *dstbuf = dst;
	const char *srcbuf = src;

	for (; len > 0; --len, ++dstbuf, ++srcbuf)
    257a:	2300      	movs	r3, #0
    257c:	4293      	cmp	r3, r2
    257e:	d003      	beq.n	2588 <memcpy+0x10>
		*dstbuf = *srcbuf;
    2580:	5ccc      	ldrb	r4, [r1, r3]
    2582:	54c4      	strb	r4, [r0, r3]
    2584:	3301      	adds	r3, #1
    2586:	e7f9      	b.n	257c <memcpy+0x4>
	return (dst);
}
    2588:	bd10      	pop	{r4, pc}

0000258a <yield>:



// ----- Functions -----

void yield(void) {};
    258a:	4770      	bx	lr

0000258c <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    258c:	b672      	cpsid	i
	current = SYST_CVR;
    258e:	4b0c      	ldr	r3, [pc, #48]	; (25c0 <micros+0x34>)
	count = systick_millis_count;
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    2590:	490c      	ldr	r1, [pc, #48]	; (25c4 <micros+0x38>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2592:	681a      	ldr	r2, [r3, #0]
	count = systick_millis_count;
    2594:	4b0c      	ldr	r3, [pc, #48]	; (25c8 <micros+0x3c>)
    2596:	681b      	ldr	r3, [r3, #0]
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    2598:	6809      	ldr	r1, [r1, #0]
	__enable_irq();
    259a:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
    259c:	0149      	lsls	r1, r1, #5
    259e:	d503      	bpl.n	25a8 <micros+0x1c>
    25a0:	490a      	ldr	r1, [pc, #40]	; (25cc <micros+0x40>)
    25a2:	428a      	cmp	r2, r1
    25a4:	bf88      	it	hi
    25a6:	3301      	addhi	r3, #1
	current = ((F_CPU / 1000) - 1) - current;
    25a8:	f5c2 328c 	rsb	r2, r2, #71680	; 0x11800
	return count * 1000 + current / (F_CPU / 1000000);
    25ac:	2148      	movs	r1, #72	; 0x48
	current = SYST_CVR;
	count = systick_millis_count;
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
	__enable_irq();
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
	current = ((F_CPU / 1000) - 1) - current;
    25ae:	f202 123f 	addw	r2, r2, #319	; 0x13f
	return count * 1000 + current / (F_CPU / 1000000);
    25b2:	fbb2 f2f1 	udiv	r2, r2, r1
}
    25b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    25ba:	fb00 2003 	mla	r0, r0, r3, r2
    25be:	4770      	bx	lr
    25c0:	e000e018 	.word	0xe000e018
    25c4:	e000ed04 	.word	0xe000ed04
    25c8:	1fff8fe0 	.word	0x1fff8fe0
    25cc:	0001190e 	.word	0x0001190e

000025d0 <delay>:

void delay(uint32_t ms)
{
    25d0:	b538      	push	{r3, r4, r5, lr}
    25d2:	4604      	mov	r4, r0
	uint32_t start = micros();
    25d4:	f7ff ffda 	bl	258c <micros>
    25d8:	4605      	mov	r5, r0

	while (1) {
		if ((micros() - start) >= 1000) {
    25da:	f7ff ffd7 	bl	258c <micros>
    25de:	1b40      	subs	r0, r0, r5
    25e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    25e4:	d303      	bcc.n	25ee <delay+0x1e>
			ms--;
			if (ms == 0) break;
    25e6:	3c01      	subs	r4, #1
    25e8:	d004      	beq.n	25f4 <delay+0x24>
			start += 1000;
    25ea:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
		}
		yield();
    25ee:	f7ff ffcc 	bl	258a <yield>
	}
    25f2:	e7f2      	b.n	25da <delay+0xa>
    25f4:	bd38      	pop	{r3, r4, r5, pc}

000025f6 <I2C_BufferLen>:


inline uint16_t I2C_BufferLen( I2C_Buffer *buffer )
{
	// Tail >= Head
	if ( buffer->tail >= buffer->head )
    25f6:	8802      	ldrh	r2, [r0, #0]
    25f8:	8843      	ldrh	r3, [r0, #2]
    25fa:	4293      	cmp	r3, r2
		return buffer->head + buffer->size - buffer->tail;
    25fc:	bf24      	itt	cs
    25fe:	88c0      	ldrhcs	r0, [r0, #6]
    2600:	1812      	addcs	r2, r2, r0

	// Head > Tail
	return buffer->head - buffer->tail;
    2602:	1ad3      	subs	r3, r2, r3
    2604:	b298      	uxth	r0, r3
}
    2606:	4770      	bx	lr

00002608 <I2C_BufferPush>:


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
    2608:	b538      	push	{r3, r4, r5, lr}
    260a:	460c      	mov	r4, r1
    260c:	4605      	mov	r5, r0
	dbug_msg("DATA: ");
    260e:	4813      	ldr	r0, [pc, #76]	; (265c <I2C_BufferPush+0x54>)
    2610:	f005 f8f6 	bl	7800 <_print>
	printHex( byte );
    2614:	2101      	movs	r1, #1
    2616:	4628      	mov	r0, r5
    2618:	f005 f97b 	bl	7912 <printHex_op>

	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
    261c:	8861      	ldrh	r1, [r4, #2]
    261e:	8822      	ldrh	r2, [r4, #0]
    2620:	1c4b      	adds	r3, r1, #1
    2622:	4293      	cmp	r3, r2
    2624:	d005      	beq.n	2632 <I2C_BufferPush+0x2a>
    2626:	428a      	cmp	r2, r1
    2628:	88e1      	ldrh	r1, [r4, #6]
    262a:	d90e      	bls.n	264a <I2C_BufferPush+0x42>
    262c:	1a58      	subs	r0, r3, r1
    262e:	4290      	cmp	r0, r2
    2630:	d10b      	bne.n	264a <I2C_BufferPush+0x42>
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
    2632:	480b      	ldr	r0, [pc, #44]	; (2660 <I2C_BufferPush+0x58>)
    2634:	f005 f8e4 	bl	7800 <_print>
		printHex( byte );
    2638:	4628      	mov	r0, r5
    263a:	2101      	movs	r1, #1
    263c:	f005 f969 	bl	7912 <printHex_op>
		print( NL );
    2640:	4808      	ldr	r0, [pc, #32]	; (2664 <I2C_BufferPush+0x5c>)
		buffer->tail++;
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
}
    2642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
		printHex( byte );
		print( NL );
    2646:	f005 b8db 	b.w	7800 <_print>
		return;
	}

	// Check for wrap-around case
	if ( buffer->tail + 1 >= buffer->size )
    264a:	428b      	cmp	r3, r1
	{
		buffer->tail = 0;
    264c:	bfa8      	it	ge
    264e:	2300      	movge	r3, #0
	}
	// Normal case
	else
	{
		buffer->tail++;
    2650:	8063      	strh	r3, [r4, #2]
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
    2652:	8863      	ldrh	r3, [r4, #2]
    2654:	68a2      	ldr	r2, [r4, #8]
    2656:	54d5      	strb	r5, [r2, r3]
    2658:	bd38      	pop	{r3, r4, r5, pc}
    265a:	bf00      	nop
    265c:	00007bed 	.word	0x00007bed
    2660:	00007c07 	.word	0x00007c07
    2664:	0000b26f 	.word	0x0000b26f

00002668 <I2C_TxBufferPop>:
}


uint8_t I2C_TxBufferPop()
{
    2668:	b538      	push	{r3, r4, r5, lr}
	// Return 0xFF if no buffer left (do not rely on this)
	if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) >= I2C_TxBuffer.size )
    266a:	4d23      	ldr	r5, [pc, #140]	; (26f8 <I2C_TxBufferPop+0x90>)
    266c:	4628      	mov	r0, r5
    266e:	f7ff ffc2 	bl	25f6 <I2C_BufferLen>
    2672:	88eb      	ldrh	r3, [r5, #6]
    2674:	b29b      	uxth	r3, r3
    2676:	4298      	cmp	r0, r3
    2678:	462c      	mov	r4, r5
    267a:	d31b      	bcc.n	26b4 <I2C_TxBufferPop+0x4c>
	{
		erro_msg("No buffer to pop an entry from... ");
    267c:	481f      	ldr	r0, [pc, #124]	; (26fc <I2C_TxBufferPop+0x94>)
    267e:	f005 f8bf 	bl	7800 <_print>
		printHex( I2C_TxBuffer.head );
    2682:	8828      	ldrh	r0, [r5, #0]
    2684:	2101      	movs	r1, #1
    2686:	b280      	uxth	r0, r0
    2688:	f005 f943 	bl	7912 <printHex_op>
		print(" ");
    268c:	481c      	ldr	r0, [pc, #112]	; (2700 <I2C_TxBufferPop+0x98>)
    268e:	f005 f8b7 	bl	7800 <_print>
		printHex( I2C_TxBuffer.tail );
    2692:	8868      	ldrh	r0, [r5, #2]
    2694:	2101      	movs	r1, #1
    2696:	b280      	uxth	r0, r0
    2698:	f005 f93b 	bl	7912 <printHex_op>
		print(" ");
    269c:	4818      	ldr	r0, [pc, #96]	; (2700 <I2C_TxBufferPop+0x98>)
    269e:	f005 f8af 	bl	7800 <_print>
		printHex( I2C_TxBuffer.sequencePos );
    26a2:	7928      	ldrb	r0, [r5, #4]
    26a4:	2101      	movs	r1, #1
    26a6:	f005 f934 	bl	7912 <printHex_op>
		print(NL);
    26aa:	4816      	ldr	r0, [pc, #88]	; (2704 <I2C_TxBufferPop+0x9c>)
    26ac:	f005 f8a8 	bl	7800 <_print>
    26b0:	20ff      	movs	r0, #255	; 0xff
    26b2:	bd38      	pop	{r3, r4, r5, pc}
		return 0xFF;
	}

	// If there is currently no sequence being sent, the first entry in the RingBuffer is the length
	if ( I2C_TxBuffer.sequencePos == 0 )
    26b4:	792b      	ldrb	r3, [r5, #4]
    26b6:	b943      	cbnz	r3, 26ca <I2C_TxBufferPop+0x62>
	{
		I2C_TxBuffer.sequencePos = 0xFF; // So this doesn't become an infinite loop
    26b8:	23ff      	movs	r3, #255	; 0xff
    26ba:	712b      	strb	r3, [r5, #4]
		I2C_RxBuffer.sequencePos = I2C_TxBufferPop();
    26bc:	f7ff ffd4 	bl	2668 <I2C_TxBufferPop>
    26c0:	4b11      	ldr	r3, [pc, #68]	; (2708 <I2C_TxBufferPop+0xa0>)
    26c2:	7118      	strb	r0, [r3, #4]
		I2C_TxBuffer.sequencePos = I2C_TxBufferPop();
    26c4:	f7ff ffd0 	bl	2668 <I2C_TxBufferPop>
    26c8:	7128      	strb	r0, [r5, #4]
	}

	uint8_t data = I2C_TxBuffer.buffer[ I2C_TxBuffer.head ];
    26ca:	68a2      	ldr	r2, [r4, #8]
    26cc:	8823      	ldrh	r3, [r4, #0]
    26ce:	b29b      	uxth	r3, r3
    26d0:	5cd0      	ldrb	r0, [r2, r3]

	// Prune head
	I2C_TxBuffer.head++;
    26d2:	8823      	ldrh	r3, [r4, #0]
    26d4:	3301      	adds	r3, #1
    26d6:	b29b      	uxth	r3, r3
    26d8:	8023      	strh	r3, [r4, #0]

	// Wrap-around case
	if ( I2C_TxBuffer.head >= I2C_TxBuffer.size )
    26da:	8822      	ldrh	r2, [r4, #0]
    26dc:	88e3      	ldrh	r3, [r4, #6]
    26de:	b292      	uxth	r2, r2
    26e0:	b29b      	uxth	r3, r3
    26e2:	429a      	cmp	r2, r3
    26e4:	d302      	bcc.n	26ec <I2C_TxBufferPop+0x84>
		I2C_TxBuffer.head = 0;
    26e6:	4b04      	ldr	r3, [pc, #16]	; (26f8 <I2C_TxBufferPop+0x90>)
    26e8:	2200      	movs	r2, #0
    26ea:	801a      	strh	r2, [r3, #0]

	// Decrement buffer sequence (until next stop will be sent)
	I2C_TxBuffer.sequencePos--;
    26ec:	7923      	ldrb	r3, [r4, #4]
    26ee:	3b01      	subs	r3, #1
    26f0:	b2db      	uxtb	r3, r3
    26f2:	7123      	strb	r3, [r4, #4]
	print(" ");
	printHex( I2C_TxBuffer.sequencePos );
	print(NL);
	*/
	return data;
}
    26f4:	bd38      	pop	{r3, r4, r5, pc}
    26f6:	bf00      	nop
    26f8:	1fff899c 	.word	0x1fff899c
    26fc:	00007c41 	.word	0x00007c41
    2700:	00008152 	.word	0x00008152
    2704:	0000b26f 	.word	0x0000b26f
    2708:	1fff8990 	.word	0x1fff8990

0000270c <i2c0_isr>:


// ----- Interrupt Functions -----

void i2c0_isr()
{
    270c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cli(); // Disable Interrupts
    2710:	b672      	cpsid	i

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    2712:	4e3a      	ldr	r6, [pc, #232]	; (27fc <L_391_delayMicroseconds+0x1e>)

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    2714:	4f3a      	ldr	r7, [pc, #232]	; (2800 <L_391_delayMicroseconds+0x22>)
    2716:	4c3b      	ldr	r4, [pc, #236]	; (2804 <L_391_delayMicroseconds+0x26>)
    2718:	f897 8000 	ldrb.w	r8, [r7]

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    271c:	7833      	ldrb	r3, [r6, #0]
    271e:	f013 0f10 	tst.w	r3, #16

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    2722:	fa5f f888 	uxtb.w	r8, r8
    2726:	4635      	mov	r5, r6
	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    2728:	7923      	ldrb	r3, [r4, #4]
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    272a:	d04e      	beq.n	27ca <L_334_delayMicroseconds+0x2a>
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    272c:	b163      	cbz	r3, 2748 <i2c0_isr+0x3c>
		{
			// Make sure slave sent an ACK
			if ( status & I2C_S_RXAK )
    272e:	f018 0f01 	tst.w	r8, #1
    2732:	d045      	beq.n	27c0 <L_334_delayMicroseconds+0x20>
			{
				// NACK Detected, disable interrupt
				erro_print("I2C NAK detected...");
    2734:	4834      	ldr	r0, [pc, #208]	; (2808 <L_391_delayMicroseconds+0x2a>)
    2736:	f005 f863 	bl	7800 <_print>
				I2C0_C1 = I2C_C1_IICEN;
    273a:	2380      	movs	r3, #128	; 0x80
    273c:	7033      	strb	r3, [r6, #0]

				// Abort Tx Buffer
				I2C_TxBuffer.head = 0;
    273e:	2300      	movs	r3, #0
    2740:	8023      	strh	r3, [r4, #0]
				I2C_TxBuffer.tail = 0;
    2742:	8063      	strh	r3, [r4, #2]
				I2C_TxBuffer.sequencePos = 0;
    2744:	7123      	strb	r3, [r4, #4]
    2746:	e053      	b.n	27f0 <L_391_delayMicroseconds+0x12>
				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
			}
		}
		// Receiving data
		else if ( I2C_RxBuffer.sequencePos > 0 )
    2748:	4e30      	ldr	r6, [pc, #192]	; (280c <L_391_delayMicroseconds+0x2e>)
    274a:	7933      	ldrb	r3, [r6, #4]
    274c:	b313      	cbz	r3, 2794 <i2c0_isr+0x88>
		{
			// Master Receive, addr sent
			if ( status & I2C_S_ARBL )
    274e:	f018 0f10 	tst.w	r8, #16
    2752:	d006      	beq.n	2762 <i2c0_isr+0x56>
			{
				// Arbitration Lost
				erro_print("Arbitration lost...");
    2754:	482e      	ldr	r0, [pc, #184]	; (2810 <L_391_delayMicroseconds+0x32>)
    2756:	f005 f853 	bl	7800 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    275a:	2380      	movs	r3, #128	; 0x80
    275c:	702b      	strb	r3, [r5, #0]
				I2C0_S = I2C_S_ARBL | I2C_S_IICIF; // Clear ARBL flag and interrupt
    275e:	2312      	movs	r3, #18
    2760:	703b      	strb	r3, [r7, #0]
			}
			if ( status & I2C_S_RXAK )
    2762:	f018 0f01 	tst.w	r8, #1
    2766:	d004      	beq.n	2772 <i2c0_isr+0x66>
			{
				// Slave Address NACK Detected, disable interrupt
				erro_print("Slave Address I2C NAK detected...");
    2768:	482a      	ldr	r0, [pc, #168]	; (2814 <L_391_delayMicroseconds+0x36>)
    276a:	f005 f849 	bl	7800 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    276e:	2380      	movs	r3, #128	; 0x80
    2770:	e00e      	b.n	2790 <i2c0_isr+0x84>
			}
			else
			{
				dbug_msg("Attempting to read byte - ");
    2772:	4829      	ldr	r0, [pc, #164]	; (2818 <L_391_delayMicroseconds+0x3a>)
    2774:	f005 f844 	bl	7800 <_print>
				printHex( I2C_RxBuffer.sequencePos );
    2778:	7930      	ldrb	r0, [r6, #4]
    277a:	2101      	movs	r1, #1
    277c:	f005 f8c9 	bl	7912 <printHex_op>
				print( NL );
    2780:	4826      	ldr	r0, [pc, #152]	; (281c <L_391_delayMicroseconds+0x3e>)
    2782:	f005 f83d 	bl	7800 <_print>
				I2C0_C1 = I2C_RxBuffer.sequencePos == 1
    2786:	7933      	ldrb	r3, [r6, #4]
    2788:	2b01      	cmp	r3, #1
    278a:	bf14      	ite	ne
    278c:	23e0      	movne	r3, #224	; 0xe0
    278e:	23e8      	moveq	r3, #232	; 0xe8
    2790:	702b      	strb	r3, [r5, #0]
    2792:	e02d      	b.n	27f0 <L_391_delayMicroseconds+0x12>
#elif F_CPU == 48000000
	uint32_t n = usec << 4;
#elif F_CPU == 24000000
	uint32_t n = usec << 3;
#endif
	asm volatile(
    2794:	2320      	movs	r3, #32

00002796 <L_322_delayMicroseconds>:
    2796:	3b01      	subs	r3, #1
    2798:	d1fd      	bne.n	2796 <L_322_delayMicroseconds>
			print(NL);
			*/

			// Delay around STOP to make sure it actually happens...
			delayMicroseconds( 1 );
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    279a:	2380      	movs	r3, #128	; 0x80
    279c:	702b      	strb	r3, [r5, #0]
    279e:	23e0      	movs	r3, #224	; 0xe0

000027a0 <L_334_delayMicroseconds>:
    27a0:	3b01      	subs	r3, #1
    27a2:	d1fd      	bne.n	27a0 <L_334_delayMicroseconds>
			delayMicroseconds( 7 );

			// If there is another sequence, start sending
			if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) < I2C_TxBuffer.size )
    27a4:	4620      	mov	r0, r4
    27a6:	f7ff ff26 	bl	25f6 <I2C_BufferLen>
    27aa:	88e3      	ldrh	r3, [r4, #6]
    27ac:	b29b      	uxth	r3, r3
    27ae:	4298      	cmp	r0, r3
    27b0:	d21e      	bcs.n	27f0 <L_391_delayMicroseconds+0x12>
			{
				// Clear status flags
				I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    27b2:	2312      	movs	r3, #18
    27b4:	703b      	strb	r3, [r7, #0]

				// Wait...till the master dies
				while ( I2C0_S & I2C_S_BUSY );
    27b6:	783b      	ldrb	r3, [r7, #0]
    27b8:	069b      	lsls	r3, r3, #26
    27ba:	d4fc      	bmi.n	27b6 <L_334_delayMicroseconds+0x16>

				// Enable I2C interrupt
				I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    27bc:	23f0      	movs	r3, #240	; 0xf0
    27be:	702b      	strb	r3, [r5, #0]

				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
    27c0:	f7ff ff52 	bl	2668 <I2C_TxBufferPop>
    27c4:	4b16      	ldr	r3, [pc, #88]	; (2820 <L_391_delayMicroseconds+0x42>)
    27c6:	7018      	strb	r0, [r3, #0]
    27c8:	e012      	b.n	27f0 <L_391_delayMicroseconds+0x12>
	{
		// XXX Do we need to handle 2nd last byte?
		//I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // No STOP, Rx, NAK on recv

		// Last byte
		if ( I2C_TxBuffer.sequencePos <= 1 )
    27ca:	2b01      	cmp	r3, #1
    27cc:	4b14      	ldr	r3, [pc, #80]	; (2820 <L_391_delayMicroseconds+0x42>)
    27ce:	d80b      	bhi.n	27e8 <L_391_delayMicroseconds+0xa>
		{
			// Change to Tx mode
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    27d0:	22b0      	movs	r2, #176	; 0xb0
    27d2:	7032      	strb	r2, [r6, #0]

			// Grab last byte
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27d4:	7818      	ldrb	r0, [r3, #0]
    27d6:	490d      	ldr	r1, [pc, #52]	; (280c <L_391_delayMicroseconds+0x2e>)
    27d8:	f7ff ff16 	bl	2608 <I2C_BufferPush>
    27dc:	2320      	movs	r3, #32

000027de <L_391_delayMicroseconds>:
    27de:	3b01      	subs	r3, #1
    27e0:	d1fd      	bne.n	27de <L_391_delayMicroseconds>

			delayMicroseconds( 1 ); // Should be enough time before issuing the stop
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27e2:	2380      	movs	r3, #128	; 0x80
    27e4:	7033      	strb	r3, [r6, #0]
    27e6:	e003      	b.n	27f0 <L_391_delayMicroseconds+0x12>
		}
		else
		{
			// Retrieve data
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27e8:	7818      	ldrb	r0, [r3, #0]
    27ea:	4908      	ldr	r1, [pc, #32]	; (280c <L_391_delayMicroseconds+0x2e>)
    27ec:	f7ff ff0c 	bl	2608 <I2C_BufferPush>
		}
	}

	I2C0_S = I2C_S_IICIF; // Clear interrupt
    27f0:	2302      	movs	r3, #2
    27f2:	703b      	strb	r3, [r7, #0]

	sei(); // Re-enable Interrupts
    27f4:	b662      	cpsie	i
    27f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    27fa:	bf00      	nop
    27fc:	40066002 	.word	0x40066002
    2800:	40066003 	.word	0x40066003
    2804:	1fff899c 	.word	0x1fff899c
    2808:	00007c79 	.word	0x00007c79
    280c:	1fff8990 	.word	0x1fff8990
    2810:	00007ca4 	.word	0x00007ca4
    2814:	00007ccf 	.word	0x00007ccf
    2818:	00007d08 	.word	0x00007d08
    281c:	0000b26f 	.word	0x0000b26f
    2820:	40066004 	.word	0x40066004

00002824 <I2C_Send>:
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2828:	4c31      	ldr	r4, [pc, #196]	; (28f0 <I2C_Send+0xcc>)
    282a:	88e3      	ldrh	r3, [r4, #6]
    282c:	b29b      	uxth	r3, r3
    282e:	428b      	cmp	r3, r1
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2830:	4680      	mov	r8, r0
    2832:	460d      	mov	r5, r1
    2834:	4691      	mov	r9, r2
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2836:	d354      	bcc.n	28e2 <I2C_Send+0xbe>
	// The second element in the new buffer is the length of the buffer sequence (+1)
	uint16_t newTail = buffer->tail + sendLen + 2;
	if ( newTail >= buffer->size )
		newTail -= buffer->size;

	if ( I2C_BufferLen( buffer ) < sendLen + 2 )
    2838:	4620      	mov	r0, r4
    283a:	f7ff fedc 	bl	25f6 <I2C_BufferLen>
    283e:	1c6b      	adds	r3, r5, #1
    2840:	4283      	cmp	r3, r0
    2842:	da4e      	bge.n	28e2 <I2C_Send+0xbe>
	printHex( newTail );
	print("@");
*/

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;
    2844:	8822      	ldrh	r2, [r4, #0]
    2846:	8863      	ldrh	r3, [r4, #2]
    2848:	b292      	uxth	r2, r2
    284a:	b29b      	uxth	r3, r3
    284c:	429a      	cmp	r2, r3
    284e:	bf14      	ite	ne
    2850:	2202      	movne	r2, #2
    2852:	2201      	moveq	r2, #1

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    2854:	2300      	movs	r3, #0

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
    2856:	4619      	mov	r1, r3
	for ( uint16_t c = 0; c < sendLen; c++ )
    2858:	42ab      	cmp	r3, r5
    285a:	d229      	bcs.n	28b0 <I2C_Send+0x8c>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
    285c:	b149      	cbz	r1, 2872 <I2C_Send+0x4e>
    285e:	2901      	cmp	r1, #1
    2860:	d110      	bne.n	2884 <I2C_Send+0x60>
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    2862:	8861      	ldrh	r1, [r4, #2]
    2864:	68a0      	ldr	r0, [r4, #8]
    2866:	b289      	uxth	r1, r1
			bufferHeaderPos++;
			c--;
    2868:	3b01      	subs	r3, #1
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    286a:	5445      	strb	r5, [r0, r1]
			bufferHeaderPos++;
			c--;
    286c:	b29b      	uxth	r3, r3
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
			bufferHeaderPos++;
    286e:	2102      	movs	r1, #2
    2870:	e00e      	b.n	2890 <I2C_Send+0x6c>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    2872:	8861      	ldrh	r1, [r4, #2]
    2874:	68a0      	ldr	r0, [r4, #8]
    2876:	b289      	uxth	r1, r1
			bufferHeaderPos++;
			c--;
    2878:	3b01      	subs	r3, #1
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    287a:	f800 9001 	strb.w	r9, [r0, r1]
			bufferHeaderPos++;
			c--;
    287e:	b29b      	uxth	r3, r3
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
			bufferHeaderPos++;
    2880:	2101      	movs	r1, #1
    2882:	e005      	b.n	2890 <I2C_Send+0x6c>
			bufferHeaderPos++;
			c--;
			break;

		default:
			buffer->buffer[ buffer->tail ] = data[ c ];
    2884:	8860      	ldrh	r0, [r4, #2]
    2886:	68a6      	ldr	r6, [r4, #8]
    2888:	f818 7003 	ldrb.w	r7, [r8, r3]
    288c:	b280      	uxth	r0, r0
    288e:	5437      	strb	r7, [r6, r0]
			break;
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
    2890:	8867      	ldrh	r7, [r4, #2]
    2892:	88e0      	ldrh	r0, [r4, #6]
    2894:	4e16      	ldr	r6, [pc, #88]	; (28f0 <I2C_Send+0xcc>)
    2896:	b2bf      	uxth	r7, r7
    2898:	b280      	uxth	r0, r0
    289a:	3701      	adds	r7, #1
    289c:	4287      	cmp	r7, r0
		{
			buffer->tail = 0;
    289e:	bfa8      	it	ge
    28a0:	2000      	movge	r0, #0
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28a2:	f103 0301 	add.w	r3, r3, #1
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
		{
			buffer->tail = 0;
    28a6:	bfac      	ite	ge
    28a8:	8070      	strhge	r0, [r6, #2]
		}
		// Normal case
		else
		{
			buffer->tail++;
    28aa:	8077      	strhlt	r7, [r6, #2]
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28ac:	b29b      	uxth	r3, r3
    28ae:	e7d3      	b.n	2858 <I2C_Send+0x34>
{
	// Check head and tail pointers
	// If full, return 0
	// If empty, start up I2C Master Tx
	// If buffer is non-empty and non-full, just append to the buffer
	switch ( I2C_BufferCopy( data, sendLen, recvLen, (I2C_Buffer*)&I2C_TxBuffer ) )
    28b0:	2a01      	cmp	r2, #1
    28b2:	d119      	bne.n	28e8 <I2C_Send+0xc4>
		return 0;

	// Empty buffer, initialize I2C
	case 1:
		// Clear status flags
		I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    28b4:	4a0f      	ldr	r2, [pc, #60]	; (28f4 <I2C_Send+0xd0>)
    28b6:	2312      	movs	r3, #18
    28b8:	7013      	strb	r3, [r2, #0]

		// Check to see if we already have control of the bus
		if ( I2C0_C1 & I2C_C1_MST )
    28ba:	4b0f      	ldr	r3, [pc, #60]	; (28f8 <I2C_Send+0xd4>)
    28bc:	7819      	ldrb	r1, [r3, #0]
    28be:	0688      	lsls	r0, r1, #26
    28c0:	d501      	bpl.n	28c6 <I2C_Send+0xa2>
		{
			// Already the master (ah yeah), send a repeated start
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    28c2:	22b4      	movs	r2, #180	; 0xb4
    28c4:	e003      	b.n	28ce <I2C_Send+0xaa>
		}
		// Otherwise, seize control
		else
		{
			// Wait...till the master dies
			while ( I2C0_S & I2C_S_BUSY );
    28c6:	7811      	ldrb	r1, [r2, #0]
    28c8:	0689      	lsls	r1, r1, #26
    28ca:	d4fc      	bmi.n	28c6 <I2C_Send+0xa2>

			// Now we're the master (ah yisss), get ready to send stuffs
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    28cc:	22b0      	movs	r2, #176	; 0xb0
    28ce:	701a      	strb	r2, [r3, #0]
		}

		// Enable I2C interrupt
		I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    28d0:	22f0      	movs	r2, #240	; 0xf0
    28d2:	701a      	strb	r2, [r3, #0]

		// Depending on what type of transfer, the first byte is configured for R or W
		I2C0_D = I2C_TxBufferPop();
    28d4:	f7ff fec8 	bl	2668 <I2C_TxBufferPop>
    28d8:	4b08      	ldr	r3, [pc, #32]	; (28fc <I2C_Send+0xd8>)
    28da:	7018      	strb	r0, [r3, #0]

		return 1;
    28dc:	2001      	movs	r0, #1
    28de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		printHex( sendLen );
		print("|");
		printHex( I2C_TxBuffer.size );
		print( NL );
		*/
		return 0;
    28e2:	2000      	movs	r0, #0
    28e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

		return 1;
	}

	// Dirty buffer, I2C already initialized
	return 2;
    28e8:	2002      	movs	r0, #2
}
    28ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    28ee:	bf00      	nop
    28f0:	1fff899c 	.word	0x1fff899c
    28f4:	40066003 	.word	0x40066003
    28f8:	40066002 	.word	0x40066002
    28fc:	40066004 	.word	0x40066004

00002900 <LED_zeroPages>:
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2904:	4698      	mov	r8, r3
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    2906:	4b1a      	ldr	r3, [pc, #104]	; (2970 <LED_zeroPages+0x70>)
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2908:	b0b0      	sub	sp, #192	; 0xc0
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    290a:	881b      	ldrh	r3, [r3, #0]
    290c:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2910:	4605      	mov	r5, r0
    2912:	4616      	mov	r6, r2
    2914:	460f      	mov	r7, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };

	// Max length of a page + chip id + reg start
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
    2916:	a802      	add	r0, sp, #8
    2918:	2100      	movs	r1, #0
    291a:	22b6      	movs	r2, #182	; 0xb6
    291c:	f7ff fe24 	bl	2568 <memset>
	fullPage[0] = 0xE8;     // Set chip id
    2920:	23e8      	movs	r3, #232	; 0xe8
    2922:	f88d 3008 	strb.w	r3, [sp, #8]
	fullPage[1] = startReg; // Set start reg
    2926:	f88d 6009 	strb.w	r6, [sp, #9]

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    292a:	462c      	mov	r4, r5
    292c:	19eb      	adds	r3, r5, r7
    292e:	429c      	cmp	r4, r3
    2930:	da1b      	bge.n	296a <LED_zeroPages+0x6a>
	{
		// Set page
		pageSetup[2] = page;
    2932:	f88d 4006 	strb.w	r4, [sp, #6]

		// Setup page
		while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2936:	a801      	add	r0, sp, #4
    2938:	2103      	movs	r1, #3
    293a:	2200      	movs	r2, #0
    293c:	f7ff ff72 	bl	2824 <I2C_Send>
    2940:	b918      	cbnz	r0, 294a <LED_zeroPages+0x4a>
			delay(1);
    2942:	2001      	movs	r0, #1
    2944:	f7ff fe44 	bl	25d0 <delay>
    2948:	e7f5      	b.n	2936 <LED_zeroPages+0x36>

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
    294a:	f108 0102 	add.w	r1, r8, #2
    294e:	1b89      	subs	r1, r1, r6
    2950:	a802      	add	r0, sp, #8
    2952:	b2c9      	uxtb	r1, r1
    2954:	2200      	movs	r2, #0
    2956:	f7ff ff65 	bl	2824 <I2C_Send>
    295a:	b918      	cbnz	r0, 2964 <LED_zeroPages+0x64>
			delay(1);
    295c:	2001      	movs	r0, #1
    295e:	f7ff fe37 	bl	25d0 <delay>
    2962:	e7f2      	b.n	294a <LED_zeroPages+0x4a>
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
	fullPage[0] = 0xE8;     // Set chip id
	fullPage[1] = startReg; // Set start reg

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    2964:	3401      	adds	r4, #1
    2966:	b2e4      	uxtb	r4, r4
    2968:	e7e0      	b.n	292c <LED_zeroPages+0x2c>

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
			delay(1);
	}
}
    296a:	b030      	add	sp, #192	; 0xc0
    296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2970:	00007ae1 	.word	0x00007ae1

00002974 <cliFunc_ledZero>:
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
}

void cliFunc_ledZero( char* args )
{
    2974:	b510      	push	{r4, lr}
	print( NL ); // No \r\n by default after the command is entered
    2976:	4805      	ldr	r0, [pc, #20]	; (298c <cliFunc_ledZero+0x18>)
    2978:	f004 ff42 	bl	7800 <_print>
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    297c:	2000      	movs	r0, #0
    297e:	2108      	movs	r1, #8
    2980:	2224      	movs	r2, #36	; 0x24
    2982:	23b4      	movs	r3, #180	; 0xb4
}
    2984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void cliFunc_ledZero( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    2988:	f7ff bfba 	b.w	2900 <LED_zeroPages>
    298c:	0000b26f 	.word	0x0000b26f

00002990 <LED_sendPage>:
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    2990:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2992:	23e8      	movs	r3, #232	; 0xe8
    2994:	f88d 3004 	strb.w	r3, [sp, #4]
    2998:	23fd      	movs	r3, #253	; 0xfd
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    299a:	4605      	mov	r5, r0
    299c:	460c      	mov	r4, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    299e:	f88d 3005 	strb.w	r3, [sp, #5]
    29a2:	f88d 2006 	strb.w	r2, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    29a6:	a801      	add	r0, sp, #4
    29a8:	2103      	movs	r1, #3
    29aa:	2200      	movs	r2, #0
    29ac:	f7ff ff3a 	bl	2824 <I2C_Send>
    29b0:	b918      	cbnz	r0, 29ba <LED_sendPage+0x2a>
		delay(1);
    29b2:	2001      	movs	r0, #1
    29b4:	f7ff fe0c 	bl	25d0 <delay>
    29b8:	e7f5      	b.n	29a6 <LED_sendPage+0x16>

	// Write page to I2C Tx Buffer
	while ( I2C_Send( buffer, len, 0 ) == 0 )
    29ba:	4628      	mov	r0, r5
    29bc:	4621      	mov	r1, r4
    29be:	2200      	movs	r2, #0
    29c0:	f7ff ff30 	bl	2824 <I2C_Send>
    29c4:	b918      	cbnz	r0, 29ce <LED_sendPage+0x3e>
		delay(1);
    29c6:	2001      	movs	r0, #1
    29c8:	f7ff fe02 	bl	25d0 <delay>
    29cc:	e7f5      	b.n	29ba <LED_sendPage+0x2a>

}
    29ce:	b003      	add	sp, #12
    29d0:	bd30      	pop	{r4, r5, pc}
    29d2:	0000      	movs	r0, r0

000029d4 <cliFunc_ledTest>:
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );

}

void cliFunc_ledTest( char* args )
{
    29d4:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    29d6:	4805      	ldr	r0, [pc, #20]	; (29ec <cliFunc_ledTest+0x18>)
    29d8:	f004 ff12 	bl	7800 <_print>
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29dc:	4804      	ldr	r0, [pc, #16]	; (29f0 <cliFunc_ledTest+0x1c>)
    29de:	2192      	movs	r1, #146	; 0x92
    29e0:	2200      	movs	r2, #0
}
    29e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void cliFunc_ledTest( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29e6:	f7ff bfd3 	b.w	2990 <LED_sendPage>
    29ea:	bf00      	nop
    29ec:	0000b26f 	.word	0x0000b26f
    29f0:	00007e0f 	.word	0x00007e0f

000029f4 <LED_writeReg>:
		delay(1);

}

void LED_writeReg( uint8_t reg, uint8_t val, uint8_t page )
{
    29f4:	b513      	push	{r0, r1, r4, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29f6:	23e8      	movs	r3, #232	; 0xe8
    29f8:	24fd      	movs	r4, #253	; 0xfd
    29fa:	f88d 3000 	strb.w	r3, [sp]
    29fe:	f88d 4001 	strb.w	r4, [sp, #1]
    2a02:	f88d 2002 	strb.w	r2, [sp, #2]

	// Reg Write Setup
	uint8_t writeData[] = { 0xE8, reg, val };
    2a06:	f88d 3004 	strb.w	r3, [sp, #4]
    2a0a:	f88d 0005 	strb.w	r0, [sp, #5]
    2a0e:	f88d 1006 	strb.w	r1, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2a12:	4668      	mov	r0, sp
    2a14:	2103      	movs	r1, #3
    2a16:	2200      	movs	r2, #0
    2a18:	f7ff ff04 	bl	2824 <I2C_Send>
    2a1c:	b918      	cbnz	r0, 2a26 <LED_writeReg+0x32>
		delay(1);
    2a1e:	2001      	movs	r0, #1
    2a20:	f7ff fdd6 	bl	25d0 <delay>
    2a24:	e7f5      	b.n	2a12 <LED_writeReg+0x1e>

	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
    2a26:	a801      	add	r0, sp, #4
    2a28:	2103      	movs	r1, #3
    2a2a:	2200      	movs	r2, #0
    2a2c:	f7ff fefa 	bl	2824 <I2C_Send>
    2a30:	b918      	cbnz	r0, 2a3a <LED_writeReg+0x46>
		delay(1);
    2a32:	2001      	movs	r0, #1
    2a34:	f7ff fdcc 	bl	25d0 <delay>
    2a38:	e7f5      	b.n	2a26 <LED_writeReg+0x32>
}
    2a3a:	b002      	add	sp, #8
    2a3c:	bd10      	pop	{r4, pc}
    2a3e:	0000      	movs	r0, r0

00002a40 <LED_setup>:
	LED_writeReg( 0x0A, 0x01, 0x0B );
}

// Setup
inline void LED_setup()
{
    2a40:	b508      	push	{r3, lr}
	// Register Scan CLI dictionary
	CLI_registerDictionary( ledCLIDict, ledCLIDictName );
    2a42:	4825      	ldr	r0, [pc, #148]	; (2ad8 <LED_setup+0x98>)
    2a44:	4925      	ldr	r1, [pc, #148]	; (2adc <LED_setup+0x9c>)
    2a46:	f004 fc9d 	bl	7384 <CLI_registerDictionary>
// ----- Functions -----

inline void I2C_setup()
{
	// Enable I2C internal clock
	SIM_SCGC4 |= SIM_SCGC4_I2C0; // Bus 0
    2a4a:	4b25      	ldr	r3, [pc, #148]	; (2ae0 <LED_setup+0xa0>)
    2a4c:	681a      	ldr	r2, [r3, #0]
    2a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2a52:	601a      	str	r2, [r3, #0]

	// External pull-up resistor
	PORTB_PCR0 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a54:	4a23      	ldr	r2, [pc, #140]	; (2ae4 <LED_setup+0xa4>)
    2a56:	f44f 7319 	mov.w	r3, #612	; 0x264
    2a5a:	6013      	str	r3, [r2, #0]
	PORTB_PCR1 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a5c:	6053      	str	r3, [r2, #4]

	// SCL Frequency Divider
	// 400kHz -> 120 (0x85) @ 48 MHz F_BUS
	I2C0_F = 0x85;
    2a5e:	4b22      	ldr	r3, [pc, #136]	; (2ae8 <LED_setup+0xa8>)
    2a60:	2285      	movs	r2, #133	; 0x85
    2a62:	701a      	strb	r2, [r3, #0]
	I2C0_FLT = 4;
    2a64:	2204      	movs	r2, #4
    2a66:	715a      	strb	r2, [r3, #5]
	I2C0_C1 = I2C_C1_IICEN;
    2a68:	2280      	movs	r2, #128	; 0x80
    2a6a:	705a      	strb	r2, [r3, #1]
	I2C0_C2 = I2C_C2_HDRS; // High drive select
    2a6c:	2220      	movs	r2, #32
    2a6e:	711a      	strb	r2, [r3, #4]

	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
    2a70:	4b1e      	ldr	r3, [pc, #120]	; (2aec <LED_setup+0xac>)
    2a72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2a76:	601a      	str	r2, [r3, #0]
	// Initialize I2C
	I2C_setup();

	// Zero out Frame Registers
	// This needs to be done before disabling the hardware shutdown (or the leds will do undefined things)
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2a78:	200b      	movs	r0, #11
    2a7a:	2101      	movs	r1, #1
    2a7c:	2200      	movs	r2, #0
    2a7e:	230c      	movs	r3, #12
    2a80:	f7ff ff3e 	bl	2900 <LED_zeroPages>

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
    2a84:	4b1a      	ldr	r3, [pc, #104]	; (2af0 <LED_setup+0xb0>)
    2a86:	681a      	ldr	r2, [r3, #0]
    2a88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    2a8c:	601a      	str	r2, [r3, #0]
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2a8e:	f5a3 2335 	sub.w	r3, r3, #741376	; 0xb5000
    2a92:	3b14      	subs	r3, #20
    2a94:	f44f 72a2 	mov.w	r2, #324	; 0x144
    2a98:	601a      	str	r2, [r3, #0]
	GPIOB_PSOR |= (1<<16);
    2a9a:	f503 2335 	add.w	r3, r3, #741376	; 0xb5000
    2a9e:	3304      	adds	r3, #4
    2aa0:	681a      	ldr	r2, [r3, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2aa2:	2000      	movs	r0, #0
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
	GPIOB_PSOR |= (1<<16);
    2aa4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    2aa8:	601a      	str	r2, [r3, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2aaa:	2108      	movs	r1, #8
    2aac:	23b4      	movs	r3, #180	; 0xb4
    2aae:	4602      	mov	r2, r0
    2ab0:	f7ff ff26 	bl	2900 <LED_zeroPages>

	// Enable LEDs based upon mask
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2ab4:	480f      	ldr	r0, [pc, #60]	; (2af4 <LED_setup+0xb4>)
    2ab6:	2114      	movs	r1, #20
    2ab8:	2200      	movs	r2, #0
    2aba:	f7ff ff69 	bl	2990 <LED_sendPage>

	// Set default brightness
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    2abe:	480e      	ldr	r0, [pc, #56]	; (2af8 <LED_setup+0xb8>)
    2ac0:	2192      	movs	r1, #146	; 0x92
    2ac2:	2200      	movs	r2, #0
    2ac4:	f7ff ff64 	bl	2990 <LED_sendPage>

	// Disable Software shutdown of ISSI chip
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2ac8:	200a      	movs	r0, #10
    2aca:	2101      	movs	r1, #1
    2acc:	220b      	movs	r2, #11
}
    2ace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Set default brightness
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );

	// Disable Software shutdown of ISSI chip
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2ad2:	f7ff bf8f 	b.w	29f4 <LED_writeReg>
    2ad6:	bf00      	nop
    2ad8:	00007b48 	.word	0x00007b48
    2adc:	00007fa3 	.word	0x00007fa3
    2ae0:	40048034 	.word	0x40048034
    2ae4:	4004a000 	.word	0x4004a000
    2ae8:	40066001 	.word	0x40066001
    2aec:	e000e100 	.word	0xe000e100
    2af0:	400ff054 	.word	0x400ff054
    2af4:	00007f8f 	.word	0x00007f8f
    2af8:	00007e0f 	.word	0x00007e0f

00002afc <cliFunc_ledStart>:
		data[1]++;
	}
}

void cliFunc_ledStart( char* args )
{
    2afc:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    2afe:	480a      	ldr	r0, [pc, #40]	; (2b28 <cliFunc_ledStart+0x2c>)
    2b00:	f004 fe7e 	bl	7800 <_print>
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2b04:	230c      	movs	r3, #12
    2b06:	200b      	movs	r0, #11
    2b08:	2101      	movs	r1, #1
    2b0a:	2200      	movs	r2, #0
    2b0c:	f7ff fef8 	bl	2900 <LED_zeroPages>
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2b10:	200a      	movs	r0, #10
    2b12:	2101      	movs	r1, #1
    2b14:	220b      	movs	r2, #11
    2b16:	f7ff ff6d 	bl	29f4 <LED_writeReg>
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b1a:	4804      	ldr	r0, [pc, #16]	; (2b2c <cliFunc_ledStart+0x30>)
    2b1c:	2114      	movs	r1, #20
    2b1e:	2200      	movs	r2, #0

}
    2b20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b24:	f7ff bf34 	b.w	2990 <LED_sendPage>
    2b28:	0000b26f 	.word	0x0000b26f
    2b2c:	00007f8f 	.word	0x00007f8f

00002b30 <LED_readPage>:
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b30:	b530      	push	{r4, r5, lr}
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b32:	220b      	movs	r2, #11
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b34:	b085      	sub	sp, #20
    2b36:	460c      	mov	r4, r1
    2b38:	4605      	mov	r5, r0
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b3a:	2100      	movs	r1, #0
    2b3c:	200a      	movs	r0, #10
    2b3e:	f7ff ff59 	bl	29f4 <LED_writeReg>

	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2b42:	23e8      	movs	r3, #232	; 0xe8
    2b44:	f88d 300c 	strb.w	r3, [sp, #12]
    2b48:	23fd      	movs	r3, #253	; 0xfd
    2b4a:	f88d 300d 	strb.w	r3, [sp, #13]
    2b4e:	f88d 400e 	strb.w	r4, [sp, #14]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2b52:	a803      	add	r0, sp, #12
    2b54:	2103      	movs	r1, #3
    2b56:	2200      	movs	r2, #0
    2b58:	f7ff fe64 	bl	2824 <I2C_Send>
    2b5c:	b918      	cbnz	r0, 2b66 <LED_readPage+0x36>
		delay(1);
    2b5e:	2001      	movs	r0, #1
    2b60:	f7ff fd36 	bl	25d0 <delay>
    2b64:	e7f5      	b.n	2b52 <LED_readPage+0x22>

	// Register Setup
	uint8_t regSetup[] = { 0xE8, 0x00 };
    2b66:	23e8      	movs	r3, #232	; 0xe8
    2b68:	2400      	movs	r4, #0
    2b6a:	f88d 3008 	strb.w	r3, [sp, #8]
    2b6e:	f88d 4009 	strb.w	r4, [sp, #9]
    2b72:	b2e3      	uxtb	r3, r4

	// Read each register in the page
	for ( uint8_t reg = 0; reg < len; reg++ )
    2b74:	42ab      	cmp	r3, r5
    2b76:	d21d      	bcs.n	2bb4 <LED_readPage+0x84>
	{
		// Update register to read
		regSetup[1] = reg;
    2b78:	f88d 3009 	strb.w	r3, [sp, #9]

		// Configure register
		while ( I2C_Send( regSetup, sizeof( regSetup ), 0 ) == 0 )
    2b7c:	a802      	add	r0, sp, #8
    2b7e:	2102      	movs	r1, #2
    2b80:	2200      	movs	r2, #0
    2b82:	f7ff fe4f 	bl	2824 <I2C_Send>
    2b86:	b918      	cbnz	r0, 2b90 <LED_readPage+0x60>
			delay(1);
    2b88:	2001      	movs	r0, #1
    2b8a:	f7ff fd21 	bl	25d0 <delay>
    2b8e:	e7f5      	b.n	2b7c <LED_readPage+0x4c>

		// Register Read Command
		uint8_t regReadCmd[] = { 0xE9 };
    2b90:	23e9      	movs	r3, #233	; 0xe9
    2b92:	f88d 3004 	strb.w	r3, [sp, #4]

		// Request single register byte
		while ( I2C_Send( regReadCmd, sizeof( regReadCmd ), 1 ) == 0 )
    2b96:	2101      	movs	r1, #1
    2b98:	a801      	add	r0, sp, #4
    2b9a:	460a      	mov	r2, r1
    2b9c:	f7ff fe42 	bl	2824 <I2C_Send>
    2ba0:	b918      	cbnz	r0, 2baa <LED_readPage+0x7a>
			delay(1);
    2ba2:	2001      	movs	r0, #1
    2ba4:	f7ff fd14 	bl	25d0 <delay>
    2ba8:	e7f5      	b.n	2b96 <LED_readPage+0x66>
		dbug_print("NEXT");
    2baa:	4806      	ldr	r0, [pc, #24]	; (2bc4 <LED_readPage+0x94>)
    2bac:	f004 fe28 	bl	7800 <_print>
    2bb0:	3401      	adds	r4, #1
    2bb2:	e7de      	b.n	2b72 <LED_readPage+0x42>
	}

	// Disable software shutdown
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2bb4:	200a      	movs	r0, #10
    2bb6:	2101      	movs	r1, #1
    2bb8:	220b      	movs	r2, #11
    2bba:	f7ff ff1b 	bl	29f4 <LED_writeReg>
}
    2bbe:	b005      	add	sp, #20
    2bc0:	bd30      	pop	{r4, r5, pc}
    2bc2:	bf00      	nop
    2bc4:	00007d36 	.word	0x00007d36

00002bc8 <cliFunc_ledRPage>:
	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
}

// TODO Currently not working correctly
void cliFunc_ledRPage( char* args )
{
    2bc8:	b513      	push	{r0, r1, r4, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2bca:	4669      	mov	r1, sp
    2bcc:	aa01      	add	r2, sp, #4
    2bce:	f004 fb63 	bl	7298 <CLI_argumentIsolation>

	// Default to 0 if no argument is given
	uint8_t page = 0;

	if ( arg1Ptr[0] != '\0' )
    2bd2:	9800      	ldr	r0, [sp, #0]
    2bd4:	7804      	ldrb	r4, [r0, #0]
    2bd6:	b114      	cbz	r4, 2bde <cliFunc_ledRPage+0x16>
	{
		page = (uint8_t)numToInt( arg1Ptr );
    2bd8:	f004 fef0 	bl	79bc <numToInt>
    2bdc:	b2c4      	uxtb	r4, r0
	}

	// No \r\n by default after the command is entered
	print( NL );
    2bde:	4804      	ldr	r0, [pc, #16]	; (2bf0 <cliFunc_ledRPage+0x28>)
    2be0:	f004 fe0e 	bl	7800 <_print>

	LED_readPage( 0x1, page );
    2be4:	2001      	movs	r0, #1
    2be6:	4621      	mov	r1, r4
    2be8:	f7ff ffa2 	bl	2b30 <LED_readPage>
	//LED_readPage( 0xB4, page );
}
    2bec:	b002      	add	sp, #8
    2bee:	bd10      	pop	{r4, pc}
    2bf0:	0000b26f 	.word	0x0000b26f

00002bf4 <cliFunc_i2cSend>:

// ----- CLI Command Functions -----

// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
    2bf4:	b530      	push	{r4, r5, lr}
    2bf6:	b085      	sub	sp, #20

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2bf8:	2400      	movs	r4, #0
// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2bfa:	9001      	str	r0, [sp, #4]
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2bfc:	481b      	ldr	r0, [pc, #108]	; (2c6c <cliFunc_i2cSend+0x78>)
    2bfe:	f004 fdff 	bl	7800 <_print>
	info_msg("Sending: ");
    2c02:	481b      	ldr	r0, [pc, #108]	; (2c70 <cliFunc_i2cSend+0x7c>)
    2c04:	f004 fdfc 	bl	7800 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2c08:	9801      	ldr	r0, [sp, #4]
    2c0a:	4669      	mov	r1, sp
    2c0c:	aa01      	add	r2, sp, #4
    2c0e:	f004 fb43 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2c12:	9800      	ldr	r0, [sp, #0]
    2c14:	7803      	ldrb	r3, [r0, #0]
    2c16:	b1eb      	cbz	r3, 2c54 <cliFunc_i2cSend+0x60>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2c18:	2b7c      	cmp	r3, #124	; 0x7c
    2c1a:	d10a      	bne.n	2c32 <cliFunc_i2cSend+0x3e>
		{
			print("| ");
    2c1c:	4815      	ldr	r0, [pc, #84]	; (2c74 <cliFunc_i2cSend+0x80>)
    2c1e:	f004 fdef 	bl	7800 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2c22:	a802      	add	r0, sp, #8
    2c24:	4621      	mov	r1, r4
    2c26:	2200      	movs	r2, #0
    2c28:	f7ff fdfc 	bl	2824 <I2C_Send>
			bufferLen = 0;
    2c2c:	2500      	movs	r5, #0
    2c2e:	462c      	mov	r4, r5
    2c30:	e7ea      	b.n	2c08 <cliFunc_i2cSend+0x14>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2c32:	f004 fec3 	bl	79bc <numToInt>
    2c36:	ab04      	add	r3, sp, #16
    2c38:	1c65      	adds	r5, r4, #1
    2c3a:	441c      	add	r4, r3
    2c3c:	b2ed      	uxtb	r5, r5
    2c3e:	f804 0c08 	strb.w	r0, [r4, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2c42:	9800      	ldr	r0, [sp, #0]
    2c44:	f003 fad4 	bl	61f0 <Output_putstr>
		print(" ");
    2c48:	480b      	ldr	r0, [pc, #44]	; (2c78 <cliFunc_i2cSend+0x84>)
    2c4a:	f004 fdd9 	bl	7800 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2c4e:	2d07      	cmp	r5, #7
    2c50:	d9ed      	bls.n	2c2e <cliFunc_i2cSend+0x3a>
    2c52:	e000      	b.n	2c56 <cliFunc_i2cSend+0x62>
    2c54:	4625      	mov	r5, r4
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2c56:	4805      	ldr	r0, [pc, #20]	; (2c6c <cliFunc_i2cSend+0x78>)
    2c58:	f004 fdd2 	bl	7800 <_print>

	I2C_Send( buffer, bufferLen, 0 );
    2c5c:	a802      	add	r0, sp, #8
    2c5e:	4629      	mov	r1, r5
    2c60:	2200      	movs	r2, #0
    2c62:	f7ff fddf 	bl	2824 <I2C_Send>
}
    2c66:	b005      	add	sp, #20
    2c68:	bd30      	pop	{r4, r5, pc}
    2c6a:	bf00      	nop
    2c6c:	0000b26f 	.word	0x0000b26f
    2c70:	00007d50 	.word	0x00007d50
    2c74:	00007d6c 	.word	0x00007d6c
    2c78:	00008152 	.word	0x00008152

00002c7c <cliFunc_i2cRecv>:

void cliFunc_i2cRecv( char* args )
{
    2c7c:	b530      	push	{r4, r5, lr}
    2c7e:	b085      	sub	sp, #20

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2c80:	2400      	movs	r4, #0

void cliFunc_i2cRecv( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c82:	9001      	str	r0, [sp, #4]
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2c84:	481b      	ldr	r0, [pc, #108]	; (2cf4 <cliFunc_i2cRecv+0x78>)
    2c86:	f004 fdbb 	bl	7800 <_print>
	info_msg("Sending: ");
    2c8a:	481b      	ldr	r0, [pc, #108]	; (2cf8 <cliFunc_i2cRecv+0x7c>)
    2c8c:	f004 fdb8 	bl	7800 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2c90:	9801      	ldr	r0, [sp, #4]
    2c92:	4669      	mov	r1, sp
    2c94:	aa01      	add	r2, sp, #4
    2c96:	f004 faff 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2c9a:	9800      	ldr	r0, [sp, #0]
    2c9c:	7803      	ldrb	r3, [r0, #0]
    2c9e:	b1eb      	cbz	r3, 2cdc <cliFunc_i2cRecv+0x60>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2ca0:	2b7c      	cmp	r3, #124	; 0x7c
    2ca2:	d10a      	bne.n	2cba <cliFunc_i2cRecv+0x3e>
		{
			print("| ");
    2ca4:	4815      	ldr	r0, [pc, #84]	; (2cfc <cliFunc_i2cRecv+0x80>)
    2ca6:	f004 fdab 	bl	7800 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2caa:	a802      	add	r0, sp, #8
    2cac:	4621      	mov	r1, r4
    2cae:	2200      	movs	r2, #0
    2cb0:	f7ff fdb8 	bl	2824 <I2C_Send>
			bufferLen = 0;
    2cb4:	2500      	movs	r5, #0
    2cb6:	462c      	mov	r4, r5
    2cb8:	e7ea      	b.n	2c90 <cliFunc_i2cRecv+0x14>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2cba:	f004 fe7f 	bl	79bc <numToInt>
    2cbe:	ab04      	add	r3, sp, #16
    2cc0:	1c65      	adds	r5, r4, #1
    2cc2:	441c      	add	r4, r3
    2cc4:	b2ed      	uxtb	r5, r5
    2cc6:	f804 0c08 	strb.w	r0, [r4, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2cca:	9800      	ldr	r0, [sp, #0]
    2ccc:	f003 fa90 	bl	61f0 <Output_putstr>
		print(" ");
    2cd0:	480b      	ldr	r0, [pc, #44]	; (2d00 <cliFunc_i2cRecv+0x84>)
    2cd2:	f004 fd95 	bl	7800 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2cd6:	2d07      	cmp	r5, #7
    2cd8:	d9ed      	bls.n	2cb6 <cliFunc_i2cRecv+0x3a>
    2cda:	e000      	b.n	2cde <cliFunc_i2cRecv+0x62>
    2cdc:	4625      	mov	r5, r4
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2cde:	4805      	ldr	r0, [pc, #20]	; (2cf4 <cliFunc_i2cRecv+0x78>)
    2ce0:	f004 fd8e 	bl	7800 <_print>

	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
    2ce4:	a802      	add	r0, sp, #8
    2ce6:	4629      	mov	r1, r5
    2ce8:	2201      	movs	r2, #1
    2cea:	f7ff fd9b 	bl	2824 <I2C_Send>
}
    2cee:	b005      	add	sp, #20
    2cf0:	bd30      	pop	{r4, r5, pc}
    2cf2:	bf00      	nop
    2cf4:	0000b26f 	.word	0x0000b26f
    2cf8:	00007d50 	.word	0x00007d50
    2cfc:	00007d6c 	.word	0x00007d6c
    2d00:	00008152 	.word	0x00008152

00002d04 <cliFunc_ledWPage>:
	LED_readPage( 0x1, page );
	//LED_readPage( 0xB4, page );
}

void cliFunc_ledWPage( char* args )
{
    2d04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr = args;

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d06:	a902      	add	r1, sp, #8
    2d08:	aa03      	add	r2, sp, #12

void cliFunc_ledWPage( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2d0a:	9003      	str	r0, [sp, #12]

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d0c:	f004 fac4 	bl	7298 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d10:	9802      	ldr	r0, [sp, #8]
    2d12:	7803      	ldrb	r3, [r0, #0]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d040      	beq.n	2d9a <cliFunc_ledWPage+0x96>
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d18:	23fd      	movs	r3, #253	; 0xfd
    2d1a:	24e8      	movs	r4, #232	; 0xe8
    2d1c:	f88d 3001 	strb.w	r3, [sp, #1]
    2d20:	f88d 4000 	strb.w	r4, [sp]
    2d24:	f004 fe4a 	bl	79bc <numToInt>

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d28:	a902      	add	r1, sp, #8
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d2a:	f88d 0002 	strb.w	r0, [sp, #2]

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d2e:	aa03      	add	r2, sp, #12
    2d30:	9803      	ldr	r0, [sp, #12]
    2d32:	f004 fab1 	bl	7298 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d36:	9802      	ldr	r0, [sp, #8]
    2d38:	7803      	ldrb	r3, [r0, #0]
    2d3a:	b373      	cbz	r3, 2d9a <cliFunc_ledWPage+0x96>
		return;
	uint8_t data[] = { 0xE8, numToInt( arg1Ptr ), 0 };
    2d3c:	f88d 4004 	strb.w	r4, [sp, #4]
    2d40:	f004 fe3c 	bl	79bc <numToInt>
    2d44:	2300      	movs	r3, #0
    2d46:	f88d 0005 	strb.w	r0, [sp, #5]
    2d4a:	f88d 3006 	strb.w	r3, [sp, #6]

	// Set the register page
	while ( I2C_Send( page, sizeof( page ), 0 ) == 0 )
    2d4e:	4668      	mov	r0, sp
    2d50:	2103      	movs	r1, #3
    2d52:	2200      	movs	r2, #0
    2d54:	f7ff fd66 	bl	2824 <I2C_Send>
    2d58:	b940      	cbnz	r0, 2d6c <cliFunc_ledWPage+0x68>
		delay(1);
    2d5a:	2001      	movs	r0, #1
    2d5c:	f7ff fc38 	bl	25d0 <delay>
    2d60:	e7f5      	b.n	2d4e <cliFunc_ledWPage+0x4a>
		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
			delay(1);

		// Increment address
		data[1]++;
    2d62:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2d66:	3301      	adds	r3, #1
    2d68:	f88d 3005 	strb.w	r3, [sp, #5]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d6c:	9803      	ldr	r0, [sp, #12]
    2d6e:	a902      	add	r1, sp, #8
    2d70:	aa03      	add	r2, sp, #12
    2d72:	f004 fa91 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2d76:	9802      	ldr	r0, [sp, #8]
    2d78:	7803      	ldrb	r3, [r0, #0]
    2d7a:	b173      	cbz	r3, 2d9a <cliFunc_ledWPage+0x96>
			break;

		data[2] = numToInt( arg1Ptr );
    2d7c:	f004 fe1e 	bl	79bc <numToInt>
    2d80:	f88d 0006 	strb.w	r0, [sp, #6]

		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
    2d84:	a801      	add	r0, sp, #4
    2d86:	2103      	movs	r1, #3
    2d88:	2200      	movs	r2, #0
    2d8a:	f7ff fd4b 	bl	2824 <I2C_Send>
    2d8e:	2800      	cmp	r0, #0
    2d90:	d1e7      	bne.n	2d62 <cliFunc_ledWPage+0x5e>
			delay(1);
    2d92:	2001      	movs	r0, #1
    2d94:	f7ff fc1c 	bl	25d0 <delay>
    2d98:	e7f4      	b.n	2d84 <cliFunc_ledWPage+0x80>

		// Increment address
		data[1]++;
	}
}
    2d9a:	b004      	add	sp, #16
    2d9c:	bd10      	pop	{r4, pc}

00002d9e <LED_scan>:
	// I2C Busy
	// S & I2C_S_BUSY
	//I2C_S_BUSY

	return 0;
}
    2d9e:	2000      	movs	r0, #0
    2da0:	4770      	bx	lr
    2da2:	0000      	movs	r0, r0

00002da4 <LED_control>:
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2da4:	7803      	ldrb	r3, [r0, #0]
	uint8_t        amount;
	uint16_t       index;
} LedControl;

void LED_control( LedControl *control )
{
    2da6:	b510      	push	{r4, lr}
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2da8:	2b05      	cmp	r3, #5
    2daa:	d836      	bhi.n	2e1a <LED_control+0x76>
    2dac:	e8df f003 	tbb	[pc, r3]
    2db0:	17120a03 	.word	0x17120a03
    2db4:	2d22      	.short	0x2d22
	{
	case LedControlMode_brightness_decrease:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] -= control->amount;
    2db6:	4a1e      	ldr	r2, [pc, #120]	; (2e30 <LED_control+0x8c>)
    2db8:	8843      	ldrh	r3, [r0, #2]
    2dba:	4413      	add	r3, r2
    2dbc:	7842      	ldrb	r2, [r0, #1]
    2dbe:	7899      	ldrb	r1, [r3, #2]
    2dc0:	1a8a      	subs	r2, r1, r2
    2dc2:	e005      	b.n	2dd0 <LED_control+0x2c>
		break;

	case LedControlMode_brightness_increase:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] += control->amount;
    2dc4:	4a1a      	ldr	r2, [pc, #104]	; (2e30 <LED_control+0x8c>)
    2dc6:	8843      	ldrh	r3, [r0, #2]
    2dc8:	4413      	add	r3, r2
    2dca:	7842      	ldrb	r2, [r0, #1]
    2dcc:	7899      	ldrb	r1, [r3, #2]
    2dce:	440a      	add	r2, r1
    2dd0:	709a      	strb	r2, [r3, #2]
		break;
    2dd2:	e022      	b.n	2e1a <LED_control+0x76>

	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
    2dd4:	8843      	ldrh	r3, [r0, #2]
    2dd6:	4916      	ldr	r1, [pc, #88]	; (2e30 <LED_control+0x8c>)
    2dd8:	7842      	ldrb	r2, [r0, #1]
    2dda:	440b      	add	r3, r1
    2ddc:	e7f8      	b.n	2dd0 <LED_control+0x2c>
    2dde:	4b15      	ldr	r3, [pc, #84]	; (2e34 <LED_control+0x90>)
    2de0:	f103 0290 	add.w	r2, r3, #144	; 0x90

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2de4:	78dc      	ldrb	r4, [r3, #3]
    2de6:	7841      	ldrb	r1, [r0, #1]
    2de8:	3301      	adds	r3, #1
    2dea:	1a61      	subs	r1, r4, r1
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2dec:	4293      	cmp	r3, r2
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2dee:	7099      	strb	r1, [r3, #2]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2df0:	d1f8      	bne.n	2de4 <LED_control+0x40>
    2df2:	e012      	b.n	2e1a <LED_control+0x76>
    2df4:	4b0f      	ldr	r3, [pc, #60]	; (2e34 <LED_control+0x90>)
    2df6:	f103 0290 	add.w	r2, r3, #144	; 0x90

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2dfa:	78dc      	ldrb	r4, [r3, #3]
    2dfc:	7841      	ldrb	r1, [r0, #1]
    2dfe:	3301      	adds	r3, #1
    2e00:	4421      	add	r1, r4
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e02:	4293      	cmp	r3, r2
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e04:	7099      	strb	r1, [r3, #2]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e06:	d1f8      	bne.n	2dfa <LED_control+0x56>
    2e08:	e007      	b.n	2e1a <LED_control+0x76>
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2e0a:	2300      	movs	r3, #0
    2e0c:	4a08      	ldr	r2, [pc, #32]	; (2e30 <LED_control+0x8c>)
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			LED_pageBuffer.buffer[ channel ] = control->amount;
    2e0e:	7841      	ldrb	r1, [r0, #1]
    2e10:	441a      	add	r2, r3
    2e12:	3301      	adds	r3, #1
			LED_pageBuffer.buffer[ channel ] += control->amount;
		}
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e14:	2b90      	cmp	r3, #144	; 0x90
		{
			LED_pageBuffer.buffer[ channel ] = control->amount;
    2e16:	7091      	strb	r1, [r2, #2]
			LED_pageBuffer.buffer[ channel ] += control->amount;
		}
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e18:	d1f8      	bne.n	2e0c <LED_control+0x68>
		break;
	}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
    2e1a:	4805      	ldr	r0, [pc, #20]	; (2e30 <LED_control+0x8c>)
    2e1c:	23e8      	movs	r3, #232	; 0xe8
    2e1e:	7003      	strb	r3, [r0, #0]
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
    2e20:	2324      	movs	r3, #36	; 0x24
    2e22:	7043      	strb	r3, [r0, #1]
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e24:	2192      	movs	r1, #146	; 0x92
    2e26:	2200      	movs	r2, #0
}
    2e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e2c:	f7ff bdb0 	b.w	2990 <LED_sendPage>
    2e30:	1fff988d 	.word	0x1fff988d
    2e34:	1fff988c 	.word	0x1fff988c

00002e38 <cliFunc_ledCtrl>:
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
}

void cliFunc_ledCtrl( char* args )
{
    2e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* arg2Ptr = args;
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e3a:	a901      	add	r1, sp, #4
    2e3c:	aa02      	add	r2, sp, #8

void cliFunc_ledCtrl( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2e3e:	9002      	str	r0, [sp, #8]
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e40:	f004 fa2a 	bl	7298 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2e44:	9801      	ldr	r0, [sp, #4]
    2e46:	7803      	ldrb	r3, [r0, #0]
    2e48:	b30b      	cbz	r3, 2e8e <cliFunc_ledCtrl+0x56>
		return;
	control.mode = numToInt( arg1Ptr );
    2e4a:	f004 fdb7 	bl	79bc <numToInt>


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e4e:	a901      	add	r1, sp, #4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.mode = numToInt( arg1Ptr );
    2e50:	f88d 000c 	strb.w	r0, [sp, #12]


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e54:	aa02      	add	r2, sp, #8
    2e56:	9802      	ldr	r0, [sp, #8]
    2e58:	f004 fa1e 	bl	7298 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2e5c:	9801      	ldr	r0, [sp, #4]
    2e5e:	7803      	ldrb	r3, [r0, #0]
    2e60:	b1ab      	cbz	r3, 2e8e <cliFunc_ledCtrl+0x56>
		return;
	control.amount = numToInt( arg1Ptr );
    2e62:	f004 fdab 	bl	79bc <numToInt>


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e66:	a901      	add	r1, sp, #4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.amount = numToInt( arg1Ptr );
    2e68:	f88d 000d 	strb.w	r0, [sp, #13]


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e6c:	aa02      	add	r2, sp, #8
    2e6e:	9802      	ldr	r0, [sp, #8]
    2e70:	f004 fa12 	bl	7298 <CLI_argumentIsolation>
	control.index = *arg1Ptr == '\0' ? 0 : numToInt( arg1Ptr );
    2e74:	9801      	ldr	r0, [sp, #4]
    2e76:	7803      	ldrb	r3, [r0, #0]
    2e78:	b11b      	cbz	r3, 2e82 <cliFunc_ledCtrl+0x4a>
    2e7a:	f004 fd9f 	bl	79bc <numToInt>
    2e7e:	b280      	uxth	r0, r0
    2e80:	e000      	b.n	2e84 <cliFunc_ledCtrl+0x4c>
    2e82:	4618      	mov	r0, r3
    2e84:	f8ad 000e 	strh.w	r0, [sp, #14]

	// Process request
	LED_control( &control );
    2e88:	a803      	add	r0, sp, #12
    2e8a:	f7ff ff8b 	bl	2da4 <LED_control>
}
    2e8e:	b005      	add	sp, #20
    2e90:	f85d fb04 	ldr.w	pc, [sp], #4

00002e94 <LED_control_capability>:

uint8_t LED_control_timer = 0;
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2e94:	29ff      	cmp	r1, #255	; 0xff
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
}

uint8_t LED_control_timer = 0;
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    2e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2e98:	460b      	mov	r3, r1
    2e9a:	4605      	mov	r5, r0
    2e9c:	4614      	mov	r4, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2e9e:	d107      	bne.n	2eb0 <LED_control_capability+0x1c>
    2ea0:	28ff      	cmp	r0, #255	; 0xff
    2ea2:	d108      	bne.n	2eb6 <LED_control_capability+0x22>
	{
		print("LED_control_capability(mode,amount,index)");
    2ea4:	481c      	ldr	r0, [pc, #112]	; (2f18 <LED_control_capability+0x84>)
		return;
#endif

	// Modify led state of this node
	LED_control( control );
}
    2ea6:	b002      	add	sp, #8
    2ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("LED_control_capability(mode,amount,index)");
    2eac:	f004 bca8 	b.w	7800 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state == 0x03 ) // Not on release
    2eb0:	b909      	cbnz	r1, 2eb6 <LED_control_capability+0x22>
    2eb2:	2803      	cmp	r0, #3
    2eb4:	d02d      	beq.n	2f12 <LED_control_capability+0x7e>
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2eb6:	4a19      	ldr	r2, [pc, #100]	; (2f1c <LED_control_capability+0x88>)
    2eb8:	6811      	ldr	r1, [r2, #0]
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2eba:	4a19      	ldr	r2, [pc, #100]	; (2f20 <LED_control_capability+0x8c>)
    2ebc:	7810      	ldrb	r0, [r2, #0]
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2ebe:	b2c9      	uxtb	r1, r1
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2ec0:	1a08      	subs	r0, r1, r0
	if ( compare < 30 )
    2ec2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    2ec6:	281d      	cmp	r0, #29
    2ec8:	dd23      	ble.n	2f12 <LED_control_capability+0x7e>
	{
		return;
	}
	LED_control_timer = currentTime;
    2eca:	7011      	strb	r1, [r2, #0]
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;

	// By default send to the *next* node, which will determine where to go next
	extern uint8_t Connect_id; // connect_scan.c
	uint8_t addr = Connect_id + 1;
    2ecc:	4a15      	ldr	r2, [pc, #84]	; (2f24 <LED_control_capability+0x90>)
    2ece:	7810      	ldrb	r0, [r2, #0]

	switch ( control->mode )
    2ed0:	7822      	ldrb	r2, [r4, #0]
    2ed2:	2a05      	cmp	r2, #5
    2ed4:	d817      	bhi.n	2f06 <LED_control_capability+0x72>
    2ed6:	e8df f002 	tbb	[pc, r2]
    2eda:	0303      	.short	0x0303
    2edc:	0a0a0a03 	.word	0x0a0a0a03
	// Otherwise, ignore
	case LedControlMode_brightness_decrease:
	case LedControlMode_brightness_increase:
	case LedControlMode_brightness_set:
		// Ignore if led is on this node
		if ( control->index < LED_TotalChannels )
    2ee0:	8862      	ldrh	r2, [r4, #2]
    2ee2:	2a8f      	cmp	r2, #143	; 0x8f
    2ee4:	d90f      	bls.n	2f06 <LED_control_capability+0x72>
			break;

		// Calculate new led index
		control->index -= LED_TotalChannels;
    2ee6:	3a90      	subs	r2, #144	; 0x90
    2ee8:	8062      	strh	r2, [r4, #2]

		ignore_node = 1;
    2eea:	2601      	movs	r6, #1
		send_packet = 1;
		break;
    2eec:	e000      	b.n	2ef0 <LED_control_capability+0x5c>
	LedControl *control = (LedControl*)args;

	// Interconnect broadcasting
#if defined(ConnectEnabled_define)
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;
    2eee:	2600      	movs	r6, #0
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    2ef0:	4a0d      	ldr	r2, [pc, #52]	; (2f28 <LED_control_capability+0x94>)
    2ef2:	7d12      	ldrb	r2, [r2, #20]
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;

	// By default send to the *next* node, which will determine where to go next
	extern uint8_t Connect_id; // connect_scan.c
	uint8_t addr = Connect_id + 1;
    2ef4:	3001      	adds	r0, #1
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    2ef6:	e88d 0014 	stmia.w	sp, {r2, r4}
    2efa:	b2c0      	uxtb	r0, r0
    2efc:	2102      	movs	r1, #2
    2efe:	462a      	mov	r2, r5
    2f00:	f001 fa36 	bl	4370 <Connect_send_RemoteCapability>
			args
		);
	}

	// If there is nothing to do on this node, ignore
	if ( ignore_node )
    2f04:	b92e      	cbnz	r6, 2f12 <LED_control_capability+0x7e>
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f06:	4620      	mov	r0, r4
}
    2f08:	b002      	add	sp, #8
    2f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if ( ignore_node )
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f0e:	f7ff bf49 	b.w	2da4 <LED_control>
}
    2f12:	b002      	add	sp, #8
    2f14:	bd70      	pop	{r4, r5, r6, pc}
    2f16:	bf00      	nop
    2f18:	00007d6f 	.word	0x00007d6f
    2f1c:	1fff8fe0 	.word	0x1fff8fe0
    2f20:	1fff8fe4 	.word	0x1fff8fe4
    2f24:	1fff89c5 	.word	0x1fff89c5
    2f28:	0000943c 	.word	0x0000943c

00002f2c <cliFunc_matrixState>:
	info_msg("Matrix Debug Mode: ");
	printInt8( matrixDebugMode );
}

void cliFunc_matrixState ( char* args )
{
    2f2c:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f2e:	4c07      	ldr	r4, [pc, #28]	; (2f4c <cliFunc_matrixState+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2f30:	4669      	mov	r1, sp
    2f32:	aa01      	add	r2, sp, #4
    2f34:	f004 f9b0 	bl	7298 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f38:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    2f3a:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f3c:	8023      	strh	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    2f3e:	7803      	ldrb	r3, [r0, #0]
    2f40:	b113      	cbz	r3, 2f48 <cliFunc_matrixState+0x1c>
	{
		matrixDebugStateCounter = (uint16_t)numToInt( arg1Ptr );
    2f42:	f004 fd3b 	bl	79bc <numToInt>
    2f46:	8020      	strh	r0, [r4, #0]
	}
}
    2f48:	b002      	add	sp, #8
    2f4a:	bd10      	pop	{r4, pc}
    2f4c:	1fff8fee 	.word	0x1fff8fee

00002f50 <cliFunc_matrixDebug>:


// ----- CLI Command Functions -----

void cliFunc_matrixDebug ( char* args )
{
    2f50:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2f52:	4669      	mov	r1, sp
    2f54:	aa01      	add	r2, sp, #4
    2f56:	f004 f99f 	bl	7298 <CLI_argumentIsolation>

	// Set the matrix debug flag depending on the argument
	// If no argument, set to scan code only
	// If set to T, set to state transition
	switch ( arg1Ptr[0] )
    2f5a:	9b00      	ldr	r3, [sp, #0]
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	2b54      	cmp	r3, #84	; 0x54
    2f60:	d009      	beq.n	2f76 <cliFunc_matrixDebug+0x26>
    2f62:	2b74      	cmp	r3, #116	; 0x74
    2f64:	d007      	beq.n	2f76 <cliFunc_matrixDebug+0x26>
    2f66:	b9bb      	cbnz	r3, 2f98 <cliFunc_matrixDebug+0x48>
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
		break;

	// No argument
	case '\0':
		matrixDebugMode = matrixDebugMode != 1 ? 1 : 0;
    2f68:	4b0d      	ldr	r3, [pc, #52]	; (2fa0 <cliFunc_matrixDebug+0x50>)
    2f6a:	781a      	ldrb	r2, [r3, #0]
    2f6c:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    2f70:	bf18      	it	ne
    2f72:	2201      	movne	r2, #1
    2f74:	e005      	b.n	2f82 <cliFunc_matrixDebug+0x32>
	switch ( arg1Ptr[0] )
	{
	// T as argument
	case 'T':
	case 't':
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
    2f76:	4b0a      	ldr	r3, [pc, #40]	; (2fa0 <cliFunc_matrixDebug+0x50>)
    2f78:	781a      	ldrb	r2, [r3, #0]
    2f7a:	2a02      	cmp	r2, #2
    2f7c:	bf0c      	ite	eq
    2f7e:	2200      	moveq	r2, #0
    2f80:	2202      	movne	r2, #2
	// Invalid argument
	default:
		return;
	}

	print( NL );
    2f82:	4808      	ldr	r0, [pc, #32]	; (2fa4 <cliFunc_matrixDebug+0x54>)
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
		break;

	// No argument
	case '\0':
		matrixDebugMode = matrixDebugMode != 1 ? 1 : 0;
    2f84:	701a      	strb	r2, [r3, #0]
	// Invalid argument
	default:
		return;
	}

	print( NL );
    2f86:	f004 fc3b 	bl	7800 <_print>
	info_msg("Matrix Debug Mode: ");
    2f8a:	4807      	ldr	r0, [pc, #28]	; (2fa8 <cliFunc_matrixDebug+0x58>)
    2f8c:	f004 fc38 	bl	7800 <_print>
	printInt8( matrixDebugMode );
    2f90:	4b03      	ldr	r3, [pc, #12]	; (2fa0 <cliFunc_matrixDebug+0x50>)
    2f92:	7818      	ldrb	r0, [r3, #0]
    2f94:	f004 fc66 	bl	7864 <printInt8>
}
    2f98:	b003      	add	sp, #12
    2f9a:	f85d fb04 	ldr.w	pc, [sp], #4
    2f9e:	bf00      	nop
    2fa0:	1fff8fec 	.word	0x1fff8fec
    2fa4:	0000b26f 	.word	0x0000b26f
    2fa8:	00008042 	.word	0x00008042

00002fac <Matrix_pin>:

// Pin action (Strobe, Sense, Strobe Setup, Sense Setup)
// NOTE: This function is highly dependent upon the organization of the register map
//       Only guaranteed to work with Freescale MK20 series uCs
uint8_t Matrix_pin( GPIO_Pin gpio, Type type )
{
    2fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2fae:	b2c3      	uxtb	r3, r0
    2fb0:	f8ad 0004 	strh.w	r0, [sp, #4]
    2fb4:	f3c0 2007 	ubfx	r0, r0, #8, #8
	// Register width is defined as size of a pointer
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
    2fb8:	011a      	lsls	r2, r3, #4
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;
    2fba:	eb00 2383 	add.w	r3, r0, r3, lsl #10
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    2fbe:	009b      	lsls	r3, r3, #2
    2fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
    2fc4:	4c28      	ldr	r4, [pc, #160]	; (3068 <Matrix_pin+0xbc>)
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    2fc6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000

	// Operation depends on Type
	switch ( type )
    2fca:	2904      	cmp	r1, #4
    2fcc:	d849      	bhi.n	3062 <Matrix_pin+0xb6>
    2fce:	e8df f001 	tbb	[pc, r1]
    2fd2:	0503      	.short	0x0503
    2fd4:	220f      	.short	0x220f
    2fd6:	2d          	.byte	0x2d
    2fd7:	00          	.byte	0x00
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
    2fd8:	4b24      	ldr	r3, [pc, #144]	; (306c <Matrix_pin+0xc0>)
    2fda:	e000      	b.n	2fde <Matrix_pin+0x32>
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
    2fdc:	4b24      	ldr	r3, [pc, #144]	; (3070 <Matrix_pin+0xc4>)
	case Type_StrobeOn:
		*GPIO_PSOR |= (1 << gpio.pin);
		break;

	case Type_StrobeOff:
		*GPIO_PCOR |= (1 << gpio.pin);
    2fde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    2fe2:	2401      	movs	r4, #1
    2fe4:	fa04 f000 	lsl.w	r0, r4, r0
    2fe8:	4308      	orrs	r0, r1
    2fea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    2fee:	e038      	b.n	3062 <Matrix_pin+0xb6>
		break;

	case Type_StrobeSetup:
		// Set as output pin
		*GPIO_PDDR |= (1 << gpio.pin);
    2ff0:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
    2ff4:	2501      	movs	r5, #1
    2ff6:	fa05 f000 	lsl.w	r0, r5, r0
    2ffa:	4308      	orrs	r0, r1
    2ffc:	f844 0022 	str.w	r0, [r4, r2, lsl #2]

		// Configure pin with slow slew, high drive strength and GPIO mux
		*PORT_PCR = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3000:	f44f 72a2 	mov.w	r2, #324	; 0x144
    3004:	601a      	str	r2, [r3, #0]

		// Enabling open-drain if specified
		switch ( Matrix_type )
    3006:	4a1b      	ldr	r2, [pc, #108]	; (3074 <Matrix_pin+0xc8>)
    3008:	7812      	ldrb	r2, [r2, #0]
    300a:	2a02      	cmp	r2, #2
    300c:	d129      	bne.n	3062 <Matrix_pin+0xb6>
		{
		case Config_Opendrain:
			*PORT_PCR |= PORT_PCR_ODE;
    300e:	681a      	ldr	r2, [r3, #0]
    3010:	f042 0220 	orr.w	r2, r2, #32
    3014:	e024      	b.n	3060 <Matrix_pin+0xb4>
	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
    3016:	4b18      	ldr	r3, [pc, #96]	; (3078 <Matrix_pin+0xcc>)
			break;
		}
		break;

	case Type_Sense:
		return *GPIO_PDIR & (1 << gpio.pin) ? 1 : 0;
    3018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    301c:	2201      	movs	r2, #1
    301e:	fa02 f000 	lsl.w	r0, r2, r0
    3022:	4203      	tst	r3, r0
    3024:	bf0c      	ite	eq
    3026:	2000      	moveq	r0, #0
    3028:	2001      	movne	r0, #1
    302a:	e01b      	b.n	3064 <Matrix_pin+0xb8>

	case Type_SenseSetup:
		// Set as input pin
		*GPIO_PDDR &= ~(1 << gpio.pin);
    302c:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
    3030:	2501      	movs	r5, #1
    3032:	fa05 f000 	lsl.w	r0, r5, r0
    3036:	ea21 0000 	bic.w	r0, r1, r0
    303a:	f844 0022 	str.w	r0, [r4, r2, lsl #2]

		// Configure pin with passive filter and GPIO mux
		*PORT_PCR = PORT_PCR_PFE | PORT_PCR_MUX(1);
    303e:	f44f 7288 	mov.w	r2, #272	; 0x110
    3042:	601a      	str	r2, [r3, #0]

		// Pull resistor config
		switch ( Matrix_type )
    3044:	4a0b      	ldr	r2, [pc, #44]	; (3074 <Matrix_pin+0xc8>)
    3046:	7810      	ldrb	r0, [r2, #0]
    3048:	b128      	cbz	r0, 3056 <Matrix_pin+0xaa>
    304a:	42a8      	cmp	r0, r5
    304c:	d109      	bne.n	3062 <Matrix_pin+0xb6>
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
			break;

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    304e:	681a      	ldr	r2, [r3, #0]
    3050:	f042 0202 	orr.w	r2, r2, #2
    3054:	e004      	b.n	3060 <Matrix_pin+0xb4>

		// Pull resistor config
		switch ( Matrix_type )
		{
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
    3056:	681a      	ldr	r2, [r3, #0]
    3058:	f042 0203 	orr.w	r2, r2, #3
    305c:	601a      	str	r2, [r3, #0]
			break;
    305e:	e001      	b.n	3064 <Matrix_pin+0xb8>

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    3060:	601a      	str	r2, [r3, #0]
			break;
		}
		break;
	}

	return 0;
    3062:	2000      	movs	r0, #0
}
    3064:	b003      	add	sp, #12
    3066:	bd30      	pop	{r4, r5, pc}
    3068:	400ff014 	.word	0x400ff014
    306c:	400ff004 	.word	0x400ff004
    3070:	400ff008 	.word	0x400ff008
    3074:	1fff89c4 	.word	0x1fff89c4
    3078:	400ff010 	.word	0x400ff010

0000307c <Matrix_setup>:

// Setup GPIO pins for matrix scanning
void Matrix_setup()
{
    307c:	b570      	push	{r4, r5, r6, lr}
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );
    307e:	492d      	ldr	r1, [pc, #180]	; (3134 <Matrix_setup+0xb8>)
    3080:	482d      	ldr	r0, [pc, #180]	; (3138 <Matrix_setup+0xbc>)
    3082:	f004 f97f 	bl	7384 <CLI_registerDictionary>

	info_msg("Columns:  ");
    3086:	482d      	ldr	r0, [pc, #180]	; (313c <Matrix_setup+0xc0>)
    3088:	f004 fbba 	bl	7800 <_print>
	printHex( Matrix_colsNum );
    308c:	2009      	movs	r0, #9
    308e:	2101      	movs	r1, #1
    3090:	f004 fc3f 	bl	7912 <printHex_op>
    3094:	2400      	movs	r4, #0

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
	{
		Matrix_pin( Matrix_cols[ pin ], Type_StrobeSetup );
    3096:	4b2a      	ldr	r3, [pc, #168]	; (3140 <Matrix_setup+0xc4>)
    3098:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
    309c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    30a0:	2102      	movs	r1, #2
    30a2:	7858      	ldrb	r0, [r3, #1]
    30a4:	3401      	adds	r4, #1
    30a6:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    30aa:	f7ff ff7f 	bl	2fac <Matrix_pin>

	info_msg("Columns:  ");
	printHex( Matrix_colsNum );

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
    30ae:	2c09      	cmp	r4, #9
    30b0:	d1f1      	bne.n	3096 <Matrix_setup+0x1a>
	{
		Matrix_pin( Matrix_cols[ pin ], Type_StrobeSetup );
	}

	print( NL );
    30b2:	4824      	ldr	r0, [pc, #144]	; (3144 <Matrix_setup+0xc8>)
    30b4:	f004 fba4 	bl	7800 <_print>
	info_msg("Rows:     ");
    30b8:	4823      	ldr	r0, [pc, #140]	; (3148 <Matrix_setup+0xcc>)
    30ba:	f004 fba1 	bl	7800 <_print>
	printHex( Matrix_rowsNum );
    30be:	2005      	movs	r0, #5
    30c0:	2101      	movs	r1, #1
    30c2:	f004 fc26 	bl	7912 <printHex_op>
    30c6:	2400      	movs	r4, #0

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
	{
		Matrix_pin( Matrix_rows[ pin ], Type_SenseSetup );
    30c8:	4b20      	ldr	r3, [pc, #128]	; (314c <Matrix_setup+0xd0>)
    30ca:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
    30ce:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    30d2:	2104      	movs	r1, #4
    30d4:	7858      	ldrb	r0, [r3, #1]
    30d6:	3401      	adds	r4, #1
    30d8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    30dc:	f7ff ff66 	bl	2fac <Matrix_pin>
	print( NL );
	info_msg("Rows:     ");
	printHex( Matrix_rowsNum );

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
    30e0:	2c05      	cmp	r4, #5
    30e2:	d1f1      	bne.n	30c8 <Matrix_setup+0x4c>
	{
		Matrix_pin( Matrix_rows[ pin ], Type_SenseSetup );
	}

	print( NL );
    30e4:	4817      	ldr	r0, [pc, #92]	; (3144 <Matrix_setup+0xc8>)
    30e6:	f004 fb8b 	bl	7800 <_print>
	info_msg("Max Keys: ");
    30ea:	4819      	ldr	r0, [pc, #100]	; (3150 <Matrix_setup+0xd4>)
    30ec:	f004 fb88 	bl	7800 <_print>
	printHex( Matrix_maxKeys );
    30f0:	2101      	movs	r1, #1
    30f2:	202d      	movs	r0, #45	; 0x2d
    30f4:	f004 fc0d 	bl	7912 <printHex_op>
	print( NL );
    30f8:	4812      	ldr	r0, [pc, #72]	; (3144 <Matrix_setup+0xc8>)
    30fa:	f004 fb81 	bl	7800 <_print>
    30fe:	2100      	movs	r1, #0
    3100:	460a      	mov	r2, r1
    3102:	4d14      	ldr	r5, [pc, #80]	; (3154 <Matrix_setup+0xd8>)
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3104:	ebc2 06c2 	rsb	r6, r2, r2, lsl #3
    3108:	1948      	adds	r0, r1, r5
	print( NL );

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    310a:	2300      	movs	r3, #0
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    310c:	19ac      	adds	r4, r5, r6
    310e:	3201      	adds	r2, #1
	print( NL );

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    3110:	7103      	strb	r3, [r0, #4]
		Matrix_scanArray[ item ].curState         = KeyState_Off;
    3112:	7143      	strb	r3, [r0, #5]
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
	print( NL );

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    3114:	2a2d      	cmp	r2, #45	; 0x2d
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3116:	55ab      	strb	r3, [r5, r6]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3118:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    311c:	7063      	strb	r3, [r4, #1]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    311e:	70a5      	strb	r5, [r4, #2]
    3120:	70e5      	strb	r5, [r4, #3]
    3122:	f101 0107 	add.w	r1, r1, #7
		Matrix_scanArray[ item ].prevDecisionTime = 0;
    3126:	7183      	strb	r3, [r0, #6]
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
	print( NL );

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    3128:	d1eb      	bne.n	3102 <Matrix_setup+0x86>
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
		Matrix_scanArray[ item ].prevDecisionTime = 0;
	}

	// Clear scan stats counters
	matrixMaxScans  = 0;
    312a:	4a0b      	ldr	r2, [pc, #44]	; (3158 <Matrix_setup+0xdc>)
    312c:	8013      	strh	r3, [r2, #0]
	matrixPrevScans = 0;
    312e:	4a0b      	ldr	r2, [pc, #44]	; (315c <Matrix_setup+0xe0>)
    3130:	8013      	strh	r3, [r2, #0]
    3132:	bd70      	pop	{r4, r5, r6, pc}
    3134:	0000829f 	.word	0x0000829f
    3138:	000082b8 	.word	0x000082b8
    313c:	00008068 	.word	0x00008068
    3140:	1fff89a8 	.word	0x1fff89a8
    3144:	0000b26f 	.word	0x0000b26f
    3148:	00008085 	.word	0x00008085
    314c:	1fff89ba 	.word	0x1fff89ba
    3150:	000080a2 	.word	0x000080a2
    3154:	1fff9a4b 	.word	0x1fff9a4b
    3158:	1fff8fea 	.word	0x1fff8fea
    315c:	1fff8fe8 	.word	0x1fff8fe8

00003160 <Matrix_keyPositionDebug>:
}

void Matrix_keyPositionDebug( KeyPosition pos )
{
	// Depending on the state, use a different flag + color
	switch ( pos )
    3160:	2803      	cmp	r0, #3
    3162:	d80b      	bhi.n	317c <Matrix_keyPositionDebug+0x1c>
    3164:	e8df f000 	tbb	[pc, r0]
    3168:	08060402 	.word	0x08060402
	{
	case KeyState_Off:
		print("\033[1mO\033[0m");
    316c:	4805      	ldr	r0, [pc, #20]	; (3184 <Matrix_keyPositionDebug+0x24>)
    316e:	e006      	b.n	317e <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Press:
		print("\033[1;33mP\033[0m");
    3170:	4805      	ldr	r0, [pc, #20]	; (3188 <Matrix_keyPositionDebug+0x28>)
    3172:	e004      	b.n	317e <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Hold:
		print("\033[1;32mH\033[0m");
    3174:	4805      	ldr	r0, [pc, #20]	; (318c <Matrix_keyPositionDebug+0x2c>)
    3176:	e002      	b.n	317e <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Release:
		print("\033[1;35mR\033[0m");
    3178:	4805      	ldr	r0, [pc, #20]	; (3190 <Matrix_keyPositionDebug+0x30>)
    317a:	e000      	b.n	317e <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Invalid:
	default:
		print("\033[1;31mI\033[0m");
    317c:	4805      	ldr	r0, [pc, #20]	; (3194 <Matrix_keyPositionDebug+0x34>)
    317e:	f004 bb3f 	b.w	7800 <_print>
    3182:	bf00      	nop
    3184:	000080bf 	.word	0x000080bf
    3188:	000080c9 	.word	0x000080c9
    318c:	000080d6 	.word	0x000080d6
    3190:	000080e3 	.word	0x000080e3
    3194:	000080f0 	.word	0x000080f0

00003198 <Matrix_scan>:
	if ( !( Matrix_divCounter++ & (1 << ( DebounceThrottleDiv_define - 1 )) ) )
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
    3198:	4b8f      	ldr	r3, [pc, #572]	; (33d8 <Matrix_scan+0x240>)


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    319a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( !( Matrix_divCounter++ & (1 << ( DebounceThrottleDiv_define - 1 )) ) )
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
    319e:	881a      	ldrh	r2, [r3, #0]
    31a0:	4282      	cmp	r2, r0
    31a2:	bf38      	it	cc
    31a4:	8018      	strhcc	r0, [r3, #0]


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    31a6:	4607      	mov	r7, r0
    31a8:	4b8c      	ldr	r3, [pc, #560]	; (33dc <Matrix_scan+0x244>)
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
	if ( scanNum == 0 )
    31aa:	b920      	cbnz	r0, 31b6 <Matrix_scan+0x1e>
	{
		matrixPrevScans = matrixCurScans;
    31ac:	4a8c      	ldr	r2, [pc, #560]	; (33e0 <Matrix_scan+0x248>)
    31ae:	8819      	ldrh	r1, [r3, #0]
    31b0:	8011      	strh	r1, [r2, #0]
		matrixCurScans = 0;
    31b2:	8018      	strh	r0, [r3, #0]
    31b4:	e002      	b.n	31bc <Matrix_scan+0x24>
	}
	else
	{
		matrixCurScans++;
    31b6:	881a      	ldrh	r2, [r3, #0]
    31b8:	3201      	adds	r2, #1
    31ba:	801a      	strh	r2, [r3, #0]
	}

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;
    31bc:	4b89      	ldr	r3, [pc, #548]	; (33e4 <Matrix_scan+0x24c>)
    31be:	681b      	ldr	r3, [r3, #0]
    31c0:	2500      	movs	r5, #0
    31c2:	fa5f fb83 	uxtb.w	fp, r3

	// For each strobe, scan each of the sense pins
	for ( uint8_t strobe = 0; strobe < Matrix_colsNum; strobe++ )
	{
		// Strobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOn );
    31c6:	f8df 9234 	ldr.w	r9, [pc, #564]	; 33fc <Matrix_scan+0x264>
    31ca:	ea4f 0a45 	mov.w	sl, r5, lsl #1
    31ce:	eb09 020a 	add.w	r2, r9, sl
    31d2:	f819 3015 	ldrb.w	r3, [r9, r5, lsl #1]
    31d6:	7850      	ldrb	r0, [r2, #1]
    31d8:	2100      	movs	r1, #0
    31da:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    31de:	f7ff fee5 	bl	2fac <Matrix_pin>
    31e2:	b2ee      	uxtb	r6, r5
    31e4:	f04f 0800 	mov.w	r8, #0
		// Scan each of the sense pins
		for ( uint8_t sense = 0; sense < Matrix_rowsNum; sense++ )
		{
			// Key position
			uint8_t key = Matrix_colsNum * sense + strobe;
			KeyState *state = &Matrix_scanArray[ key ];
    31e8:	4b7f      	ldr	r3, [pc, #508]	; (33e8 <Matrix_scan+0x250>)
    31ea:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    31ee:	18d4      	adds	r4, r2, r3

			// If first scan, reset state
			if ( scanNum == 0 )
    31f0:	b91f      	cbnz	r7, 31fa <Matrix_scan+0x62>
			{
				// Set previous state, and reset current state
				state->prevState = state->curState;
    31f2:	7961      	ldrb	r1, [r4, #5]
    31f4:	7121      	strb	r1, [r4, #4]
				state->curState  = KeyState_Invalid;
    31f6:	2104      	movs	r1, #4
    31f8:	7161      	strb	r1, [r4, #5]
			// This means there is a maximum of scan 13 cycles on a perfect off to on transition
			//  (coming from a steady state 0xFFFF off scans)
			// Somewhat longer with switch bounciness
			// The advantage of this is that the count is ongoing and never needs to be reset
			// State still needs to be kept track of to deal with what to send to the Macro module
			if ( Matrix_pin( Matrix_rows[ sense ], Type_Sense ) )
    31fa:	497c      	ldr	r1, [pc, #496]	; (33ec <Matrix_scan+0x254>)
    31fc:	f811 0018 	ldrb.w	r0, [r1, r8, lsl #1]
    3200:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    3204:	7849      	ldrb	r1, [r1, #1]
    3206:	9201      	str	r2, [sp, #4]
    3208:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    320c:	2103      	movs	r1, #3
    320e:	9300      	str	r3, [sp, #0]
    3210:	f7ff fecc 	bl	2fac <Matrix_pin>
    3214:	8821      	ldrh	r1, [r4, #0]
    3216:	f8b4 c002 	ldrh.w	ip, [r4, #2]
    321a:	9a01      	ldr	r2, [sp, #4]
    321c:	9b00      	ldr	r3, [sp, #0]
    321e:	f64f 7eff 	movw	lr, #65535	; 0xffff
    3222:	b148      	cbz	r0, 3238 <Matrix_scan+0xa0>
			{
				// Only update if not going to wrap around
				if ( state->activeCount < DebounceDivThreshold_define ) state->activeCount += 1;
    3224:	4571      	cmp	r1, lr
    3226:	bf18      	it	ne
    3228:	3101      	addne	r1, #1
				state->inactiveCount >>= 1;
    322a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
			// The advantage of this is that the count is ongoing and never needs to be reset
			// State still needs to be kept track of to deal with what to send to the Macro module
			if ( Matrix_pin( Matrix_rows[ sense ], Type_Sense ) )
			{
				// Only update if not going to wrap around
				if ( state->activeCount < DebounceDivThreshold_define ) state->activeCount += 1;
    322e:	bf18      	it	ne
    3230:	52d1      	strhne	r1, [r2, r3]
				state->inactiveCount >>= 1;
    3232:	f8a4 c002 	strh.w	ip, [r4, #2]
    3236:	e009      	b.n	324c <Matrix_scan+0xb4>
			}
			// Signal Not Detected
			else
			{
				// Only update if not going to wrap around
				if ( state->inactiveCount < DebounceDivThreshold_define ) state->inactiveCount += 1;
    3238:	45f4      	cmp	ip, lr
    323a:	bf18      	it	ne
    323c:	f10c 0c01 	addne.w	ip, ip, #1
				state->activeCount >>= 1;
    3240:	ea4f 0151 	mov.w	r1, r1, lsr #1
			}
			// Signal Not Detected
			else
			{
				// Only update if not going to wrap around
				if ( state->inactiveCount < DebounceDivThreshold_define ) state->inactiveCount += 1;
    3244:	bf18      	it	ne
    3246:	f8a4 c002 	strhne.w	ip, [r4, #2]
				state->activeCount >>= 1;
    324a:	52d1      	strh	r1, [r2, r3]
			// Check for state change if it hasn't been set
			// But only if enough time has passed since last state change
			// Only check if the minimum number of scans has been met
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
    324c:	7963      	ldrb	r3, [r4, #5]
    324e:	2b04      	cmp	r3, #4
    3250:	d145      	bne.n	32de <Matrix_scan+0x146>
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    3252:	79a2      	ldrb	r2, [r4, #6]

				// Attempt state transition
				switch ( state->prevState )
    3254:	7923      	ldrb	r3, [r4, #4]
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    3256:	ebc2 020b 	rsb	r2, r2, fp
    325a:	b2d2      	uxtb	r2, r2

				// Attempt state transition
				switch ( state->prevState )
    325c:	2b03      	cmp	r3, #3
    325e:	d81a      	bhi.n	3296 <Matrix_scan+0xfe>
    3260:	e8df f003 	tbb	[pc, r3]
    3264:	0c02020c 	.word	0x0c02020c
				{
				case KeyState_Press:
				case KeyState_Hold:
					if ( state->activeCount > state->inactiveCount )
    3268:	8820      	ldrh	r0, [r4, #0]
    326a:	8861      	ldrh	r1, [r4, #2]
    326c:	4288      	cmp	r0, r1
    326e:	d901      	bls.n	3274 <Matrix_scan+0xdc>
					{
						state->curState = KeyState_Hold;
    3270:	2302      	movs	r3, #2
    3272:	e00c      	b.n	328e <Matrix_scan+0xf6>
					}
					else
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    3274:	2a04      	cmp	r2, #4
    3276:	d907      	bls.n	3288 <Matrix_scan+0xf0>
							//warn_print("FAST Release stopped");
							state->curState = state->prevState;
							continue;
						}

						state->curState = KeyState_Release;
    3278:	2303      	movs	r3, #3
    327a:	e008      	b.n	328e <Matrix_scan+0xf6>
					}
					break;

				case KeyState_Release:
				case KeyState_Off:
					if ( state->activeCount > state->inactiveCount )
    327c:	8820      	ldrh	r0, [r4, #0]
    327e:	8861      	ldrh	r1, [r4, #2]
    3280:	4288      	cmp	r0, r1
    3282:	d906      	bls.n	3292 <Matrix_scan+0xfa>
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    3284:	2a04      	cmp	r2, #4
    3286:	d801      	bhi.n	328c <Matrix_scan+0xf4>
						{
							//warn_print("FAST Press stopped");
							state->curState = state->prevState;
    3288:	7163      	strb	r3, [r4, #5]
							continue;
    328a:	e028      	b.n	32de <Matrix_scan+0x146>
						}

						state->curState = KeyState_Press;
    328c:	2301      	movs	r3, #1
    328e:	7163      	strb	r3, [r4, #5]
    3290:	e004      	b.n	329c <Matrix_scan+0x104>
					}
					else
					{
						state->curState = KeyState_Off;
    3292:	2300      	movs	r3, #0
    3294:	e7fb      	b.n	328e <Matrix_scan+0xf6>
					}
					break;

				case KeyState_Invalid:
				default:
					erro_print("Matrix scan bug!! Report me!");
    3296:	4856      	ldr	r0, [pc, #344]	; (33f0 <Matrix_scan+0x258>)
    3298:	f004 fab2 	bl	7800 <_print>
					break;
				}

				// Update decision time
				state->prevDecisionTime = currentTime;
    329c:	f884 b006 	strb.w	fp, [r4, #6]

				// Send keystate to macro module
				Macro_keyState( key, state->curState );
    32a0:	4630      	mov	r0, r6
    32a2:	7961      	ldrb	r1, [r4, #5]
    32a4:	f002 f840 	bl	5328 <Macro_keyState>

				// Matrix Debug, only if there is a state change
				if ( matrixDebugMode && state->curState != state->prevState )
    32a8:	4b52      	ldr	r3, [pc, #328]	; (33f4 <Matrix_scan+0x25c>)
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	b1bb      	cbz	r3, 32de <Matrix_scan+0x146>
    32ae:	7961      	ldrb	r1, [r4, #5]
    32b0:	7922      	ldrb	r2, [r4, #4]
    32b2:	428a      	cmp	r2, r1
    32b4:	d013      	beq.n	32de <Matrix_scan+0x146>
				{
					// Basic debug output
					if ( matrixDebugMode == 1 && state->curState == KeyState_Press )
    32b6:	2b01      	cmp	r3, #1
    32b8:	d105      	bne.n	32c6 <Matrix_scan+0x12e>
    32ba:	2901      	cmp	r1, #1
    32bc:	d10f      	bne.n	32de <Matrix_scan+0x146>
					{
						printHex( key );
    32be:	4630      	mov	r0, r6
    32c0:	f004 fb27 	bl	7912 <printHex_op>
    32c4:	e008      	b.n	32d8 <Matrix_scan+0x140>
						print(" ");
					}
					// State transition debug output
					else if ( matrixDebugMode == 2 )
    32c6:	2b02      	cmp	r3, #2
    32c8:	d109      	bne.n	32de <Matrix_scan+0x146>
					{
						printHex( key );
    32ca:	4630      	mov	r0, r6
    32cc:	2101      	movs	r1, #1
    32ce:	f004 fb20 	bl	7912 <printHex_op>
						Matrix_keyPositionDebug( state->curState );
    32d2:	7960      	ldrb	r0, [r4, #5]
    32d4:	f7ff ff44 	bl	3160 <Matrix_keyPositionDebug>
						print(" ");
    32d8:	4847      	ldr	r0, [pc, #284]	; (33f8 <Matrix_scan+0x260>)
    32da:	f004 fa91 	bl	7800 <_print>
    32de:	f108 0801 	add.w	r8, r8, #1
    32e2:	3609      	adds	r6, #9
	{
		// Strobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOn );

		// Scan each of the sense pins
		for ( uint8_t sense = 0; sense < Matrix_rowsNum; sense++ )
    32e4:	f1b8 0f05 	cmp.w	r8, #5
    32e8:	b2f6      	uxtb	r6, r6
    32ea:	f47f af7d 	bne.w	31e8 <Matrix_scan+0x50>
				}
			}
		}

		// Unstrobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOff );
    32ee:	4a43      	ldr	r2, [pc, #268]	; (33fc <Matrix_scan+0x264>)
    32f0:	f819 3015 	ldrb.w	r3, [r9, r5, lsl #1]
    32f4:	4452      	add	r2, sl
    32f6:	2101      	movs	r1, #1
    32f8:	7850      	ldrb	r0, [r2, #1]
    32fa:	3501      	adds	r5, #1
    32fc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3300:	f7ff fe54 	bl	2fac <Matrix_pin>

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;

	// For each strobe, scan each of the sense pins
	for ( uint8_t strobe = 0; strobe < Matrix_colsNum; strobe++ )
    3304:	2d09      	cmp	r5, #9
    3306:	f47f af5e 	bne.w	31c6 <Matrix_scan+0x2e>
		// Unstrobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOff );
	}

	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
    330a:	4b3d      	ldr	r3, [pc, #244]	; (3400 <Matrix_scan+0x268>)
    330c:	881a      	ldrh	r2, [r3, #0]
    330e:	2a00      	cmp	r2, #0
    3310:	d05e      	beq.n	33d0 <Matrix_scan+0x238>
	{
		// Decrement counter
		matrixDebugStateCounter--;
    3312:	3a01      	subs	r2, #1

		// Output stats on number of scans being done per USB send
		print( NL );
    3314:	483b      	ldr	r0, [pc, #236]	; (3404 <Matrix_scan+0x26c>)

	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
	{
		// Decrement counter
		matrixDebugStateCounter--;
    3316:	801a      	strh	r2, [r3, #0]

		// Output stats on number of scans being done per USB send
		print( NL );
    3318:	f004 fa72 	bl	7800 <_print>
		info_msg("Max scans:      ");
    331c:	483a      	ldr	r0, [pc, #232]	; (3408 <Matrix_scan+0x270>)
    331e:	f004 fa6f 	bl	7800 <_print>
		printHex( matrixMaxScans );
    3322:	4b2d      	ldr	r3, [pc, #180]	; (33d8 <Matrix_scan+0x240>)
    3324:	2101      	movs	r1, #1
    3326:	8818      	ldrh	r0, [r3, #0]
    3328:	f004 faf3 	bl	7912 <printHex_op>
		print( NL );
    332c:	4835      	ldr	r0, [pc, #212]	; (3404 <Matrix_scan+0x26c>)
    332e:	f004 fa67 	bl	7800 <_print>
		info_msg("Previous scans: ");
    3332:	4836      	ldr	r0, [pc, #216]	; (340c <Matrix_scan+0x274>)
    3334:	f004 fa64 	bl	7800 <_print>
		printHex( matrixPrevScans );
    3338:	4b29      	ldr	r3, [pc, #164]	; (33e0 <Matrix_scan+0x248>)
    333a:	2101      	movs	r1, #1
    333c:	8818      	ldrh	r0, [r3, #0]
    333e:	f004 fae8 	bl	7912 <printHex_op>
		print( NL );
    3342:	4830      	ldr	r0, [pc, #192]	; (3404 <Matrix_scan+0x26c>)
    3344:	f004 fa5c 	bl	7800 <_print>

		// Output current scan number
		info_msg("Scan Number:    ");
    3348:	4831      	ldr	r0, [pc, #196]	; (3410 <Matrix_scan+0x278>)
    334a:	f004 fa59 	bl	7800 <_print>
		printHex( scanNum );
    334e:	2101      	movs	r1, #1
    3350:	4638      	mov	r0, r7
    3352:	f004 fade 	bl	7912 <printHex_op>
		print( NL );
    3356:	482b      	ldr	r0, [pc, #172]	; (3404 <Matrix_scan+0x26c>)
    3358:	f004 fa52 	bl	7800 <_print>

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
    335c:	482d      	ldr	r0, [pc, #180]	; (3414 <Matrix_scan+0x27c>)
    335e:	f004 fa4f 	bl	7800 <_print>
    3362:	2400      	movs	r4, #0
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
		{
			// Every 4 keys, put a newline
			if ( key % 4 == 0 )
    3364:	07a3      	lsls	r3, r4, #30
    3366:	d102      	bne.n	336e <Matrix_scan+0x1d6>
				print( NL );
    3368:	4826      	ldr	r0, [pc, #152]	; (3404 <Matrix_scan+0x26c>)
    336a:	f004 fa49 	bl	7800 <_print>

			print("\033[1m0x");
    336e:	482a      	ldr	r0, [pc, #168]	; (3418 <Matrix_scan+0x280>)
    3370:	f004 fa46 	bl	7800 <_print>
			printHex_op( key, 2 );
    3374:	2102      	movs	r1, #2
    3376:	b2a0      	uxth	r0, r4
    3378:	f004 facb 	bl	7912 <printHex_op>
			print("\033[0m");
    337c:	4827      	ldr	r0, [pc, #156]	; (341c <Matrix_scan+0x284>)
    337e:	f004 fa3f 	bl	7800 <_print>
			print(":");
    3382:	4827      	ldr	r0, [pc, #156]	; (3420 <Matrix_scan+0x288>)
    3384:	f004 fa3c 	bl	7800 <_print>
    3388:	4917      	ldr	r1, [pc, #92]	; (33e8 <Matrix_scan+0x250>)
    338a:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
    338e:	440d      	add	r5, r1
    3390:	3401      	adds	r4, #1
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
    3392:	7928      	ldrb	r0, [r5, #4]
    3394:	f7ff fee4 	bl	3160 <Matrix_keyPositionDebug>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
    3398:	7968      	ldrb	r0, [r5, #5]
    339a:	f7ff fee1 	bl	3160 <Matrix_keyPositionDebug>
			print(" 0x");
    339e:	4821      	ldr	r0, [pc, #132]	; (3424 <Matrix_scan+0x28c>)
    33a0:	f004 fa2e 	bl	7800 <_print>
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    33a4:	2104      	movs	r1, #4
    33a6:	8828      	ldrh	r0, [r5, #0]
    33a8:	f004 fab3 	bl	7912 <printHex_op>
			print(" 0x");
    33ac:	481d      	ldr	r0, [pc, #116]	; (3424 <Matrix_scan+0x28c>)
    33ae:	f004 fa27 	bl	7800 <_print>
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
    33b2:	8868      	ldrh	r0, [r5, #2]
    33b4:	2104      	movs	r1, #4
    33b6:	f004 faac 	bl	7912 <printHex_op>
			print(" ");
    33ba:	480f      	ldr	r0, [pc, #60]	; (33f8 <Matrix_scan+0x260>)
    33bc:	f004 fa20 	bl	7800 <_print>
		printHex( scanNum );
		print( NL );

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
    33c0:	2c2d      	cmp	r4, #45	; 0x2d
    33c2:	d1cf      	bne.n	3364 <Matrix_scan+0x1cc>
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    33c4:	480f      	ldr	r0, [pc, #60]	; (3404 <Matrix_scan+0x26c>)
	}
}
    33c6:	b003      	add	sp, #12
    33c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    33cc:	f004 ba18 	b.w	7800 <_print>
	}
}
    33d0:	b003      	add	sp, #12
    33d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33d6:	bf00      	nop
    33d8:	1fff8fea 	.word	0x1fff8fea
    33dc:	1fff8fe6 	.word	0x1fff8fe6
    33e0:	1fff8fe8 	.word	0x1fff8fe8
    33e4:	1fff8fe0 	.word	0x1fff8fe0
    33e8:	1fff9a4b 	.word	0x1fff9a4b
    33ec:	1fff89ba 	.word	0x1fff89ba
    33f0:	000080fd 	.word	0x000080fd
    33f4:	1fff8fec 	.word	0x1fff8fec
    33f8:	00008152 	.word	0x00008152
    33fc:	1fff89a8 	.word	0x1fff89a8
    3400:	1fff8fee 	.word	0x1fff8fee
    3404:	0000b26f 	.word	0x0000b26f
    3408:	00008131 	.word	0x00008131
    340c:	00008154 	.word	0x00008154
    3410:	00008177 	.word	0x00008177
    3414:	0000819a 	.word	0x0000819a
    3418:	000081e0 	.word	0x000081e0
    341c:	000096c4 	.word	0x000096c4
    3420:	000081e7 	.word	0x000081e7
    3424:	000081e9 	.word	0x000081e9

00003428 <cliFunc_lcdColor>:
	print( NL );
	LCD_writeControlReg( cmd );
}

void cliFunc_lcdColor( char* args )
{
    3428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    342a:	2400      	movs	r4, #0
    342c:	9001      	str	r0, [sp, #4]

	// Parse integers from 3 arguments
	for ( uint8_t color = 0; color < 3; color++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    342e:	9801      	ldr	r0, [sp, #4]
    3430:	4669      	mov	r1, sp
    3432:	aa01      	add	r2, sp, #4
    3434:	f003 ff30 	bl	7298 <CLI_argumentIsolation>

		// Give up if not enough args given
		if ( *arg1Ptr == '\0' )
    3438:	9800      	ldr	r0, [sp, #0]
    343a:	7803      	ldrb	r3, [r0, #0]
    343c:	b183      	cbz	r3, 3460 <cliFunc_lcdColor+0x38>
			return;

		// Convert argument to integer
		rgb[ color ] = numToInt( arg1Ptr );
    343e:	f004 fabd 	bl	79bc <numToInt>
    3442:	ab02      	add	r3, sp, #8
    3444:	5318      	strh	r0, [r3, r4]
    3446:	3402      	adds	r4, #2

	// Colors
	uint16_t rgb[3]; // Red, Green, Blue

	// Parse integers from 3 arguments
	for ( uint8_t color = 0; color < 3; color++ )
    3448:	2c06      	cmp	r4, #6
    344a:	d1f0      	bne.n	342e <cliFunc_lcdColor+0x6>
		// Convert argument to integer
		rgb[ color ] = numToInt( arg1Ptr );
	}

	// Set PWM channels
	FTM0_C0V = rgb[0];
    344c:	4b05      	ldr	r3, [pc, #20]	; (3464 <cliFunc_lcdColor+0x3c>)
    344e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    3452:	601a      	str	r2, [r3, #0]
	FTM0_C1V = rgb[1];
    3454:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    3458:	609a      	str	r2, [r3, #8]
	FTM0_C2V = rgb[2];
    345a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    345e:	611a      	str	r2, [r3, #16]
}
    3460:	b004      	add	sp, #16
    3462:	bd10      	pop	{r4, pc}
    3464:	40038010 	.word	0x40038010

00003468 <SPI_write>:
		| SPI_CTAR_PBR(0) | SPI_CTAR_BR(7);
}

// Write buffer to SPI FIFO
void SPI_write( uint8_t *buffer, uint8_t len )
{
    3468:	b530      	push	{r4, r5, lr}

	for ( uint8_t byte = 0; byte < len; byte++ )
    346a:	2300      	movs	r3, #0
    346c:	b2da      	uxtb	r2, r3
    346e:	428a      	cmp	r2, r1
    3470:	d218      	bcs.n	34a4 <L_107_delayMicroseconds+0x22>
	{
		// Wait for SPI TxFIFO to have 4 or fewer entries
		while ( !( SPI0_SR & SPI_SR_TFFF ) )
    3472:	4a0d      	ldr	r2, [pc, #52]	; (34a8 <L_107_delayMicroseconds+0x26>)
    3474:	6814      	ldr	r4, [r2, #0]
    3476:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    347a:	4615      	mov	r5, r2
    347c:	d104      	bne.n	3488 <L_107_delayMicroseconds+0x6>
    347e:	f44f 72a0 	mov.w	r2, #320	; 0x140

00003482 <L_107_delayMicroseconds>:
    3482:	3a01      	subs	r2, #1
    3484:	d1fd      	bne.n	3482 <L_107_delayMicroseconds>
    3486:	e7f4      	b.n	3472 <SPI_write+0xa>
			delayMicroseconds(10);

		// Write byte to TxFIFO
		// CS0, CTAR0
		SPI0_PUSHR = ( buffer[ byte ] & 0xff ) | SPI_PUSHR_PCS(1);
    3488:	5cc4      	ldrb	r4, [r0, r3]
    348a:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
    348e:	6094      	str	r4, [r2, #8]

		// Indicate transfer has completed
		while ( !( SPI0_SR & SPI_SR_TCF ) );
    3490:	682c      	ldr	r4, [r5, #0]
    3492:	4a05      	ldr	r2, [pc, #20]	; (34a8 <L_107_delayMicroseconds+0x26>)
    3494:	2c00      	cmp	r4, #0
    3496:	dafb      	bge.n	3490 <L_107_delayMicroseconds+0xe>
		SPI0_SR |= SPI_SR_TCF;
    3498:	6814      	ldr	r4, [r2, #0]
    349a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    349e:	6014      	str	r4, [r2, #0]
    34a0:	3301      	adds	r3, #1
    34a2:	e7e3      	b.n	346c <SPI_write+0x4>
	}
}
    34a4:	bd30      	pop	{r4, r5, pc}
    34a6:	bf00      	nop
    34a8:	4002c02c 	.word	0x4002c02c

000034ac <LCD_writeControlReg>:

// Write to a control register
void LCD_writeControlReg( uint8_t byte )
{
    34ac:	b513      	push	{r0, r1, r4, lr}
    34ae:	f88d 0007 	strb.w	r0, [sp, #7]
	// Wait for TxFIFO to be empt
	while ( SPI0_TxFIFO_CNT != 0 );
    34b2:	4b10      	ldr	r3, [pc, #64]	; (34f4 <L_198_delayMicroseconds+0x12>)
    34b4:	681a      	ldr	r2, [r3, #0]
    34b6:	f412 4f70 	tst.w	r2, #61440	; 0xf000
    34ba:	461c      	mov	r4, r3
    34bc:	d1f9      	bne.n	34b2 <LCD_writeControlReg+0x6>

	// Set A0 low to enter control register mode
	GPIOC_PCOR |= (1<<7);
    34be:	f503 2353 	add.w	r3, r3, #864256	; 0xd3000
    34c2:	335c      	adds	r3, #92	; 0x5c
    34c4:	681a      	ldr	r2, [r3, #0]
    34c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    34ca:	601a      	str	r2, [r3, #0]

	// Write byte to SPI FIFO
	SPI_write( &byte, 1 );
    34cc:	f10d 0007 	add.w	r0, sp, #7
    34d0:	2101      	movs	r1, #1
    34d2:	f7ff ffc9 	bl	3468 <SPI_write>

	// Wait for TxFIFO to be empty
	while ( SPI0_TxFIFO_CNT != 0 );
    34d6:	6823      	ldr	r3, [r4, #0]
    34d8:	f413 4f70 	tst.w	r3, #61440	; 0xf000
    34dc:	d1fb      	bne.n	34d6 <LCD_writeControlReg+0x2a>
    34de:	f44f 73a0 	mov.w	r3, #320	; 0x140

000034e2 <L_198_delayMicroseconds>:
    34e2:	3b01      	subs	r3, #1
    34e4:	d1fd      	bne.n	34e2 <L_198_delayMicroseconds>

	// Make sure data has transferred
	delayMicroseconds(10); // XXX Adjust if SPI speed changes

	// Set A0 high to go back to display register mode
	GPIOC_PSOR |= (1<<7);
    34e6:	4b04      	ldr	r3, [pc, #16]	; (34f8 <L_198_delayMicroseconds+0x16>)
    34e8:	681a      	ldr	r2, [r3, #0]
    34ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    34ee:	601a      	str	r2, [r3, #0]
}
    34f0:	b002      	add	sp, #8
    34f2:	bd10      	pop	{r4, pc}
    34f4:	4002c02c 	.word	0x4002c02c
    34f8:	400ff084 	.word	0x400ff084

000034fc <cliFunc_lcdCmd>:
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
}

void cliFunc_lcdCmd( char* args )
{
    34fc:	b513      	push	{r0, r1, r4, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    34fe:	9001      	str	r0, [sp, #4]

	print( NL ); // No \r\n by default after the command is entered
    3500:	4810      	ldr	r0, [pc, #64]	; (3544 <cliFunc_lcdCmd+0x48>)
    3502:	f004 f97d 	bl	7800 <_print>

	curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3506:	9801      	ldr	r0, [sp, #4]
    3508:	4669      	mov	r1, sp
    350a:	aa01      	add	r2, sp, #4
    350c:	f003 fec4 	bl	7298 <CLI_argumentIsolation>

	// No args
	if ( *arg1Ptr == '\0' )
    3510:	9800      	ldr	r0, [sp, #0]
    3512:	7803      	ldrb	r3, [r0, #0]
    3514:	b1a3      	cbz	r3, 3540 <cliFunc_lcdCmd+0x44>
		return;

	// SPI Command
	uint8_t cmd = (uint8_t)numToInt( arg1Ptr );
    3516:	f004 fa51 	bl	79bc <numToInt>

	curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    351a:	aa01      	add	r2, sp, #4
	// No args
	if ( *arg1Ptr == '\0' )
		return;

	// SPI Command
	uint8_t cmd = (uint8_t)numToInt( arg1Ptr );
    351c:	b2c4      	uxtb	r4, r0

	curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    351e:	4669      	mov	r1, sp
    3520:	9801      	ldr	r0, [sp, #4]
    3522:	f003 feb9 	bl	7298 <CLI_argumentIsolation>
	if ( *arg1Ptr == '\0' )
		goto cmd;

	// TODO Deal with a0
cmd:
	info_msg("Sending - ");
    3526:	4808      	ldr	r0, [pc, #32]	; (3548 <cliFunc_lcdCmd+0x4c>)
    3528:	f004 f96a 	bl	7800 <_print>
	printHex( cmd );
    352c:	4620      	mov	r0, r4
    352e:	2101      	movs	r1, #1
    3530:	f004 f9ef 	bl	7912 <printHex_op>
	print( NL );
    3534:	4803      	ldr	r0, [pc, #12]	; (3544 <cliFunc_lcdCmd+0x48>)
    3536:	f004 f963 	bl	7800 <_print>
	LCD_writeControlReg( cmd );
    353a:	4620      	mov	r0, r4
    353c:	f7ff ffb6 	bl	34ac <LCD_writeControlReg>
}
    3540:	b002      	add	sp, #8
    3542:	bd10      	pop	{r4, pc}
    3544:	0000b26f 	.word	0x0000b26f
    3548:	00008894 	.word	0x00008894

0000354c <cliFunc_lcdDisp>:
	FTM0_C1V = rgb[1];
	FTM0_C2V = rgb[2];
}

void cliFunc_lcdDisp( char* args )
{
    354c:	b530      	push	{r4, r5, lr}
    354e:	b085      	sub	sp, #20
	char* arg1Ptr;
	char* arg2Ptr = args;

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3550:	a902      	add	r1, sp, #8
    3552:	aa03      	add	r2, sp, #12

void cliFunc_lcdDisp( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3554:	9003      	str	r0, [sp, #12]

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3556:	f003 fe9f 	bl	7298 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    355a:	9802      	ldr	r0, [sp, #8]
    355c:	7803      	ldrb	r3, [r0, #0]
    355e:	b373      	cbz	r3, 35be <cliFunc_lcdDisp+0x72>
		return;
	uint8_t page = numToInt( arg1Ptr );
    3560:	f004 fa2c 	bl	79bc <numToInt>

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3564:	aa03      	add	r2, sp, #12
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	uint8_t page = numToInt( arg1Ptr );
    3566:	4605      	mov	r5, r0

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3568:	a902      	add	r1, sp, #8
    356a:	9803      	ldr	r0, [sp, #12]
    356c:	f003 fe94 	bl	7298 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    3570:	9802      	ldr	r0, [sp, #8]
    3572:	7802      	ldrb	r2, [r0, #0]
    3574:	b31a      	cbz	r2, 35be <cliFunc_lcdDisp+0x72>
		return;
	uint8_t address = numToInt( arg1Ptr );
    3576:	f004 fa21 	bl	79bc <numToInt>
    357a:	b2c4      	uxtb	r4, r0

	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    357c:	f005 000f 	and.w	r0, r5, #15
    3580:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
    3584:	f7ff ff92 	bl	34ac <LCD_writeControlReg>

	// Set starting address
	LCD_writeControlReg( 0x10 | ( ( 0xF0 & address ) >> 4 ) );
    3588:	0920      	lsrs	r0, r4, #4
    358a:	f040 0010 	orr.w	r0, r0, #16
    358e:	f7ff ff8d 	bl	34ac <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 | ( 0x0F & address ));
    3592:	f004 000f 	and.w	r0, r4, #15
    3596:	f7ff ff89 	bl	34ac <LCD_writeControlReg>

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    359a:	9803      	ldr	r0, [sp, #12]
    359c:	a902      	add	r1, sp, #8
    359e:	aa03      	add	r2, sp, #12
    35a0:	f003 fe7a 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    35a4:	9802      	ldr	r0, [sp, #8]
    35a6:	7803      	ldrb	r3, [r0, #0]
    35a8:	b14b      	cbz	r3, 35be <cliFunc_lcdDisp+0x72>
			break;

		uint8_t value = numToInt( arg1Ptr );
    35aa:	f004 fa07 	bl	79bc <numToInt>
    35ae:	ab04      	add	r3, sp, #16

		// Write buffer to SPI
		SPI_write( &value, 1 );
    35b0:	2101      	movs	r1, #1

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
			break;

		uint8_t value = numToInt( arg1Ptr );
    35b2:	f803 0d09 	strb.w	r0, [r3, #-9]!

		// Write buffer to SPI
		SPI_write( &value, 1 );
    35b6:	4618      	mov	r0, r3
    35b8:	f7ff ff56 	bl	3468 <SPI_write>
	}
    35bc:	e7ed      	b.n	359a <cliFunc_lcdDisp+0x4e>
}
    35be:	b005      	add	sp, #20
    35c0:	bd30      	pop	{r4, r5, pc}

000035c2 <LCD_writeDisplayReg>:

// Write to display register
// Pages 0-7 normal display
// Page  8   icon buffer
void LCD_writeDisplayReg( uint8_t page, uint8_t *buffer, uint8_t len )
{
    35c2:	b538      	push	{r3, r4, r5, lr}
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    35c4:	f000 000f 	and.w	r0, r0, #15
    35c8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0

// Write to display register
// Pages 0-7 normal display
// Page  8   icon buffer
void LCD_writeDisplayReg( uint8_t page, uint8_t *buffer, uint8_t len )
{
    35cc:	460c      	mov	r4, r1
    35ce:	4615      	mov	r5, r2
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    35d0:	f7ff ff6c 	bl	34ac <LCD_writeControlReg>

	// Set display start line
	LCD_writeControlReg( 0x40 );
    35d4:	2040      	movs	r0, #64	; 0x40
    35d6:	f7ff ff69 	bl	34ac <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    35da:	2010      	movs	r0, #16
    35dc:	f7ff ff66 	bl	34ac <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    35e0:	2000      	movs	r0, #0
    35e2:	f7ff ff63 	bl	34ac <LCD_writeControlReg>

	// Write buffer to SPI
	SPI_write( buffer, len );
    35e6:	4620      	mov	r0, r4
    35e8:	4629      	mov	r1, r5
}
    35ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// Reset Column Address
	LCD_writeControlReg( 0x10 );
	LCD_writeControlReg( 0x00 );

	// Write buffer to SPI
	SPI_write( buffer, len );
    35ee:	f7ff bf3b 	b.w	3468 <SPI_write>
    35f2:	0000      	movs	r0, r0

000035f4 <cliFunc_lcdTest>:
{
	LCD_initialize();
}

void cliFunc_lcdTest( char* args )
{
    35f4:	b510      	push	{r4, lr}
    35f6:	2400      	movs	r4, #0
	// Write default image
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    35f8:	4905      	ldr	r1, [pc, #20]	; (3610 <cliFunc_lcdTest+0x1c>)
    35fa:	b2e0      	uxtb	r0, r4
    35fc:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    3600:	2280      	movs	r2, #128	; 0x80
    3602:	3401      	adds	r4, #1
    3604:	f7ff ffdd 	bl	35c2 <LCD_writeDisplayReg>
}

void cliFunc_lcdTest( char* args )
{
	// Write default image
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3608:	2c04      	cmp	r4, #4
    360a:	d1f5      	bne.n	35f8 <cliFunc_lcdTest+0x4>
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
}
    360c:	bd10      	pop	{r4, pc}
    360e:	bf00      	nop
    3610:	00008979 	.word	0x00008979

00003614 <LCD_clear>:
	while ( SPI0_TxFIFO_CNT != 0 );
}

// Clear Display
void LCD_clear()
{
    3614:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3616:	2400      	movs	r4, #0
}

inline void LCD_clearPage( uint8_t page )
{
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    3618:	f064 004f 	orn	r0, r4, #79	; 0x4f
    361c:	b2c0      	uxtb	r0, r0
    361e:	f7ff ff45 	bl	34ac <LCD_writeControlReg>

	// Set display start line
	LCD_writeControlReg( 0x40 );
    3622:	2040      	movs	r0, #64	; 0x40
    3624:	f7ff ff42 	bl	34ac <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    3628:	2010      	movs	r0, #16
    362a:	f7ff ff3f 	bl	34ac <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    362e:	2000      	movs	r0, #0
    3630:	f7ff ff3c 	bl	34ac <LCD_writeControlReg>
    3634:	2581      	movs	r5, #129	; 0x81

	for ( uint8_t page_reg = 0; page_reg < LCD_PAGE_LEN; page_reg++ )
    3636:	3d01      	subs	r5, #1
    3638:	d007      	beq.n	364a <LCD_clear+0x36>
	{
		uint8_t byte = 0;
    363a:	a802      	add	r0, sp, #8
    363c:	2300      	movs	r3, #0
    363e:	f800 3d01 	strb.w	r3, [r0, #-1]!

		// Write buffer to SPI
		SPI_write( &byte, 1 );
    3642:	2101      	movs	r1, #1
    3644:	f7ff ff10 	bl	3468 <SPI_write>
    3648:	e7f5      	b.n	3636 <LCD_clear+0x22>
	}

	// Wait for TxFIFO to be empty
	while ( SPI0_TxFIFO_CNT != 0 );
    364a:	4b0b      	ldr	r3, [pc, #44]	; (3678 <LCD_clear+0x64>)
    364c:	681d      	ldr	r5, [r3, #0]
    364e:	f3c5 3503 	ubfx	r5, r5, #12, #4
    3652:	2d00      	cmp	r5, #0
    3654:	d1f9      	bne.n	364a <LCD_clear+0x36>
    3656:	3401      	adds	r4, #1

// Clear Display
void LCD_clear()
{
	// Setup each page
	for ( uint8_t page = 0; page < LCD_TOTAL_PAGES; page++ )
    3658:	2c09      	cmp	r4, #9
    365a:	d1dd      	bne.n	3618 <LCD_clear+0x4>
		LCD_clearPage( page );
	}

	// Reset Page, Start Line, and Column Address
	// Page
	LCD_writeControlReg( 0xB0 );
    365c:	20b0      	movs	r0, #176	; 0xb0
    365e:	f7ff ff25 	bl	34ac <LCD_writeControlReg>

	// Start Line
	LCD_writeControlReg( 0x40 );
    3662:	2040      	movs	r0, #64	; 0x40
    3664:	f7ff ff22 	bl	34ac <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    3668:	2010      	movs	r0, #16
    366a:	f7ff ff1f 	bl	34ac <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    366e:	4628      	mov	r0, r5
    3670:	f7ff ff1c 	bl	34ac <LCD_writeControlReg>
}
    3674:	b003      	add	sp, #12
    3676:	bd30      	pop	{r4, r5, pc}
    3678:	4002c02c 	.word	0x4002c02c

0000367c <LCD_initialize>:

// Intialize display
void LCD_initialize()
{
    367c:	b508      	push	{r3, lr}
	// ADC Select (Normal)
	LCD_writeControlReg( 0xA0 );
    367e:	20a0      	movs	r0, #160	; 0xa0
    3680:	f7ff ff14 	bl	34ac <LCD_writeControlReg>

	// LCD Off
	LCD_writeControlReg( 0xAE );
    3684:	20ae      	movs	r0, #174	; 0xae
    3686:	f7ff ff11 	bl	34ac <LCD_writeControlReg>

	// COM Scan Output Direction
	LCD_writeControlReg( 0xC0 );
    368a:	20c0      	movs	r0, #192	; 0xc0
    368c:	f7ff ff0e 	bl	34ac <LCD_writeControlReg>

	// LCD Bias (1/6 bias)
	LCD_writeControlReg( 0xA2 );
    3690:	20a2      	movs	r0, #162	; 0xa2
    3692:	f7ff ff0b 	bl	34ac <LCD_writeControlReg>

	// Power Supply Operating Mode (Internal Only)
	LCD_writeControlReg( 0x2F );
    3696:	202f      	movs	r0, #47	; 0x2f
    3698:	f7ff ff08 	bl	34ac <LCD_writeControlReg>

	// Internal Rb/Ra Ratio
	LCD_writeControlReg( 0x26 );
    369c:	2026      	movs	r0, #38	; 0x26
    369e:	f7ff ff05 	bl	34ac <LCD_writeControlReg>

	// Reset
	LCD_writeControlReg( 0xE2 );
    36a2:	20e2      	movs	r0, #226	; 0xe2
    36a4:	f7ff ff02 	bl	34ac <LCD_writeControlReg>

	// Electric volume mode set, and value
	LCD_writeControlReg( 0x81 );
    36a8:	2081      	movs	r0, #129	; 0x81
    36aa:	f7ff feff 	bl	34ac <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    36ae:	2000      	movs	r0, #0
    36b0:	f7ff fefc 	bl	34ac <LCD_writeControlReg>

	// LCD On
	LCD_writeControlReg( 0xAF );
    36b4:	20af      	movs	r0, #175	; 0xaf
    36b6:	f7ff fef9 	bl	34ac <LCD_writeControlReg>

	// Clear Display RAM
	LCD_clear();
}
    36ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// LCD On
	LCD_writeControlReg( 0xAF );

	// Clear Display RAM
	LCD_clear();
    36be:	f7ff bfa9 	b.w	3614 <LCD_clear>

000036c2 <cliFunc_lcdInit>:

// ----- CLI Command Functions -----

void cliFunc_lcdInit( char* args )
{
	LCD_initialize();
    36c2:	f7ff bfdb 	b.w	367c <LCD_initialize>
    36c6:	0000      	movs	r0, r0

000036c8 <LCD_setup>:
	LCD_clear();
}

// Setup
inline void LCD_setup()
{
    36c8:	b538      	push	{r3, r4, r5, lr}
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    36ca:	4d35      	ldr	r5, [pc, #212]	; (37a0 <LCD_setup+0xd8>)

// Setup
inline void LCD_setup()
{
	// Register Scan CLI dictionary
	CLI_registerDictionary( lcdCLIDict, lcdCLIDictName );
    36cc:	4835      	ldr	r0, [pc, #212]	; (37a4 <LCD_setup+0xdc>)
    36ce:	4936      	ldr	r1, [pc, #216]	; (37a8 <LCD_setup+0xe0>)
    36d0:	f003 fe58 	bl	7384 <CLI_registerDictionary>
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    36d4:	682b      	ldr	r3, [r5, #0]

	// Setup MOSI (SOUT) and SCLK (SCK)
	PORTC_PCR6 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    36d6:	4a35      	ldr	r2, [pc, #212]	; (37ac <LCD_setup+0xe4>)
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    36d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    36dc:	602b      	str	r3, [r5, #0]

	// Setup MOSI (SOUT) and SCLK (SCK)
	PORTC_PCR6 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    36de:	f44f 7310 	mov.w	r3, #576	; 0x240
    36e2:	6013      	str	r3, [r2, #0]
	PORTC_PCR5 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    36e4:	f842 3c04 	str.w	r3, [r2, #-4]

	// Setup SS (PCS)
	PORTC_PCR4 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    36e8:	f842 3c08 	str.w	r3, [r2, #-8]

	// Master Mode, CS0
	SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(1);
    36ec:	4b30      	ldr	r3, [pc, #192]	; (37b0 <LCD_setup+0xe8>)
    36ee:	4a31      	ldr	r2, [pc, #196]	; (37b4 <LCD_setup+0xec>)
    36f0:	601a      	str	r2, [r3, #0]

	// DSPI Clock and Transfer Attributes
	// Frame Size: 8 bits
	// MSB First
	// CLK Low by default
	SPI0_CTAR0 = SPI_CTAR_FMSZ(7)
    36f2:	4a31      	ldr	r2, [pc, #196]	; (37b8 <LCD_setup+0xf0>)
    36f4:	60da      	str	r2, [r3, #12]
	// Initialize SPI
	SPI_setup();

	// Setup Register Control Signal (A0)
	// Start in display register mode (1)
	GPIOC_PDDR |= (1<<7);
    36f6:	4a31      	ldr	r2, [pc, #196]	; (37bc <LCD_setup+0xf4>)
    36f8:	6813      	ldr	r3, [r2, #0]
    36fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    36fe:	6013      	str	r3, [r2, #0]
	PORTC_PCR7 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3700:	4b2f      	ldr	r3, [pc, #188]	; (37c0 <LCD_setup+0xf8>)
    3702:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3706:	6019      	str	r1, [r3, #0]
	GPIOC_PSOR |= (1<<7);
    3708:	f503 2334 	add.w	r3, r3, #737280	; 0xb4000
    370c:	3368      	adds	r3, #104	; 0x68
    370e:	6818      	ldr	r0, [r3, #0]
    3710:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    3714:	6018      	str	r0, [r3, #0]

	// Setup LCD Reset pin (RST)
	// 0 - Reset, 1 - Normal Operation
	// Start in normal mode (1)
	GPIOC_PDDR |= (1<<8);
    3716:	6810      	ldr	r0, [r2, #0]
    3718:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    371c:	6010      	str	r0, [r2, #0]
	PORTC_PCR8 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    371e:	f5a2 2234 	sub.w	r2, r2, #737280	; 0xb4000
    3722:	3a74      	subs	r2, #116	; 0x74
    3724:	6011      	str	r1, [r2, #0]
	GPIOC_PSOR |= (1<<8);
    3726:	681a      	ldr	r2, [r3, #0]
    3728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    372c:	601a      	str	r2, [r3, #0]

	// Run LCD intialization sequence
	LCD_initialize();
    372e:	f7ff ffa5 	bl	367c <LCD_initialize>
    3732:	2400      	movs	r4, #0

	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    3734:	4923      	ldr	r1, [pc, #140]	; (37c4 <LCD_setup+0xfc>)
    3736:	b2e0      	uxtb	r0, r4
    3738:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    373c:	2280      	movs	r2, #128	; 0x80
    373e:	3401      	adds	r4, #1
    3740:	f7ff ff3f 	bl	35c2 <LCD_writeDisplayReg>

	// Run LCD intialization sequence
	LCD_initialize();

	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3744:	2c04      	cmp	r4, #4
    3746:	d1f5      	bne.n	3734 <LCD_setup+0x6c>
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );

	// Setup Backlight
	SIM_SCGC6 |= SIM_SCGC6_FTM0;
    3748:	682b      	ldr	r3, [r5, #0]
	// System clock, /w prescalar setting
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS( STLcdBacklightPrescalar_define );

	// Red
	FTM0_C0V = STLcdBacklightRed_define;
	PORTC_PCR1 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    374a:	491f      	ldr	r1, [pc, #124]	; (37c8 <LCD_setup+0x100>)
	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );

	// Setup Backlight
	SIM_SCGC6 |= SIM_SCGC6_FTM0;
    374c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3750:	602b      	str	r3, [r5, #0]
	FTM0_CNT = 0; // Reset counter
    3752:	4b1e      	ldr	r3, [pc, #120]	; (37cc <LCD_setup+0x104>)
    3754:	2200      	movs	r2, #0
    3756:	601a      	str	r2, [r3, #0]

	// PWM Period
	// 16-bit maximum
	FTM0_MOD = 0xFFFF;
    3758:	f64f 72ff 	movw	r2, #65535	; 0xffff
    375c:	605a      	str	r2, [r3, #4]

	// Set FTM to PWM output - Edge Aligned, Low-true pulses
	FTM0_C0SC = 0x24; // MSnB:MSnA = 10, ELSnB:ELSnA = 01
    375e:	4a1c      	ldr	r2, [pc, #112]	; (37d0 <LCD_setup+0x108>)
    3760:	2324      	movs	r3, #36	; 0x24
    3762:	6013      	str	r3, [r2, #0]
	FTM0_C1SC = 0x24;
    3764:	6093      	str	r3, [r2, #8]
	FTM0_C2SC = 0x24;
    3766:	6113      	str	r3, [r2, #16]
	// 7 - 562 500  Hz ->   4 Hz
	// Using a higher pre-scalar without flicker is possible but FTM0_MOD will need to be reduced
	// Which will reduce the brightness range

	// System clock, /w prescalar setting
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS( STLcdBacklightPrescalar_define );
    3768:	4b1a      	ldr	r3, [pc, #104]	; (37d4 <LCD_setup+0x10c>)
    376a:	2208      	movs	r2, #8
    376c:	601a      	str	r2, [r3, #0]

	// Red
	FTM0_C0V = STLcdBacklightRed_define;
    376e:	f640 72ff 	movw	r2, #4095	; 0xfff
    3772:	611a      	str	r2, [r3, #16]
	PORTC_PCR1 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    3774:	f240 4344 	movw	r3, #1092	; 0x444
    3778:	600b      	str	r3, [r1, #0]

	// Green
	FTM0_C1V = STLcdBacklightGreen_define;
    377a:	f5a1 3197 	sub.w	r1, r1, #77312	; 0x12e00
    377e:	f5a1 71f6 	sub.w	r1, r1, #492	; 0x1ec
    3782:	600a      	str	r2, [r1, #0]
	PORTC_PCR2 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    3784:	f501 3197 	add.w	r1, r1, #77312	; 0x12e00
    3788:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
    378c:	600b      	str	r3, [r1, #0]

	// Blue
	FTM0_C2V = STLcdBacklightBlue_define;
    378e:	f5a1 3197 	sub.w	r1, r1, #77312	; 0x12e00
    3792:	f5a1 71f4 	sub.w	r1, r1, #488	; 0x1e8
    3796:	600a      	str	r2, [r1, #0]
	PORTC_PCR3 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    3798:	4a0f      	ldr	r2, [pc, #60]	; (37d8 <LCD_setup+0x110>)
    379a:	6013      	str	r3, [r2, #0]
    379c:	bd38      	pop	{r3, r4, r5, pc}
    379e:	bf00      	nop
    37a0:	4004803c 	.word	0x4004803c
    37a4:	0000884c 	.word	0x0000884c
    37a8:	00008832 	.word	0x00008832
    37ac:	4004b018 	.word	0x4004b018
    37b0:	4002c000 	.word	0x4002c000
    37b4:	80010000 	.word	0x80010000
    37b8:	38007777 	.word	0x38007777
    37bc:	400ff094 	.word	0x400ff094
    37c0:	4004b01c 	.word	0x4004b01c
    37c4:	00008979 	.word	0x00008979
    37c8:	4004b004 	.word	0x4004b004
    37cc:	40038004 	.word	0x40038004
    37d0:	4003800c 	.word	0x4003800c
    37d4:	40038000 	.word	0x40038000
    37d8:	4004b00c 	.word	0x4004b00c

000037dc <LCD_scan>:

// LCD State processing loop
inline uint8_t LCD_scan()
{
	return 0;
}
    37dc:	2000      	movs	r0, #0
    37de:	4770      	bx	lr

000037e0 <LCD_layerStackExact_capability>:
typedef struct LCD_layerStackExact_args {
	uint8_t numArgs;
	uint16_t layers[4];
} LCD_layerStackExact_args;
void LCD_layerStackExact_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    37e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    37e2:	29ff      	cmp	r1, #255	; 0xff
typedef struct LCD_layerStackExact_args {
	uint8_t numArgs;
	uint16_t layers[4];
} LCD_layerStackExact_args;
void LCD_layerStackExact_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    37e4:	f2ad 5d44 	subw	sp, sp, #1348	; 0x544
    37e8:	4614      	mov	r4, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    37ea:	d105      	bne.n	37f8 <LCD_layerStackExact_capability+0x18>
    37ec:	28ff      	cmp	r0, #255	; 0xff
    37ee:	d103      	bne.n	37f8 <LCD_layerStackExact_capability+0x18>
	{
		print("LCD_layerStackExact_capability(num,layer1,layer2,layer3,layer4)");
    37f0:	483a      	ldr	r0, [pc, #232]	; (38dc <LCD_layerStackExact_capability+0xfc>)
    37f2:	f004 f805 	bl	7800 <_print>
    37f6:	e06e      	b.n	38d6 <LCD_layerStackExact_capability+0xf6>

	// Read arguments
	LCD_layerStackExact_args *stack_args = (LCD_layerStackExact_args*)args;

	// Number data for LCD
	const uint8_t numbers[10][128] = {
    37f8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    37fc:	a810      	add	r0, sp, #64	; 0x40
    37fe:	4938      	ldr	r1, [pc, #224]	; (38e0 <LCD_layerStackExact_capability+0x100>)
    3800:	f7fe feba 	bl	2578 <memcpy>
		{ STLcdNumber8_define },
		{ STLcdNumber9_define },
	};

	// Color data for numbers
	const uint16_t colors[10][3] = {
    3804:	4b37      	ldr	r3, [pc, #220]	; (38e4 <LCD_layerStackExact_capability+0x104>)
    3806:	ae01      	add	r6, sp, #4
    3808:	4632      	mov	r2, r6
    380a:	f103 0738 	add.w	r7, r3, #56	; 0x38
    380e:	6818      	ldr	r0, [r3, #0]
    3810:	6859      	ldr	r1, [r3, #4]
    3812:	4615      	mov	r5, r2
    3814:	c503      	stmia	r5!, {r0, r1}
    3816:	3308      	adds	r3, #8
    3818:	42bb      	cmp	r3, r7
    381a:	462a      	mov	r2, r5
    381c:	d1f7      	bne.n	380e <LCD_layerStackExact_capability+0x2e>
    381e:	6818      	ldr	r0, [r3, #0]
    3820:	6028      	str	r0, [r5, #0]
		{ STLcdNumber8Color_define },
		{ STLcdNumber9Color_define },
	};

	// Only display if there are layers active
	if ( stack_args->numArgs > 0 )
    3822:	7822      	ldrb	r2, [r4, #0]
    3824:	4d30      	ldr	r5, [pc, #192]	; (38e8 <LCD_layerStackExact_capability+0x108>)
    3826:	4831      	ldr	r0, [pc, #196]	; (38ec <LCD_layerStackExact_capability+0x10c>)
    3828:	4931      	ldr	r1, [pc, #196]	; (38f0 <LCD_layerStackExact_capability+0x110>)
    382a:	2a00      	cmp	r2, #0
    382c:	d043      	beq.n	38b6 <LCD_layerStackExact_capability+0xd6>
	{
		// Set the color according to the "top-of-stack" layer
		uint16_t layerIndex = stack_args->layers[0];
		FTM0_C0V = colors[ layerIndex ][0];
    382e:	8863      	ldrh	r3, [r4, #2]
    3830:	2206      	movs	r2, #6
    3832:	435a      	muls	r2, r3
    3834:	18b3      	adds	r3, r6, r2
    3836:	5ab2      	ldrh	r2, [r6, r2]
    3838:	602a      	str	r2, [r5, #0]
		FTM0_C1V = colors[ layerIndex ][1];
    383a:	885a      	ldrh	r2, [r3, #2]
		FTM0_C2V = colors[ layerIndex ][2];
    383c:	889b      	ldrh	r3, [r3, #4]
	if ( stack_args->numArgs > 0 )
	{
		// Set the color according to the "top-of-stack" layer
		uint16_t layerIndex = stack_args->layers[0];
		FTM0_C0V = colors[ layerIndex ][0];
		FTM0_C1V = colors[ layerIndex ][1];
    383e:	6002      	str	r2, [r0, #0]
		FTM0_C2V = colors[ layerIndex ][2];
    3840:	2500      	movs	r5, #0
    3842:	600b      	str	r3, [r1, #0]
		// XXX Many of the values here are hard-coded
		//     Eventually a proper font rendering engine should take care of things like this... -HaaTa
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		{
			// Set the register page
			LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    3844:	f065 004f 	orn	r0, r5, #79	; 0x4f
    3848:	b2c0      	uxtb	r0, r0
    384a:	f7ff fe2f 	bl	34ac <LCD_writeControlReg>

			// Set starting address
			LCD_writeControlReg( 0x10 );
    384e:	2010      	movs	r0, #16
    3850:	f7ff fe2c 	bl	34ac <LCD_writeControlReg>
			LCD_writeControlReg( 0x00 );
    3854:	2000      	movs	r0, #0
    3856:	f7ff fe29 	bl	34ac <LCD_writeControlReg>
    385a:	016f      	lsls	r7, r5, #5

			// Write data
			for ( uint16_t layer = 0; layer < stack_args->numArgs; layer++ )
    385c:	2600      	movs	r6, #0
    385e:	7822      	ldrb	r2, [r4, #0]
    3860:	b2b3      	uxth	r3, r6
    3862:	429a      	cmp	r2, r3
    3864:	d90e      	bls.n	3884 <LCD_layerStackExact_capability+0xa4>
			{
				layerIndex = stack_args->layers[ layer ];
    3866:	eb04 0343 	add.w	r3, r4, r3, lsl #1
				{
					layerIndex = 0;
				}

				// Write page of number to display
				SPI_write( (uint8_t*)&numbers[ layerIndex ][ page * 32 ], 32 );
    386a:	2120      	movs	r1, #32
			LCD_writeControlReg( 0x00 );

			// Write data
			for ( uint16_t layer = 0; layer < stack_args->numArgs; layer++ )
			{
				layerIndex = stack_args->layers[ layer ];
    386c:	8858      	ldrh	r0, [r3, #2]

				// Default to 0, if over 9
				if ( layerIndex > 9 )
				{
					layerIndex = 0;
    386e:	280a      	cmp	r0, #10
    3870:	bf28      	it	cs
    3872:	2000      	movcs	r0, #0
				}

				// Write page of number to display
				SPI_write( (uint8_t*)&numbers[ layerIndex ][ page * 32 ], 32 );
    3874:	ab10      	add	r3, sp, #64	; 0x40
    3876:	eb07 10c0 	add.w	r0, r7, r0, lsl #7
    387a:	4418      	add	r0, r3
    387c:	f7ff fdf4 	bl	3468 <SPI_write>
    3880:	3601      	adds	r6, #1
    3882:	e7ec      	b.n	385e <LCD_layerStackExact_capability+0x7e>
			}

			// Blank out rest of display
			uint8_t data = 0;
    3884:	2600      	movs	r6, #0
    3886:	f88d 6003 	strb.w	r6, [sp, #3]
			for ( uint8_t c = 0; c < 4 - stack_args->numArgs; c++ )
    388a:	7823      	ldrb	r3, [r4, #0]
    388c:	b2f2      	uxtb	r2, r6
    388e:	f1c3 0304 	rsb	r3, r3, #4
    3892:	429a      	cmp	r2, r3
    3894:	da0b      	bge.n	38ae <LCD_layerStackExact_capability+0xce>
    3896:	2720      	movs	r7, #32
			{
				for ( uint8_t byte = 0; byte < 32; byte++ )
				{
					SPI_write( &data, 1 );
    3898:	f10d 0003 	add.w	r0, sp, #3
    389c:	2101      	movs	r1, #1
    389e:	3f01      	subs	r7, #1
    38a0:	f7ff fde2 	bl	3468 <SPI_write>

			// Blank out rest of display
			uint8_t data = 0;
			for ( uint8_t c = 0; c < 4 - stack_args->numArgs; c++ )
			{
				for ( uint8_t byte = 0; byte < 32; byte++ )
    38a4:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    38a8:	d1f6      	bne.n	3898 <LCD_layerStackExact_capability+0xb8>
    38aa:	3601      	adds	r6, #1
    38ac:	e7ed      	b.n	388a <LCD_layerStackExact_capability+0xaa>
    38ae:	3501      	adds	r5, #1
		FTM0_C2V = colors[ layerIndex ][2];

		// Iterate through each of the pages
		// XXX Many of the values here are hard-coded
		//     Eventually a proper font rendering engine should take care of things like this... -HaaTa
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    38b0:	2d04      	cmp	r5, #4
    38b2:	d1c7      	bne.n	3844 <LCD_layerStackExact_capability+0x64>
    38b4:	e00f      	b.n	38d6 <LCD_layerStackExact_capability+0xf6>
		}
	}
	else
	{
		// Set default backlight
		FTM0_C0V = STLcdBacklightRed_define;
    38b6:	f640 73ff 	movw	r3, #4095	; 0xfff
    38ba:	602b      	str	r3, [r5, #0]
		FTM0_C1V = STLcdBacklightGreen_define;
		FTM0_C2V = STLcdBacklightBlue_define;
    38bc:	4614      	mov	r4, r2
	}
	else
	{
		// Set default backlight
		FTM0_C0V = STLcdBacklightRed_define;
		FTM0_C1V = STLcdBacklightGreen_define;
    38be:	6003      	str	r3, [r0, #0]
		FTM0_C2V = STLcdBacklightBlue_define;
    38c0:	600b      	str	r3, [r1, #0]

		// Write default image
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
			LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    38c2:	490c      	ldr	r1, [pc, #48]	; (38f4 <LCD_layerStackExact_capability+0x114>)
    38c4:	b2e0      	uxtb	r0, r4
    38c6:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    38ca:	2280      	movs	r2, #128	; 0x80
    38cc:	3401      	adds	r4, #1
    38ce:	f7ff fe78 	bl	35c2 <LCD_writeDisplayReg>
		FTM0_C0V = STLcdBacklightRed_define;
		FTM0_C1V = STLcdBacklightGreen_define;
		FTM0_C2V = STLcdBacklightBlue_define;

		// Write default image
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    38d2:	2c04      	cmp	r4, #4
    38d4:	d1f5      	bne.n	38c2 <LCD_layerStackExact_capability+0xe2>
			LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
	}
}
    38d6:	f20d 5d44 	addw	sp, sp, #1348	; 0x544
    38da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38dc:	000088b1 	.word	0x000088b1
    38e0:	000082dc 	.word	0x000082dc
    38e4:	000087dc 	.word	0x000087dc
    38e8:	40038010 	.word	0x40038010
    38ec:	40038018 	.word	0x40038018
    38f0:	40038020 	.word	0x40038020
    38f4:	00008979 	.word	0x00008979

000038f8 <LCD_layerStack_capability>:
// Determines the current layer stack, and sets the LCD output accordingly
// Will only work on a master node when using the interconnect (use LCD_layerStackExact_capability instead)
uint16_t LCD_layerStack_prevSize = 0;
uint16_t LCD_layerStack_prevTop  = 0;
void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    38f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    38fc:	29ff      	cmp	r1, #255	; 0xff
// Determines the current layer stack, and sets the LCD output accordingly
// Will only work on a master node when using the interconnect (use LCD_layerStackExact_capability instead)
uint16_t LCD_layerStack_prevSize = 0;
uint16_t LCD_layerStack_prevTop  = 0;
void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    38fe:	b086      	sub	sp, #24
    3900:	4606      	mov	r6, r0
    3902:	460d      	mov	r5, r1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3904:	d105      	bne.n	3912 <LCD_layerStack_capability+0x1a>
    3906:	28ff      	cmp	r0, #255	; 0xff
    3908:	d103      	bne.n	3912 <LCD_layerStack_capability+0x1a>
	{
		print("LCD_layerStack_capability()");
    390a:	4823      	ldr	r0, [pc, #140]	; (3998 <LCD_layerStack_capability+0xa0>)
    390c:	f003 ff78 	bl	7800 <_print>
		return;
    3910:	e03f      	b.n	3992 <LCD_layerStack_capability+0x9a>
	// Parse the layer stack, top to bottom
	extern uint16_t macroLayerIndexStack[];
	extern uint16_t macroLayerIndexStackSize;

	// Ignore if the stack size hasn't changed and the top of the stack is the same
	if ( macroLayerIndexStackSize == LCD_layerStack_prevSize
    3912:	4922      	ldr	r1, [pc, #136]	; (399c <LCD_layerStack_capability+0xa4>)
    3914:	4a22      	ldr	r2, [pc, #136]	; (39a0 <LCD_layerStack_capability+0xa8>)
    3916:	880b      	ldrh	r3, [r1, #0]
    3918:	8810      	ldrh	r0, [r2, #0]
    391a:	4f22      	ldr	r7, [pc, #136]	; (39a4 <LCD_layerStack_capability+0xac>)
    391c:	4298      	cmp	r0, r3
    391e:	460c      	mov	r4, r1
    3920:	4610      	mov	r0, r2
    3922:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
    3926:	4a20      	ldr	r2, [pc, #128]	; (39a8 <LCD_layerStack_capability+0xb0>)
    3928:	d105      	bne.n	3936 <LCD_layerStack_capability+0x3e>
		&& macroLayerIndexStack[macroLayerIndexStackSize - 1] == LCD_layerStack_prevTop )
    392a:	f837 8011 	ldrh.w	r8, [r7, r1, lsl #1]
    392e:	f8b2 c000 	ldrh.w	ip, [r2]
    3932:	45e0      	cmp	r8, ip
    3934:	d02d      	beq.n	3992 <LCD_layerStack_capability+0x9a>
	{
		return;
	}
	LCD_layerStack_prevSize = macroLayerIndexStackSize;
    3936:	8003      	strh	r3, [r0, #0]
	LCD_layerStack_prevTop  = macroLayerIndexStack[macroLayerIndexStackSize - 1];
    3938:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
    393c:	8013      	strh	r3, [r2, #0]

	LCD_layerStackExact_args stack_args;
	memset( stack_args.layers, 0, sizeof( stack_args.layers ) );
    393e:	f10d 000e 	add.w	r0, sp, #14
    3942:	2100      	movs	r1, #0
    3944:	2208      	movs	r2, #8
    3946:	f7fe fe0f 	bl	2568 <memset>

	// Use the LCD_layerStackExact_capability to set the LCD using the determined stack
	// Construct argument set for capability
	stack_args.numArgs = macroLayerIndexStackSize;
    394a:	8823      	ldrh	r3, [r4, #0]
    394c:	f88d 300c 	strb.w	r3, [sp, #12]
	for ( uint16_t layer = 1; layer <= macroLayerIndexStackSize; layer++ )
    3950:	2401      	movs	r4, #1
    3952:	429c      	cmp	r4, r3
    3954:	d80a      	bhi.n	396c <LCD_layerStack_capability+0x74>
	{
		stack_args.layers[ layer - 1 ] = macroLayerIndexStack[ macroLayerIndexStackSize - layer ];
    3956:	a906      	add	r1, sp, #24
    3958:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    395c:	1b19      	subs	r1, r3, r4
	memset( stack_args.layers, 0, sizeof( stack_args.layers ) );

	// Use the LCD_layerStackExact_capability to set the LCD using the determined stack
	// Construct argument set for capability
	stack_args.numArgs = macroLayerIndexStackSize;
	for ( uint16_t layer = 1; layer <= macroLayerIndexStackSize; layer++ )
    395e:	3401      	adds	r4, #1
	{
		stack_args.layers[ layer - 1 ] = macroLayerIndexStack[ macroLayerIndexStackSize - layer ];
    3960:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    3964:	f822 1c0c 	strh.w	r1, [r2, #-12]
	memset( stack_args.layers, 0, sizeof( stack_args.layers ) );

	// Use the LCD_layerStackExact_capability to set the LCD using the determined stack
	// Construct argument set for capability
	stack_args.numArgs = macroLayerIndexStackSize;
	for ( uint16_t layer = 1; layer <= macroLayerIndexStackSize; layer++ )
    3968:	b2a4      	uxth	r4, r4
    396a:	e7f2      	b.n	3952 <LCD_layerStack_capability+0x5a>
		stack_args.layers[ layer - 1 ] = macroLayerIndexStack[ macroLayerIndexStackSize - layer ];
	}

	// Only deal with the interconnect if it has been compiled in
#if defined(ConnectEnabled_define)
	if ( Connect_master )
    396c:	4b0f      	ldr	r3, [pc, #60]	; (39ac <LCD_layerStack_capability+0xb4>)
    396e:	781b      	ldrb	r3, [r3, #0]
    3970:	ac03      	add	r4, sp, #12
    3972:	b14b      	cbz	r3, 3988 <LCD_layerStack_capability+0x90>
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    3974:	4b0e      	ldr	r3, [pc, #56]	; (39b0 <LCD_layerStack_capability+0xb8>)
    3976:	791b      	ldrb	r3, [r3, #4]
    3978:	20ff      	movs	r0, #255	; 0xff
    397a:	e88d 0018 	stmia.w	sp, {r3, r4}
    397e:	2100      	movs	r1, #0
    3980:	4632      	mov	r2, r6
    3982:	462b      	mov	r3, r5
    3984:	f000 fcf4 	bl	4370 <Connect_send_RemoteCapability>
			(uint8_t*)&stack_args
		);
	}
#endif
	// Call LCD_layerStackExact directly
	LCD_layerStackExact_capability( state, stateType, (uint8_t*)&stack_args );
    3988:	4630      	mov	r0, r6
    398a:	4629      	mov	r1, r5
    398c:	4622      	mov	r2, r4
    398e:	f7ff ff27 	bl	37e0 <LCD_layerStackExact_capability>
}
    3992:	b006      	add	sp, #24
    3994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3998:	000088f1 	.word	0x000088f1
    399c:	1fff916a 	.word	0x1fff916a
    39a0:	1fff8ff0 	.word	0x1fff8ff0
    39a4:	1fff916c 	.word	0x1fff916c
    39a8:	1fff8ff2 	.word	0x1fff8ff2
    39ac:	1fff9012 	.word	0x1fff9012
    39b0:	0000943c 	.word	0x0000943c

000039b4 <Connect_receive_Animation>:
	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_Animation( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    39b4:	b508      	push	{r3, lr}
	dbug_print("Animation");
    39b6:	4802      	ldr	r0, [pc, #8]	; (39c0 <Connect_receive_Animation+0xc>)
    39b8:	f003 ff22 	bl	7800 <_print>
	return 1;
}
    39bc:	2001      	movs	r0, #1
    39be:	bd08      	pop	{r3, pc}
    39c0:	00008cef 	.word	0x00008cef

000039c4 <cliFunc_connectDbg>:
		break;
	}
}

void cliFunc_connectDbg( char* args )
{
    39c4:	b508      	push	{r3, lr}
	print( NL );
    39c6:	4807      	ldr	r0, [pc, #28]	; (39e4 <cliFunc_connectDbg+0x20>)
    39c8:	f003 ff1a 	bl	7800 <_print>
	info_msg("Connect Debug Mode Toggle");
    39cc:	4806      	ldr	r0, [pc, #24]	; (39e8 <cliFunc_connectDbg+0x24>)
    39ce:	f003 ff17 	bl	7800 <_print>
	Connect_debug = !Connect_debug;
    39d2:	4b06      	ldr	r3, [pc, #24]	; (39ec <cliFunc_connectDbg+0x28>)
    39d4:	781a      	ldrb	r2, [r3, #0]
    39d6:	f1d2 0201 	rsbs	r2, r2, #1
    39da:	bf38      	it	cc
    39dc:	2200      	movcc	r2, #0
    39de:	701a      	strb	r2, [r3, #0]
    39e0:	bd08      	pop	{r3, pc}
    39e2:	bf00      	nop
    39e4:	0000b26f 	.word	0x0000b26f
    39e8:	00008d0e 	.word	0x00008d0e
    39ec:	1fff9009 	.word	0x1fff9009

000039f0 <Connect_receive_CableCheck>:
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    39f0:	880b      	ldrh	r3, [r1, #0]
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    39f2:	b570      	push	{r4, r5, r6, lr}
    39f4:	4616      	mov	r6, r2
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    39f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    39fa:	4293      	cmp	r3, r2
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    39fc:	4605      	mov	r5, r0
    39fe:	460c      	mov	r4, r1
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    3a00:	d116      	bne.n	3a30 <Connect_receive_CableCheck+0x40>
	{
		*pending_bytes = byte;

		if ( Connect_debug )
    3a02:	4b31      	ldr	r3, [pc, #196]	; (3ac8 <Connect_receive_CableCheck+0xd8>)
uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
	{
		*pending_bytes = byte;
    3a04:	8020      	strh	r0, [r4, #0]

		if ( Connect_debug )
    3a06:	781b      	ldrb	r3, [r3, #0]
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d03b      	beq.n	3a84 <Connect_receive_CableCheck+0x94>
		{
			dbug_msg("PENDING SET -> ");
    3a0c:	482f      	ldr	r0, [pc, #188]	; (3acc <Connect_receive_CableCheck+0xdc>)
    3a0e:	f003 fef7 	bl	7800 <_print>
			printHex( byte );
    3a12:	4628      	mov	r0, r5
    3a14:	2101      	movs	r1, #1
    3a16:	f003 ff7c 	bl	7912 <printHex_op>
			print(" ");
    3a1a:	482d      	ldr	r0, [pc, #180]	; (3ad0 <Connect_receive_CableCheck+0xe0>)
    3a1c:	f003 fef0 	bl	7800 <_print>
			printHex( *pending_bytes );
    3a20:	8820      	ldrh	r0, [r4, #0]
    3a22:	2101      	movs	r1, #1
    3a24:	f003 ff75 	bl	7912 <printHex_op>
			print( NL );
    3a28:	482a      	ldr	r0, [pc, #168]	; (3ad4 <Connect_receive_CableCheck+0xe4>)
    3a2a:	f003 fee9 	bl	7800 <_print>
    3a2e:	e029      	b.n	3a84 <Connect_receive_CableCheck+0x94>
		}
	}
	// Verify byte
	else
	{
		(*pending_bytes)--;
    3a30:	3b01      	subs	r3, #1

		// The argument bytes are always 0xD2 (11010010)
		if ( byte != 0xD2 )
    3a32:	28d2      	cmp	r0, #210	; 0xd2
		}
	}
	// Verify byte
	else
	{
		(*pending_bytes)--;
    3a34:	800b      	strh	r3, [r1, #0]

		// The argument bytes are always 0xD2 (11010010)
		if ( byte != 0xD2 )
    3a36:	d01e      	beq.n	3a76 <Connect_receive_CableCheck+0x86>
		{
			warn_print("Cable Fault!");
    3a38:	4827      	ldr	r0, [pc, #156]	; (3ad8 <Connect_receive_CableCheck+0xe8>)
    3a3a:	f003 fee1 	bl	7800 <_print>

			// Check which side of the chain
			if ( uart_num == UART_Slave )
    3a3e:	b93e      	cbnz	r6, 3a50 <Connect_receive_CableCheck+0x60>
			{
				Connect_cableFaultsSlave++;
    3a40:	4b26      	ldr	r3, [pc, #152]	; (3adc <Connect_receive_CableCheck+0xec>)
				Connect_cableOkSlave = 0;
				print(" Slave ");
    3a42:	4827      	ldr	r0, [pc, #156]	; (3ae0 <Connect_receive_CableCheck+0xf0>)
			warn_print("Cable Fault!");

			// Check which side of the chain
			if ( uart_num == UART_Slave )
			{
				Connect_cableFaultsSlave++;
    3a44:	681a      	ldr	r2, [r3, #0]
    3a46:	3201      	adds	r2, #1
    3a48:	601a      	str	r2, [r3, #0]
				Connect_cableOkSlave = 0;
    3a4a:	4b26      	ldr	r3, [pc, #152]	; (3ae4 <Connect_receive_CableCheck+0xf4>)
    3a4c:	701e      	strb	r6, [r3, #0]
    3a4e:	e007      	b.n	3a60 <Connect_receive_CableCheck+0x70>
				print(" Slave ");
			}
			else
			{
				Connect_cableFaultsMaster++;
    3a50:	4b25      	ldr	r3, [pc, #148]	; (3ae8 <Connect_receive_CableCheck+0xf8>)
				Connect_cableOkMaster = 0;
				print(" Master ");
    3a52:	4826      	ldr	r0, [pc, #152]	; (3aec <Connect_receive_CableCheck+0xfc>)
				Connect_cableOkSlave = 0;
				print(" Slave ");
			}
			else
			{
				Connect_cableFaultsMaster++;
    3a54:	681a      	ldr	r2, [r3, #0]
    3a56:	3201      	adds	r2, #1
    3a58:	601a      	str	r2, [r3, #0]
				Connect_cableOkMaster = 0;
    3a5a:	4b25      	ldr	r3, [pc, #148]	; (3af0 <Connect_receive_CableCheck+0x100>)
    3a5c:	2200      	movs	r2, #0
    3a5e:	701a      	strb	r2, [r3, #0]
				print(" Master ");
    3a60:	f003 fece 	bl	7800 <_print>
			}
			printHex( byte );
    3a64:	4628      	mov	r0, r5
    3a66:	2101      	movs	r1, #1
    3a68:	f003 ff53 	bl	7912 <printHex_op>
			print( NL );
    3a6c:	4819      	ldr	r0, [pc, #100]	; (3ad4 <Connect_receive_CableCheck+0xe4>)
    3a6e:	f003 fec7 	bl	7800 <_print>

			// Signal that the command should wait for a SYN again
			return 1;
    3a72:	2001      	movs	r0, #1
    3a74:	bd70      	pop	{r4, r5, r6, pc}
		}
		else
		{
			// Check which side of the chain
			if ( uart_num == UART_Slave )
    3a76:	b90e      	cbnz	r6, 3a7c <Connect_receive_CableCheck+0x8c>
			{
				Connect_cableChecksSlave++;
    3a78:	4b1e      	ldr	r3, [pc, #120]	; (3af4 <Connect_receive_CableCheck+0x104>)
    3a7a:	e000      	b.n	3a7e <Connect_receive_CableCheck+0x8e>
			}
			else
			{
				Connect_cableChecksMaster++;
    3a7c:	4b1e      	ldr	r3, [pc, #120]	; (3af8 <Connect_receive_CableCheck+0x108>)
    3a7e:	681a      	ldr	r2, [r3, #0]
    3a80:	3201      	adds	r2, #1
    3a82:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// If cable check was successful, set cable ok
	if ( *pending_bytes == 0 )
    3a84:	8823      	ldrh	r3, [r4, #0]
    3a86:	b92b      	cbnz	r3, 3a94 <Connect_receive_CableCheck+0xa4>
    3a88:	2301      	movs	r3, #1
	{
		if ( uart_num == UART_Slave )
    3a8a:	b90e      	cbnz	r6, 3a90 <Connect_receive_CableCheck+0xa0>
		{
			Connect_cableOkSlave = 1;
    3a8c:	4a15      	ldr	r2, [pc, #84]	; (3ae4 <Connect_receive_CableCheck+0xf4>)
    3a8e:	e000      	b.n	3a92 <Connect_receive_CableCheck+0xa2>
		}
		else
		{
			Connect_cableOkMaster = 1;
    3a90:	4a17      	ldr	r2, [pc, #92]	; (3af0 <Connect_receive_CableCheck+0x100>)
    3a92:	7013      	strb	r3, [r2, #0]
		}
	}

	if ( Connect_debug )
    3a94:	4b0c      	ldr	r3, [pc, #48]	; (3ac8 <Connect_receive_CableCheck+0xd8>)
    3a96:	781b      	ldrb	r3, [r3, #0]
    3a98:	b183      	cbz	r3, 3abc <Connect_receive_CableCheck+0xcc>
	{
		dbug_msg("CABLECHECK RECEIVE - ");
    3a9a:	4818      	ldr	r0, [pc, #96]	; (3afc <Connect_receive_CableCheck+0x10c>)
    3a9c:	f003 feb0 	bl	7800 <_print>
		printHex( byte );
    3aa0:	2101      	movs	r1, #1
    3aa2:	4628      	mov	r0, r5
    3aa4:	f003 ff35 	bl	7912 <printHex_op>
		print(" ");
    3aa8:	4809      	ldr	r0, [pc, #36]	; (3ad0 <Connect_receive_CableCheck+0xe0>)
    3aaa:	f003 fea9 	bl	7800 <_print>
		printHex( *pending_bytes );
    3aae:	8820      	ldrh	r0, [r4, #0]
    3ab0:	2101      	movs	r1, #1
    3ab2:	f003 ff2e 	bl	7912 <printHex_op>
		print( NL );
    3ab6:	4807      	ldr	r0, [pc, #28]	; (3ad4 <Connect_receive_CableCheck+0xe4>)
    3ab8:	f003 fea2 	bl	7800 <_print>
	}

	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
    3abc:	8820      	ldrh	r0, [r4, #0]
    3abe:	f1d0 0001 	rsbs	r0, r0, #1
    3ac2:	bf38      	it	cc
    3ac4:	2000      	movcc	r0, #0
}
    3ac6:	bd70      	pop	{r4, r5, r6, pc}
    3ac8:	1fff9009 	.word	0x1fff9009
    3acc:	00008d3a 	.word	0x00008d3a
    3ad0:	00008152 	.word	0x00008152
    3ad4:	0000b26f 	.word	0x0000b26f
    3ad8:	00008d5d 	.word	0x00008d5d
    3adc:	1fff8ffc 	.word	0x1fff8ffc
    3ae0:	00008d81 	.word	0x00008d81
    3ae4:	1fff9010 	.word	0x1fff9010
    3ae8:	1fff9004 	.word	0x1fff9004
    3aec:	00008d89 	.word	0x00008d89
    3af0:	1fff8ff8 	.word	0x1fff8ff8
    3af4:	1fff900c 	.word	0x1fff900c
    3af8:	1fff9000 	.word	0x1fff9000
    3afc:	00008d92 	.word	0x00008d92

00003b00 <cliFunc_connectLst>:

	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
    3b00:	b530      	push	{r4, r5, lr}
	const char *Command_strs[] = {
    3b02:	4d11      	ldr	r5, [pc, #68]	; (3b48 <cliFunc_connectLst+0x48>)
    3b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
    3b06:	b08b      	sub	sp, #44	; 0x2c
	const char *Command_strs[] = {
    3b08:	ac01      	add	r4, sp, #4
    3b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3b10:	682b      	ldr	r3, [r5, #0]
		"RemoteCapability",
		"RemoteOutput",
		"RemoteInput",
	};

	print( NL );
    3b12:	480e      	ldr	r0, [pc, #56]	; (3b4c <cliFunc_connectLst+0x4c>)
	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
	const char *Command_strs[] = {
    3b14:	6023      	str	r3, [r4, #0]
		"RemoteCapability",
		"RemoteOutput",
		"RemoteInput",
	};

	print( NL );
    3b16:	f003 fe73 	bl	7800 <_print>
	info_msg("List of UARTConnect commands");
    3b1a:	480d      	ldr	r0, [pc, #52]	; (3b50 <cliFunc_connectLst+0x50>)
    3b1c:	f003 fe70 	bl	7800 <_print>
    3b20:	2400      	movs	r4, #0
    3b22:	ad01      	add	r5, sp, #4
	for ( uint8_t cmd = 0; cmd < Command_TOP; cmd++ )
	{
		print( NL );
    3b24:	4809      	ldr	r0, [pc, #36]	; (3b4c <cliFunc_connectLst+0x4c>)
    3b26:	f003 fe6b 	bl	7800 <_print>
		printInt8( cmd );
    3b2a:	b2e0      	uxtb	r0, r4
    3b2c:	f003 fe9a 	bl	7864 <printInt8>
		print(" - ");
    3b30:	4808      	ldr	r0, [pc, #32]	; (3b54 <cliFunc_connectLst+0x54>)
    3b32:	f003 fe65 	bl	7800 <_print>
		dPrint( (char*)Command_strs[ cmd ] );
    3b36:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3b3a:	3401      	adds	r4, #1
    3b3c:	f002 fb58 	bl	61f0 <Output_putstr>
		"RemoteInput",
	};

	print( NL );
	info_msg("List of UARTConnect commands");
	for ( uint8_t cmd = 0; cmd < Command_TOP; cmd++ )
    3b40:	2c09      	cmp	r4, #9
    3b42:	d1ef      	bne.n	3b24 <cliFunc_connectLst+0x24>
		print( NL );
		printInt8( cmd );
		print(" - ");
		dPrint( (char*)Command_strs[ cmd ] );
	}
}
    3b44:	b00b      	add	sp, #44	; 0x2c
    3b46:	bd30      	pop	{r4, r5, pc}
    3b48:	00008c2c 	.word	0x00008c2c
    3b4c:	0000b26f 	.word	0x0000b26f
    3b50:	00008dbb 	.word	0x00008dbb
    3b54:	000091cf 	.word	0x000091cf

00003b58 <cliFunc_connectSts>:
	// Reset node id
	Connect_id = 0xFF;
}

void cliFunc_connectSts( char* args )
{
    3b58:	b538      	push	{r3, r4, r5, lr}
	print( NL );
    3b5a:	4839      	ldr	r0, [pc, #228]	; (3c40 <cliFunc_connectSts+0xe8>)
	print( NL "\tFaults:\t");
	printHex32( Connect_cableFaultsMaster );
	print("/");
	printHex32( Connect_cableChecksMaster );
	print( NL "\tRx:\t");
	printHex( uart_rx_status[UART_Master].status );
    3b5c:	4d39      	ldr	r5, [pc, #228]	; (3c44 <cliFunc_connectSts+0xec>)
	print( NL "\tTx:\t");
	printHex( uart_tx_status[UART_Master].status );
    3b5e:	4c3a      	ldr	r4, [pc, #232]	; (3c48 <cliFunc_connectSts+0xf0>)
	Connect_id = 0xFF;
}

void cliFunc_connectSts( char* args )
{
	print( NL );
    3b60:	f003 fe4e 	bl	7800 <_print>
	info_msg("UARTConnect Status");
    3b64:	4839      	ldr	r0, [pc, #228]	; (3c4c <cliFunc_connectSts+0xf4>)
    3b66:	f003 fe4b 	bl	7800 <_print>
	print( NL "Device Type:\t" );
    3b6a:	4839      	ldr	r0, [pc, #228]	; (3c50 <cliFunc_connectSts+0xf8>)
    3b6c:	f003 fe48 	bl	7800 <_print>
	print( Connect_master ? "Master" : "Slave" );
    3b70:	4b38      	ldr	r3, [pc, #224]	; (3c54 <cliFunc_connectSts+0xfc>)
    3b72:	4a39      	ldr	r2, [pc, #228]	; (3c58 <cliFunc_connectSts+0x100>)
    3b74:	7818      	ldrb	r0, [r3, #0]
    3b76:	4b39      	ldr	r3, [pc, #228]	; (3c5c <cliFunc_connectSts+0x104>)
    3b78:	2800      	cmp	r0, #0
    3b7a:	bf0c      	ite	eq
    3b7c:	4610      	moveq	r0, r2
    3b7e:	4618      	movne	r0, r3
    3b80:	f003 fe3e 	bl	7800 <_print>
	print( NL "Device Id:\t" );
    3b84:	4836      	ldr	r0, [pc, #216]	; (3c60 <cliFunc_connectSts+0x108>)
    3b86:	f003 fe3b 	bl	7800 <_print>
	printHex( Connect_id );
    3b8a:	4b36      	ldr	r3, [pc, #216]	; (3c64 <cliFunc_connectSts+0x10c>)
    3b8c:	2101      	movs	r1, #1
    3b8e:	7818      	ldrb	r0, [r3, #0]
    3b90:	f003 febf 	bl	7912 <printHex_op>
	print( NL "Max Id:\t" );
    3b94:	4834      	ldr	r0, [pc, #208]	; (3c68 <cliFunc_connectSts+0x110>)
    3b96:	f003 fe33 	bl	7800 <_print>
	printHex( Connect_maxId );
    3b9a:	4b34      	ldr	r3, [pc, #208]	; (3c6c <cliFunc_connectSts+0x114>)
    3b9c:	2101      	movs	r1, #1
    3b9e:	7818      	ldrb	r0, [r3, #0]
    3ba0:	f003 feb7 	bl	7912 <printHex_op>
	print( NL "Master <=" NL "\tStatus:\t");
    3ba4:	4832      	ldr	r0, [pc, #200]	; (3c70 <cliFunc_connectSts+0x118>)
    3ba6:	f003 fe2b 	bl	7800 <_print>
	printHex( Connect_cableOkMaster );
    3baa:	4b32      	ldr	r3, [pc, #200]	; (3c74 <cliFunc_connectSts+0x11c>)
    3bac:	2101      	movs	r1, #1
    3bae:	7818      	ldrb	r0, [r3, #0]
    3bb0:	f003 feaf 	bl	7912 <printHex_op>
	print( NL "\tFaults:\t");
    3bb4:	4830      	ldr	r0, [pc, #192]	; (3c78 <cliFunc_connectSts+0x120>)
    3bb6:	f003 fe23 	bl	7800 <_print>
	printHex32( Connect_cableFaultsMaster );
    3bba:	4b30      	ldr	r3, [pc, #192]	; (3c7c <cliFunc_connectSts+0x124>)
    3bbc:	2101      	movs	r1, #1
    3bbe:	6818      	ldr	r0, [r3, #0]
    3bc0:	f003 fedc 	bl	797c <printHex32_op>
	print("/");
    3bc4:	482e      	ldr	r0, [pc, #184]	; (3c80 <cliFunc_connectSts+0x128>)
    3bc6:	f003 fe1b 	bl	7800 <_print>
	printHex32( Connect_cableChecksMaster );
    3bca:	4b2e      	ldr	r3, [pc, #184]	; (3c84 <cliFunc_connectSts+0x12c>)
    3bcc:	2101      	movs	r1, #1
    3bce:	6818      	ldr	r0, [r3, #0]
    3bd0:	f003 fed4 	bl	797c <printHex32_op>
	print( NL "\tRx:\t");
    3bd4:	482c      	ldr	r0, [pc, #176]	; (3c88 <cliFunc_connectSts+0x130>)
    3bd6:	f003 fe13 	bl	7800 <_print>
	printHex( uart_rx_status[UART_Master].status );
    3bda:	7928      	ldrb	r0, [r5, #4]
    3bdc:	2101      	movs	r1, #1
    3bde:	f003 fe98 	bl	7912 <printHex_op>
	print( NL "\tTx:\t");
    3be2:	482a      	ldr	r0, [pc, #168]	; (3c8c <cliFunc_connectSts+0x134>)
    3be4:	f003 fe0c 	bl	7800 <_print>
	printHex( uart_tx_status[UART_Master].status );
    3be8:	78a0      	ldrb	r0, [r4, #2]
    3bea:	2101      	movs	r1, #1
    3bec:	f003 fe91 	bl	7912 <printHex_op>
	print( NL "Slave <=" NL "\tStatus:\t");
    3bf0:	4827      	ldr	r0, [pc, #156]	; (3c90 <cliFunc_connectSts+0x138>)
    3bf2:	f003 fe05 	bl	7800 <_print>
	printHex( Connect_cableOkSlave );
    3bf6:	4b27      	ldr	r3, [pc, #156]	; (3c94 <cliFunc_connectSts+0x13c>)
    3bf8:	2101      	movs	r1, #1
    3bfa:	7818      	ldrb	r0, [r3, #0]
    3bfc:	f003 fe89 	bl	7912 <printHex_op>
	print( NL "\tFaults:\t");
    3c00:	481d      	ldr	r0, [pc, #116]	; (3c78 <cliFunc_connectSts+0x120>)
    3c02:	f003 fdfd 	bl	7800 <_print>
	printHex32( Connect_cableFaultsSlave );
    3c06:	4b24      	ldr	r3, [pc, #144]	; (3c98 <cliFunc_connectSts+0x140>)
    3c08:	2101      	movs	r1, #1
    3c0a:	6818      	ldr	r0, [r3, #0]
    3c0c:	f003 feb6 	bl	797c <printHex32_op>
	print("/");
    3c10:	481b      	ldr	r0, [pc, #108]	; (3c80 <cliFunc_connectSts+0x128>)
    3c12:	f003 fdf5 	bl	7800 <_print>
	printHex32( Connect_cableChecksSlave );
    3c16:	4b21      	ldr	r3, [pc, #132]	; (3c9c <cliFunc_connectSts+0x144>)
    3c18:	2101      	movs	r1, #1
    3c1a:	6818      	ldr	r0, [r3, #0]
    3c1c:	f003 feae 	bl	797c <printHex32_op>
	print( NL "\tRx:\t");
    3c20:	4819      	ldr	r0, [pc, #100]	; (3c88 <cliFunc_connectSts+0x130>)
    3c22:	f003 fded 	bl	7800 <_print>
	printHex( uart_rx_status[UART_Slave].status );
    3c26:	7828      	ldrb	r0, [r5, #0]
    3c28:	2101      	movs	r1, #1
    3c2a:	f003 fe72 	bl	7912 <printHex_op>
	print( NL "\tTx:\t");
    3c2e:	4817      	ldr	r0, [pc, #92]	; (3c8c <cliFunc_connectSts+0x134>)
    3c30:	f003 fde6 	bl	7800 <_print>
	printHex( uart_tx_status[UART_Slave].status );
    3c34:	7820      	ldrb	r0, [r4, #0]
    3c36:	2101      	movs	r1, #1
}
    3c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	print("/");
	printHex32( Connect_cableChecksSlave );
	print( NL "\tRx:\t");
	printHex( uart_rx_status[UART_Slave].status );
	print( NL "\tTx:\t");
	printHex( uart_tx_status[UART_Slave].status );
    3c3c:	f003 be69 	b.w	7912 <printHex_op>
    3c40:	0000b26f 	.word	0x0000b26f
    3c44:	1fff9cb0 	.word	0x1fff9cb0
    3c48:	1fff9c92 	.word	0x1fff9c92
    3c4c:	00008df7 	.word	0x00008df7
    3c50:	00008e1c 	.word	0x00008e1c
    3c54:	1fff9012 	.word	0x1fff9012
    3c58:	00008df1 	.word	0x00008df1
    3c5c:	00008dea 	.word	0x00008dea
    3c60:	00008e2c 	.word	0x00008e2c
    3c64:	1fff89c5 	.word	0x1fff89c5
    3c68:	00008e3a 	.word	0x00008e3a
    3c6c:	1fff9008 	.word	0x1fff9008
    3c70:	00008e45 	.word	0x00008e45
    3c74:	1fff8ff8 	.word	0x1fff8ff8
    3c78:	00008e5c 	.word	0x00008e5c
    3c7c:	1fff9004 	.word	0x1fff9004
    3c80:	00008e68 	.word	0x00008e68
    3c84:	1fff9000 	.word	0x1fff9000
    3c88:	00008e6a 	.word	0x00008e6a
    3c8c:	00008e72 	.word	0x00008e72
    3c90:	00008e7a 	.word	0x00008e7a
    3c94:	1fff9010 	.word	0x1fff9010
    3c98:	1fff8ffc 	.word	0x1fff8ffc
    3c9c:	1fff900c 	.word	0x1fff900c

00003ca0 <cliFunc_connectMst>:
		dPrint( (char*)Command_strs[ cmd ] );
	}
}

void cliFunc_connectMst( char* args )
{
    3ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    3ca2:	aa01      	add	r2, sp, #4
    3ca4:	4669      	mov	r1, sp
    3ca6:	f003 faf7 	bl	7298 <CLI_argumentIsolation>

	print( NL );
    3caa:	4813      	ldr	r0, [pc, #76]	; (3cf8 <cliFunc_connectMst+0x58>)
    3cac:	4d13      	ldr	r5, [pc, #76]	; (3cfc <cliFunc_connectMst+0x5c>)
    3cae:	4c14      	ldr	r4, [pc, #80]	; (3d00 <cliFunc_connectMst+0x60>)
    3cb0:	f003 fda6 	bl	7800 <_print>

	// Set override
	Connect_override = 1;
    3cb4:	4a13      	ldr	r2, [pc, #76]	; (3d04 <cliFunc_connectMst+0x64>)
    3cb6:	2301      	movs	r3, #1
    3cb8:	7013      	strb	r3, [r2, #0]

	switch ( arg1Ptr[0] )
    3cba:	9b00      	ldr	r3, [sp, #0]
    3cbc:	781b      	ldrb	r3, [r3, #0]
    3cbe:	2b53      	cmp	r3, #83	; 0x53
    3cc0:	d00a      	beq.n	3cd8 <cliFunc_connectMst+0x38>
    3cc2:	d802      	bhi.n	3cca <cliFunc_connectMst+0x2a>
    3cc4:	2b44      	cmp	r3, #68	; 0x44
    3cc6:	d005      	beq.n	3cd4 <cliFunc_connectMst+0x34>
    3cc8:	e00d      	b.n	3ce6 <cliFunc_connectMst+0x46>
    3cca:	2b64      	cmp	r3, #100	; 0x64
    3ccc:	d002      	beq.n	3cd4 <cliFunc_connectMst+0x34>
    3cce:	2b73      	cmp	r3, #115	; 0x73
    3cd0:	d002      	beq.n	3cd8 <cliFunc_connectMst+0x38>
    3cd2:	e008      	b.n	3ce6 <cliFunc_connectMst+0x46>
	{
	// Disable override
	case 'd':
	case 'D':
		Connect_override = 0;
    3cd4:	2300      	movs	r3, #0
    3cd6:	7013      	strb	r3, [r2, #0]
	case 's':
	case 'S':
		info_msg("Setting device as slave.");
    3cd8:	480b      	ldr	r0, [pc, #44]	; (3d08 <cliFunc_connectMst+0x68>)
    3cda:	f003 fd91 	bl	7800 <_print>
		Connect_master = 0;
    3cde:	2300      	movs	r3, #0
    3ce0:	702b      	strb	r3, [r5, #0]
		Connect_id = 0xFF;
    3ce2:	23ff      	movs	r3, #255	; 0xff
    3ce4:	e005      	b.n	3cf2 <cliFunc_connectMst+0x52>
		break;

	case 'm':
	case 'M':
	default:
		info_msg("Setting device as master.");
    3ce6:	4809      	ldr	r0, [pc, #36]	; (3d0c <cliFunc_connectMst+0x6c>)
    3ce8:	f003 fd8a 	bl	7800 <_print>
		Connect_master = 1;
    3cec:	2301      	movs	r3, #1
    3cee:	702b      	strb	r3, [r5, #0]
		Connect_id = 0;
    3cf0:	2300      	movs	r3, #0
    3cf2:	7023      	strb	r3, [r4, #0]
		break;
	}
}
    3cf4:	b003      	add	sp, #12
    3cf6:	bd30      	pop	{r4, r5, pc}
    3cf8:	0000b26f 	.word	0x0000b26f
    3cfc:	1fff9012 	.word	0x1fff9012
    3d00:	1fff89c5 	.word	0x1fff89c5
    3d04:	1fff9011 	.word	0x1fff9011
    3d08:	00008e90 	.word	0x00008e90
    3d0c:	00008ebb 	.word	0x00008ebb

00003d10 <Connect_addBytes.part.1>:
UARTStatusTx uart_tx_status[UART_Num_Interfaces];


// -- Ring Buffer Convenience Functions --

void Connect_addBytes( uint8_t *buffer, uint8_t count, uint8_t uart )
    3d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d12:	4606      	mov	r6, r0
    3d14:	460f      	mov	r7, r1
    3d16:	4615      	mov	r5, r2
		erro_print("Invalid UART to send from...");
		return;
	}

	// Delay UART copy until there's some space left
	while ( uart_tx_buf[ uart ].items + count > UART_Buffer_Size )
    3d18:	4c29      	ldr	r4, [pc, #164]	; (3dc0 <Connect_addBytes.part.1+0xb0>)
    3d1a:	2383      	movs	r3, #131	; 0x83
    3d1c:	fb03 4305 	mla	r3, r3, r5, r4
    3d20:	789b      	ldrb	r3, [r3, #2]
    3d22:	443b      	add	r3, r7
    3d24:	2b80      	cmp	r3, #128	; 0x80
    3d26:	dd0c      	ble.n	3d42 <Connect_addBytes.part.1+0x32>
	{
		warn_msg("Too much data to send on UART");
    3d28:	4826      	ldr	r0, [pc, #152]	; (3dc4 <Connect_addBytes.part.1+0xb4>)
    3d2a:	f003 fd69 	bl	7800 <_print>
		printInt8( uart );
    3d2e:	4628      	mov	r0, r5
    3d30:	f003 fd98 	bl	7864 <printInt8>
		print( ", waiting..." NL );
    3d34:	4824      	ldr	r0, [pc, #144]	; (3dc8 <Connect_addBytes.part.1+0xb8>)
    3d36:	f003 fd63 	bl	7800 <_print>
		delay( 1 );
    3d3a:	2001      	movs	r0, #1
    3d3c:	f7fe fc48 	bl	25d0 <delay>
    3d40:	e7ea      	b.n	3d18 <Connect_addBytes.part.1+0x8>
    3d42:	3e01      	subs	r6, #1
    3d44:	4437      	add	r7, r6
	}

	// Append data to ring buffer
	for ( uint8_t c = 0; c < count; c++ )
    3d46:	42be      	cmp	r6, r7
    3d48:	d038      	beq.n	3dbc <Connect_addBytes.part.1+0xac>
	{
		if ( Connect_debug )
    3d4a:	4b20      	ldr	r3, [pc, #128]	; (3dcc <Connect_addBytes.part.1+0xbc>)
    3d4c:	781b      	ldrb	r3, [r3, #0]
    3d4e:	b163      	cbz	r3, 3d6a <Connect_addBytes.part.1+0x5a>
		{
			printHex( buffer[ c ] );
    3d50:	2101      	movs	r1, #1
    3d52:	7870      	ldrb	r0, [r6, #1]
    3d54:	f003 fddd 	bl	7912 <printHex_op>
			print(" +");
    3d58:	481d      	ldr	r0, [pc, #116]	; (3dd0 <Connect_addBytes.part.1+0xc0>)
    3d5a:	f003 fd51 	bl	7800 <_print>
			printInt8( uart );
    3d5e:	4628      	mov	r0, r5
    3d60:	f003 fd80 	bl	7864 <printInt8>
			print( NL );
    3d64:	481b      	ldr	r0, [pc, #108]	; (3dd4 <Connect_addBytes.part.1+0xc4>)
    3d66:	f003 fd4b 	bl	7800 <_print>
		}

		uart_tx_buf[ uart ].buffer[ uart_tx_buf[ uart ].tail++ ] = buffer[ c ];
    3d6a:	2283      	movs	r2, #131	; 0x83
    3d6c:	fb02 f005 	mul.w	r0, r2, r5
    3d70:	1823      	adds	r3, r4, r0
    3d72:	7859      	ldrb	r1, [r3, #1]
    3d74:	f101 0c01 	add.w	ip, r1, #1
    3d78:	4401      	add	r1, r0
    3d7a:	f883 c001 	strb.w	ip, [r3, #1]
    3d7e:	4421      	add	r1, r4
    3d80:	f816 cf01 	ldrb.w	ip, [r6, #1]!
    3d84:	f881 c003 	strb.w	ip, [r1, #3]
		uart_tx_buf[ uart ].items++;
    3d88:	7899      	ldrb	r1, [r3, #2]
    3d8a:	3101      	adds	r1, #1
    3d8c:	7099      	strb	r1, [r3, #2]
		if ( uart_tx_buf[ uart ].tail >= UART_Buffer_Size )
    3d8e:	f993 1001 	ldrsb.w	r1, [r3, #1]
    3d92:	2900      	cmp	r1, #0
			uart_tx_buf[ uart ].tail = 0;
    3d94:	bfbc      	itt	lt
    3d96:	2100      	movlt	r1, #0
    3d98:	7059      	strblt	r1, [r3, #1]
		if ( uart_tx_buf[ uart ].head == uart_tx_buf[ uart ].tail )
    3d9a:	fb02 f305 	mul.w	r3, r2, r5
    3d9e:	18e2      	adds	r2, r4, r3
    3da0:	5ce1      	ldrb	r1, [r4, r3]
    3da2:	7852      	ldrb	r2, [r2, #1]
    3da4:	428a      	cmp	r2, r1
			uart_tx_buf[ uart ].head++;
    3da6:	bf04      	itt	eq
    3da8:	3201      	addeq	r2, #1
    3daa:	54e2      	strbeq	r2, [r4, r3]
		if ( uart_tx_buf[ uart ].head >= UART_Buffer_Size )
    3dac:	2383      	movs	r3, #131	; 0x83
    3dae:	436b      	muls	r3, r5
    3db0:	56e2      	ldrsb	r2, [r4, r3]
    3db2:	2a00      	cmp	r2, #0
			uart_tx_buf[ uart ].head = 0;
    3db4:	bfbc      	itt	lt
    3db6:	2200      	movlt	r2, #0
    3db8:	54e2      	strblt	r2, [r4, r3]
    3dba:	e7c4      	b.n	3d46 <Connect_addBytes.part.1+0x36>
	}
}
    3dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dbe:	bf00      	nop
    3dc0:	1fff9b86 	.word	0x1fff9b86
    3dc4:	00008ee7 	.word	0x00008ee7
    3dc8:	00008f1a 	.word	0x00008f1a
    3dcc:	1fff9009 	.word	0x1fff9009
    3dd0:	00008f29 	.word	0x00008f29
    3dd4:	0000b26f 	.word	0x0000b26f

00003dd8 <Connect_receive_ScanCode>:
TriggerGuide Connect_receive_ScanCodeBuffer;
uint8_t Connect_receive_ScanCodeBufferPos;
uint8_t Connect_receive_ScanCodeDeviceId;

uint8_t Connect_receive_ScanCode( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3dd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	// Check the directionality
	if ( uart_num == UART_Master )
    3dda:	2a01      	cmp	r2, #1
TriggerGuide Connect_receive_ScanCodeBuffer;
uint8_t Connect_receive_ScanCodeBufferPos;
uint8_t Connect_receive_ScanCodeDeviceId;

uint8_t Connect_receive_ScanCode( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3ddc:	460c      	mov	r4, r1
    3dde:	f88d 0007 	strb.w	r0, [sp, #7]
	// Check the directionality
	if ( uart_num == UART_Master )
    3de2:	d102      	bne.n	3dea <Connect_receive_ScanCode+0x12>
	{
		erro_print("Invalid ScanCode direction...");
    3de4:	484e      	ldr	r0, [pc, #312]	; (3f20 <Connect_receive_ScanCode+0x148>)
    3de6:	f003 fd0b 	bl	7800 <_print>
	}

	// Master node, trigger scan codes
	if ( Connect_master ) switch ( (*pending_bytes)-- )
    3dea:	4b4e      	ldr	r3, [pc, #312]	; (3f24 <Connect_receive_ScanCode+0x14c>)
    3dec:	781a      	ldrb	r2, [r3, #0]
    3dee:	8823      	ldrh	r3, [r4, #0]
    3df0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    3df4:	2a00      	cmp	r2, #0
    3df6:	d051      	beq.n	3e9c <Connect_receive_ScanCode+0xc4>
    3df8:	1e5a      	subs	r2, r3, #1
    3dfa:	428b      	cmp	r3, r1
    3dfc:	8022      	strh	r2, [r4, #0]
    3dfe:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3e02:	d005      	beq.n	3e10 <Connect_receive_ScanCode+0x38>
    3e04:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3e08:	428b      	cmp	r3, r1
    3e0a:	d108      	bne.n	3e1e <Connect_receive_ScanCode+0x46>
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
		Connect_receive_ScanCodeDeviceId = byte;
    3e0c:	4b46      	ldr	r3, [pc, #280]	; (3f28 <Connect_receive_ScanCode+0x150>)
    3e0e:	e004      	b.n	3e1a <Connect_receive_ScanCode+0x42>
		break;

	case 0xFFFE: // Number of TriggerGuides in bytes (byte * 3)
		*pending_bytes = byte * sizeof( TriggerGuide );
    3e10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		Connect_receive_ScanCodeBufferPos = 0;
    3e14:	4b45      	ldr	r3, [pc, #276]	; (3f2c <Connect_receive_ScanCode+0x154>)
	case 0xFFFF: // Device Id
		Connect_receive_ScanCodeDeviceId = byte;
		break;

	case 0xFFFE: // Number of TriggerGuides in bytes (byte * 3)
		*pending_bytes = byte * sizeof( TriggerGuide );
    3e16:	8022      	strh	r2, [r4, #0]
		Connect_receive_ScanCodeBufferPos = 0;
    3e18:	2200      	movs	r2, #0
    3e1a:	701a      	strb	r2, [r3, #0]
		break;
    3e1c:	e079      	b.n	3f12 <Connect_receive_ScanCode+0x13a>

	default:
		// Set the specific TriggerGuide entry
		((uint8_t*)&Connect_receive_ScanCodeBuffer)[ Connect_receive_ScanCodeBufferPos++ ] = byte;
    3e1e:	4b43      	ldr	r3, [pc, #268]	; (3f2c <Connect_receive_ScanCode+0x154>)
    3e20:	4d43      	ldr	r5, [pc, #268]	; (3f30 <Connect_receive_ScanCode+0x158>)
    3e22:	7818      	ldrb	r0, [r3, #0]
    3e24:	1c41      	adds	r1, r0, #1
    3e26:	b2c9      	uxtb	r1, r1

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
    3e28:	2902      	cmp	r1, #2
		Connect_receive_ScanCodeBufferPos = 0;
		break;

	default:
		// Set the specific TriggerGuide entry
		((uint8_t*)&Connect_receive_ScanCodeBuffer)[ Connect_receive_ScanCodeBufferPos++ ] = byte;
    3e2a:	7019      	strb	r1, [r3, #0]
    3e2c:	5542      	strb	r2, [r0, r5]

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
    3e2e:	d970      	bls.n	3f12 <Connect_receive_ScanCode+0x13a>
		{
			Connect_receive_ScanCodeBufferPos = 0;

			// Adjust ScanCode offset
			if ( Connect_receive_ScanCodeDeviceId > 0 )
    3e30:	4e3d      	ldr	r6, [pc, #244]	; (3f28 <Connect_receive_ScanCode+0x150>)

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
		{
			Connect_receive_ScanCodeBufferPos = 0;
    3e32:	2200      	movs	r2, #0
    3e34:	701a      	strb	r2, [r3, #0]

			// Adjust ScanCode offset
			if ( Connect_receive_ScanCodeDeviceId > 0 )
    3e36:	7833      	ldrb	r3, [r6, #0]
    3e38:	b18b      	cbz	r3, 3e5e <Connect_receive_ScanCode+0x86>
			{
				// Check if this node is too large
				if ( Connect_receive_ScanCodeDeviceId >= InterconnectNodeMax )
    3e3a:	2b01      	cmp	r3, #1
    3e3c:	d90a      	bls.n	3e54 <Connect_receive_ScanCode+0x7c>
				{
					warn_msg("Not enough interconnect layout nodes configured: ");
    3e3e:	483d      	ldr	r0, [pc, #244]	; (3f34 <Connect_receive_ScanCode+0x15c>)
    3e40:	f003 fcde 	bl	7800 <_print>
					printHex( Connect_receive_ScanCodeDeviceId );
    3e44:	7830      	ldrb	r0, [r6, #0]
    3e46:	2101      	movs	r1, #1
    3e48:	f003 fd63 	bl	7912 <printHex_op>
					print( NL );
    3e4c:	483a      	ldr	r0, [pc, #232]	; (3f38 <Connect_receive_ScanCode+0x160>)
    3e4e:	f003 fcd7 	bl	7800 <_print>
					break;
    3e52:	e05e      	b.n	3f12 <Connect_receive_ScanCode+0x13a>
				}

				// This variable is in generatedKeymaps.h
				extern uint8_t InterconnectOffsetList[];
				Connect_receive_ScanCodeBuffer.scanCode = Connect_receive_ScanCodeBuffer.scanCode + InterconnectOffsetList[ Connect_receive_ScanCodeDeviceId - 1 ];
    3e54:	4b39      	ldr	r3, [pc, #228]	; (3f3c <Connect_receive_ScanCode+0x164>)
    3e56:	781a      	ldrb	r2, [r3, #0]
    3e58:	78ab      	ldrb	r3, [r5, #2]
    3e5a:	4413      	add	r3, r2
    3e5c:	70ab      	strb	r3, [r5, #2]
			}

			// ScanCode receive debug
			if ( Connect_debug )
    3e5e:	4b38      	ldr	r3, [pc, #224]	; (3f40 <Connect_receive_ScanCode+0x168>)
    3e60:	781b      	ldrb	r3, [r3, #0]
    3e62:	b1bb      	cbz	r3, 3e94 <Connect_receive_ScanCode+0xbc>
			{
				dbug_msg("");
    3e64:	4837      	ldr	r0, [pc, #220]	; (3f44 <Connect_receive_ScanCode+0x16c>)
    3e66:	f003 fccb 	bl	7800 <_print>
				printHex( Connect_receive_ScanCodeBuffer.type );
    3e6a:	2101      	movs	r1, #1
    3e6c:	7828      	ldrb	r0, [r5, #0]
    3e6e:	f003 fd50 	bl	7912 <printHex_op>
				print(" ");
    3e72:	4835      	ldr	r0, [pc, #212]	; (3f48 <Connect_receive_ScanCode+0x170>)
    3e74:	f003 fcc4 	bl	7800 <_print>
				printHex( Connect_receive_ScanCodeBuffer.state );
    3e78:	2101      	movs	r1, #1
    3e7a:	7868      	ldrb	r0, [r5, #1]
    3e7c:	f003 fd49 	bl	7912 <printHex_op>
				print(" ");
    3e80:	4831      	ldr	r0, [pc, #196]	; (3f48 <Connect_receive_ScanCode+0x170>)
    3e82:	f003 fcbd 	bl	7800 <_print>
				printHex( Connect_receive_ScanCodeBuffer.scanCode );
    3e86:	78a8      	ldrb	r0, [r5, #2]
    3e88:	2101      	movs	r1, #1
    3e8a:	f003 fd42 	bl	7912 <printHex_op>
				print( NL );
    3e8e:	482a      	ldr	r0, [pc, #168]	; (3f38 <Connect_receive_ScanCode+0x160>)
    3e90:	f003 fcb6 	bl	7800 <_print>
			}

			// Send ScanCode to macro module
			Macro_interconnectAdd( &Connect_receive_ScanCodeBuffer );
    3e94:	4826      	ldr	r0, [pc, #152]	; (3f30 <Connect_receive_ScanCode+0x158>)
    3e96:	f001 f9eb 	bl	5270 <Macro_interconnectAdd>
    3e9a:	e03a      	b.n	3f12 <Connect_receive_ScanCode+0x13a>
		break;
	}
	// Propagate ScanCode packet
	// XXX It would be safer to buffer the scancodes first, before transmitting the packet -Jacob
	//     The current method is the more efficient/aggressive, but could cause issues if there were errors during transmission
	else switch ( (*pending_bytes)-- )
    3e9c:	1e58      	subs	r0, r3, #1
    3e9e:	428b      	cmp	r3, r1
    3ea0:	8020      	strh	r0, [r4, #0]
    3ea2:	d01d      	beq.n	3ee0 <Connect_receive_ScanCode+0x108>
    3ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3ea8:	4293      	cmp	r3, r2
    3eaa:	d126      	bne.n	3efa <Connect_receive_ScanCode+0x122>
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
	{
		Connect_receive_ScanCodeDeviceId = byte;
    3eac:	4b1e      	ldr	r3, [pc, #120]	; (3f28 <Connect_receive_ScanCode+0x150>)
    3eae:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3eb2:	7018      	strb	r0, [r3, #0]

		// Lock the master Tx buffer
		uart_lockTx( UART_Master );
    3eb4:	4b25      	ldr	r3, [pc, #148]	; (3f4c <Connect_receive_ScanCode+0x174>)
    3eb6:	78dd      	ldrb	r5, [r3, #3]
    3eb8:	b105      	cbz	r5, 3ebc <Connect_receive_ScanCode+0xe4>
    3eba:	e7fe      	b.n	3eba <Connect_receive_ScanCode+0xe2>
    3ebc:	7899      	ldrb	r1, [r3, #2]
    3ebe:	2201      	movs	r2, #1
    3ec0:	2904      	cmp	r1, #4
    3ec2:	70da      	strb	r2, [r3, #3]
    3ec4:	d000      	beq.n	3ec8 <Connect_receive_ScanCode+0xf0>
    3ec6:	e7fe      	b.n	3ec6 <Connect_receive_ScanCode+0xee>
    3ec8:	709d      	strb	r5, [r3, #2]

		// Send header + Id byte
		uint8_t header[] = { 0x16, 0x01, ScanCode, byte };
    3eca:	2316      	movs	r3, #22
    3ecc:	f88d 000f 	strb.w	r0, [sp, #15]
    3ed0:	f88d 300c 	strb.w	r3, [sp, #12]
    3ed4:	f88d 200d 	strb.w	r2, [sp, #13]
    3ed8:	f88d 100e 	strb.w	r1, [sp, #14]
    3edc:	a803      	add	r0, sp, #12
    3ede:	e009      	b.n	3ef4 <Connect_receive_ScanCode+0x11c>
		Connect_addBytes( header, sizeof( header ), UART_Master );
		break;
	}
	case 0xFFFE: // Number of TriggerGuides in bytes
		*pending_bytes = byte * sizeof( TriggerGuide );
    3ee0:	a804      	add	r0, sp, #16
    3ee2:	2101      	movs	r1, #1
    3ee4:	f810 3d09 	ldrb.w	r3, [r0, #-9]!
    3ee8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3eec:	8023      	strh	r3, [r4, #0]
		Connect_receive_ScanCodeBufferPos = 0;
    3eee:	4b0f      	ldr	r3, [pc, #60]	; (3f2c <Connect_receive_ScanCode+0x154>)
    3ef0:	701a      	strb	r2, [r3, #0]
    3ef2:	460a      	mov	r2, r1
    3ef4:	f7ff ff0c 	bl	3d10 <Connect_addBytes.part.1>
    3ef8:	e00b      	b.n	3f12 <Connect_receive_ScanCode+0x13a>
    3efa:	2101      	movs	r1, #1
    3efc:	460a      	mov	r2, r1
    3efe:	f10d 0007 	add.w	r0, sp, #7
    3f02:	f7ff ff05 	bl	3d10 <Connect_addBytes.part.1>
	default:
		// Pass through byte
		Connect_addBytes( &byte, 1, UART_Master );

		// Unlock Tx Buffer after sending last byte
		if ( *pending_bytes == 0 )
    3f06:	8822      	ldrh	r2, [r4, #0]
    3f08:	b91a      	cbnz	r2, 3f12 <Connect_receive_ScanCode+0x13a>
			uart_unlockTx( UART_Master );
    3f0a:	4b10      	ldr	r3, [pc, #64]	; (3f4c <Connect_receive_ScanCode+0x174>)
    3f0c:	2104      	movs	r1, #4
    3f0e:	7099      	strb	r1, [r3, #2]
    3f10:	70da      	strb	r2, [r3, #3]
		break;
	}

	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
    3f12:	8820      	ldrh	r0, [r4, #0]
}
    3f14:	f1d0 0001 	rsbs	r0, r0, #1
    3f18:	bf38      	it	cc
    3f1a:	2000      	movcc	r0, #0
    3f1c:	b004      	add	sp, #16
    3f1e:	bd70      	pop	{r4, r5, r6, pc}
    3f20:	00008f2c 	.word	0x00008f2c
    3f24:	1fff9012 	.word	0x1fff9012
    3f28:	1fff9caf 	.word	0x1fff9caf
    3f2c:	1fff9dbf 	.word	0x1fff9dbf
    3f30:	1fff9dbc 	.word	0x1fff9dbc
    3f34:	00008f61 	.word	0x00008f61
    3f38:	0000b26f 	.word	0x0000b26f
    3f3c:	0000a3ed 	.word	0x0000a3ed
    3f40:	1fff9009 	.word	0x1fff9009
    3f44:	00008fa8 	.word	0x00008fa8
    3f48:	00008152 	.word	0x00008152
    3f4c:	1fff9c92 	.word	0x1fff9c92

00003f50 <Connect_addBytes>:
// -- Ring Buffer Convenience Functions --

void Connect_addBytes( uint8_t *buffer, uint8_t count, uint8_t uart )
{
	// Too big to fit into buffer
	if ( count > UART_Buffer_Size )
    3f50:	2980      	cmp	r1, #128	; 0x80
    3f52:	d901      	bls.n	3f58 <Connect_addBytes+0x8>
	{
		erro_msg("Too big of a command to fit into the buffer...");
    3f54:	4804      	ldr	r0, [pc, #16]	; (3f68 <Connect_addBytes+0x18>)
    3f56:	e004      	b.n	3f62 <Connect_addBytes+0x12>
		return;
	}

	// Invalid UART
	if ( uart >= UART_Num_Interfaces )
    3f58:	2a01      	cmp	r2, #1
    3f5a:	d801      	bhi.n	3f60 <Connect_addBytes+0x10>
    3f5c:	f7ff bed8 	b.w	3d10 <Connect_addBytes.part.1>
	{
		erro_print("Invalid UART to send from...");
    3f60:	4802      	ldr	r0, [pc, #8]	; (3f6c <Connect_addBytes+0x1c>)
    3f62:	f003 bc4d 	b.w	7800 <_print>
    3f66:	bf00      	nop
    3f68:	00008fbc 	.word	0x00008fbc
    3f6c:	00009000 	.word	0x00009000

00003f70 <Connect_receive_RemoteCapability>:
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    3f70:	880b      	ldrh	r3, [r1, #0]
#define Connect_receive_RemoteCapabilityMaxArgs 25 // XXX Calculate the max using kll
RemoteCapabilityCommand Connect_receive_RemoteCapabilityBuffer;
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f74:	460f      	mov	r7, r1
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    3f76:	1e59      	subs	r1, r3, #1
    3f78:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    3f7c:	b289      	uxth	r1, r1
    3f7e:	3bfb      	subs	r3, #251	; 0xfb
#define Connect_receive_RemoteCapabilityMaxArgs 25 // XXX Calculate the max using kll
RemoteCapabilityCommand Connect_receive_RemoteCapabilityBuffer;
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3f80:	4616      	mov	r6, r2
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    3f82:	8039      	strh	r1, [r7, #0]
    3f84:	4d38      	ldr	r5, [pc, #224]	; (4068 <Connect_receive_RemoteCapability+0xf8>)
    3f86:	2b04      	cmp	r3, #4
    3f88:	d80f      	bhi.n	3faa <Connect_receive_RemoteCapability+0x3a>
    3f8a:	e8df f003 	tbb	[pc, r3]
    3f8e:	090b      	.short	0x090b
    3f90:	0507      	.short	0x0507
    3f92:	03          	.byte	0x03
    3f93:	00          	.byte	0x00
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
		Connect_receive_RemoteCapabilityBuffer.id = byte;
    3f94:	7068      	strb	r0, [r5, #1]
		break;
    3f96:	e060      	b.n	405a <Connect_receive_RemoteCapability+0xea>

	case 0xFFFE: // Capability Index
		Connect_receive_RemoteCapabilityBuffer.capabilityIndex = byte;
    3f98:	70a8      	strb	r0, [r5, #2]
		break;
    3f9a:	e05e      	b.n	405a <Connect_receive_RemoteCapability+0xea>

	case 0xFFFD: // State
		Connect_receive_RemoteCapabilityBuffer.state = byte;
    3f9c:	70e8      	strb	r0, [r5, #3]
		break;
    3f9e:	e05c      	b.n	405a <Connect_receive_RemoteCapability+0xea>

	case 0xFFFC: // StateType
		Connect_receive_RemoteCapabilityBuffer.stateType = byte;
    3fa0:	7128      	strb	r0, [r5, #4]
		break;
    3fa2:	e05a      	b.n	405a <Connect_receive_RemoteCapability+0xea>

	case 0xFFFB: // Number of args
		Connect_receive_RemoteCapabilityBuffer.numArgs = byte;
    3fa4:	7168      	strb	r0, [r5, #5]
		*pending_bytes = byte;
    3fa6:	8038      	strh	r0, [r7, #0]
		break;
    3fa8:	e057      	b.n	405a <Connect_receive_RemoteCapability+0xea>

	default:     // Args (# defined by previous byte)
		Connect_receive_RemoteCapabilityArgs[
			Connect_receive_RemoteCapabilityBuffer.numArgs - *pending_bytes + 1
    3faa:	796b      	ldrb	r3, [r5, #5]
    3fac:	1a59      	subs	r1, r3, r1
		] = byte;
    3fae:	4b2f      	ldr	r3, [pc, #188]	; (406c <Connect_receive_RemoteCapability+0xfc>)
    3fb0:	4419      	add	r1, r3
    3fb2:	7048      	strb	r0, [r1, #1]

		// If entire packet has been fully received
		if ( *pending_bytes == 0 )
    3fb4:	883b      	ldrh	r3, [r7, #0]
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d14f      	bne.n	405a <Connect_receive_RemoteCapability+0xea>
		{
			// Determine if this is the node to run the capability on
			// Conditions: Matches or broadcast (0xFF)
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
    3fba:	4b2b      	ldr	r3, [pc, #172]	; (4068 <Connect_receive_RemoteCapability+0xf8>)
    3fbc:	785b      	ldrb	r3, [r3, #1]
    3fbe:	2bff      	cmp	r3, #255	; 0xff
    3fc0:	d003      	beq.n	3fca <Connect_receive_RemoteCapability+0x5a>
				|| Connect_receive_RemoteCapabilityBuffer.id == Connect_id )
    3fc2:	4a2b      	ldr	r2, [pc, #172]	; (4070 <Connect_receive_RemoteCapability+0x100>)
    3fc4:	7812      	ldrb	r2, [r2, #0]
    3fc6:	429a      	cmp	r2, r3
    3fc8:	d107      	bne.n	3fda <Connect_receive_RemoteCapability+0x6a>
			{
				extern const Capability CapabilitiesList[]; // See generatedKeymap.h
				void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(
					CapabilitiesList[ Connect_receive_RemoteCapabilityBuffer.capabilityIndex ].func
    3fca:	78aa      	ldrb	r2, [r5, #2]
				);
				capability(
    3fcc:	4b29      	ldr	r3, [pc, #164]	; (4074 <Connect_receive_RemoteCapability+0x104>)
    3fce:	78e8      	ldrb	r0, [r5, #3]
    3fd0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3fd4:	7929      	ldrb	r1, [r5, #4]
    3fd6:	4a28      	ldr	r2, [pc, #160]	; (4078 <Connect_receive_RemoteCapability+0x108>)
    3fd8:	4798      	blx	r3
				);
			}

			// If this is not the correct node, keep sending it in the same direction (doesn't matter if more nodes exist)
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
    3fda:	786b      	ldrb	r3, [r5, #1]
    3fdc:	2bff      	cmp	r3, #255	; 0xff
    3fde:	d003      	beq.n	3fe8 <Connect_receive_RemoteCapability+0x78>
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
    3fe0:	4a23      	ldr	r2, [pc, #140]	; (4070 <Connect_receive_RemoteCapability+0x100>)
    3fe2:	7812      	ldrb	r2, [r2, #0]
    3fe4:	429a      	cmp	r2, r3
    3fe6:	d038      	beq.n	405a <Connect_receive_RemoteCapability+0xea>
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;
    3fe8:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;
    3fec:	f04f 0306 	mov.w	r3, #6

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;
    3ff0:	bf18      	it	ne
    3ff2:	2601      	movne	r6, #1
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;
    3ff4:	702b      	strb	r3, [r5, #0]
    3ff6:	4c21      	ldr	r4, [pc, #132]	; (407c <Connect_receive_RemoteCapability+0x10c>)

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;

				// Lock Tx UART
				switch ( uart_direction )
    3ff8:	b14e      	cbz	r6, 400e <Connect_receive_RemoteCapability+0x9e>
				{
				case UART_Master: uart_lockTx( UART_Master ); break;
    3ffa:	78e3      	ldrb	r3, [r4, #3]
    3ffc:	b103      	cbz	r3, 4000 <Connect_receive_RemoteCapability+0x90>
    3ffe:	e7fe      	b.n	3ffe <Connect_receive_RemoteCapability+0x8e>
    4000:	78a2      	ldrb	r2, [r4, #2]
    4002:	70e6      	strb	r6, [r4, #3]
    4004:	2a04      	cmp	r2, #4
    4006:	bf08      	it	eq
    4008:	70a3      	strbeq	r3, [r4, #2]
    400a:	d00b      	beq.n	4024 <Connect_receive_RemoteCapability+0xb4>
    400c:	e7fe      	b.n	400c <Connect_receive_RemoteCapability+0x9c>
				case UART_Slave:  uart_lockTx( UART_Slave );  break;
    400e:	7863      	ldrb	r3, [r4, #1]
    4010:	b103      	cbz	r3, 4014 <Connect_receive_RemoteCapability+0xa4>
    4012:	e7fe      	b.n	4012 <Connect_receive_RemoteCapability+0xa2>
    4014:	2201      	movs	r2, #1
    4016:	7062      	strb	r2, [r4, #1]
    4018:	7822      	ldrb	r2, [r4, #0]
    401a:	2a04      	cmp	r2, #4
    401c:	bf08      	it	eq
    401e:	7023      	strbeq	r3, [r4, #0]
    4020:	d000      	beq.n	4024 <Connect_receive_RemoteCapability+0xb4>
    4022:	e7fe      	b.n	4022 <Connect_receive_RemoteCapability+0xb2>
				}

				// Send header
				uint8_t header[] = { 0x16, 0x01 };
    4024:	4b16      	ldr	r3, [pc, #88]	; (4080 <Connect_receive_RemoteCapability+0x110>)
				Connect_addBytes( header, sizeof( header ), uart_direction );
    4026:	a801      	add	r0, sp, #4
				case UART_Master: uart_lockTx( UART_Master ); break;
				case UART_Slave:  uart_lockTx( UART_Slave );  break;
				}

				// Send header
				uint8_t header[] = { 0x16, 0x01 };
    4028:	881b      	ldrh	r3, [r3, #0]
    402a:	f8ad 3004 	strh.w	r3, [sp, #4]
				Connect_addBytes( header, sizeof( header ), uart_direction );
    402e:	2102      	movs	r1, #2
    4030:	4632      	mov	r2, r6
    4032:	f7ff ff8d 	bl	3f50 <Connect_addBytes>

				// Send Remote Capability and arguments
				Connect_addBytes( (uint8_t*)&Connect_receive_RemoteCapabilityBuffer, sizeof( RemoteCapabilityCommand ), uart_direction );
    4036:	480c      	ldr	r0, [pc, #48]	; (4068 <Connect_receive_RemoteCapability+0xf8>)
    4038:	2106      	movs	r1, #6
    403a:	4632      	mov	r2, r6
    403c:	f7ff ff88 	bl	3f50 <Connect_addBytes>
				Connect_addBytes( Connect_receive_RemoteCapabilityArgs, Connect_receive_RemoteCapabilityBuffer.numArgs, uart_direction );
    4040:	4632      	mov	r2, r6
    4042:	480a      	ldr	r0, [pc, #40]	; (406c <Connect_receive_RemoteCapability+0xfc>)
    4044:	7969      	ldrb	r1, [r5, #5]
    4046:	f7ff ff83 	bl	3f50 <Connect_addBytes>
    404a:	2204      	movs	r2, #4
    404c:	2300      	movs	r3, #0

				// Unlock Tx UART
				switch ( uart_direction )
    404e:	b116      	cbz	r6, 4056 <Connect_receive_RemoteCapability+0xe6>
				{
				case UART_Master: uart_unlockTx( UART_Master ); break;
    4050:	70a2      	strb	r2, [r4, #2]
    4052:	70e3      	strb	r3, [r4, #3]
    4054:	e001      	b.n	405a <Connect_receive_RemoteCapability+0xea>
				case UART_Slave:  uart_unlockTx( UART_Slave );  break;
    4056:	7022      	strb	r2, [r4, #0]
    4058:	7063      	strb	r3, [r4, #1]
		}
		break;
	}

	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
    405a:	8838      	ldrh	r0, [r7, #0]
}
    405c:	f1d0 0001 	rsbs	r0, r0, #1
    4060:	bf38      	it	cc
    4062:	2000      	movcc	r0, #0
    4064:	b003      	add	sp, #12
    4066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4068:	1fff9c8c 	.word	0x1fff9c8c
    406c:	1fff9c96 	.word	0x1fff9c96
    4070:	1fff89c5 	.word	0x1fff89c5
    4074:	0000943c 	.word	0x0000943c
    4078:	1fff9c98 	.word	0x1fff9c98
    407c:	1fff9c92 	.word	0x1fff9c92
    4080:	00008c50 	.word	0x00008c50

00004084 <Connect_send_CableCheck>:

// -- Connect send functions --

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
    4084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    4086:	4c21      	ldr	r4, [pc, #132]	; (410c <Connect_send_CableCheck+0x88>)
    4088:	78e2      	ldrb	r2, [r4, #3]
    408a:	7863      	ldrb	r3, [r4, #1]

// -- Connect send functions --

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
    408c:	4607      	mov	r7, r0
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    408e:	2a00      	cmp	r2, #0
    4090:	d1fd      	bne.n	408e <Connect_send_CableCheck+0xa>
    4092:	2b00      	cmp	r3, #0
    4094:	d1fd      	bne.n	4092 <Connect_send_CableCheck+0xe>
    4096:	2301      	movs	r3, #1
    4098:	70e3      	strb	r3, [r4, #3]
    409a:	7063      	strb	r3, [r4, #1]
    409c:	7826      	ldrb	r6, [r4, #0]
    409e:	78a3      	ldrb	r3, [r4, #2]
    40a0:	2b04      	cmp	r3, #4
    40a2:	d1fd      	bne.n	40a0 <Connect_send_CableCheck+0x1c>
    40a4:	2e04      	cmp	r6, #4
    40a6:	d1fd      	bne.n	40a4 <Connect_send_CableCheck+0x20>
    40a8:	2500      	movs	r5, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, CableCheck, patternLen };
    40aa:	2316      	movs	r3, #22
    40ac:	2201      	movs	r2, #1
    40ae:	a801      	add	r0, sp, #4
    40b0:	4631      	mov	r1, r6
    40b2:	f88d 3004 	strb.w	r3, [sp, #4]
    40b6:	f88d 2005 	strb.w	r2, [sp, #5]

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    40ba:	70a5      	strb	r5, [r4, #2]
    40bc:	7025      	strb	r5, [r4, #0]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, CableCheck, patternLen };
    40be:	f88d 5006 	strb.w	r5, [sp, #6]
    40c2:	f88d 7007 	strb.w	r7, [sp, #7]
    40c6:	f7ff fe23 	bl	3d10 <Connect_addBytes.part.1>
    40ca:	a801      	add	r0, sp, #4
    40cc:	4631      	mov	r1, r6
    40ce:	462a      	mov	r2, r5
    40d0:	f7ff fe1e 	bl	3d10 <Connect_addBytes.part.1>
	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );
	Connect_addBytes( header, sizeof( header ), UART_Slave );

	// Send 0xD2 (11010010) for each argument
	uint8_t value = 0xD2;
    40d4:	23d2      	movs	r3, #210	; 0xd2
    40d6:	f88d 3003 	strb.w	r3, [sp, #3]
	for ( uint8_t c = 0; c < patternLen; c++ )
    40da:	b2eb      	uxtb	r3, r5
    40dc:	42bb      	cmp	r3, r7
    40de:	d20d      	bcs.n	40fc <Connect_send_CableCheck+0x78>
    40e0:	2101      	movs	r1, #1
    40e2:	460a      	mov	r2, r1
    40e4:	f10d 0003 	add.w	r0, sp, #3
    40e8:	f7ff fe12 	bl	3d10 <Connect_addBytes.part.1>
    40ec:	f10d 0003 	add.w	r0, sp, #3
    40f0:	2101      	movs	r1, #1
    40f2:	2200      	movs	r2, #0
    40f4:	f7ff fe0c 	bl	3d10 <Connect_addBytes.part.1>
    40f8:	3501      	adds	r5, #1
    40fa:	e7ee      	b.n	40da <Connect_send_CableCheck+0x56>
		Connect_addBytes( &value, 1, UART_Master );
		Connect_addBytes( &value, 1, UART_Slave );
	}

	// Release Tx buffers
	uart_unlockTx( UART_Master );
    40fc:	2204      	movs	r2, #4
    40fe:	2300      	movs	r3, #0
    4100:	70a2      	strb	r2, [r4, #2]
    4102:	70e3      	strb	r3, [r4, #3]
	uart_unlockTx( UART_Slave );
    4104:	7022      	strb	r2, [r4, #0]
    4106:	7063      	strb	r3, [r4, #1]
}
    4108:	b003      	add	sp, #12
    410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    410c:	1fff9c92 	.word	0x1fff9c92

00004110 <Connect_send_IdRequest>:

void Connect_send_IdRequest()
{
    4110:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    4112:	4c0d      	ldr	r4, [pc, #52]	; (4148 <Connect_send_IdRequest+0x38>)
    4114:	78e5      	ldrb	r5, [r4, #3]
    4116:	b105      	cbz	r5, 411a <Connect_send_IdRequest+0xa>
    4118:	e7fe      	b.n	4118 <Connect_send_IdRequest+0x8>
    411a:	78a6      	ldrb	r6, [r4, #2]
    411c:	2201      	movs	r2, #1
    411e:	2e04      	cmp	r6, #4
    4120:	70e2      	strb	r2, [r4, #3]
    4122:	d000      	beq.n	4126 <Connect_send_IdRequest+0x16>
    4124:	e7fe      	b.n	4124 <Connect_send_IdRequest+0x14>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    4126:	4b09      	ldr	r3, [pc, #36]	; (414c <Connect_send_IdRequest+0x3c>)
}

void Connect_send_IdRequest()
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    4128:	70a5      	strb	r5, [r4, #2]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    412a:	8819      	ldrh	r1, [r3, #0]
    412c:	f8ad 1004 	strh.w	r1, [sp, #4]
    4130:	789b      	ldrb	r3, [r3, #2]
    4132:	f88d 3006 	strb.w	r3, [sp, #6]
    4136:	a801      	add	r0, sp, #4
    4138:	2103      	movs	r1, #3
    413a:	f7ff fde9 	bl	3d10 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Unlock Tx
	uart_unlockTx( UART_Master );
    413e:	70a6      	strb	r6, [r4, #2]
    4140:	70e5      	strb	r5, [r4, #3]
}
    4142:	b002      	add	sp, #8
    4144:	bd70      	pop	{r4, r5, r6, pc}
    4146:	bf00      	nop
    4148:	1fff9c92 	.word	0x1fff9c92
    414c:	00008c52 	.word	0x00008c52

00004150 <Connect_send_IdEnumeration>:

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
    4150:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    4152:	4c0f      	ldr	r4, [pc, #60]	; (4190 <Connect_send_IdEnumeration+0x40>)
    4154:	7865      	ldrb	r5, [r4, #1]
    4156:	b105      	cbz	r5, 415a <Connect_send_IdEnumeration+0xa>
    4158:	e7fe      	b.n	4158 <Connect_send_IdEnumeration+0x8>
    415a:	7826      	ldrb	r6, [r4, #0]
    415c:	2301      	movs	r3, #1
    415e:	2e04      	cmp	r6, #4
    4160:	7063      	strb	r3, [r4, #1]
    4162:	d000      	beq.n	4166 <Connect_send_IdEnumeration+0x16>
    4164:	e7fe      	b.n	4164 <Connect_send_IdEnumeration+0x14>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    4166:	2216      	movs	r2, #22
    4168:	f88d 2004 	strb.w	r2, [sp, #4]
    416c:	f88d 3005 	strb.w	r3, [sp, #5]
    4170:	f88d 0007 	strb.w	r0, [sp, #7]
    4174:	2302      	movs	r3, #2
    4176:	a801      	add	r0, sp, #4
    4178:	4631      	mov	r1, r6
    417a:	462a      	mov	r2, r5

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    417c:	7025      	strb	r5, [r4, #0]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    417e:	f88d 3006 	strb.w	r3, [sp, #6]
    4182:	f7ff fdc5 	bl	3d10 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Slave );

	// Unlock Tx
	uart_unlockTx( UART_Slave );
    4186:	7026      	strb	r6, [r4, #0]
    4188:	7065      	strb	r5, [r4, #1]
}
    418a:	b002      	add	sp, #8
    418c:	bd70      	pop	{r4, r5, r6, pc}
    418e:	bf00      	nop
    4190:	1fff9c92 	.word	0x1fff9c92

00004194 <Connect_receive_IdRequest>:
	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_IdRequest( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    4194:	b510      	push	{r4, lr}
	dbug_print("IdRequest");
    4196:	480a      	ldr	r0, [pc, #40]	; (41c0 <Connect_receive_IdRequest+0x2c>)
	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_IdRequest( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    4198:	4614      	mov	r4, r2
	dbug_print("IdRequest");
    419a:	f003 fb31 	bl	7800 <_print>
	// Check the directionality
	if ( uart_num == UART_Master )
    419e:	2c01      	cmp	r4, #1
    41a0:	d102      	bne.n	41a8 <Connect_receive_IdRequest+0x14>
	{
		erro_print("Invalid IdRequest direction...");
    41a2:	4808      	ldr	r0, [pc, #32]	; (41c4 <Connect_receive_IdRequest+0x30>)
    41a4:	f003 fb2c 	bl	7800 <_print>
	}

	// Check if master, begin IdEnumeration
	if ( Connect_master )
    41a8:	4b07      	ldr	r3, [pc, #28]	; (41c8 <Connect_receive_IdRequest+0x34>)
    41aa:	781b      	ldrb	r3, [r3, #0]
    41ac:	b11b      	cbz	r3, 41b6 <Connect_receive_IdRequest+0x22>
	{
		// The first device is always id 1
		// Id 0 is reserved for the master
		Connect_send_IdEnumeration( 1 );
    41ae:	2001      	movs	r0, #1
    41b0:	f7ff ffce 	bl	4150 <Connect_send_IdEnumeration>
    41b4:	e001      	b.n	41ba <Connect_receive_IdRequest+0x26>
	}
	// Propagate IdRequest
	else
	{
		Connect_send_IdRequest();
    41b6:	f7ff ffab 	bl	4110 <Connect_send_IdRequest>
	}

	return 1;
}
    41ba:	2001      	movs	r0, #1
    41bc:	bd10      	pop	{r4, pc}
    41be:	bf00      	nop
    41c0:	00009034 	.word	0x00009034
    41c4:	00009053 	.word	0x00009053
    41c8:	1fff9012 	.word	0x1fff9012

000041cc <Connect_send_IdReport>:
	uart_unlockTx( UART_Slave );
}

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
    41cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    41ce:	4c0e      	ldr	r4, [pc, #56]	; (4208 <Connect_send_IdReport+0x3c>)
    41d0:	78e5      	ldrb	r5, [r4, #3]
    41d2:	b105      	cbz	r5, 41d6 <Connect_send_IdReport+0xa>
    41d4:	e7fe      	b.n	41d4 <Connect_send_IdReport+0x8>
    41d6:	78a6      	ldrb	r6, [r4, #2]
    41d8:	2201      	movs	r2, #1
    41da:	2e04      	cmp	r6, #4
    41dc:	70e2      	strb	r2, [r4, #3]
    41de:	d000      	beq.n	41e2 <Connect_send_IdReport+0x16>
    41e0:	e7fe      	b.n	41e0 <Connect_send_IdReport+0x14>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    41e2:	2316      	movs	r3, #22
    41e4:	f88d 3004 	strb.w	r3, [sp, #4]
    41e8:	f88d 0007 	strb.w	r0, [sp, #7]
    41ec:	2303      	movs	r3, #3
    41ee:	a801      	add	r0, sp, #4
    41f0:	4631      	mov	r1, r6

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    41f2:	70a5      	strb	r5, [r4, #2]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    41f4:	f88d 2005 	strb.w	r2, [sp, #5]
    41f8:	f88d 3006 	strb.w	r3, [sp, #6]
    41fc:	f7ff fd88 	bl	3d10 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Unlock Tx
	uart_unlockTx( UART_Master );
    4200:	70a6      	strb	r6, [r4, #2]
    4202:	70e5      	strb	r5, [r4, #3]
}
    4204:	b002      	add	sp, #8
    4206:	bd70      	pop	{r4, r5, r6, pc}
    4208:	1fff9c92 	.word	0x1fff9c92

0000420c <Connect_receive_IdEnumeration>:

	return 1;
}

uint8_t Connect_receive_IdEnumeration( uint8_t id, uint16_t *pending_bytes, uint8_t uart_num )
{
    420c:	b538      	push	{r3, r4, r5, lr}
    420e:	4604      	mov	r4, r0
    4210:	4615      	mov	r5, r2
	dbug_print("IdEnumeration");
    4212:	480a      	ldr	r0, [pc, #40]	; (423c <Connect_receive_IdEnumeration+0x30>)
    4214:	f003 faf4 	bl	7800 <_print>
	// Check the directionality
	if ( uart_num == UART_Slave )
    4218:	b915      	cbnz	r5, 4220 <Connect_receive_IdEnumeration+0x14>
	{
		erro_print("Invalid IdEnumeration direction...");
    421a:	4809      	ldr	r0, [pc, #36]	; (4240 <Connect_receive_IdEnumeration+0x34>)
    421c:	f003 faf0 	bl	7800 <_print>
	}

	// Set the device id
	Connect_id = id;
    4220:	4b08      	ldr	r3, [pc, #32]	; (4244 <Connect_receive_IdEnumeration+0x38>)

	// Send reponse back to master
	Connect_send_IdReport( id );
    4222:	4620      	mov	r0, r4
	{
		erro_print("Invalid IdEnumeration direction...");
	}

	// Set the device id
	Connect_id = id;
    4224:	701c      	strb	r4, [r3, #0]

	// Send reponse back to master
	Connect_send_IdReport( id );
    4226:	f7ff ffd1 	bl	41cc <Connect_send_IdReport>

	// Propogate next Id if the connection is ok
	if ( Connect_cableOkSlave )
    422a:	4b07      	ldr	r3, [pc, #28]	; (4248 <Connect_receive_IdEnumeration+0x3c>)
    422c:	781b      	ldrb	r3, [r3, #0]
    422e:	b11b      	cbz	r3, 4238 <Connect_receive_IdEnumeration+0x2c>
	{
		Connect_send_IdEnumeration( id + 1 );
    4230:	1c60      	adds	r0, r4, #1
    4232:	b2c0      	uxtb	r0, r0
    4234:	f7ff ff8c 	bl	4150 <Connect_send_IdEnumeration>
	}

	return 1;
}
    4238:	2001      	movs	r0, #1
    423a:	bd38      	pop	{r3, r4, r5, pc}
    423c:	00009089 	.word	0x00009089
    4240:	000090ac 	.word	0x000090ac
    4244:	1fff89c5 	.word	0x1fff89c5
    4248:	1fff9010 	.word	0x1fff9010

0000424c <Connect_receive_IdReport>:

uint8_t Connect_receive_IdReport( uint8_t id, uint16_t *pending_bytes, uint8_t uart_num )
{
    424c:	b538      	push	{r3, r4, r5, lr}
    424e:	4615      	mov	r5, r2
    4250:	4604      	mov	r4, r0
	dbug_print("IdReport");
    4252:	4810      	ldr	r0, [pc, #64]	; (4294 <Connect_receive_IdReport+0x48>)
    4254:	f003 fad4 	bl	7800 <_print>
	// Check the directionality
	if ( uart_num == UART_Master )
    4258:	2d01      	cmp	r5, #1
    425a:	d102      	bne.n	4262 <Connect_receive_IdReport+0x16>
	{
		erro_print("Invalid IdRequest direction...");
    425c:	480e      	ldr	r0, [pc, #56]	; (4298 <Connect_receive_IdReport+0x4c>)
    425e:	f003 facf 	bl	7800 <_print>
	}

	// Track Id response if master
	if ( Connect_master )
    4262:	4b0e      	ldr	r3, [pc, #56]	; (429c <Connect_receive_IdReport+0x50>)
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	b17b      	cbz	r3, 4288 <Connect_receive_IdReport+0x3c>
	{
		info_msg("Id Reported: ");
    4268:	480d      	ldr	r0, [pc, #52]	; (42a0 <Connect_receive_IdReport+0x54>)
    426a:	f003 fac9 	bl	7800 <_print>
		printHex( id );
    426e:	4620      	mov	r0, r4
    4270:	2101      	movs	r1, #1
    4272:	f003 fb4e 	bl	7912 <printHex_op>
		print( NL );
    4276:	480b      	ldr	r0, [pc, #44]	; (42a4 <Connect_receive_IdReport+0x58>)
    4278:	f003 fac2 	bl	7800 <_print>

		// Check if this is the highest ID
		if ( id > Connect_maxId )
    427c:	4b0a      	ldr	r3, [pc, #40]	; (42a8 <Connect_receive_IdReport+0x5c>)
    427e:	781a      	ldrb	r2, [r3, #0]
    4280:	42a2      	cmp	r2, r4
    4282:	d204      	bcs.n	428e <Connect_receive_IdReport+0x42>
			Connect_maxId = id;
    4284:	701c      	strb	r4, [r3, #0]
    4286:	e002      	b.n	428e <Connect_receive_IdReport+0x42>
		return 1;
	}
	// Propagate id if yet another slave
	else
	{
		Connect_send_IdReport( id );
    4288:	4620      	mov	r0, r4
    428a:	f7ff ff9f 	bl	41cc <Connect_send_IdReport>
	}

	return 1;
}
    428e:	2001      	movs	r0, #1
    4290:	bd38      	pop	{r3, r4, r5, pc}
    4292:	bf00      	nop
    4294:	000090e6 	.word	0x000090e6
    4298:	00009053 	.word	0x00009053
    429c:	1fff9012 	.word	0x1fff9012
    42a0:	00009104 	.word	0x00009104
    42a4:	0000b26f 	.word	0x0000b26f
    42a8:	1fff9008 	.word	0x1fff9008

000042ac <Connect_send_ScanCode>:

// id is the currently assigned id to the slave
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
    42ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    42b0:	4c14      	ldr	r4, [pc, #80]	; (4304 <Connect_send_ScanCode+0x58>)
    42b2:	78e6      	ldrb	r6, [r4, #3]

// id is the currently assigned id to the slave
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
    42b4:	4689      	mov	r9, r1
    42b6:	4690      	mov	r8, r2
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    42b8:	b106      	cbz	r6, 42bc <Connect_send_ScanCode+0x10>
    42ba:	e7fe      	b.n	42ba <Connect_send_ScanCode+0xe>
    42bc:	78a7      	ldrb	r7, [r4, #2]
    42be:	2501      	movs	r5, #1
    42c0:	2f04      	cmp	r7, #4
    42c2:	70e5      	strb	r5, [r4, #3]
    42c4:	d000      	beq.n	42c8 <Connect_send_ScanCode+0x1c>
    42c6:	e7fe      	b.n	42c6 <Connect_send_ScanCode+0x1a>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    42c8:	2316      	movs	r3, #22
    42ca:	f88d 0003 	strb.w	r0, [sp, #3]
    42ce:	f88d 2004 	strb.w	r2, [sp, #4]
    42d2:	4668      	mov	r0, sp
    42d4:	462a      	mov	r2, r5
    42d6:	2105      	movs	r1, #5
    42d8:	f88d 3000 	strb.w	r3, [sp]
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    42dc:	70a6      	strb	r6, [r4, #2]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    42de:	f88d 5001 	strb.w	r5, [sp, #1]
    42e2:	f88d 7002 	strb.w	r7, [sp, #2]
    42e6:	f7ff fd13 	bl	3d10 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Send each of the scan codes
	Connect_addBytes( (uint8_t*)scanCodeStateList, numScanCodes * TriggerGuideSize, UART_Master );
    42ea:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    42ee:	4648      	mov	r0, r9
    42f0:	b2c9      	uxtb	r1, r1
    42f2:	462a      	mov	r2, r5
    42f4:	f7ff fe2c 	bl	3f50 <Connect_addBytes>

	// Unlock Tx
	uart_unlockTx( UART_Master );
    42f8:	70a7      	strb	r7, [r4, #2]
    42fa:	70e6      	strb	r6, [r4, #3]
}
    42fc:	b003      	add	sp, #12
    42fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4302:	bf00      	nop
    4304:	1fff9c92 	.word	0x1fff9c92

00004308 <cliFunc_connectCmd>:


// ----- CLI Command Functions -----

void cliFunc_connectCmd( char* args )
{
    4308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    430a:	4669      	mov	r1, sp
    430c:	aa01      	add	r2, sp, #4
    430e:	f002 ffc3 	bl	7298 <CLI_argumentIsolation>

	print( NL );
    4312:	4815      	ldr	r0, [pc, #84]	; (4368 <cliFunc_connectCmd+0x60>)
    4314:	f003 fa74 	bl	7800 <_print>

	switch ( numToInt( &arg1Ptr[0] ) )
    4318:	9800      	ldr	r0, [sp, #0]
    431a:	f003 fb4f 	bl	79bc <numToInt>
    431e:	2804      	cmp	r0, #4
    4320:	d81e      	bhi.n	4360 <cliFunc_connectCmd+0x58>
    4322:	e8df f000 	tbb	[pc, r0]
    4326:	0703      	.short	0x0703
    4328:	0e0a      	.short	0x0e0a
    432a:	12          	.byte	0x12
    432b:	00          	.byte	0x00
	{
	case CableCheck:
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    432c:	2002      	movs	r0, #2
    432e:	f7ff fea9 	bl	4084 <Connect_send_CableCheck>
		break;
    4332:	e015      	b.n	4360 <cliFunc_connectCmd+0x58>

	case IdRequest:
		Connect_send_IdRequest();
    4334:	f7ff feec 	bl	4110 <Connect_send_IdRequest>
		break;
    4338:	e012      	b.n	4360 <cliFunc_connectCmd+0x58>

	case IdEnumeration:
		Connect_send_IdEnumeration( 5 );
    433a:	2005      	movs	r0, #5
    433c:	f7ff ff08 	bl	4150 <Connect_send_IdEnumeration>
		break;
    4340:	e00e      	b.n	4360 <cliFunc_connectCmd+0x58>

	case IdReport:
		Connect_send_IdReport( 8 );
    4342:	2008      	movs	r0, #8
    4344:	f7ff ff42 	bl	41cc <Connect_send_IdReport>
		break;
    4348:	e00a      	b.n	4360 <cliFunc_connectCmd+0x58>

	case ScanCode:
	{
		TriggerGuide scanCodes[] = { { 0x00, 0x01, 0x05 }, { 0x00, 0x03, 0x16 } };
    434a:	4b08      	ldr	r3, [pc, #32]	; (436c <cliFunc_connectCmd+0x64>)
    434c:	6818      	ldr	r0, [r3, #0]
    434e:	9002      	str	r0, [sp, #8]
    4350:	889b      	ldrh	r3, [r3, #4]
    4352:	f8ad 300c 	strh.w	r3, [sp, #12]
		Connect_send_ScanCode( 10, scanCodes, 2 );
    4356:	200a      	movs	r0, #10
    4358:	a902      	add	r1, sp, #8
    435a:	2202      	movs	r2, #2
    435c:	f7ff ffa6 	bl	42ac <Connect_send_ScanCode>
		break;

	default:
		break;
	}
}
    4360:	b005      	add	sp, #20
    4362:	f85d fb04 	ldr.w	pc, [sp], #4
    4366:	bf00      	nop
    4368:	0000b26f 	.word	0x0000b26f
    436c:	00008c55 	.word	0x00008c55

00004370 <Connect_send_RemoteCapability>:

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    4370:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    4374:	f88d 3006 	strb.w	r3, [sp, #6]

	// Ignore current id
	if ( id == Connect_id )
    4378:	4b2c      	ldr	r3, [pc, #176]	; (442c <Connect_send_RemoteCapability+0xbc>)
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    437a:	f88d 2005 	strb.w	r2, [sp, #5]

	// Ignore current id
	if ( id == Connect_id )
    437e:	781a      	ldrb	r2, [r3, #0]

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    4380:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    4384:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    4388:	f88d 1004 	strb.w	r1, [sp, #4]

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    438c:	4606      	mov	r6, r0
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    438e:	2016      	movs	r0, #22
    4390:	f88d 0000 	strb.w	r0, [sp]
    4394:	2406      	movs	r4, #6
    4396:	2001      	movs	r0, #1

	// Ignore current id
	if ( id == Connect_id )
    4398:	4296      	cmp	r6, r2
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    439a:	f88d 0001 	strb.w	r0, [sp, #1]
    439e:	f88d 4002 	strb.w	r4, [sp, #2]
    43a2:	f88d 6003 	strb.w	r6, [sp, #3]
    43a6:	f88d 7007 	strb.w	r7, [sp, #7]
    43aa:	469a      	mov	sl, r3

	// Ignore current id
	if ( id == Connect_id )
    43ac:	d03b      	beq.n	4426 <Connect_send_RemoteCapability+0xb6>
		return;

	// Send towards slave node
	if ( id > Connect_id )
    43ae:	d918      	bls.n	43e2 <Connect_send_RemoteCapability+0x72>
	{
		// Lock slave bound Tx
		uart_lockTx( UART_Slave );
    43b0:	4c1f      	ldr	r4, [pc, #124]	; (4430 <Connect_send_RemoteCapability+0xc0>)
    43b2:	7865      	ldrb	r5, [r4, #1]
    43b4:	b105      	cbz	r5, 43b8 <Connect_send_RemoteCapability+0x48>
    43b6:	e7fe      	b.n	43b6 <Connect_send_RemoteCapability+0x46>
    43b8:	f894 9000 	ldrb.w	r9, [r4]
    43bc:	7060      	strb	r0, [r4, #1]
    43be:	f1b9 0f04 	cmp.w	r9, #4
    43c2:	d000      	beq.n	43c6 <Connect_send_RemoteCapability+0x56>
    43c4:	e7fe      	b.n	43c4 <Connect_send_RemoteCapability+0x54>
    43c6:	4668      	mov	r0, sp
    43c8:	2108      	movs	r1, #8
    43ca:	462a      	mov	r2, r5
    43cc:	7025      	strb	r5, [r4, #0]
    43ce:	f7ff fc9f 	bl	3d10 <Connect_addBytes.part.1>

		// Send header
		Connect_addBytes( header, sizeof( header ), UART_Slave );

		// Send arguments
		Connect_addBytes( args, numArgs, UART_Slave );
    43d2:	4640      	mov	r0, r8
    43d4:	4639      	mov	r1, r7
    43d6:	462a      	mov	r2, r5
    43d8:	f7ff fdba 	bl	3f50 <Connect_addBytes>

		// Unlock Tx
		uart_unlockTx( UART_Slave );
    43dc:	f884 9000 	strb.w	r9, [r4]
    43e0:	7065      	strb	r5, [r4, #1]
	}

	// Send towards master node
	if ( id < Connect_id || id == 255 )
    43e2:	f89a 3000 	ldrb.w	r3, [sl]
    43e6:	42b3      	cmp	r3, r6
    43e8:	d903      	bls.n	43f2 <Connect_send_RemoteCapability+0x82>
	{
		// Lock slave bound Tx
		uart_lockTx( UART_Master );
    43ea:	4c11      	ldr	r4, [pc, #68]	; (4430 <Connect_send_RemoteCapability+0xc0>)
    43ec:	78e5      	ldrb	r5, [r4, #3]
    43ee:	b125      	cbz	r5, 43fa <Connect_send_RemoteCapability+0x8a>
    43f0:	e002      	b.n	43f8 <Connect_send_RemoteCapability+0x88>
		// Unlock Tx
		uart_unlockTx( UART_Slave );
	}

	// Send towards master node
	if ( id < Connect_id || id == 255 )
    43f2:	2eff      	cmp	r6, #255	; 0xff
    43f4:	d117      	bne.n	4426 <Connect_send_RemoteCapability+0xb6>
    43f6:	e7f8      	b.n	43ea <Connect_send_RemoteCapability+0x7a>
    43f8:	e7fe      	b.n	43f8 <Connect_send_RemoteCapability+0x88>
	{
		// Lock slave bound Tx
		uart_lockTx( UART_Master );
    43fa:	f894 9002 	ldrb.w	r9, [r4, #2]
    43fe:	2601      	movs	r6, #1
    4400:	f1b9 0f04 	cmp.w	r9, #4
    4404:	70e6      	strb	r6, [r4, #3]
    4406:	d000      	beq.n	440a <Connect_send_RemoteCapability+0x9a>
    4408:	e7fe      	b.n	4408 <Connect_send_RemoteCapability+0x98>
    440a:	4668      	mov	r0, sp
    440c:	2108      	movs	r1, #8
    440e:	4632      	mov	r2, r6
    4410:	70a5      	strb	r5, [r4, #2]
    4412:	f7ff fc7d 	bl	3d10 <Connect_addBytes.part.1>

		// Send header
		Connect_addBytes( header, sizeof( header ), UART_Master );

		// Send arguments
		Connect_addBytes( args, numArgs, UART_Master );
    4416:	4640      	mov	r0, r8
    4418:	4639      	mov	r1, r7
    441a:	4632      	mov	r2, r6
    441c:	f7ff fd98 	bl	3f50 <Connect_addBytes>

		// Unlock Tx
		uart_unlockTx( UART_Master );
    4420:	f884 9002 	strb.w	r9, [r4, #2]
    4424:	70e5      	strb	r5, [r4, #3]
	}
}
    4426:	b002      	add	sp, #8
    4428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    442c:	1fff89c5 	.word	0x1fff89c5
    4430:	1fff9c92 	.word	0x1fff9c92

00004434 <Connect_send_Idle>:

void Connect_send_Idle( uint8_t num )
{
    4434:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    4436:	4c18      	ldr	r4, [pc, #96]	; (4498 <Connect_send_Idle+0x64>)
    4438:	7862      	ldrb	r2, [r4, #1]
    443a:	78e3      	ldrb	r3, [r4, #3]
		uart_unlockTx( UART_Master );
	}
}

void Connect_send_Idle( uint8_t num )
{
    443c:	4606      	mov	r6, r0
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    443e:	2a00      	cmp	r2, #0
    4440:	d1fd      	bne.n	443e <Connect_send_Idle+0xa>
    4442:	2b00      	cmp	r3, #0
    4444:	d1fd      	bne.n	4442 <Connect_send_Idle+0xe>
    4446:	2301      	movs	r3, #1
    4448:	7063      	strb	r3, [r4, #1]
    444a:	70e3      	strb	r3, [r4, #3]
    444c:	7822      	ldrb	r2, [r4, #0]
    444e:	78a3      	ldrb	r3, [r4, #2]
    4450:	2a04      	cmp	r2, #4
    4452:	d1fd      	bne.n	4450 <Connect_send_Idle+0x1c>
    4454:	2b04      	cmp	r3, #4
    4456:	d1fd      	bne.n	4454 <Connect_send_Idle+0x20>
    4458:	2500      	movs	r5, #0

	// Send n number of idles to reset link status (if in a bad state)
	uint8_t value = 0x16;
    445a:	2316      	movs	r3, #22
}

void Connect_send_Idle( uint8_t num )
{
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    445c:	7025      	strb	r5, [r4, #0]
    445e:	70a5      	strb	r5, [r4, #2]

	// Send n number of idles to reset link status (if in a bad state)
	uint8_t value = 0x16;
    4460:	f88d 3007 	strb.w	r3, [sp, #7]
	for ( uint8_t c = 0; c < num; c++ )
    4464:	b2eb      	uxtb	r3, r5
    4466:	42b3      	cmp	r3, r6
    4468:	d20d      	bcs.n	4486 <Connect_send_Idle+0x52>
    446a:	2101      	movs	r1, #1
    446c:	460a      	mov	r2, r1
    446e:	f10d 0007 	add.w	r0, sp, #7
    4472:	f7ff fc4d 	bl	3d10 <Connect_addBytes.part.1>
    4476:	f10d 0007 	add.w	r0, sp, #7
    447a:	2101      	movs	r1, #1
    447c:	2200      	movs	r2, #0
    447e:	f7ff fc47 	bl	3d10 <Connect_addBytes.part.1>
    4482:	3501      	adds	r5, #1
    4484:	e7ee      	b.n	4464 <Connect_send_Idle+0x30>
		Connect_addBytes( &value, 1, UART_Master );
		Connect_addBytes( &value, 1, UART_Slave );
	}

	// Release Tx buffers
	uart_unlockTx( UART_Master );
    4486:	2204      	movs	r2, #4
    4488:	2300      	movs	r3, #0
    448a:	70a2      	strb	r2, [r4, #2]
    448c:	70e3      	strb	r3, [r4, #3]
	uart_unlockTx( UART_Slave );
    448e:	7022      	strb	r2, [r4, #0]
    4490:	7063      	strb	r3, [r4, #1]
}
    4492:	b002      	add	sp, #8
    4494:	bd70      	pop	{r4, r5, r6, pc}
    4496:	bf00      	nop
    4498:	1fff9c92 	.word	0x1fff9c92

0000449c <cliFunc_connectIdl>:
	info_msg("Connect Debug Mode Toggle");
	Connect_debug = !Connect_debug;
}

void cliFunc_connectIdl( char* args )
{
    449c:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    449e:	4669      	mov	r1, sp
    44a0:	aa01      	add	r2, sp, #4
    44a2:	f002 fef9 	bl	7298 <CLI_argumentIsolation>

	print( NL );
    44a6:	4809      	ldr	r0, [pc, #36]	; (44cc <cliFunc_connectIdl+0x30>)
    44a8:	f003 f9aa 	bl	7800 <_print>
	info_msg("Sending Sync Idles...");
    44ac:	4808      	ldr	r0, [pc, #32]	; (44d0 <cliFunc_connectIdl+0x34>)
    44ae:	f003 f9a7 	bl	7800 <_print>

	uint8_t count = numToInt( &arg1Ptr[0] );
    44b2:	9800      	ldr	r0, [sp, #0]
    44b4:	f003 fa82 	bl	79bc <numToInt>
    44b8:	b2c0      	uxtb	r0, r0
	// Default to 2 idles
	if ( count == 0 )
    44ba:	2800      	cmp	r0, #0
		count = 2;

	Connect_send_Idle( count );
    44bc:	bf08      	it	eq
    44be:	2002      	moveq	r0, #2
    44c0:	f7ff ffb8 	bl	4434 <Connect_send_Idle>
}
    44c4:	b003      	add	sp, #12
    44c6:	f85d fb04 	ldr.w	pc, [sp], #4
    44ca:	bf00      	nop
    44cc:	0000b26f 	.word	0x0000b26f
    44d0:	00009124 	.word	0x00009124

000044d4 <Connect_reset>:

// ----- Functions -----

// Resets the state of the UART buffers and state variables
void Connect_reset()
{
    44d4:	b510      	push	{r4, lr}
	// Reset Rx
	memset( (void*)uart_rx_status, 0, sizeof( UARTStatusRx ) * UART_Num_Interfaces );
    44d6:	2100      	movs	r1, #0

	// Reset Tx
	memset( (void*)uart_tx_buf,    0, sizeof( UARTRingBuf )  * UART_Num_Interfaces );
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );
    44d8:	4c0c      	ldr	r4, [pc, #48]	; (450c <Connect_reset+0x38>)

// Resets the state of the UART buffers and state variables
void Connect_reset()
{
	// Reset Rx
	memset( (void*)uart_rx_status, 0, sizeof( UARTStatusRx ) * UART_Num_Interfaces );
    44da:	480d      	ldr	r0, [pc, #52]	; (4510 <Connect_reset+0x3c>)
    44dc:	2208      	movs	r2, #8
    44de:	f7fe f843 	bl	2568 <memset>

	// Reset Tx
	memset( (void*)uart_tx_buf,    0, sizeof( UARTRingBuf )  * UART_Num_Interfaces );
    44e2:	2100      	movs	r1, #0
    44e4:	f44f 7283 	mov.w	r2, #262	; 0x106
    44e8:	480a      	ldr	r0, [pc, #40]	; (4514 <Connect_reset+0x40>)
    44ea:	f7fe f83d 	bl	2568 <memset>
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );
    44ee:	2100      	movs	r1, #0
    44f0:	2204      	movs	r2, #4
    44f2:	4620      	mov	r0, r4
    44f4:	f7fe f838 	bl	2568 <memset>

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    44f8:	4b07      	ldr	r3, [pc, #28]	; (4518 <Connect_reset+0x44>)
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
    44fa:	2104      	movs	r1, #4
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    44fc:	2280      	movs	r2, #128	; 0x80
    44fe:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
    4502:	7021      	strb	r1, [r4, #0]
    4504:	70a1      	strb	r1, [r4, #2]
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    4506:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    450a:	bd10      	pop	{r4, pc}
    450c:	1fff9c92 	.word	0x1fff9c92
    4510:	1fff9cb0 	.word	0x1fff9cb0
    4514:	1fff9b86 	.word	0x1fff9b86
    4518:	1fff9cb8 	.word	0x1fff9cb8

0000451c <cliFunc_connectRst>:
		break;
	}
}

void cliFunc_connectRst( char* args )
{
    451c:	b508      	push	{r3, lr}
	print( NL );
    451e:	4806      	ldr	r0, [pc, #24]	; (4538 <cliFunc_connectRst+0x1c>)
    4520:	f003 f96e 	bl	7800 <_print>
	info_msg("Resetting UARTConnect state...");
    4524:	4805      	ldr	r0, [pc, #20]	; (453c <cliFunc_connectRst+0x20>)
    4526:	f003 f96b 	bl	7800 <_print>
	Connect_reset();
    452a:	f7ff ffd3 	bl	44d4 <Connect_reset>

	// Reset node id
	Connect_id = 0xFF;
    452e:	4b04      	ldr	r3, [pc, #16]	; (4540 <cliFunc_connectRst+0x24>)
    4530:	22ff      	movs	r2, #255	; 0xff
    4532:	701a      	strb	r2, [r3, #0]
    4534:	bd08      	pop	{r3, pc}
    4536:	bf00      	nop
    4538:	0000b26f 	.word	0x0000b26f
    453c:	0000914c 	.word	0x0000914c
    4540:	1fff89c5 	.word	0x1fff89c5

00004544 <Connect_setup>:
// Setup connection to other side
// - Only supports a single slave and master
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
    4544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Indication that UARTs are not ready
	uarts_configured = 0;
    4546:	4e52      	ldr	r6, [pc, #328]	; (4690 <Connect_setup+0x14c>)

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    4548:	4952      	ldr	r1, [pc, #328]	; (4694 <Connect_setup+0x150>)
// Setup connection to other side
// - Only supports a single slave and master
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
    454a:	4605      	mov	r5, r0
	// Indication that UARTs are not ready
	uarts_configured = 0;
    454c:	2400      	movs	r4, #0

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    454e:	4852      	ldr	r0, [pc, #328]	; (4698 <Connect_setup+0x154>)
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
	// Indication that UARTs are not ready
	uarts_configured = 0;
    4550:	7034      	strb	r4, [r6, #0]

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    4552:	f002 ff17 	bl	7384 <CLI_registerDictionary>

	// Check if master
	Connect_master = master;
    4556:	4b51      	ldr	r3, [pc, #324]	; (469c <Connect_setup+0x158>)
    4558:	701d      	strb	r5, [r3, #0]
	if ( Connect_master )
    455a:	b10d      	cbz	r5, 4560 <Connect_setup+0x1c>
		Connect_id = 0; // 0x00 is always the master Id
    455c:	4b50      	ldr	r3, [pc, #320]	; (46a0 <Connect_setup+0x15c>)
    455e:	701c      	strb	r4, [r3, #0]

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    4560:	4b50      	ldr	r3, [pc, #320]	; (46a4 <Connect_setup+0x160>)
	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
    4562:	4c51      	ldr	r4, [pc, #324]	; (46a8 <Connect_setup+0x164>)
		Connect_id = 0; // 0x00 is always the master Id

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    4564:	681a      	ldr	r2, [r3, #0]
	// Default control register
	DMA_CR = 0;

	// DMA Priority
	DMA_DCHPRI0 = 0; // Ch 0, priority 0
	DMA_DCHPRI1 = 1; // ch 1, priority 1
    4566:	4d51      	ldr	r5, [pc, #324]	; (46ac <Connect_setup+0x168>)

	// Clear error interrupts
	DMA_EEI = 0;

	// Setup TCD
	DMA_TCD0_SADDR = (uint32_t*)&UART0_D;
    4568:	4f51      	ldr	r7, [pc, #324]	; (46b0 <Connect_setup+0x16c>)
		Connect_id = 0; // 0x00 is always the master Id

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    456a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    456e:	601a      	str	r2, [r3, #0]
	SIM_SCGC4 |= SIM_SCGC4_UART1; // Disable clock gating
    4570:	681a      	ldr	r2, [r3, #0]
    4572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    4576:	601a      	str	r2, [r3, #0]

	// Pin Setup for UART0 / UART1
	PORTA_PCR1 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(2); // RX Pin
    4578:	f240 2213 	movw	r2, #531	; 0x213
    457c:	f8c3 2fd0 	str.w	r2, [r3, #4048]	; 0xfd0
	PORTA_PCR2 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(2); // TX Pin
    4580:	f44f 7211 	mov.w	r2, #580	; 0x244
    4584:	f8c3 2fd4 	str.w	r2, [r3, #4052]	; 0xfd4
	PORTE_PCR0 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); // RX Pin
    4588:	4b4a      	ldr	r3, [pc, #296]	; (46b4 <Connect_setup+0x170>)
    458a:	f240 3213 	movw	r2, #787	; 0x313
    458e:	601a      	str	r2, [r3, #0]
	PORTE_PCR1 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); // TX Pin
    4590:	f44f 7251 	mov.w	r2, #836	; 0x344
    4594:	605a      	str	r2, [r3, #4]

	// Baud Rate setting
	UART0_BDH = (uint8_t)(Connect_baud >> 8);
    4596:	4b48      	ldr	r3, [pc, #288]	; (46b8 <Connect_setup+0x174>)
    4598:	4a48      	ldr	r2, [pc, #288]	; (46bc <Connect_setup+0x178>)
    459a:	8819      	ldrh	r1, [r3, #0]
    459c:	0a09      	lsrs	r1, r1, #8
    459e:	7011      	strb	r1, [r2, #0]
	UART0_BDL = (uint8_t)Connect_baud;
    45a0:	7819      	ldrb	r1, [r3, #0]
    45a2:	7051      	strb	r1, [r2, #1]
	UART0_C4  = Connect_baudFine;
    45a4:	4a46      	ldr	r2, [pc, #280]	; (46c0 <Connect_setup+0x17c>)
    45a6:	4947      	ldr	r1, [pc, #284]	; (46c4 <Connect_setup+0x180>)
    45a8:	7810      	ldrb	r0, [r2, #0]
    45aa:	7008      	strb	r0, [r1, #0]
	UART1_BDH = (uint8_t)(Connect_baud >> 8);
    45ac:	8818      	ldrh	r0, [r3, #0]
    45ae:	0a00      	lsrs	r0, r0, #8
    45b0:	f881 0ff6 	strb.w	r0, [r1, #4086]	; 0xff6
	UART1_BDL = (uint8_t)Connect_baud;
    45b4:	7819      	ldrb	r1, [r3, #0]
    45b6:	4b44      	ldr	r3, [pc, #272]	; (46c8 <Connect_setup+0x184>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
	DMAMUX0_CHCFG1 = 0;
    45b8:	4844      	ldr	r0, [pc, #272]	; (46cc <Connect_setup+0x188>)
	// Baud Rate setting
	UART0_BDH = (uint8_t)(Connect_baud >> 8);
	UART0_BDL = (uint8_t)Connect_baud;
	UART0_C4  = Connect_baudFine;
	UART1_BDH = (uint8_t)(Connect_baud >> 8);
	UART1_BDL = (uint8_t)Connect_baud;
    45ba:	7019      	strb	r1, [r3, #0]
	UART1_C4  = Connect_baudFine;
    45bc:	7812      	ldrb	r2, [r2, #0]
    45be:	725a      	strb	r2, [r3, #9]

	// 8 bit, Even Parity, Idle Character bit after stop
	// NOTE: For 8 bit with Parity you must enable 9 bit transmission (pg. 1065)
	//       You only need to use UART0_D for 8 bit reading/writing though
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    45c0:	4a43      	ldr	r2, [pc, #268]	; (46d0 <Connect_setup+0x18c>)
    45c2:	2316      	movs	r3, #22
    45c4:	7013      	strb	r3, [r2, #0]
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    45c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    45ca:	2180      	movs	r1, #128	; 0x80
	// 8 bit, Even Parity, Idle Character bit after stop
	// NOTE: For 8 bit with Parity you must enable 9 bit transmission (pg. 1065)
	//       You only need to use UART0_D for 8 bit reading/writing though
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    45cc:	7013      	strb	r3, [r2, #0]

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    45ce:	4b41      	ldr	r3, [pc, #260]	; (46d4 <Connect_setup+0x190>)
    45d0:	7019      	strb	r1, [r3, #0]
	UART1_PFIFO = UART_PFIFO_TXFE;
    45d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    45d6:	7019      	strb	r1, [r3, #0]

	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    45d8:	f5a3 330b 	sub.w	r3, r3, #142336	; 0x22c00
    45dc:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
    45e0:	681a      	ldr	r2, [r3, #0]
    45e2:	f042 0202 	orr.w	r2, r2, #2
    45e6:	601a      	str	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    45e8:	685a      	ldr	r2, [r3, #4]
    45ea:	f042 0202 	orr.w	r2, r2, #2
    45ee:	605a      	str	r2, [r3, #4]
	DMAMUX0_CHCFG0 = 0;
	DMAMUX0_CHCFG1 = 0;

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    45f0:	4a39      	ldr	r2, [pc, #228]	; (46d8 <Connect_setup+0x194>)
	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
    45f2:	2300      	movs	r3, #0
    45f4:	7023      	strb	r3, [r4, #0]
	DMAMUX0_CHCFG1 = 0;
    45f6:	7003      	strb	r3, [r0, #0]

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    45f8:	8013      	strh	r3, [r2, #0]
	DMA_TCD1_CSR = 0;
    45fa:	8413      	strh	r3, [r2, #32]

	// Default control register
	DMA_CR = 0;
    45fc:	4a37      	ldr	r2, [pc, #220]	; (46dc <Connect_setup+0x198>)
    45fe:	6013      	str	r3, [r2, #0]

	// DMA Priority
	DMA_DCHPRI0 = 0; // Ch 0, priority 0
    4600:	f882 3103 	strb.w	r3, [r2, #259]	; 0x103
	DMA_DCHPRI1 = 1; // ch 1, priority 1
    4604:	2201      	movs	r2, #1
    4606:	702a      	strb	r2, [r5, #0]

	// Clear error interrupts
	DMA_EEI = 0;
    4608:	f845 3cee 	str.w	r3, [r5, #-238]

	// Setup TCD
	DMA_TCD0_SADDR = (uint32_t*)&UART0_D;
    460c:	f8c5 7efe 	str.w	r7, [r5, #3838]	; 0xefe
    4610:	f605 65fe 	addw	r5, r5, #3838	; 0xefe
	DMA_TCD1_SADDR = (uint32_t*)&UART1_D;
    4614:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
    4618:	622f      	str	r7, [r5, #32]
	DMA_TCD0_SOFF = 0;
    461a:	80ab      	strh	r3, [r5, #4]
	DMA_TCD1_SOFF = 0;
    461c:	84ab      	strh	r3, [r5, #36]	; 0x24

	// No modulo, 8-bit transfer size
	DMA_TCD0_ATTR = DMA_TCD_ATTR_SMOD(0) | DMA_TCD_ATTR_SSIZE(0) | DMA_TCD_ATTR_DMOD(0) | DMA_TCD_ATTR_DSIZE(0);
    461e:	80eb      	strh	r3, [r5, #6]
	DMA_TCD1_ATTR = DMA_TCD_ATTR_SMOD(0) | DMA_TCD_ATTR_SSIZE(0) | DMA_TCD_ATTR_DMOD(0) | DMA_TCD_ATTR_DSIZE(0);
    4620:	84eb      	strh	r3, [r5, #38]	; 0x26

	// One byte transferred at a time
	DMA_TCD0_NBYTES_MLNO = 1;
    4622:	60aa      	str	r2, [r5, #8]
	DMA_TCD1_NBYTES_MLNO = 1;
    4624:	62aa      	str	r2, [r5, #40]	; 0x28

	// Source address does not change
	DMA_TCD0_SLAST = 0;
    4626:	60eb      	str	r3, [r5, #12]
	DMA_TCD1_SLAST = 0;
    4628:	62eb      	str	r3, [r5, #44]	; 0x2c

	// Destination buffer
	DMA_TCD0_DADDR = (uint32_t*)uart_rx_buf[0].buffer;
    462a:	4b2d      	ldr	r3, [pc, #180]	; (46e0 <Connect_setup+0x19c>)
    462c:	612b      	str	r3, [r5, #16]
	DMA_TCD1_DADDR = (uint32_t*)uart_rx_buf[1].buffer;
    462e:	3382      	adds	r3, #130	; 0x82
    4630:	632b      	str	r3, [r5, #48]	; 0x30

	// Incoming byte, increment by 1 in the rx buffer
	DMA_TCD0_DOFF = 1;
    4632:	4b2c      	ldr	r3, [pc, #176]	; (46e4 <Connect_setup+0x1a0>)
    4634:	801a      	strh	r2, [r3, #0]
	DMA_TCD1_DOFF = 1;
    4636:	841a      	strh	r2, [r3, #32]

	// Single major loop, must be the same value
	DMA_TCD0_CITER_ELINKNO = UART_Buffer_Size;
    4638:	8059      	strh	r1, [r3, #2]
	DMA_TCD1_CITER_ELINKNO = UART_Buffer_Size;
    463a:	8459      	strh	r1, [r3, #34]	; 0x22
	DMA_TCD0_BITER_ELINKNO = UART_Buffer_Size;
    463c:	8159      	strh	r1, [r3, #10]
	DMA_TCD1_BITER_ELINKNO = UART_Buffer_Size;
    463e:	8559      	strh	r1, [r3, #42]	; 0x2a

	// Reset buffer when full
	DMA_TCD0_DLASTSGA = -( UART_Buffer_Size );
    4640:	4929      	ldr	r1, [pc, #164]	; (46e8 <Connect_setup+0x1a4>)
    4642:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    4646:	600b      	str	r3, [r1, #0]
	DMA_TCD1_DLASTSGA = -( UART_Buffer_Size );
    4648:	620b      	str	r3, [r1, #32]

	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;
    464a:	4b28      	ldr	r3, [pc, #160]	; (46ec <Connect_setup+0x1a8>)
    464c:	6819      	ldr	r1, [r3, #0]
    464e:	f041 0103 	orr.w	r1, r1, #3
    4652:	6019      	str	r1, [r3, #0]

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
    4654:	2382      	movs	r3, #130	; 0x82
    4656:	7023      	strb	r3, [r4, #0]
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    4658:	4925      	ldr	r1, [pc, #148]	; (46f0 <Connect_setup+0x1ac>)
	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;
    465a:	2384      	movs	r3, #132	; 0x84
    465c:	7003      	strb	r3, [r0, #0]

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    465e:	2320      	movs	r3, #32
    4660:	700b      	strb	r3, [r1, #0]
	UART1_C5 = UART_C5_RDMAS;
    4662:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    4666:	700b      	strb	r3, [r1, #0]

	// TX Enabled, RX Enabled, RX Interrupt Enabled
	UART0_C2 = UART_C2_TE | UART_C2_RE | UART_C2_RIE;
    4668:	4922      	ldr	r1, [pc, #136]	; (46f4 <Connect_setup+0x1b0>)
    466a:	232c      	movs	r3, #44	; 0x2c
    466c:	700b      	strb	r3, [r1, #0]
	UART1_C2 = UART_C2_TE | UART_C2_RE | UART_C2_RIE;
    466e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    4672:	700b      	strb	r3, [r1, #0]

	// Add interrupts to the vector table
	NVIC_ENABLE_IRQ( IRQ_UART0_STATUS );
    4674:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
    4678:	33d8      	adds	r3, #216	; 0xd8
    467a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    467e:	6019      	str	r1, [r3, #0]
	NVIC_ENABLE_IRQ( IRQ_UART1_STATUS );
    4680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4684:	6019      	str	r1, [r3, #0]

	// UARTs are now ready to go
	uarts_configured = 1;
    4686:	7032      	strb	r2, [r6, #0]

	// Reset the state of the UART variables
	Connect_reset();
}
    4688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	// UARTs are now ready to go
	uarts_configured = 1;

	// Reset the state of the UART variables
	Connect_reset();
    468c:	f7ff bf22 	b.w	44d4 <Connect_reset>
    4690:	1fff8ff9 	.word	0x1fff8ff9
    4694:	000092c7 	.word	0x000092c7
    4698:	00008c5c 	.word	0x00008c5c
    469c:	1fff9012 	.word	0x1fff9012
    46a0:	1fff89c5 	.word	0x1fff89c5
    46a4:	40048034 	.word	0x40048034
    46a8:	40021000 	.word	0x40021000
    46ac:	40008102 	.word	0x40008102
    46b0:	4006a007 	.word	0x4006a007
    46b4:	4004d000 	.word	0x4004d000
    46b8:	1fff89c6 	.word	0x1fff89c6
    46bc:	4006a000 	.word	0x4006a000
    46c0:	1fff8ffa 	.word	0x1fff8ffa
    46c4:	4006a00a 	.word	0x4006a00a
    46c8:	4006b001 	.word	0x4006b001
    46cc:	40021001 	.word	0x40021001
    46d0:	4006a002 	.word	0x4006a002
    46d4:	4006a010 	.word	0x4006a010
    46d8:	4000901c 	.word	0x4000901c
    46dc:	40008000 	.word	0x40008000
    46e0:	1fff9cb8 	.word	0x1fff9cb8
    46e4:	40009014 	.word	0x40009014
    46e8:	40009018 	.word	0x40009018
    46ec:	4000800c 	.word	0x4000800c
    46f0:	4006a00b 	.word	0x4006a00b
    46f4:	4006a003 	.word	0x4006a003

000046f8 <Connect_rx_process>:
#define DMA_BUF_POS( x, pos ) \
	case x: \
		pos = DMA_TCD##x##_CITER_ELINKNO; \
		break
void Connect_rx_process( uint8_t uartNum )
{
    46f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Determine current position to read until
	uint16_t bufpos = 0;
	switch ( uartNum )
    46fc:	4604      	mov	r4, r0
    46fe:	b118      	cbz	r0, 4708 <Connect_rx_process+0x10>
    4700:	2801      	cmp	r0, #1
    4702:	d107      	bne.n	4714 <Connect_rx_process+0x1c>
	{
	DMA_BUF_POS( 0, bufpos );
	DMA_BUF_POS( 1, bufpos );
    4704:	4b57      	ldr	r3, [pc, #348]	; (4864 <Connect_rx_process+0x16c>)
    4706:	e000      	b.n	470a <Connect_rx_process+0x12>
{
	// Determine current position to read until
	uint16_t bufpos = 0;
	switch ( uartNum )
	{
	DMA_BUF_POS( 0, bufpos );
    4708:	4b57      	ldr	r3, [pc, #348]	; (4868 <Connect_rx_process+0x170>)
	DMA_BUF_POS( 1, bufpos );
    470a:	f8b3 8000 	ldrh.w	r8, [r3]
    470e:	fa1f f888 	uxth.w	r8, r8
    4712:	e008      	b.n	4726 <Connect_rx_process+0x2e>
		pos = DMA_TCD##x##_CITER_ELINKNO; \
		break
void Connect_rx_process( uint8_t uartNum )
{
	// Determine current position to read until
	uint16_t bufpos = 0;
    4714:	f04f 0800 	mov.w	r8, #0
    4718:	e005      	b.n	4726 <Connect_rx_process+0x2e>
			break;
		}

		// Unknown status, should never get here
		default:
			erro_msg("Invalid UARTStatus...");
    471a:	4854      	ldr	r0, [pc, #336]	; (486c <Connect_rx_process+0x174>)
    471c:	f003 f870 	bl	7800 <_print>
			uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    4720:	2300      	movs	r3, #0
    4722:	f805 3024 	strb.w	r3, [r5, r4, lsl #2]
	DMA_BUF_POS( 1, bufpos );
	}

	// Process each of the new bytes
	// Even if we receive more bytes during processing, wait until the next check so we don't starve other tasks
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
    4726:	4b52      	ldr	r3, [pc, #328]	; (4870 <Connect_rx_process+0x178>)
    4728:	2282      	movs	r2, #130	; 0x82
    472a:	fb02 3204 	mla	r2, r2, r4, r3
    472e:	4618      	mov	r0, r3
    4730:	f8b2 1080 	ldrh.w	r1, [r2, #128]	; 0x80
    4734:	b289      	uxth	r1, r1
    4736:	4588      	cmp	r8, r1
    4738:	f000 8092 	beq.w	4860 <Connect_rx_process+0x168>
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
    473c:	f8b2 1080 	ldrh.w	r1, [r2, #128]	; 0x80
    4740:	b289      	uxth	r1, r1
    4742:	b1c9      	cbz	r1, 4778 <Connect_rx_process+0x80>
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    4744:	2282      	movs	r2, #130	; 0x82
    4746:	4362      	muls	r2, r4
    4748:	4410      	add	r0, r2

		if ( Connect_debug )
    474a:	4e4a      	ldr	r6, [pc, #296]	; (4874 <Connect_rx_process+0x17c>)
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    474c:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
    4750:	b289      	uxth	r1, r1
    4752:	1e4d      	subs	r5, r1, #1
    4754:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
    4758:	b2ad      	uxth	r5, r5
    475a:	440a      	add	r2, r1
    475c:	f8a0 5080 	strh.w	r5, [r0, #128]	; 0x80
    4760:	5c9f      	ldrb	r7, [r3, r2]

		if ( Connect_debug )
    4762:	7833      	ldrb	r3, [r6, #0]
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    4764:	b2ff      	uxtb	r7, r7

		if ( Connect_debug )
    4766:	b173      	cbz	r3, 4786 <Connect_rx_process+0x8e>
		{
			printHex( byte );
    4768:	4638      	mov	r0, r7
    476a:	2101      	movs	r1, #1
    476c:	f003 f8d1 	bl	7912 <printHex_op>
			print(" ");
    4770:	4841      	ldr	r0, [pc, #260]	; (4878 <Connect_rx_process+0x180>)
    4772:	f003 f845 	bl	7800 <_print>
    4776:	e006      	b.n	4786 <Connect_rx_process+0x8e>
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
		{
			uart_rx_buf[ uartNum ].last_read = UART_Buffer_Size;
    4778:	2180      	movs	r1, #128	; 0x80

			// Check to see if we're at the boundary
			if ( bufpos == UART_Buffer_Size )
    477a:	4588      	cmp	r8, r1
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
		{
			uart_rx_buf[ uartNum ].last_read = UART_Buffer_Size;
    477c:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80

			// Check to see if we're at the boundary
			if ( bufpos == UART_Buffer_Size )
    4780:	d1e0      	bne.n	4744 <Connect_rx_process+0x4c>
    4782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			printHex( byte );
			print(" ");
		}

		// Process UART byte
		switch ( uart_rx_status[ uartNum ].status )
    4786:	4d3d      	ldr	r5, [pc, #244]	; (487c <Connect_rx_process+0x184>)
    4788:	f815 3024 	ldrb.w	r3, [r5, r4, lsl #2]
    478c:	46a9      	mov	r9, r5
    478e:	2b03      	cmp	r3, #3
    4790:	d8c3      	bhi.n	471a <Connect_rx_process+0x22>
    4792:	e8df f003 	tbb	[pc, r3]
    4796:	0e02      	.short	0x0e02
    4798:	4918      	.short	0x4918
		{
		// Every packet must start with a SYN / 0x16
		case UARTStatus_Wait:
			if ( Connect_debug )
    479a:	7833      	ldrb	r3, [r6, #0]
    479c:	b113      	cbz	r3, 47a4 <Connect_rx_process+0xac>
			{
				print(" Wait ");
    479e:	4838      	ldr	r0, [pc, #224]	; (4880 <Connect_rx_process+0x188>)
    47a0:	f003 f82e 	bl	7800 <_print>
			}
			uart_rx_status[ uartNum ].status = byte == 0x16 ? UARTStatus_SYN : UARTStatus_Wait;
    47a4:	f1b7 0316 	subs.w	r3, r7, #22
    47a8:	425f      	negs	r7, r3
    47aa:	415f      	adcs	r7, r3
    47ac:	f805 7024 	strb.w	r7, [r5, r4, lsl #2]
			break;
    47b0:	e04e      	b.n	4850 <Connect_rx_process+0x158>

		// After a SYN, there must be a SOH / 0x01
		case UARTStatus_SYN:
			if ( Connect_debug )
    47b2:	7833      	ldrb	r3, [r6, #0]
    47b4:	b113      	cbz	r3, 47bc <Connect_rx_process+0xc4>
			{
				print(" SYN ");
    47b6:	4833      	ldr	r0, [pc, #204]	; (4884 <Connect_rx_process+0x18c>)
    47b8:	f003 f822 	bl	7800 <_print>
			}
			uart_rx_status[ uartNum ].status = byte == 0x01 ? UARTStatus_SOH : UARTStatus_Wait;
    47bc:	2f01      	cmp	r7, #1
    47be:	bf14      	ite	ne
    47c0:	2300      	movne	r3, #0
    47c2:	2302      	moveq	r3, #2
    47c4:	e007      	b.n	47d6 <Connect_rx_process+0xde>
		// After a SOH the packet structure may diverge a bit
		// This is the packet type field (refer to the Command enum)
		// For very small packets (e.g. IdRequest) this is all that's required to take action
		case UARTStatus_SOH:
		{
			if ( Connect_debug )
    47c6:	7833      	ldrb	r3, [r6, #0]
    47c8:	b113      	cbz	r3, 47d0 <Connect_rx_process+0xd8>
			{
				print(" SOH ");
    47ca:	482f      	ldr	r0, [pc, #188]	; (4888 <Connect_rx_process+0x190>)
    47cc:	f003 f818 	bl	7800 <_print>
			}

			// Check if this is actually a reserved CMD 0x16 (Error condition)
			if ( byte == Command_SYN )
    47d0:	2f16      	cmp	r7, #22
    47d2:	d103      	bne.n	47dc <Connect_rx_process+0xe4>
			{
				uart_rx_status[ uartNum ].status = UARTStatus_SYN;
    47d4:	2301      	movs	r3, #1
    47d6:	f805 3024 	strb.w	r3, [r5, r4, lsl #2]
				break;
    47da:	e039      	b.n	4850 <Connect_rx_process+0x158>
			}

			// Otherwise process the command
			if ( byte < Command_TOP )
    47dc:	2f08      	cmp	r7, #8
    47de:	ea4f 0384 	mov.w	r3, r4, lsl #2
    47e2:	d809      	bhi.n	47f8 <Connect_rx_process+0x100>
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
    47e4:	2203      	movs	r2, #3
    47e6:	f805 2024 	strb.w	r2, [r5, r4, lsl #2]
				uart_rx_status[ uartNum ].command = byte;
    47ea:	eb09 0203 	add.w	r2, r9, r3
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
    47ee:	f64f 71ff 	movw	r1, #65535	; 0xffff

			// Otherwise process the command
			if ( byte < Command_TOP )
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
				uart_rx_status[ uartNum ].command = byte;
    47f2:	7057      	strb	r7, [r2, #1]
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
    47f4:	8051      	strh	r1, [r2, #2]
    47f6:	e002      	b.n	47fe <Connect_rx_process+0x106>
			}
			// Invalid packet type, ignore
			else
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    47f8:	2200      	movs	r2, #0
    47fa:	f805 2024 	strb.w	r2, [r5, r4, lsl #2]
			}

			// Check if this is a very short packet
			switch ( uart_rx_status[ uartNum ].command )
    47fe:	eb09 0503 	add.w	r5, r9, r3
    4802:	786b      	ldrb	r3, [r5, #1]
    4804:	2b01      	cmp	r3, #1
    4806:	d105      	bne.n	4814 <Connect_rx_process+0x11c>
			{
			case IdRequest:
				Connect_receive_IdRequest( 0, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum );
    4808:	1ca9      	adds	r1, r5, #2
    480a:	4622      	mov	r2, r4
    480c:	2000      	movs	r0, #0
    480e:	f7ff fcc1 	bl	4194 <Connect_receive_IdRequest>
    4812:	e019      	b.n	4848 <Connect_rx_process+0x150>
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
				break;

			default:
				if ( Connect_debug )
    4814:	7833      	ldrb	r3, [r6, #0]
    4816:	b1db      	cbz	r3, 4850 <Connect_rx_process+0x158>
				{
					print(" ### ");
    4818:	481c      	ldr	r0, [pc, #112]	; (488c <Connect_rx_process+0x194>)
    481a:	f002 fff1 	bl	7800 <_print>
					printHex( uart_rx_status[ uartNum ].command );
    481e:	7868      	ldrb	r0, [r5, #1]
    4820:	2101      	movs	r1, #1
    4822:	f003 f876 	bl	7912 <printHex_op>
    4826:	e013      	b.n	4850 <Connect_rx_process+0x158>

		// After the packet type has been deciphered do Command specific processing
		// Until the Command has received all the bytes it requires the UART buffer stays in this state
		case UARTStatus_Command:
		{
			if ( Connect_debug )
    4828:	7833      	ldrb	r3, [r6, #0]
    482a:	b113      	cbz	r3, 4832 <Connect_rx_process+0x13a>
			{
				print(" CMD ");
    482c:	4818      	ldr	r0, [pc, #96]	; (4890 <Connect_rx_process+0x198>)
    482e:	f002 ffe7 	bl	7800 <_print>
			}
			/* Call specific UARTConnect command receive function */
			uint8_t (*rcvFunc)(uint8_t, uint16_t(*), uint8_t) = (uint8_t(*)(uint8_t, uint16_t(*), uint8_t))(Connect_receiveFunctions[ uart_rx_status[ uartNum ].command ]);
    4832:	eb09 0184 	add.w	r1, r9, r4, lsl #2
			if ( rcvFunc( byte, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum ) )
    4836:	4b17      	ldr	r3, [pc, #92]	; (4894 <Connect_rx_process+0x19c>)
			if ( Connect_debug )
			{
				print(" CMD ");
			}
			/* Call specific UARTConnect command receive function */
			uint8_t (*rcvFunc)(uint8_t, uint16_t(*), uint8_t) = (uint8_t(*)(uint8_t, uint16_t(*), uint8_t))(Connect_receiveFunctions[ uart_rx_status[ uartNum ].command ]);
    4838:	784a      	ldrb	r2, [r1, #1]
			if ( rcvFunc( byte, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum ) )
    483a:	4638      	mov	r0, r7
    483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4840:	3102      	adds	r1, #2
    4842:	4622      	mov	r2, r4
    4844:	4798      	blx	r3
    4846:	b118      	cbz	r0, 4850 <Connect_rx_process+0x158>
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    4848:	4b0c      	ldr	r3, [pc, #48]	; (487c <Connect_rx_process+0x184>)
    484a:	2200      	movs	r2, #0
    484c:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
			erro_msg("Invalid UARTStatus...");
			uart_rx_status[ uartNum ].status = UARTStatus_Wait;
			continue;
		}

		if ( Connect_debug )
    4850:	7833      	ldrb	r3, [r6, #0]
    4852:	2b00      	cmp	r3, #0
    4854:	f43f af67 	beq.w	4726 <Connect_rx_process+0x2e>
		{
			print( NL );
    4858:	480f      	ldr	r0, [pc, #60]	; (4898 <Connect_rx_process+0x1a0>)
    485a:	f002 ffd1 	bl	7800 <_print>
    485e:	e762      	b.n	4726 <Connect_rx_process+0x2e>
    4860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4864:	40009036 	.word	0x40009036
    4868:	40009016 	.word	0x40009016
    486c:	0000919c 	.word	0x0000919c
    4870:	1fff9cb8 	.word	0x1fff9cb8
    4874:	1fff9009 	.word	0x1fff9009
    4878:	00008152 	.word	0x00008152
    487c:	1fff9cb0 	.word	0x1fff9cb0
    4880:	0000917d 	.word	0x0000917d
    4884:	00009184 	.word	0x00009184
    4888:	0000918a 	.word	0x0000918a
    488c:	00009190 	.word	0x00009190
    4890:	00009196 	.word	0x00009196
    4894:	1fff89c8 	.word	0x1fff89c8
    4898:	0000b26f 	.word	0x0000b26f

0000489c <Connect_scan>:
// - Interrupts will deal with most input functions
// - Used to send queries
// - SyncEvent is sent immediately once the current command is sent
// - SyncEvent is also blocking until sent
void Connect_scan()
{
    489c:	b570      	push	{r4, r5, r6, lr}
	// Check if initially configured as a slave and usb comes up
	// Then reconfigure as a master
	if ( !Connect_master && Output_Available && !Connect_override )
    489e:	4b62      	ldr	r3, [pc, #392]	; (4a28 <Connect_scan+0x18c>)
    48a0:	781a      	ldrb	r2, [r3, #0]
    48a2:	461c      	mov	r4, r3
    48a4:	b942      	cbnz	r2, 48b8 <Connect_scan+0x1c>
    48a6:	4b61      	ldr	r3, [pc, #388]	; (4a2c <Connect_scan+0x190>)
    48a8:	781a      	ldrb	r2, [r3, #0]
    48aa:	b12a      	cbz	r2, 48b8 <Connect_scan+0x1c>
    48ac:	4a60      	ldr	r2, [pc, #384]	; (4a30 <Connect_scan+0x194>)
    48ae:	7812      	ldrb	r2, [r2, #0]
    48b0:	b912      	cbnz	r2, 48b8 <Connect_scan+0x1c>
	{
		Connect_setup( Output_Available );
    48b2:	7818      	ldrb	r0, [r3, #0]
    48b4:	f7ff fe46 	bl	4544 <Connect_setup>
	}

	// Limit how often we do cable checks
	uint32_t time_compare = 0x7FF; // Must be all 1's, 0x3FF is valid, 0x4FF is not
	uint32_t current_time = systick_millis_count;
    48b8:	4b5e      	ldr	r3, [pc, #376]	; (4a34 <Connect_scan+0x198>)
	if ( Connect_lastCheck != current_time
    48ba:	4a5f      	ldr	r2, [pc, #380]	; (4a38 <Connect_scan+0x19c>)
		Connect_setup( Output_Available );
	}

	// Limit how often we do cable checks
	uint32_t time_compare = 0x7FF; // Must be all 1's, 0x3FF is valid, 0x4FF is not
	uint32_t current_time = systick_millis_count;
    48bc:	681b      	ldr	r3, [r3, #0]
	if ( Connect_lastCheck != current_time
    48be:	6811      	ldr	r1, [r2, #0]
    48c0:	4299      	cmp	r1, r3
    48c2:	d014      	beq.n	48ee <Connect_scan+0x52>
		&& ( current_time & time_compare ) == time_compare
    48c4:	f3c3 000a 	ubfx	r0, r3, #0, #11
    48c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
    48cc:	4288      	cmp	r0, r1
    48ce:	d10e      	bne.n	48ee <Connect_scan+0x52>
	{
		// Make sure we don't double check if the clock speed is too high
		Connect_lastCheck = current_time;

		// Send a cable check command of 2 bytes
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    48d0:	2002      	movs	r0, #2
	if ( Connect_lastCheck != current_time
		&& ( current_time & time_compare ) == time_compare
	)
	{
		// Make sure we don't double check if the clock speed is too high
		Connect_lastCheck = current_time;
    48d2:	6013      	str	r3, [r2, #0]

		// Send a cable check command of 2 bytes
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    48d4:	f7ff fbd6 	bl	4084 <Connect_send_CableCheck>

		// If this is a slave, and we don't have an id yeth
		// Don't bother sending if there are cable issues
		if ( !Connect_master && Connect_id == 0xFF && Connect_cableOkMaster )
    48d8:	7823      	ldrb	r3, [r4, #0]
    48da:	b943      	cbnz	r3, 48ee <Connect_scan+0x52>
    48dc:	4b57      	ldr	r3, [pc, #348]	; (4a3c <Connect_scan+0x1a0>)
    48de:	781b      	ldrb	r3, [r3, #0]
    48e0:	2bff      	cmp	r3, #255	; 0xff
    48e2:	d104      	bne.n	48ee <Connect_scan+0x52>
    48e4:	4b56      	ldr	r3, [pc, #344]	; (4a40 <Connect_scan+0x1a4>)
    48e6:	781b      	ldrb	r3, [r3, #0]
    48e8:	b10b      	cbz	r3, 48ee <Connect_scan+0x52>
		{
			Connect_send_IdRequest();
    48ea:	f7ff fc11 	bl	4110 <Connect_send_IdRequest>
		}
	}

	// Only process commands if uarts have been configured
	if ( uarts_configured )
    48ee:	4b55      	ldr	r3, [pc, #340]	; (4a44 <Connect_scan+0x1a8>)
    48f0:	781b      	ldrb	r3, [r3, #0]
    48f2:	2b00      	cmp	r3, #0
    48f4:	f000 8097 	beq.w	4a26 <Connect_scan+0x18a>
	{
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
    48f8:	4c53      	ldr	r4, [pc, #332]	; (4a48 <Connect_scan+0x1ac>)
    48fa:	78a3      	ldrb	r3, [r4, #2]
    48fc:	b923      	cbnz	r3, 4908 <Connect_scan+0x6c>
			uart_fillTxFifo( 0 );
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
    48fe:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
    4902:	2b00      	cmp	r3, #0
    4904:	d140      	bne.n	4988 <Connect_scan+0xec>
    4906:	e042      	b.n	498e <Connect_scan+0xf2>
	// Only process commands if uarts have been configured
	if ( uarts_configured )
	{
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
    4908:	4e50      	ldr	r6, [pc, #320]	; (4a4c <Connect_scan+0x1b0>)
    490a:	7833      	ldrb	r3, [r6, #0]
    490c:	2b00      	cmp	r3, #0
    490e:	d1f6      	bne.n	48fe <Connect_scan+0x62>
			uart_fillTxFifo( 0 );
    4910:	4b4f      	ldr	r3, [pc, #316]	; (4a50 <Connect_scan+0x1b4>)
    4912:	781d      	ldrb	r5, [r3, #0]
    4914:	4b4f      	ldr	r3, [pc, #316]	; (4a54 <Connect_scan+0x1b8>)
    4916:	f005 0570 	and.w	r5, r5, #112	; 0x70
    491a:	781b      	ldrb	r3, [r3, #0]
    491c:	08ad      	lsrs	r5, r5, #2
    491e:	bf08      	it	eq
    4920:	2501      	moveq	r5, #1
    4922:	b1bb      	cbz	r3, 4954 <Connect_scan+0xb8>
    4924:	484c      	ldr	r0, [pc, #304]	; (4a58 <Connect_scan+0x1bc>)
    4926:	f002 ff6b 	bl	7800 <_print>
    492a:	2101      	movs	r1, #1
    492c:	4628      	mov	r0, r5
    492e:	f002 fff0 	bl	7912 <printHex_op>
    4932:	484a      	ldr	r0, [pc, #296]	; (4a5c <Connect_scan+0x1c0>)
    4934:	f002 ff64 	bl	7800 <_print>
    4938:	2101      	movs	r1, #1
    493a:	7830      	ldrb	r0, [r6, #0]
    493c:	f002 ffe9 	bl	7912 <printHex_op>
    4940:	4846      	ldr	r0, [pc, #280]	; (4a5c <Connect_scan+0x1c0>)
    4942:	f002 ff5d 	bl	7800 <_print>
    4946:	78a0      	ldrb	r0, [r4, #2]
    4948:	2101      	movs	r1, #1
    494a:	f002 ffe2 	bl	7912 <printHex_op>
    494e:	4844      	ldr	r0, [pc, #272]	; (4a60 <Connect_scan+0x1c4>)
    4950:	f002 ff56 	bl	7800 <_print>
    4954:	7833      	ldrb	r3, [r6, #0]
    4956:	1aed      	subs	r5, r5, r3
    4958:	b2ed      	uxtb	r5, r5
    495a:	2d00      	cmp	r5, #0
    495c:	d0cf      	beq.n	48fe <Connect_scan+0x62>
    495e:	78a2      	ldrb	r2, [r4, #2]
    4960:	4b39      	ldr	r3, [pc, #228]	; (4a48 <Connect_scan+0x1ac>)
    4962:	2a00      	cmp	r2, #0
    4964:	d0cb      	beq.n	48fe <Connect_scan+0x62>
    4966:	7819      	ldrb	r1, [r3, #0]
    4968:	1c48      	adds	r0, r1, #1
    496a:	4419      	add	r1, r3
    496c:	7018      	strb	r0, [r3, #0]
    496e:	78c8      	ldrb	r0, [r1, #3]
    4970:	493c      	ldr	r1, [pc, #240]	; (4a64 <Connect_scan+0x1c8>)
    4972:	3a01      	subs	r2, #1
    4974:	7008      	strb	r0, [r1, #0]
    4976:	709a      	strb	r2, [r3, #2]
    4978:	f993 2000 	ldrsb.w	r2, [r3]
    497c:	2a00      	cmp	r2, #0
    497e:	bfbc      	itt	lt
    4980:	2200      	movlt	r2, #0
    4982:	701a      	strblt	r2, [r3, #0]
    4984:	3d01      	subs	r5, #1
    4986:	e7e7      	b.n	4958 <Connect_scan+0xbc>
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
    4988:	4e37      	ldr	r6, [pc, #220]	; (4a68 <Connect_scan+0x1cc>)
    498a:	7833      	ldrb	r3, [r6, #0]
    498c:	b13b      	cbz	r3, 499e <Connect_scan+0x102>
			uart_fillTxFifo( 1 );

		// Process Rx Buffers
		Connect_rx_process( 0 );
    498e:	2000      	movs	r0, #0
    4990:	f7ff feb2 	bl	46f8 <Connect_rx_process>
		Connect_rx_process( 1 );
    4994:	2001      	movs	r0, #1
	}
}
    4996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
			uart_fillTxFifo( 1 );

		// Process Rx Buffers
		Connect_rx_process( 0 );
		Connect_rx_process( 1 );
    499a:	f7ff bead 	b.w	46f8 <Connect_rx_process>
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
			uart_fillTxFifo( 0 );
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
			uart_fillTxFifo( 1 );
    499e:	4b33      	ldr	r3, [pc, #204]	; (4a6c <Connect_scan+0x1d0>)
    49a0:	781d      	ldrb	r5, [r3, #0]
    49a2:	4b2c      	ldr	r3, [pc, #176]	; (4a54 <Connect_scan+0x1b8>)
    49a4:	f005 0570 	and.w	r5, r5, #112	; 0x70
    49a8:	781b      	ldrb	r3, [r3, #0]
    49aa:	08ad      	lsrs	r5, r5, #2
    49ac:	bf08      	it	eq
    49ae:	2501      	moveq	r5, #1
    49b0:	b1c3      	cbz	r3, 49e4 <Connect_scan+0x148>
    49b2:	482f      	ldr	r0, [pc, #188]	; (4a70 <Connect_scan+0x1d4>)
    49b4:	f002 ff24 	bl	7800 <_print>
    49b8:	2101      	movs	r1, #1
    49ba:	4628      	mov	r0, r5
    49bc:	f002 ffa9 	bl	7912 <printHex_op>
    49c0:	4826      	ldr	r0, [pc, #152]	; (4a5c <Connect_scan+0x1c0>)
    49c2:	f002 ff1d 	bl	7800 <_print>
    49c6:	2101      	movs	r1, #1
    49c8:	7830      	ldrb	r0, [r6, #0]
    49ca:	f002 ffa2 	bl	7912 <printHex_op>
    49ce:	4823      	ldr	r0, [pc, #140]	; (4a5c <Connect_scan+0x1c0>)
    49d0:	f002 ff16 	bl	7800 <_print>
    49d4:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    49d8:	2101      	movs	r1, #1
    49da:	f002 ff9a 	bl	7912 <printHex_op>
    49de:	4820      	ldr	r0, [pc, #128]	; (4a60 <Connect_scan+0x1c4>)
    49e0:	f002 ff0e 	bl	7800 <_print>
    49e4:	7833      	ldrb	r3, [r6, #0]
    49e6:	1aed      	subs	r5, r5, r3
    49e8:	b2ed      	uxtb	r5, r5
    49ea:	2d00      	cmp	r5, #0
    49ec:	d0cf      	beq.n	498e <Connect_scan+0xf2>
    49ee:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    49f2:	4b15      	ldr	r3, [pc, #84]	; (4a48 <Connect_scan+0x1ac>)
    49f4:	2900      	cmp	r1, #0
    49f6:	d0ca      	beq.n	498e <Connect_scan+0xf2>
    49f8:	f893 0083 	ldrb.w	r0, [r3, #131]	; 0x83
    49fc:	1c42      	adds	r2, r0, #1
    49fe:	4418      	add	r0, r3
    4a00:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    4a04:	f890 6086 	ldrb.w	r6, [r0, #134]	; 0x86
    4a08:	481a      	ldr	r0, [pc, #104]	; (4a74 <Connect_scan+0x1d8>)
    4a0a:	0612      	lsls	r2, r2, #24
    4a0c:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    4a10:	bf48      	it	mi
    4a12:	2200      	movmi	r2, #0
    4a14:	7006      	strb	r6, [r0, #0]
    4a16:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    4a1a:	f883 1085 	strb.w	r1, [r3, #133]	; 0x85
    4a1e:	bf48      	it	mi
    4a20:	f883 2083 	strbmi.w	r2, [r3, #131]	; 0x83
    4a24:	e7e0      	b.n	49e8 <Connect_scan+0x14c>
    4a26:	bd70      	pop	{r4, r5, r6, pc}
    4a28:	1fff9012 	.word	0x1fff9012
    4a2c:	1fff917c 	.word	0x1fff917c
    4a30:	1fff9011 	.word	0x1fff9011
    4a34:	1fff8fe0 	.word	0x1fff8fe0
    4a38:	1fff8ff4 	.word	0x1fff8ff4
    4a3c:	1fff89c5 	.word	0x1fff89c5
    4a40:	1fff8ff8 	.word	0x1fff8ff8
    4a44:	1fff8ff9 	.word	0x1fff8ff9
    4a48:	1fff9b86 	.word	0x1fff9b86
    4a4c:	4006a014 	.word	0x4006a014
    4a50:	4006a010 	.word	0x4006a010
    4a54:	1fff9009 	.word	0x1fff9009
    4a58:	000091c7 	.word	0x000091c7
    4a5c:	00008e68 	.word	0x00008e68
    4a60:	0000b26f 	.word	0x0000b26f
    4a64:	4006a007 	.word	0x4006a007
    4a68:	4006b014 	.word	0x4006b014
    4a6c:	4006b010 	.word	0x4006b010
    4a70:	000091d3 	.word	0x000091d3
    4a74:	4006b007 	.word	0x4006b007

00004a78 <Scan_setup>:

// ----- Functions -----

// Setup
inline void Scan_setup()
{
    4a78:	b508      	push	{r3, lr}
	// Setup UART Connect, if Output_Available, this is the master node
	Connect_setup( Output_Available );
    4a7a:	4b07      	ldr	r3, [pc, #28]	; (4a98 <Scan_setup+0x20>)
    4a7c:	7818      	ldrb	r0, [r3, #0]
    4a7e:	f7ff fd61 	bl	4544 <Connect_setup>

	// Setup GPIO pins for matrix scanning
	Matrix_setup();
    4a82:	f7fe fafb 	bl	307c <Matrix_setup>

	// Setup ISSI chip to control the leds
	LED_setup();
    4a86:	f7fd ffdb 	bl	2a40 <LED_setup>

	// Setup the ST/NHD lcd display
	LCD_setup();
    4a8a:	f7fe fe1d 	bl	36c8 <LCD_setup>

	// Reset scan count
	Scan_scanCount = 0;
    4a8e:	4b03      	ldr	r3, [pc, #12]	; (4a9c <Scan_setup+0x24>)
    4a90:	2200      	movs	r2, #0
    4a92:	801a      	strh	r2, [r3, #0]
    4a94:	bd08      	pop	{r3, pc}
    4a96:	bf00      	nop
    4a98:	1fff917c 	.word	0x1fff917c
    4a9c:	1fff9014 	.word	0x1fff9014

00004aa0 <Scan_loop>:
}


// Main Detection Loop
inline uint8_t Scan_loop()
{
    4aa0:	b508      	push	{r3, lr}
	// Scan Matrix
	Matrix_scan( Scan_scanCount++ );
    4aa2:	4b07      	ldr	r3, [pc, #28]	; (4ac0 <Scan_loop+0x20>)
    4aa4:	8818      	ldrh	r0, [r3, #0]
    4aa6:	1c42      	adds	r2, r0, #1
    4aa8:	801a      	strh	r2, [r3, #0]
    4aaa:	f7fe fb75 	bl	3198 <Matrix_scan>

	// Process any interconnect commands
	Connect_scan();
    4aae:	f7ff fef5 	bl	489c <Connect_scan>

	// Process any LED events
	LED_scan();
    4ab2:	f7fe f974 	bl	2d9e <LED_scan>

	// Process any LCD events
	LCD_scan();
    4ab6:	f7fe fe91 	bl	37dc <LCD_scan>

	return 0;
}
    4aba:	2000      	movs	r0, #0
    4abc:	bd08      	pop	{r3, pc}
    4abe:	bf00      	nop
    4ac0:	1fff9014 	.word	0x1fff9014

00004ac4 <Scan_finishedWithMacro>:


// Signal from Macro Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithMacro( uint8_t sentKeys )
{
    4ac4:	4770      	bx	lr
    4ac6:	0000      	movs	r0, r0

00004ac8 <Scan_finishedWithOutput>:
// Signal from Output Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithOutput( uint8_t sentKeys )
{
	// Reset scan loop indicator (resets each key debounce state)
	// TODO should this occur after USB send or Macro processing?
	Scan_scanCount = 0;
    4ac8:	4b01      	ldr	r3, [pc, #4]	; (4ad0 <Scan_finishedWithOutput+0x8>)
    4aca:	2200      	movs	r2, #0
    4acc:	801a      	strh	r2, [r3, #0]
    4ace:	4770      	bx	lr
    4ad0:	1fff9014 	.word	0x1fff9014

00004ad4 <cliFunc_capList>:


// ----- CLI Command Functions -----

void cliFunc_capList( char* args )
{
    4ad4:	b510      	push	{r4, lr}
	print( NL );
    4ad6:	4810      	ldr	r0, [pc, #64]	; (4b18 <cliFunc_capList+0x44>)
    4ad8:	f002 fe92 	bl	7800 <_print>
	info_msg("Capabilities List ");
    4adc:	480f      	ldr	r0, [pc, #60]	; (4b1c <cliFunc_capList+0x48>)
    4ade:	f002 fe8f 	bl	7800 <_print>
	printHex( CapabilitiesNum );
    4ae2:	200f      	movs	r0, #15
    4ae4:	2101      	movs	r1, #1
    4ae6:	f002 ff14 	bl	7912 <printHex_op>
    4aea:	2400      	movs	r4, #0

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
	{
		print( NL "\t" );
    4aec:	480c      	ldr	r0, [pc, #48]	; (4b20 <cliFunc_capList+0x4c>)
    4aee:	f002 fe87 	bl	7800 <_print>
		printHex( cap );
    4af2:	b2a0      	uxth	r0, r4
    4af4:	2101      	movs	r1, #1
    4af6:	f002 ff0c 	bl	7912 <printHex_op>
		print(" - ");
    4afa:	480a      	ldr	r0, [pc, #40]	; (4b24 <cliFunc_capList+0x50>)
    4afc:	f002 fe80 	bl	7800 <_print>

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
    4b00:	4b09      	ldr	r3, [pc, #36]	; (4b28 <cliFunc_capList+0x54>)
		capability( 0xFF, 0xFF, 0 );
    4b02:	20ff      	movs	r0, #255	; 0xff
    4b04:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
    4b08:	4601      	mov	r1, r0
    4b0a:	2200      	movs	r2, #0
    4b0c:	3401      	adds	r4, #1
    4b0e:	4798      	blx	r3
	print( NL );
	info_msg("Capabilities List ");
	printHex( CapabilitiesNum );

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
    4b10:	2c0f      	cmp	r4, #15
    4b12:	d1eb      	bne.n	4aec <cliFunc_capList+0x18>

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
		capability( 0xFF, 0xFF, 0 );
	}
}
    4b14:	bd10      	pop	{r4, pc}
    4b16:	bf00      	nop
    4b18:	0000b26f 	.word	0x0000b26f
    4b1c:	00009599 	.word	0x00009599
    4b20:	000095be 	.word	0x000095be
    4b24:	000091cf 	.word	0x000091cf
    4b28:	0000943c 	.word	0x0000943c

00004b2c <cliFunc_macroStep>:
		}
	}
}

void cliFunc_macroStep( char* args )
{
    4b2c:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    4b2e:	4669      	mov	r1, sp
    4b30:	aa01      	add	r2, sp, #4
    4b32:	f002 fbb1 	bl	7298 <CLI_argumentIsolation>

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );
    4b36:	9800      	ldr	r0, [sp, #0]
    4b38:	f002 ff40 	bl	79bc <numToInt>
    4b3c:	b2c0      	uxtb	r0, r0

	if ( count == 0 )
    4b3e:	2800      	cmp	r0, #0
		count = 1;

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    4b40:	4b03      	ldr	r3, [pc, #12]	; (4b50 <cliFunc_macroStep+0x24>)

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );

	if ( count == 0 )
		count = 1;
    4b42:	bf08      	it	eq
    4b44:	2001      	moveq	r0, #1

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    4b46:	8018      	strh	r0, [r3, #0]
}
    4b48:	b003      	add	sp, #12
    4b4a:	f85d fb04 	ldr.w	pc, [sp], #4
    4b4e:	bf00      	nop
    4b50:	1fff90be 	.word	0x1fff90be

00004b54 <cliFunc_capSelect>:
		capability( 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    4b54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4b58:	2500      	movs	r5, #0
		capability( 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    4b5a:	4604      	mov	r4, r0
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4b5c:	9001      	str	r0, [sp, #4]
	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;

	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
    4b5e:	462e      	mov	r6, r5
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;
    4b60:	46a8      	mov	r8, r5
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
    4b62:	2702      	movs	r7, #2

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    4b64:	9801      	ldr	r0, [sp, #4]
    4b66:	4669      	mov	r1, sp
    4b68:	aa01      	add	r2, sp, #4
    4b6a:	f002 fb95 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		// Extra arguments are ignored
		if ( *arg1Ptr == '\0' )
    4b6e:	9800      	ldr	r0, [sp, #0]
    4b70:	7803      	ldrb	r3, [r0, #0]
    4b72:	2b00      	cmp	r3, #0
    4b74:	d048      	beq.n	4c08 <cliFunc_capSelect+0xb4>
			break;

		// For the first argument, choose the capability
		if ( c == 0 ) switch ( arg1Ptr[0] )
    4b76:	f015 0fff 	tst.w	r5, #255	; 0xff
    4b7a:	d10e      	bne.n	4b9a <cliFunc_capSelect+0x46>
    4b7c:	2b4b      	cmp	r3, #75	; 0x4b
    4b7e:	d10c      	bne.n	4b9a <cliFunc_capSelect+0x46>
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    4b80:	3001      	adds	r0, #1
    4b82:	f002 ff1b 	bl	79bc <numToInt>

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4b86:	4b22      	ldr	r3, [pc, #136]	; (4c10 <cliFunc_capSelect+0xbc>)
		if ( c == 0 ) switch ( arg1Ptr[0] )
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    4b88:	fa5f f880 	uxtb.w	r8, r0

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4b8c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
			continue;
    4b90:	46b1      	mov	r9, r6
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4b92:	791b      	ldrb	r3, [r3, #4]
    4b94:	441f      	add	r7, r3
    4b96:	b2ff      	uxtb	r7, r7
			continue;
    4b98:	e030      	b.n	4bfc <cliFunc_capSelect+0xa8>
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    4b9a:	f002 ff0f 	bl	79bc <numToInt>
    4b9e:	f106 0901 	add.w	r9, r6, #1
    4ba2:	fa5f f989 	uxtb.w	r9, r9

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    4ba6:	45b9      	cmp	r9, r7
			continue;
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    4ba8:	55a0      	strb	r0, [r4, r6]

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    4baa:	d127      	bne.n	4bfc <cliFunc_capSelect+0xa8>
		{
			// Indicate that the capability was called
			print( NL );
    4bac:	4819      	ldr	r0, [pc, #100]	; (4c14 <cliFunc_capSelect+0xc0>)
    4bae:	f002 fe27 	bl	7800 <_print>
			info_msg("K");
    4bb2:	4819      	ldr	r0, [pc, #100]	; (4c18 <cliFunc_capSelect+0xc4>)
    4bb4:	f002 fe24 	bl	7800 <_print>
			printInt8( cap );
    4bb8:	4640      	mov	r0, r8
    4bba:	f002 fe53 	bl	7864 <printInt8>
			print(" - ");
    4bbe:	4817      	ldr	r0, [pc, #92]	; (4c1c <cliFunc_capSelect+0xc8>)
    4bc0:	f002 fe1e 	bl	7800 <_print>
			printHex( argSet[0] );
    4bc4:	2101      	movs	r1, #1
    4bc6:	7820      	ldrb	r0, [r4, #0]
    4bc8:	f002 fea3 	bl	7912 <printHex_op>
			print(" - ");
    4bcc:	4813      	ldr	r0, [pc, #76]	; (4c1c <cliFunc_capSelect+0xc8>)
    4bce:	f002 fe17 	bl	7800 <_print>
			printHex( argSet[1] );
    4bd2:	2101      	movs	r1, #1
    4bd4:	7860      	ldrb	r0, [r4, #1]
    4bd6:	f002 fe9c 	bl	7912 <printHex_op>
			print(" - ");
    4bda:	4810      	ldr	r0, [pc, #64]	; (4c1c <cliFunc_capSelect+0xc8>)
    4bdc:	f002 fe10 	bl	7800 <_print>
			printHex( argSet[2] );
    4be0:	2101      	movs	r1, #1
    4be2:	78a0      	ldrb	r0, [r4, #2]
    4be4:	f002 fe95 	bl	7912 <printHex_op>
			print( "..." NL );
    4be8:	480d      	ldr	r0, [pc, #52]	; (4c20 <cliFunc_capSelect+0xcc>)
    4bea:	f002 fe09 	bl	7800 <_print>
					return;
				}
			}

			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( argSet[0], argSet[1], &argSet[2] );
    4bee:	4b08      	ldr	r3, [pc, #32]	; (4c10 <cliFunc_capSelect+0xbc>)
    4bf0:	7820      	ldrb	r0, [r4, #0]
    4bf2:	f853 3038 	ldr.w	r3, [r3, r8, lsl #3]
    4bf6:	7861      	ldrb	r1, [r4, #1]
    4bf8:	1ca2      	adds	r2, r4, #2
    4bfa:	4798      	blx	r3
	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
	uint8_t *argSet = (uint8_t*)args;

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
    4bfc:	45b9      	cmp	r9, r7
    4bfe:	f105 0501 	add.w	r5, r5, #1
    4c02:	d201      	bcs.n	4c08 <cliFunc_capSelect+0xb4>
    4c04:	464e      	mov	r6, r9
    4c06:	e7ad      	b.n	4b64 <cliFunc_capSelect+0x10>

			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( argSet[0], argSet[1], &argSet[2] );
		}
	}
}
    4c08:	b003      	add	sp, #12
    4c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4c0e:	bf00      	nop
    4c10:	0000943c 	.word	0x0000943c
    4c14:	0000b26f 	.word	0x0000b26f
    4c18:	000095c2 	.word	0x000095c2
    4c1c:	000091cf 	.word	0x000091cf
    4c20:	0000b6cb 	.word	0x0000b6cb

00004c24 <cliFunc_layerDebug>:
		}
	}
}

void cliFunc_layerDebug( char *args )
{
    4c24:	b510      	push	{r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    4c26:	4c09      	ldr	r4, [pc, #36]	; (4c4c <cliFunc_layerDebug+0x28>)

	print( NL );
    4c28:	4809      	ldr	r0, [pc, #36]	; (4c50 <cliFunc_layerDebug+0x2c>)
}

void cliFunc_layerDebug( char *args )
{
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    4c2a:	7823      	ldrb	r3, [r4, #0]
    4c2c:	f1d3 0301 	rsbs	r3, r3, #1
    4c30:	bf38      	it	cc
    4c32:	2300      	movcc	r3, #0
    4c34:	7023      	strb	r3, [r4, #0]

	print( NL );
    4c36:	f002 fde3 	bl	7800 <_print>
	info_msg("Layer Debug Mode: ");
    4c3a:	4806      	ldr	r0, [pc, #24]	; (4c54 <cliFunc_layerDebug+0x30>)
    4c3c:	f002 fde0 	bl	7800 <_print>
	printInt8( layerDebugMode );
    4c40:	7820      	ldrb	r0, [r4, #0]
}
    4c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;

	print( NL );
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
    4c46:	f002 be0d 	b.w	7864 <printInt8>
    4c4a:	bf00      	nop
    4c4c:	1fff9174 	.word	0x1fff9174
    4c50:	0000b26f 	.word	0x0000b26f
    4c54:	000095d6 	.word	0x000095d6

00004c58 <cliFunc_layerState>:
		printHex( LayerIndex[ layer ].last );
	}
}

void cliFunc_layerState( char* args )
{
    4c58:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t arg1 = 0;
	uint8_t arg2 = 0;

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
    4c5a:	2400      	movs	r4, #0
void cliFunc_layerState( char* args )
{
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4c5c:	9001      	str	r0, [sp, #4]

	uint8_t arg1 = 0;
    4c5e:	4625      	mov	r5, r4

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    4c60:	9801      	ldr	r0, [sp, #4]
    4c62:	4669      	mov	r1, sp
    4c64:	aa01      	add	r2, sp, #4
    4c66:	f002 fb17 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    4c6a:	9800      	ldr	r0, [sp, #0]
    4c6c:	7803      	ldrb	r3, [r0, #0]
    4c6e:	b30b      	cbz	r3, 4cb4 <cliFunc_layerState+0x5c>
			break;

		switch ( c )
    4c70:	2c01      	cmp	r4, #1
    4c72:	d006      	beq.n	4c82 <cliFunc_layerState+0x2a>
		{
		// First argument (e.g. L1)
		case 0:
			if ( arg1Ptr[0] != 'L' )
    4c74:	2b4c      	cmp	r3, #76	; 0x4c
    4c76:	d11d      	bne.n	4cb4 <cliFunc_layerState+0x5c>
				return;

			arg1 = (uint8_t)numToInt( &arg1Ptr[1] );
    4c78:	3001      	adds	r0, #1
    4c7a:	f002 fe9f 	bl	79bc <numToInt>
    4c7e:	b2c5      	uxtb	r5, r0
			break;
    4c80:	e014      	b.n	4cac <cliFunc_layerState+0x54>
		// Second argument (e.g. 4)
		case 1:
			arg2 = (uint8_t)numToInt( arg1Ptr );
    4c82:	f002 fe9b 	bl	79bc <numToInt>
    4c86:	b2c6      	uxtb	r6, r0

			// Display operation (to indicate that it worked)
			print( NL );
    4c88:	480b      	ldr	r0, [pc, #44]	; (4cb8 <cliFunc_layerState+0x60>)
    4c8a:	f002 fdb9 	bl	7800 <_print>
			info_msg("Setting Layer L");
    4c8e:	480b      	ldr	r0, [pc, #44]	; (4cbc <cliFunc_layerState+0x64>)
    4c90:	f002 fdb6 	bl	7800 <_print>
			printInt8( arg1 );
    4c94:	4628      	mov	r0, r5
    4c96:	f002 fde5 	bl	7864 <printInt8>
			print(" to - ");
    4c9a:	4809      	ldr	r0, [pc, #36]	; (4cc0 <cliFunc_layerState+0x68>)
    4c9c:	f002 fdb0 	bl	7800 <_print>
			printHex( arg2 );
    4ca0:	4630      	mov	r0, r6
    4ca2:	4621      	mov	r1, r4
    4ca4:	f002 fe35 	bl	7912 <printHex_op>

			// Set the layer state
			LayerState[ arg1 ] = arg2;
    4ca8:	4b06      	ldr	r3, [pc, #24]	; (4cc4 <cliFunc_layerState+0x6c>)
    4caa:	555e      	strb	r6, [r3, r5]

	uint8_t arg1 = 0;
	uint8_t arg2 = 0;

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
    4cac:	3401      	adds	r4, #1
    4cae:	b2e4      	uxtb	r4, r4
    4cb0:	2c02      	cmp	r4, #2
    4cb2:	d1d5      	bne.n	4c60 <cliFunc_layerState+0x8>
			// Set the layer state
			LayerState[ arg1 ] = arg2;
			break;
		}
	}
}
    4cb4:	b002      	add	sp, #8
    4cb6:	bd70      	pop	{r4, r5, r6, pc}
    4cb8:	0000b26f 	.word	0x0000b26f
    4cbc:	000095fb 	.word	0x000095fb
    4cc0:	0000961d 	.word	0x0000961d
    4cc4:	1fff9fc6 	.word	0x1fff9fc6

00004cc8 <cliFunc_macroDebug>:

void cliFunc_macroDebug( char* args )
{
    4cc8:	b510      	push	{r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    4cca:	4c09      	ldr	r4, [pc, #36]	; (4cf0 <cliFunc_macroDebug+0x28>)

	print( NL );
    4ccc:	4809      	ldr	r0, [pc, #36]	; (4cf4 <cliFunc_macroDebug+0x2c>)
}

void cliFunc_macroDebug( char* args )
{
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    4cce:	7823      	ldrb	r3, [r4, #0]
    4cd0:	f1d3 0301 	rsbs	r3, r3, #1
    4cd4:	bf38      	it	cc
    4cd6:	2300      	movcc	r3, #0
    4cd8:	7023      	strb	r3, [r4, #0]

	print( NL );
    4cda:	f002 fd91 	bl	7800 <_print>
	info_msg("Macro Debug Mode: ");
    4cde:	4806      	ldr	r0, [pc, #24]	; (4cf8 <cliFunc_macroDebug+0x30>)
    4ce0:	f002 fd8e 	bl	7800 <_print>
	printInt8( macroDebugMode );
    4ce4:	7820      	ldrb	r0, [r4, #0]
}
    4ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;

	print( NL );
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
    4cea:	f002 bdbb 	b.w	7864 <printInt8>
    4cee:	bf00      	nop
    4cf0:	1fff9166 	.word	0x1fff9166
    4cf4:	0000b26f 	.word	0x0000b26f
    4cf8:	00009624 	.word	0x00009624

00004cfc <cliFunc_macroProc>:
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}

void cliFunc_macroProc( char* args )
{
    4cfc:	b510      	push	{r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    4cfe:	4c09      	ldr	r4, [pc, #36]	; (4d24 <cliFunc_macroProc+0x28>)

	print( NL );
    4d00:	4809      	ldr	r0, [pc, #36]	; (4d28 <cliFunc_macroProc+0x2c>)
}

void cliFunc_macroProc( char* args )
{
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    4d02:	7823      	ldrb	r3, [r4, #0]
    4d04:	f1d3 0301 	rsbs	r3, r3, #1
    4d08:	bf38      	it	cc
    4d0a:	2300      	movcc	r3, #0
    4d0c:	7023      	strb	r3, [r4, #0]

	print( NL );
    4d0e:	f002 fd77 	bl	7800 <_print>
	info_msg("Macro Processing Mode: ");
    4d12:	4806      	ldr	r0, [pc, #24]	; (4d2c <cliFunc_macroProc+0x30>)
    4d14:	f002 fd74 	bl	7800 <_print>
	printInt8( macroPauseMode );
    4d18:	7820      	ldrb	r0, [r4, #0]
}
    4d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;

	print( NL );
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
    4d1e:	f002 bda1 	b.w	7864 <printInt8>
    4d22:	bf00      	nop
    4d24:	1fff9168 	.word	0x1fff9168
    4d28:	0000b26f 	.word	0x0000b26f
    4d2c:	00009649 	.word	0x00009649

00004d30 <cliFunc_layerList>:
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
}

void cliFunc_layerList( char* args )
{
    4d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	print( NL );
    4d34:	482b      	ldr	r0, [pc, #172]	; (4de4 <cliFunc_layerList+0xb4>)
	info_msg("Layer List");

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    4d36:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 4e08 <cliFunc_layerList+0xd8>
		printHex( layer );
		print(" - ");
    4d3a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 4e0c <cliFunc_layerList+0xdc>
		// Default map
		if ( layer == 0 )
			print(" \033[1m(default)\033[0m");

		// Layer State
		print( NL "\t\t Layer State: " );
    4d3e:	4f2a      	ldr	r7, [pc, #168]	; (4de8 <cliFunc_layerList+0xb8>)
		printHex( LayerState[ layer ] );
    4d40:	4e2a      	ldr	r6, [pc, #168]	; (4dec <cliFunc_layerList+0xbc>)

		// First -> Last Indices
		print(" First -> Last Indices: ");
    4d42:	4d2b      	ldr	r5, [pc, #172]	; (4df0 <cliFunc_layerList+0xc0>)
		printHex( LayerIndex[ layer ].first );
		print(" -> ");
    4d44:	4c2b      	ldr	r4, [pc, #172]	; (4df4 <cliFunc_layerList+0xc4>)
	printInt8( layerDebugMode );
}

void cliFunc_layerList( char* args )
{
	print( NL );
    4d46:	f002 fd5b 	bl	7800 <_print>
	info_msg("Layer List");
    4d4a:	482b      	ldr	r0, [pc, #172]	; (4df8 <cliFunc_layerList+0xc8>)
    4d4c:	f002 fd58 	bl	7800 <_print>

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    4d50:	4648      	mov	r0, r9
    4d52:	f002 fd55 	bl	7800 <_print>
		printHex( layer );
    4d56:	2101      	movs	r1, #1
    4d58:	2000      	movs	r0, #0
    4d5a:	f002 fdda 	bl	7912 <printHex_op>
		print(" - ");
    4d5e:	4640      	mov	r0, r8
    4d60:	f002 fd4e 	bl	7800 <_print>

		// Display layer name
		dPrint( (char*)LayerIndex[ layer ].name );
    4d64:	4825      	ldr	r0, [pc, #148]	; (4dfc <cliFunc_layerList+0xcc>)
    4d66:	f001 fa43 	bl	61f0 <Output_putstr>

		// Default map
		if ( layer == 0 )
			print(" \033[1m(default)\033[0m");
    4d6a:	4825      	ldr	r0, [pc, #148]	; (4e00 <cliFunc_layerList+0xd0>)
    4d6c:	f002 fd48 	bl	7800 <_print>

		// Layer State
		print( NL "\t\t Layer State: " );
    4d70:	4638      	mov	r0, r7
    4d72:	f002 fd45 	bl	7800 <_print>
		printHex( LayerState[ layer ] );
    4d76:	7830      	ldrb	r0, [r6, #0]
    4d78:	2101      	movs	r1, #1
    4d7a:	f002 fdca 	bl	7912 <printHex_op>

		// First -> Last Indices
		print(" First -> Last Indices: ");
    4d7e:	4628      	mov	r0, r5
    4d80:	f002 fd3e 	bl	7800 <_print>
		printHex( LayerIndex[ layer ].first );
    4d84:	2101      	movs	r1, #1
    4d86:	2002      	movs	r0, #2
    4d88:	f002 fdc3 	bl	7912 <printHex_op>
		print(" -> ");
    4d8c:	4620      	mov	r0, r4
    4d8e:	f002 fd37 	bl	7800 <_print>
		printHex( LayerIndex[ layer ].last );
    4d92:	2101      	movs	r1, #1
    4d94:	2059      	movs	r0, #89	; 0x59
    4d96:	f002 fdbc 	bl	7912 <printHex_op>
	info_msg("Layer List");

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    4d9a:	4648      	mov	r0, r9
    4d9c:	f002 fd30 	bl	7800 <_print>
		printHex( layer );
    4da0:	2001      	movs	r0, #1
    4da2:	4601      	mov	r1, r0
    4da4:	f002 fdb5 	bl	7912 <printHex_op>
		print(" - ");
    4da8:	4640      	mov	r0, r8
    4daa:	f002 fd29 	bl	7800 <_print>

		// Display layer name
		dPrint( (char*)LayerIndex[ layer ].name );
    4dae:	4815      	ldr	r0, [pc, #84]	; (4e04 <cliFunc_layerList+0xd4>)
    4db0:	f001 fa1e 	bl	61f0 <Output_putstr>
		// Default map
		if ( layer == 0 )
			print(" \033[1m(default)\033[0m");

		// Layer State
		print( NL "\t\t Layer State: " );
    4db4:	4638      	mov	r0, r7
    4db6:	f002 fd23 	bl	7800 <_print>
		printHex( LayerState[ layer ] );
    4dba:	7870      	ldrb	r0, [r6, #1]
    4dbc:	2101      	movs	r1, #1
    4dbe:	f002 fda8 	bl	7912 <printHex_op>

		// First -> Last Indices
		print(" First -> Last Indices: ");
    4dc2:	4628      	mov	r0, r5
    4dc4:	f002 fd1c 	bl	7800 <_print>
		printHex( LayerIndex[ layer ].first );
    4dc8:	2101      	movs	r1, #1
    4dca:	2042      	movs	r0, #66	; 0x42
    4dcc:	f002 fda1 	bl	7912 <printHex_op>
		print(" -> ");
    4dd0:	4620      	mov	r0, r4
    4dd2:	f002 fd15 	bl	7800 <_print>
		printHex( LayerIndex[ layer ].last );
    4dd6:	2053      	movs	r0, #83	; 0x53
    4dd8:	2101      	movs	r1, #1
	}
}
    4dda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

		// First -> Last Indices
		print(" First -> Last Indices: ");
		printHex( LayerIndex[ layer ].first );
		print(" -> ");
		printHex( LayerIndex[ layer ].last );
    4dde:	f002 bd98 	b.w	7912 <printHex_op>
    4de2:	bf00      	nop
    4de4:	0000b26f 	.word	0x0000b26f
    4de8:	000096c9 	.word	0x000096c9
    4dec:	1fff9fc6 	.word	0x1fff9fc6
    4df0:	000096dc 	.word	0x000096dc
    4df4:	00008d58 	.word	0x00008d58
    4df8:	00009673 	.word	0x00009673
    4dfc:	00009690 	.word	0x00009690
    4e00:	000096b6 	.word	0x000096b6
    4e04:	000096f5 	.word	0x000096f5
    4e08:	000095be 	.word	0x000095be
    4e0c:	000091cf 	.word	0x000091cf

00004e10 <cliFunc_macroList>:
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
}

void cliFunc_macroList( char* args )
{
    4e10:	b538      	push	{r3, r4, r5, lr}
	// Show pending key events
	print( NL );
    4e12:	4845      	ldr	r0, [pc, #276]	; (4f28 <cliFunc_macroList+0x118>)
	info_msg("Pending Key Events: ");
	printInt16( (uint16_t)macroTriggerListBufferSize );
    4e14:	4c45      	ldr	r4, [pc, #276]	; (4f2c <cliFunc_macroList+0x11c>)
}

void cliFunc_macroList( char* args )
{
	// Show pending key events
	print( NL );
    4e16:	f002 fcf3 	bl	7800 <_print>
	info_msg("Pending Key Events: ");
    4e1a:	4845      	ldr	r0, [pc, #276]	; (4f30 <cliFunc_macroList+0x120>)
    4e1c:	f002 fcf0 	bl	7800 <_print>
	printInt16( (uint16_t)macroTriggerListBufferSize );
    4e20:	7820      	ldrb	r0, [r4, #0]
    4e22:	f002 fd3f 	bl	78a4 <printInt16>
	print(" : ");
    4e26:	4843      	ldr	r0, [pc, #268]	; (4f34 <cliFunc_macroList+0x124>)
    4e28:	f002 fcea 	bl	7800 <_print>
	for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
    4e2c:	2300      	movs	r3, #0
    4e2e:	7822      	ldrb	r2, [r4, #0]
    4e30:	1c5d      	adds	r5, r3, #1
    4e32:	b2db      	uxtb	r3, r3
    4e34:	429a      	cmp	r2, r3
    4e36:	d90c      	bls.n	4e52 <cliFunc_macroList+0x42>
	{
		printHex( macroTriggerListBuffer[ key ].scanCode );
    4e38:	4a3f      	ldr	r2, [pc, #252]	; (4f38 <cliFunc_macroList+0x128>)
    4e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4e3e:	4413      	add	r3, r2
    4e40:	2101      	movs	r1, #1
    4e42:	7898      	ldrb	r0, [r3, #2]
    4e44:	f002 fd65 	bl	7912 <printHex_op>
		print(" ");
    4e48:	483c      	ldr	r0, [pc, #240]	; (4f3c <cliFunc_macroList+0x12c>)
    4e4a:	f002 fcd9 	bl	7800 <_print>
    4e4e:	462b      	mov	r3, r5
    4e50:	e7ed      	b.n	4e2e <cliFunc_macroList+0x1e>
	}

	// Show pending trigger macros
	print( NL );
    4e52:	4835      	ldr	r0, [pc, #212]	; (4f28 <cliFunc_macroList+0x118>)
	info_msg("Pending Trigger Macros: ");
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    4e54:	4c3a      	ldr	r4, [pc, #232]	; (4f40 <cliFunc_macroList+0x130>)
		printHex( macroTriggerListBuffer[ key ].scanCode );
		print(" ");
	}

	// Show pending trigger macros
	print( NL );
    4e56:	f002 fcd3 	bl	7800 <_print>
	info_msg("Pending Trigger Macros: ");
    4e5a:	483a      	ldr	r0, [pc, #232]	; (4f44 <cliFunc_macroList+0x134>)
    4e5c:	f002 fcd0 	bl	7800 <_print>
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    4e60:	8820      	ldrh	r0, [r4, #0]
    4e62:	f002 fd1f 	bl	78a4 <printInt16>
	print(" : ");
    4e66:	4833      	ldr	r0, [pc, #204]	; (4f34 <cliFunc_macroList+0x124>)
    4e68:	f002 fcca 	bl	7800 <_print>
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    4e6c:	2300      	movs	r3, #0
    4e6e:	8822      	ldrh	r2, [r4, #0]
    4e70:	1c5d      	adds	r5, r3, #1
    4e72:	b2db      	uxtb	r3, r3
    4e74:	4293      	cmp	r3, r2
    4e76:	d20a      	bcs.n	4e8e <cliFunc_macroList+0x7e>
	{
		printHex( macroTriggerMacroPendingList[ macro ] );
    4e78:	4a33      	ldr	r2, [pc, #204]	; (4f48 <cliFunc_macroList+0x138>)
    4e7a:	2101      	movs	r1, #1
    4e7c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    4e80:	f002 fd47 	bl	7912 <printHex_op>
		print(" ");
    4e84:	482d      	ldr	r0, [pc, #180]	; (4f3c <cliFunc_macroList+0x12c>)
    4e86:	f002 fcbb 	bl	7800 <_print>
    4e8a:	462b      	mov	r3, r5
    4e8c:	e7ef      	b.n	4e6e <cliFunc_macroList+0x5e>
	}

	// Show pending result macros
	print( NL );
    4e8e:	4826      	ldr	r0, [pc, #152]	; (4f28 <cliFunc_macroList+0x118>)
	info_msg("Pending Result Macros: ");
	printInt16( (uint16_t)macroResultMacroPendingListSize );
    4e90:	4c2e      	ldr	r4, [pc, #184]	; (4f4c <cliFunc_macroList+0x13c>)
		printHex( macroTriggerMacroPendingList[ macro ] );
		print(" ");
	}

	// Show pending result macros
	print( NL );
    4e92:	f002 fcb5 	bl	7800 <_print>
	info_msg("Pending Result Macros: ");
    4e96:	482e      	ldr	r0, [pc, #184]	; (4f50 <cliFunc_macroList+0x140>)
    4e98:	f002 fcb2 	bl	7800 <_print>
	printInt16( (uint16_t)macroResultMacroPendingListSize );
    4e9c:	8820      	ldrh	r0, [r4, #0]
    4e9e:	f002 fd01 	bl	78a4 <printInt16>
	print(" : ");
    4ea2:	4824      	ldr	r0, [pc, #144]	; (4f34 <cliFunc_macroList+0x124>)
    4ea4:	f002 fcac 	bl	7800 <_print>
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    4ea8:	2300      	movs	r3, #0
    4eaa:	8822      	ldrh	r2, [r4, #0]
    4eac:	1c5d      	adds	r5, r3, #1
    4eae:	b2db      	uxtb	r3, r3
    4eb0:	4293      	cmp	r3, r2
    4eb2:	d20a      	bcs.n	4eca <cliFunc_macroList+0xba>
	{
		printHex( macroResultMacroPendingList[ macro ] );
    4eb4:	4a27      	ldr	r2, [pc, #156]	; (4f54 <cliFunc_macroList+0x144>)
    4eb6:	2101      	movs	r1, #1
    4eb8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    4ebc:	f002 fd29 	bl	7912 <printHex_op>
		print(" ");
    4ec0:	481e      	ldr	r0, [pc, #120]	; (4f3c <cliFunc_macroList+0x12c>)
    4ec2:	f002 fc9d 	bl	7800 <_print>
    4ec6:	462b      	mov	r3, r5
    4ec8:	e7ef      	b.n	4eaa <cliFunc_macroList+0x9a>
	}

	// Show available trigger macro indices
	print( NL );
    4eca:	4817      	ldr	r0, [pc, #92]	; (4f28 <cliFunc_macroList+0x118>)
    4ecc:	f002 fc98 	bl	7800 <_print>
	info_msg("Trigger Macros Range: T0 -> T");
    4ed0:	4821      	ldr	r0, [pc, #132]	; (4f58 <cliFunc_macroList+0x148>)
    4ed2:	f002 fc95 	bl	7800 <_print>
	printInt16( (uint16_t)TriggerMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    4ed6:	2052      	movs	r0, #82	; 0x52
    4ed8:	f002 fce4 	bl	78a4 <printInt16>

	// Show available result macro indices
	print( NL );
    4edc:	4812      	ldr	r0, [pc, #72]	; (4f28 <cliFunc_macroList+0x118>)
    4ede:	f002 fc8f 	bl	7800 <_print>
	info_msg("Result  Macros Range: R0 -> R");
    4ee2:	481e      	ldr	r0, [pc, #120]	; (4f5c <cliFunc_macroList+0x14c>)
    4ee4:	f002 fc8c 	bl	7800 <_print>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    4ee8:	2052      	movs	r0, #82	; 0x52
    4eea:	f002 fcdb 	bl	78a4 <printInt16>

	// Show Trigger to Result Macro Links
	print( NL );
    4eee:	480e      	ldr	r0, [pc, #56]	; (4f28 <cliFunc_macroList+0x118>)
    4ef0:	f002 fc86 	bl	7800 <_print>
	info_msg("Trigger : Result Macro Pairs");
    4ef4:	481a      	ldr	r0, [pc, #104]	; (4f60 <cliFunc_macroList+0x150>)
    4ef6:	f002 fc83 	bl	7800 <_print>
    4efa:	2400      	movs	r4, #0
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		print( NL );
    4efc:	480a      	ldr	r0, [pc, #40]	; (4f28 <cliFunc_macroList+0x118>)
    4efe:	f002 fc7f 	bl	7800 <_print>
		print("\tT");
    4f02:	4818      	ldr	r0, [pc, #96]	; (4f64 <cliFunc_macroList+0x154>)
    4f04:	f002 fc7c 	bl	7800 <_print>
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
    4f08:	b2a0      	uxth	r0, r4
    4f0a:	f002 fccb 	bl	78a4 <printInt16>
		print(" : R");
    4f0e:	4816      	ldr	r0, [pc, #88]	; (4f68 <cliFunc_macroList+0x158>)
    4f10:	f002 fc76 	bl	7800 <_print>
    4f14:	4b15      	ldr	r3, [pc, #84]	; (4f6c <cliFunc_macroList+0x15c>)
    4f16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    4f1a:	3401      	adds	r4, #1
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
    4f1c:	7918      	ldrb	r0, [r3, #4]
    4f1e:	f002 fcc1 	bl	78a4 <printInt16>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)

	// Show Trigger to Result Macro Links
	print( NL );
	info_msg("Trigger : Result Macro Pairs");
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    4f22:	2c53      	cmp	r4, #83	; 0x53
    4f24:	d1ea      	bne.n	4efc <cliFunc_macroList+0xec>
		print("\tT");
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
		print(" : R");
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}
    4f26:	bd38      	pop	{r3, r4, r5, pc}
    4f28:	0000b26f 	.word	0x0000b26f
    4f2c:	1fff9167 	.word	0x1fff9167
    4f30:	000096ff 	.word	0x000096ff
    4f34:	00009726 	.word	0x00009726
    4f38:	1fff9dc2 	.word	0x1fff9dc2
    4f3c:	00008152 	.word	0x00008152
    4f40:	1fff9172 	.word	0x1fff9172
    4f44:	0000972a 	.word	0x0000972a
    4f48:	1fff90c0 	.word	0x1fff90c0
    4f4c:	1fff90bc 	.word	0x1fff90bc
    4f50:	00009755 	.word	0x00009755
    4f54:	1fff9016 	.word	0x1fff9016
    4f58:	0000977f 	.word	0x0000977f
    4f5c:	000097af 	.word	0x000097af
    4f60:	000097df 	.word	0x000097df
    4f64:	0000980e 	.word	0x0000980e
    4f68:	00009811 	.word	0x00009811
    4f6c:	0000a53c 	.word	0x0000a53c

00004f70 <Macro_layerState.part.1>:


// ----- Capabilities -----

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
    4f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
	uint16_t stackItem = 0;
	while ( stackItem < macroLayerIndexStackSize )
    4f72:	4d2a      	ldr	r5, [pc, #168]	; (501c <Macro_layerState.part.1+0xac>)
    4f74:	882e      	ldrh	r6, [r5, #0]
    4f76:	2200      	movs	r2, #0
    4f78:	b293      	uxth	r3, r2
    4f7a:	42b3      	cmp	r3, r6
    4f7c:	d209      	bcs.n	4f92 <Macro_layerState.part.1+0x22>
    4f7e:	4c28      	ldr	r4, [pc, #160]	; (5020 <Macro_layerState.part.1+0xb0>)
    4f80:	3201      	adds	r2, #1
    4f82:	eb04 0442 	add.w	r4, r4, r2, lsl #1
	{
		// Flag if layer is already in the LayerIndexStack
		if ( macroLayerIndexStack[ stackItem ] == layer )
    4f86:	f834 4c02 	ldrh.w	r4, [r4, #-2]
    4f8a:	4284      	cmp	r4, r0
    4f8c:	d1f4      	bne.n	4f78 <Macro_layerState.part.1+0x8>
		{
			inLayerIndexStack = 1;
    4f8e:	2201      	movs	r2, #1
    4f90:	e000      	b.n	4f94 <Macro_layerState.part.1+0x24>
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
    4f92:	2200      	movs	r2, #0
		// Increment to next item
		stackItem++;
	}

	// Toggle Layer State Byte
	if ( LayerState[ layer ] & layerState )
    4f94:	4c23      	ldr	r4, [pc, #140]	; (5024 <Macro_layerState.part.1+0xb4>)
    4f96:	5c27      	ldrb	r7, [r4, r0]
    4f98:	420f      	tst	r7, r1
	{
		// Unset
		LayerState[ layer ] &= ~layerState;
    4f9a:	bf14      	ite	ne
    4f9c:	ea27 0101 	bicne.w	r1, r7, r1
	}
	else
	{
		// Set
		LayerState[ layer ] |= layerState;
    4fa0:	4339      	orreq	r1, r7
    4fa2:	5421      	strb	r1, [r4, r0]
	}

	// If the layer was not in the LayerIndexStack add it
	if ( !inLayerIndexStack )
    4fa4:	b922      	cbnz	r2, 4fb0 <Macro_layerState.part.1+0x40>
	{
		macroLayerIndexStack[ macroLayerIndexStackSize++ ] = layer;
    4fa6:	1c71      	adds	r1, r6, #1
    4fa8:	8029      	strh	r1, [r5, #0]
    4faa:	491d      	ldr	r1, [pc, #116]	; (5020 <Macro_layerState.part.1+0xb0>)
    4fac:	f821 0016 	strh.w	r0, [r1, r6, lsl #1]
	}

	// If the layer is in the LayerIndexStack and the state is 0x00, remove
	if ( LayerState[ layer ] == 0x00 && inLayerIndexStack )
    4fb0:	5c21      	ldrb	r1, [r4, r0]
    4fb2:	b969      	cbnz	r1, 4fd0 <Macro_layerState.part.1+0x60>
    4fb4:	b162      	cbz	r2, 4fd0 <Macro_layerState.part.1+0x60>
	{
		// Remove the layer from the LayerIndexStack
		// Using the already positioned stackItem variable from the loop above
		while ( stackItem < macroLayerIndexStackSize )
    4fb6:	882a      	ldrh	r2, [r5, #0]
    4fb8:	4293      	cmp	r3, r2
    4fba:	d207      	bcs.n	4fcc <Macro_layerState.part.1+0x5c>
		{
			macroLayerIndexStack[ stackItem ] = macroLayerIndexStack[ stackItem + 1 ];
    4fbc:	4818      	ldr	r0, [pc, #96]	; (5020 <Macro_layerState.part.1+0xb0>)
    4fbe:	1c59      	adds	r1, r3, #1
    4fc0:	f830 6011 	ldrh.w	r6, [r0, r1, lsl #1]
    4fc4:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
			stackItem++;
    4fc8:	b28b      	uxth	r3, r1
    4fca:	e7f5      	b.n	4fb8 <Macro_layerState.part.1+0x48>
		}

		// Reduce LayerIndexStack size
		macroLayerIndexStackSize--;
    4fcc:	3a01      	subs	r2, #1
    4fce:	802a      	strh	r2, [r5, #0]
	}

	// Layer Debug Mode
	if ( layerDebugMode )
    4fd0:	4b15      	ldr	r3, [pc, #84]	; (5028 <Macro_layerState.part.1+0xb8>)
    4fd2:	781b      	ldrb	r3, [r3, #0]
    4fd4:	b303      	cbz	r3, 5018 <Macro_layerState.part.1+0xa8>
	{
		dbug_msg("Layer ");
    4fd6:	4815      	ldr	r0, [pc, #84]	; (502c <Macro_layerState.part.1+0xbc>)
    4fd8:	f002 fc12 	bl	7800 <_print>

		// Iterate over each of the layers displaying the state as a hex value
		for ( uint16_t index = 0; index < LayerNum; index++ )
		{
			printHex_op( LayerState[ index ], 0 );
    4fdc:	7820      	ldrb	r0, [r4, #0]
    4fde:	2100      	movs	r1, #0
    4fe0:	f002 fc97 	bl	7912 <printHex_op>
    4fe4:	7860      	ldrb	r0, [r4, #1]
    4fe6:	2100      	movs	r1, #0
    4fe8:	f002 fc93 	bl	7912 <printHex_op>
		}

		// Always show the default layer (it's always 0)
		print(" 0");
    4fec:	4810      	ldr	r0, [pc, #64]	; (5030 <Macro_layerState.part.1+0xc0>)
    4fee:	f002 fc07 	bl	7800 <_print>

		// Iterate over the layer stack starting from the bottom of the stack
		for ( uint16_t index = macroLayerIndexStackSize; index > 0; index-- )
    4ff2:	882c      	ldrh	r4, [r5, #0]
    4ff4:	b15c      	cbz	r4, 500e <Macro_layerState.part.1+0x9e>
		{
			print(":");
    4ff6:	480f      	ldr	r0, [pc, #60]	; (5034 <Macro_layerState.part.1+0xc4>)
    4ff8:	f002 fc02 	bl	7800 <_print>
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
    4ffc:	3c01      	subs	r4, #1
    4ffe:	4b08      	ldr	r3, [pc, #32]	; (5020 <Macro_layerState.part.1+0xb0>)
    5000:	2100      	movs	r1, #0
    5002:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    5006:	f002 fc84 	bl	7912 <printHex_op>

		// Always show the default layer (it's always 0)
		print(" 0");

		// Iterate over the layer stack starting from the bottom of the stack
		for ( uint16_t index = macroLayerIndexStackSize; index > 0; index-- )
    500a:	b2a4      	uxth	r4, r4
    500c:	e7f2      	b.n	4ff4 <Macro_layerState.part.1+0x84>
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    500e:	480a      	ldr	r0, [pc, #40]	; (5038 <Macro_layerState.part.1+0xc8>)
	}
}
    5010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    5014:	f002 bbf4 	b.w	7800 <_print>
    5018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    501a:	bf00      	nop
    501c:	1fff916a 	.word	0x1fff916a
    5020:	1fff916c 	.word	0x1fff916c
    5024:	1fff9fc6 	.word	0x1fff9fc6
    5028:	1fff9174 	.word	0x1fff9174
    502c:	00009816 	.word	0x00009816
    5030:	00009830 	.word	0x00009830
    5034:	000081e7 	.word	0x000081e7
    5038:	0000b26f 	.word	0x0000b26f

0000503c <Macro_layerState_capability>:
// Argument #1: Layer Index -> uint16_t
// Argument #2: Layer State -> uint8_t
void Macro_layerState_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    503c:	29ff      	cmp	r1, #255	; 0xff
    503e:	d104      	bne.n	504a <Macro_layerState_capability+0xe>
    5040:	28ff      	cmp	r0, #255	; 0xff
    5042:	d105      	bne.n	5050 <Macro_layerState_capability+0x14>
	{
		print("Macro_layerState(layerIndex,layerState)");
    5044:	4806      	ldr	r0, [pc, #24]	; (5060 <Macro_layerState_capability+0x24>)
    5046:	f002 bbdb 	b.w	7800 <_print>
	}

	// Only use capability on press or release
	// TODO Analog
	// XXX This may cause issues, might be better to implement state table here to decide -HaaTa
	if ( stateType == 0x00 && state == 0x02 ) // Hold condition
    504a:	b909      	cbnz	r1, 5050 <Macro_layerState_capability+0x14>
    504c:	2802      	cmp	r0, #2
    504e:	d005      	beq.n	505c <Macro_layerState_capability+0x20>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5050:	8810      	ldrh	r0, [r2, #0]
	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	// Get layer toggle byte
	uint8_t layerState = args[ sizeof(uint16_t) ];
    5052:	7891      	ldrb	r1, [r2, #2]

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5054:	2801      	cmp	r0, #1
    5056:	d101      	bne.n	505c <Macro_layerState_capability+0x20>
    5058:	f7ff bf8a 	b.w	4f70 <Macro_layerState.part.1>
    505c:	4770      	bx	lr
    505e:	bf00      	nop
    5060:	00009833 	.word	0x00009833

00005064 <Macro_layerShift_capability>:
// Shifts given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerShift_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5064:	29ff      	cmp	r1, #255	; 0xff
    5066:	d104      	bne.n	5072 <Macro_layerShift_capability+0xe>
    5068:	28ff      	cmp	r0, #255	; 0xff
    506a:	d106      	bne.n	507a <Macro_layerShift_capability+0x16>
	{
		print("Macro_layerShift(layerIndex)");
    506c:	4806      	ldr	r0, [pc, #24]	; (5088 <Macro_layerShift_capability+0x24>)
    506e:	f002 bbc7 	b.w	7800 <_print>
		return;
	}

	// Only use capability on press or release
	// TODO Analog
	if ( stateType == 0x00 && ( state == 0x00 || state == 0x02 ) ) // Only pass press or release conditions
    5072:	b911      	cbnz	r1, 507a <Macro_layerShift_capability+0x16>
    5074:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    5078:	d005      	beq.n	5086 <Macro_layerShift_capability+0x22>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    507a:	8810      	ldrh	r0, [r2, #0]
    507c:	2801      	cmp	r0, #1
    507e:	d102      	bne.n	5086 <Macro_layerShift_capability+0x22>
    5080:	4601      	mov	r1, r0
    5082:	f7ff bf75 	b.w	4f70 <Macro_layerState.part.1>
    5086:	4770      	bx	lr
    5088:	0000985b 	.word	0x0000985b

0000508c <Macro_layerLatch_capability>:
// Latches given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLatch_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    508c:	29ff      	cmp	r1, #255	; 0xff
    508e:	d104      	bne.n	509a <Macro_layerLatch_capability+0xe>
    5090:	28ff      	cmp	r0, #255	; 0xff
    5092:	d105      	bne.n	50a0 <Macro_layerLatch_capability+0x14>
	{
		print("Macro_layerLatch(layerIndex)");
    5094:	4806      	ldr	r0, [pc, #24]	; (50b0 <Macro_layerLatch_capability+0x24>)
    5096:	f002 bbb3 	b.w	7800 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state != 0x03 ) // Only on release
    509a:	b909      	cbnz	r1, 50a0 <Macro_layerLatch_capability+0x14>
    509c:	2803      	cmp	r0, #3
    509e:	d105      	bne.n	50ac <Macro_layerLatch_capability+0x20>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    50a0:	8810      	ldrh	r0, [r2, #0]
    50a2:	2801      	cmp	r0, #1
    50a4:	d102      	bne.n	50ac <Macro_layerLatch_capability+0x20>
    50a6:	2102      	movs	r1, #2
    50a8:	f7ff bf62 	b.w	4f70 <Macro_layerState.part.1>
    50ac:	4770      	bx	lr
    50ae:	bf00      	nop
    50b0:	00009878 	.word	0x00009878

000050b4 <Macro_layerLock_capability>:
// Locks given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLock_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    50b4:	29ff      	cmp	r1, #255	; 0xff
    50b6:	d104      	bne.n	50c2 <Macro_layerLock_capability+0xe>
    50b8:	28ff      	cmp	r0, #255	; 0xff
    50ba:	d105      	bne.n	50c8 <Macro_layerLock_capability+0x14>
	{
		print("Macro_layerLock(layerIndex)");
    50bc:	4806      	ldr	r0, [pc, #24]	; (50d8 <Macro_layerLock_capability+0x24>)
    50be:	f002 bb9f 	b.w	7800 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    50c2:	b909      	cbnz	r1, 50c8 <Macro_layerLock_capability+0x14>
    50c4:	2801      	cmp	r0, #1
    50c6:	d105      	bne.n	50d4 <Macro_layerLock_capability+0x20>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    50c8:	8810      	ldrh	r0, [r2, #0]
    50ca:	2801      	cmp	r0, #1
    50cc:	d102      	bne.n	50d4 <Macro_layerLock_capability+0x20>
    50ce:	2104      	movs	r1, #4
    50d0:	f7ff bf4e 	b.w	4f70 <Macro_layerState.part.1>
    50d4:	4770      	bx	lr
    50d6:	bf00      	nop
    50d8:	00009895 	.word	0x00009895

000050dc <Macro_layerRotate_capability>:
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    50dc:	29ff      	cmp	r1, #255	; 0xff
// Rotate layer to next/previous
// Uses state variable to keep track of the current layer position
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    50de:	b538      	push	{r3, r4, r5, lr}
    50e0:	4615      	mov	r5, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    50e2:	d106      	bne.n	50f2 <Macro_layerRotate_capability+0x16>
    50e4:	28ff      	cmp	r0, #255	; 0xff
    50e6:	d107      	bne.n	50f8 <Macro_layerRotate_capability+0x1c>
	{
		print("Macro_layerRotate(previous)");
    50e8:	4814      	ldr	r0, [pc, #80]	; (513c <Macro_layerRotate_capability+0x60>)
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
}
    50ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Macro_layerRotate(previous)");
    50ee:	f002 bb87 	b.w	7800 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    50f2:	b909      	cbnz	r1, 50f8 <Macro_layerRotate_capability+0x1c>
    50f4:	2801      	cmp	r0, #1
    50f6:	d11f      	bne.n	5138 <Macro_layerRotate_capability+0x5c>
		return;

	// Unset previous rotation layer if not 0
	if ( Macro_rotationLayer != 0 )
    50f8:	4c11      	ldr	r4, [pc, #68]	; (5140 <Macro_layerRotate_capability+0x64>)

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    50fa:	8820      	ldrh	r0, [r4, #0]
    50fc:	2801      	cmp	r0, #1
    50fe:	d102      	bne.n	5106 <Macro_layerRotate_capability+0x2a>
    5100:	2104      	movs	r1, #4
    5102:	f7ff ff35 	bl	4f70 <Macro_layerState.part.1>

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    5106:	782a      	ldrb	r2, [r5, #0]
	{
		Macro_rotationLayer++;
    5108:	4b0d      	ldr	r3, [pc, #52]	; (5140 <Macro_layerRotate_capability+0x64>)

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    510a:	b932      	cbnz	r2, 511a <Macro_layerRotate_capability+0x3e>
	{
		Macro_rotationLayer++;
    510c:	8821      	ldrh	r1, [r4, #0]
    510e:	3101      	adds	r1, #1
    5110:	b289      	uxth	r1, r1

		// Invalid layer
		if ( Macro_rotationLayer >= LayerNum )
    5112:	2901      	cmp	r1, #1
    5114:	d807      	bhi.n	5126 <Macro_layerRotate_capability+0x4a>
	uint8_t direction = *args;

	// Next
	if ( !direction )
	{
		Macro_rotationLayer++;
    5116:	8019      	strh	r1, [r3, #0]
    5118:	e006      	b.n	5128 <Macro_layerRotate_capability+0x4c>
			Macro_rotationLayer = 0;
	}
	// Previous
	else
	{
		Macro_rotationLayer--;
    511a:	8822      	ldrh	r2, [r4, #0]
    511c:	3a01      	subs	r2, #1
    511e:	b292      	uxth	r2, r2

		// Layer wrap
		if ( Macro_rotationLayer >= LayerNum )
    5120:	2a01      	cmp	r2, #1
			Macro_rotationLayer = LayerNum - 1;
    5122:	bf88      	it	hi
    5124:	2201      	movhi	r2, #1
    5126:	801a      	strh	r2, [r3, #0]

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5128:	8820      	ldrh	r0, [r4, #0]
    512a:	2801      	cmp	r0, #1
    512c:	d104      	bne.n	5138 <Macro_layerRotate_capability+0x5c>
    512e:	2104      	movs	r1, #4
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
}
    5130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5134:	f7ff bf1c 	b.w	4f70 <Macro_layerState.part.1>
    5138:	bd38      	pop	{r3, r4, r5, pc}
    513a:	bf00      	nop
    513c:	000098b1 	.word	0x000098b1
    5140:	1fff9dc0 	.word	0x1fff9dc0

00005144 <Macro_layerLookup>:
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    5144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    5148:	7803      	ldrb	r3, [r0, #0]

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
	uint8_t scanCode = guide->scanCode;
    514a:	7884      	ldrb	r4, [r0, #2]
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    514c:	460f      	mov	r7, r1
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    514e:	b9fb      	cbnz	r3, 5190 <Macro_layerLookup+0x4c>
    5150:	7843      	ldrb	r3, [r0, #1]
    5152:	2b01      	cmp	r3, #1
    5154:	d01c      	beq.n	5190 <Macro_layerLookup+0x4c>
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    5156:	4b3e      	ldr	r3, [pc, #248]	; (5250 <Macro_layerLookup+0x10c>)

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    5158:	493e      	ldr	r1, [pc, #248]	; (5254 <Macro_layerLookup+0x110>)
	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    515a:	5d1b      	ldrb	r3, [r3, r4]

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    515c:	220c      	movs	r2, #12
    515e:	435a      	muls	r2, r3
    5160:	1888      	adds	r0, r1, r2
		const Layer *layer = &LayerIndex[ cachedLayer ];

		// Cache trigger list before attempting to expire latch
		nat_ptr_t *trigger_list = map[ scanCode - layer->first ];
    5162:	588a      	ldr	r2, [r1, r2]
    5164:	7a00      	ldrb	r0, [r0, #8]
    5166:	1a24      	subs	r4, r4, r0
    5168:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]

		// Check if latch has been pressed for this layer
		uint8_t latch = LayerState[ cachedLayer ] & 0x02;
    516c:	4a3a      	ldr	r2, [pc, #232]	; (5258 <Macro_layerLookup+0x114>)
    516e:	5cd2      	ldrb	r2, [r2, r3]
		if ( latch && latch_expire )
    5170:	0792      	lsls	r2, r2, #30
    5172:	d569      	bpl.n	5248 <Macro_layerLookup+0x104>
    5174:	2f00      	cmp	r7, #0
    5176:	d067      	beq.n	5248 <Macro_layerLookup+0x104>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5178:	2b01      	cmp	r3, #1
    517a:	d103      	bne.n	5184 <Macro_layerLookup+0x40>
    517c:	4618      	mov	r0, r3
    517e:	2102      	movs	r1, #2
    5180:	f7ff fef6 	bl	4f70 <Macro_layerState.part.1>
		{
			Macro_layerState( 0, 0, cachedLayer, 0x02 );
#if defined(ConnectEnabled_define) && defined(LCDEnabled_define)
			// Evaluate the layerStack capability if available (LCD + Interconnect)
			extern void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args );
			LCD_layerStack_capability( 0, 0, 0 );
    5184:	2000      	movs	r0, #0
    5186:	4601      	mov	r1, r0
    5188:	4602      	mov	r2, r0
    518a:	f7fe fbb5 	bl	38f8 <LCD_layerStack_capability>
    518e:	e05b      	b.n	5248 <Macro_layerLookup+0x104>

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    5190:	4b32      	ldr	r3, [pc, #200]	; (525c <Macro_layerLookup+0x118>)
    5192:	881d      	ldrh	r5, [r3, #0]
    5194:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5198:	429d      	cmp	r5, r3
    519a:	d03a      	beq.n	5212 <Macro_layerLookup+0xce>
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    519c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 526c <Macro_layerLookup+0x128>

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    51a0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5258 <Macro_layerLookup+0x114>

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    51a4:	f839 6015 	ldrh.w	r6, [r9, r5, lsl #1]

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    51a8:	f818 3006 	ldrb.w	r3, [r8, r6]
    51ac:	f003 0302 	and.w	r3, r3, #2
		if ( latch && latch_expire )
    51b0:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    51b4:	b133      	cbz	r3, 51c4 <Macro_layerLookup+0x80>
    51b6:	b12f      	cbz	r7, 51c4 <Macro_layerLookup+0x80>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    51b8:	2e01      	cmp	r6, #1
    51ba:	d103      	bne.n	51c4 <Macro_layerLookup+0x80>
    51bc:	4630      	mov	r0, r6
    51be:	2102      	movs	r1, #2
    51c0:	f7ff fed6 	bl	4f70 <Macro_layerState.part.1>
		}

		// Only use layer, if state is valid
		// XOR each of the state bits
		// If only two are enabled, do not use this state
		if ( (LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x01) ^ (latch>>1) ^ ((LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x04)>>2) )
    51c4:	f839 2015 	ldrh.w	r2, [r9, r5, lsl #1]
    51c8:	f818 3002 	ldrb.w	r3, [r8, r2]
    51cc:	f003 0101 	and.w	r1, r3, #1
    51d0:	ea81 0a5a 	eor.w	sl, r1, sl, lsr #1
    51d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    51d8:	459a      	cmp	sl, r3
    51da:	d017      	beq.n	520c <Macro_layerLookup+0xc8>

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    51dc:	210c      	movs	r1, #12
    51de:	4b1d      	ldr	r3, [pc, #116]	; (5254 <Macro_layerLookup+0x110>)
    51e0:	434e      	muls	r6, r1
    51e2:	1999      	adds	r1, r3, r6
		// XOR each of the state bits
		// If only two are enabled, do not use this state
		if ( (LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x01) ^ (latch>>1) ^ ((LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x04)>>2) )
		{
			// Lookup layer
			nat_ptr_t **map = (nat_ptr_t**)layer->triggerMap;
    51e4:	599b      	ldr	r3, [r3, r6]

			// Determine if layer has key defined
			// Make sure scanCode is between layer first and last scancodes
			if ( map != 0
    51e6:	b18b      	cbz	r3, 520c <Macro_layerLookup+0xc8>
				&& scanCode <= layer->last
    51e8:	7a48      	ldrb	r0, [r1, #9]
    51ea:	42a0      	cmp	r0, r4
    51ec:	d30e      	bcc.n	520c <Macro_layerLookup+0xc8>
				&& scanCode >= layer->first
    51ee:	7a09      	ldrb	r1, [r1, #8]
    51f0:	428c      	cmp	r4, r1
    51f2:	d30b      	bcc.n	520c <Macro_layerLookup+0xc8>
				&& *map[ scanCode - layer->first ] != 0 )
    51f4:	1a61      	subs	r1, r4, r1
    51f6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    51fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    51fe:	681b      	ldr	r3, [r3, #0]
    5200:	b123      	cbz	r3, 520c <Macro_layerLookup+0xc8>
			{
				// Set the layer cache
				macroTriggerListLayerCache[ scanCode ] = macroLayerIndexStack[ layerIndex ];
    5202:	4b13      	ldr	r3, [pc, #76]	; (5250 <Macro_layerLookup+0x10c>)
    5204:	551a      	strb	r2, [r3, r4]

				return map[ scanCode - layer->first ];
    5206:	6800      	ldr	r0, [r0, #0]
    5208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    520c:	3d01      	subs	r5, #1
    520e:	b2ad      	uxth	r5, r5
    5210:	e7c0      	b.n	5194 <Macro_layerLookup+0x50>
	const Layer *layer = &LayerIndex[0];

	// Make sure scanCode is between layer first and last scancodes
	if ( map != 0
		&& scanCode <= layer->last
		&& scanCode >= layer->first
    5212:	1ea3      	subs	r3, r4, #2
    5214:	b2da      	uxtb	r2, r3
    5216:	2a57      	cmp	r2, #87	; 0x57
    5218:	d809      	bhi.n	522e <Macro_layerLookup+0xea>
		&& *map[ scanCode - layer->first ] != 0 )
    521a:	4a11      	ldr	r2, [pc, #68]	; (5260 <Macro_layerLookup+0x11c>)
    521c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5220:	6803      	ldr	r3, [r0, #0]
    5222:	b123      	cbz	r3, 522e <Macro_layerLookup+0xea>
	{
		// Set the layer cache to default map
		macroTriggerListLayerCache[ scanCode ] = 0;
    5224:	4b0a      	ldr	r3, [pc, #40]	; (5250 <Macro_layerLookup+0x10c>)
    5226:	2200      	movs	r2, #0
    5228:	551a      	strb	r2, [r3, r4]

		return map[ scanCode - layer->first ];
    522a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
    522e:	480d      	ldr	r0, [pc, #52]	; (5264 <Macro_layerLookup+0x120>)
    5230:	f002 fae6 	bl	7800 <_print>
	printHex( scanCode );
    5234:	4620      	mov	r0, r4
    5236:	2101      	movs	r1, #1
    5238:	f002 fb6b 	bl	7912 <printHex_op>
	print( NL );
    523c:	480a      	ldr	r0, [pc, #40]	; (5268 <Macro_layerLookup+0x124>)
    523e:	f002 fadf 	bl	7800 <_print>
	return 0;
    5242:	2000      	movs	r0, #0
    5244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			extern void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args );
			LCD_layerStack_capability( 0, 0, 0 );
#endif
		}

		return trigger_list;
    5248:	4620      	mov	r0, r4
	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
	printHex( scanCode );
	print( NL );
	return 0;
}
    524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    524e:	bf00      	nop
    5250:	1fff9fc8 	.word	0x1fff9fc8
    5254:	0000a010 	.word	0x0000a010
    5258:	1fff9fc6 	.word	0x1fff9fc6
    525c:	1fff916a 	.word	0x1fff916a
    5260:	1fff89e4 	.word	0x1fff89e4
    5264:	000098cd 	.word	0x000098cd
    5268:	0000b26f 	.word	0x0000b26f
    526c:	1fff916c 	.word	0x1fff916c

00005270 <Macro_interconnectAdd>:

// Add an interconnect ScanCode
// These are handled differently (less information is sent, hold/off states must be assumed)
#if defined(ConnectEnabled_define)
inline void Macro_interconnectAdd( void *trigger_ptr )
{
    5270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TriggerGuide *trigger = (TriggerGuide*)trigger_ptr;

	// Error checking
	uint8_t error = 0;
	switch ( trigger->type )
    5272:	7803      	ldrb	r3, [r0, #0]

// Add an interconnect ScanCode
// These are handled differently (less information is sent, hold/off states must be assumed)
#if defined(ConnectEnabled_define)
inline void Macro_interconnectAdd( void *trigger_ptr )
{
    5274:	4604      	mov	r4, r0
	TriggerGuide *trigger = (TriggerGuide*)trigger_ptr;

	// Error checking
	uint8_t error = 0;
	switch ( trigger->type )
    5276:	b923      	cbnz	r3, 5282 <Macro_interconnectAdd+0x12>
	{
	case 0x00: // Normal key
		switch ( trigger->state )
    5278:	7842      	ldrb	r2, [r0, #1]
    527a:	2a03      	cmp	r2, #3
    527c:	d905      	bls.n	528a <Macro_interconnectAdd+0x1a>
		case 0x01:
		case 0x02:
		case 0x03:
			break;
		default:
			erro_msg("Invalid key state - ");
    527e:	4823      	ldr	r0, [pc, #140]	; (530c <Macro_interconnectAdd+0x9c>)
    5280:	e000      	b.n	5284 <Macro_interconnectAdd+0x14>
		}
		break;

	// Invalid TriggerGuide type
	default:
		erro_msg("Invalid type - ");
    5282:	4823      	ldr	r0, [pc, #140]	; (5310 <Macro_interconnectAdd+0xa0>)
    5284:	f002 fabc 	bl	7800 <_print>
		error = 1;
    5288:	2301      	movs	r3, #1
		break;
	}

	// Check if ScanCode is out of range
	if ( trigger->scanCode > MaxScanCode )
    528a:	78a0      	ldrb	r0, [r4, #2]
    528c:	2859      	cmp	r0, #89	; 0x59
    528e:	d903      	bls.n	5298 <Macro_interconnectAdd+0x28>
	{
		warn_msg("ScanCode is out of range/not defined - ");
    5290:	4820      	ldr	r0, [pc, #128]	; (5314 <Macro_interconnectAdd+0xa4>)
    5292:	f002 fab5 	bl	7800 <_print>
    5296:	e004      	b.n	52a2 <Macro_interconnectAdd+0x32>
		error = 1;
	}

	// Display TriggerGuide
	if ( error )
    5298:	b91b      	cbnz	r3, 52a2 <Macro_interconnectAdd+0x32>
		return;
	}

	// Add trigger to the Interconnect Cache
	// During each processing loop, a scancode may be re-added depending on it's state
	for ( uint8_t c = 0; c < macroInterconnectCacheSize; c++ )
    529a:	4a1f      	ldr	r2, [pc, #124]	; (5318 <Macro_interconnectAdd+0xa8>)
    529c:	7811      	ldrb	r1, [r2, #0]
    529e:	4616      	mov	r6, r2
    52a0:	e016      	b.n	52d0 <Macro_interconnectAdd+0x60>
	}

	// Display TriggerGuide
	if ( error )
	{
		printHex( trigger->type );
    52a2:	7820      	ldrb	r0, [r4, #0]
    52a4:	2101      	movs	r1, #1
    52a6:	f002 fb34 	bl	7912 <printHex_op>
		print(" ");
    52aa:	481c      	ldr	r0, [pc, #112]	; (531c <Macro_interconnectAdd+0xac>)
    52ac:	f002 faa8 	bl	7800 <_print>
		printHex( trigger->state );
    52b0:	7860      	ldrb	r0, [r4, #1]
    52b2:	2101      	movs	r1, #1
    52b4:	f002 fb2d 	bl	7912 <printHex_op>
		print(" ");
    52b8:	4818      	ldr	r0, [pc, #96]	; (531c <Macro_interconnectAdd+0xac>)
    52ba:	f002 faa1 	bl	7800 <_print>
		printHex( trigger->scanCode );
    52be:	78a0      	ldrb	r0, [r4, #2]
    52c0:	2101      	movs	r1, #1
    52c2:	f002 fb26 	bl	7912 <printHex_op>
		print( NL );
    52c6:	4816      	ldr	r0, [pc, #88]	; (5320 <Macro_interconnectAdd+0xb0>)
		}
	}

	// If not in the list, add it
	macroInterconnectCache[ macroInterconnectCacheSize++ ] = *trigger;
}
    52c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printHex( trigger->type );
		print(" ");
		printHex( trigger->state );
		print(" ");
		printHex( trigger->scanCode );
		print( NL );
    52cc:	f002 ba98 	b.w	7800 <_print>
		return;
	}

	// Add trigger to the Interconnect Cache
	// During each processing loop, a scancode may be re-added depending on it's state
	for ( uint8_t c = 0; c < macroInterconnectCacheSize; c++ )
    52d0:	b2da      	uxtb	r2, r3
    52d2:	428a      	cmp	r2, r1
    52d4:	4a13      	ldr	r2, [pc, #76]	; (5324 <Macro_interconnectAdd+0xb4>)
    52d6:	d20e      	bcs.n	52f6 <Macro_interconnectAdd+0x86>
	{
		// Check if the same ScanCode
		if ( macroInterconnectCache[ c ].scanCode == trigger->scanCode )
    52d8:	461d      	mov	r5, r3
    52da:	3301      	adds	r3, #1
    52dc:	eb03 0743 	add.w	r7, r3, r3, lsl #1
    52e0:	4417      	add	r7, r2
    52e2:	f817 7c01 	ldrb.w	r7, [r7, #-1]
    52e6:	4287      	cmp	r7, r0
    52e8:	d1f2      	bne.n	52d0 <Macro_interconnectAdd+0x60>
		{
			// Update the state
			macroInterconnectCache[ c ].state = trigger->state;
    52ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    52ee:	442a      	add	r2, r5
    52f0:	7863      	ldrb	r3, [r4, #1]
    52f2:	7053      	strb	r3, [r2, #1]
			return;
    52f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	// If not in the list, add it
	macroInterconnectCache[ macroInterconnectCacheSize++ ] = *trigger;
    52f6:	1c4b      	adds	r3, r1, #1
    52f8:	7033      	strb	r3, [r6, #0]
    52fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    52fe:	8820      	ldrh	r0, [r4, #0]
    5300:	5250      	strh	r0, [r2, r1]
    5302:	1853      	adds	r3, r2, r1
    5304:	78a2      	ldrb	r2, [r4, #2]
    5306:	709a      	strb	r2, [r3, #2]
    5308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    530a:	bf00      	nop
    530c:	0000990b 	.word	0x0000990b
    5310:	00009935 	.word	0x00009935
    5314:	0000995a 	.word	0x0000995a
    5318:	1fff9169 	.word	0x1fff9169
    531c:	00008152 	.word	0x00008152
    5320:	0000b26f 	.word	0x0000b26f
    5324:	1fffa021 	.word	0x1fffa021

00005328 <Macro_keyState>:
//   * 0x01 - Pressed
//   * 0x02 - Held
//   * 0x03 - Released
//   * 0x04 - Unpressed (this is currently ignored)
inline void Macro_keyState( uint8_t scanCode, uint8_t state )
{
    5328:	b570      	push	{r4, r5, r6, lr}
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	if ( !Connect_master )
    532a:	4b12      	ldr	r3, [pc, #72]	; (5374 <Macro_keyState+0x4c>)
    532c:	781b      	ldrb	r3, [r3, #0]
//   * 0x01 - Pressed
//   * 0x02 - Held
//   * 0x03 - Released
//   * 0x04 - Unpressed (this is currently ignored)
inline void Macro_keyState( uint8_t scanCode, uint8_t state )
{
    532e:	4604      	mov	r4, r0
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	if ( !Connect_master )
    5330:	b913      	cbnz	r3, 5338 <Macro_keyState+0x10>
	{
		// ScanCodes are only added if there was a state change (on/off)
		switch ( state )
    5332:	b1f1      	cbz	r1, 5372 <Macro_keyState+0x4a>
    5334:	2902      	cmp	r1, #2
    5336:	d01c      	beq.n	5372 <Macro_keyState+0x4a>
		}
	}
#endif

	// Only add to macro trigger list if one of three states
	switch ( state )
    5338:	1e4b      	subs	r3, r1, #1
    533a:	2b02      	cmp	r3, #2
    533c:	d819      	bhi.n	5372 <Macro_keyState+0x4a>
	{
	case 0x01: // Pressed
	case 0x02: // Held
	case 0x03: // Released
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
    533e:	2c59      	cmp	r4, #89	; 0x59
    5340:	d90b      	bls.n	535a <Macro_keyState+0x32>
		{
			warn_msg("ScanCode is out of range/not defined: ");
    5342:	480d      	ldr	r0, [pc, #52]	; (5378 <Macro_keyState+0x50>)
    5344:	f002 fa5c 	bl	7800 <_print>
			printHex( scanCode );
    5348:	4620      	mov	r0, r4
    534a:	2101      	movs	r1, #1
    534c:	f002 fae1 	bl	7912 <printHex_op>
			print( NL );
    5350:	480a      	ldr	r0, [pc, #40]	; (537c <Macro_keyState+0x54>)
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
		break;
	}
}
    5352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
		{
			warn_msg("ScanCode is out of range/not defined: ");
			printHex( scanCode );
			print( NL );
    5356:	f002 ba53 	b.w	7800 <_print>
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    535a:	4a09      	ldr	r2, [pc, #36]	; (5380 <Macro_keyState+0x58>)
    535c:	4d09      	ldr	r5, [pc, #36]	; (5384 <Macro_keyState+0x5c>)
    535e:	7813      	ldrb	r3, [r2, #0]
    5360:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    5364:	182e      	adds	r6, r5, r0
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    5366:	3301      	adds	r3, #1
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
    5368:	7071      	strb	r1, [r6, #1]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
    536a:	2100      	movs	r1, #0
			printHex( scanCode );
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    536c:	70b4      	strb	r4, [r6, #2]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
    536e:	5429      	strb	r1, [r5, r0]
		macroTriggerListBufferSize++;
    5370:	7013      	strb	r3, [r2, #0]
    5372:	bd70      	pop	{r4, r5, r6, pc}
    5374:	1fff9012 	.word	0x1fff9012
    5378:	00009997 	.word	0x00009997
    537c:	0000b26f 	.word	0x0000b26f
    5380:	1fff9167 	.word	0x1fff9167
    5384:	1fff9dc2 	.word	0x1fff9dc2

00005388 <cliFunc_keyHold>:
		}
	}
}

void cliFunc_keyHold( char* args )
{
    5388:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    538a:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    538c:	9801      	ldr	r0, [sp, #4]
    538e:	4669      	mov	r1, sp
    5390:	aa01      	add	r2, sp, #4
    5392:	f001 ff81 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5396:	9800      	ldr	r0, [sp, #0]
    5398:	7803      	ldrb	r3, [r0, #0]
    539a:	b14b      	cbz	r3, 53b0 <cliFunc_keyHold+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    539c:	2b53      	cmp	r3, #83	; 0x53
    539e:	d1f5      	bne.n	538c <cliFunc_keyHold+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x02 ); // Hold scancode
    53a0:	3001      	adds	r0, #1
    53a2:	f002 fb0b 	bl	79bc <numToInt>
    53a6:	2102      	movs	r1, #2
    53a8:	b2c0      	uxtb	r0, r0
    53aa:	f7ff ffbd 	bl	5328 <Macro_keyState>
			break;
    53ae:	e7ed      	b.n	538c <cliFunc_keyHold+0x4>
		}
	}
}
    53b0:	b003      	add	sp, #12
    53b2:	f85d fb04 	ldr.w	pc, [sp], #4

000053b6 <cliFunc_keyPress>:

void cliFunc_keyPress( char* args )
{
    53b6:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    53b8:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    53ba:	9801      	ldr	r0, [sp, #4]
    53bc:	4669      	mov	r1, sp
    53be:	aa01      	add	r2, sp, #4
    53c0:	f001 ff6a 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    53c4:	9800      	ldr	r0, [sp, #0]
    53c6:	7803      	ldrb	r3, [r0, #0]
    53c8:	b14b      	cbz	r3, 53de <cliFunc_keyPress+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    53ca:	2b53      	cmp	r3, #83	; 0x53
    53cc:	d1f5      	bne.n	53ba <cliFunc_keyPress+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x01 ); // Press scancode
    53ce:	3001      	adds	r0, #1
    53d0:	f002 faf4 	bl	79bc <numToInt>
    53d4:	2101      	movs	r1, #1
    53d6:	b2c0      	uxtb	r0, r0
    53d8:	f7ff ffa6 	bl	5328 <Macro_keyState>
			break;
    53dc:	e7ed      	b.n	53ba <cliFunc_keyPress+0x4>
		}
	}
}
    53de:	b003      	add	sp, #12
    53e0:	f85d fb04 	ldr.w	pc, [sp], #4

000053e4 <cliFunc_keyRelease>:

void cliFunc_keyRelease( char* args )
{
    53e4:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    53e6:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    53e8:	9801      	ldr	r0, [sp, #4]
    53ea:	4669      	mov	r1, sp
    53ec:	aa01      	add	r2, sp, #4
    53ee:	f001 ff53 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    53f2:	9800      	ldr	r0, [sp, #0]
    53f4:	7803      	ldrb	r3, [r0, #0]
    53f6:	b14b      	cbz	r3, 540c <cliFunc_keyRelease+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    53f8:	2b53      	cmp	r3, #83	; 0x53
    53fa:	d1f5      	bne.n	53e8 <cliFunc_keyRelease+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x03 ); // Release scancode
    53fc:	3001      	adds	r0, #1
    53fe:	f002 fadd 	bl	79bc <numToInt>
    5402:	2103      	movs	r1, #3
    5404:	b2c0      	uxtb	r0, r0
    5406:	f7ff ff8f 	bl	5328 <Macro_keyState>
			break;
    540a:	e7ed      	b.n	53e8 <cliFunc_keyRelease+0x4>
		}
	}
}
    540c:	b003      	add	sp, #12
    540e:	f85d fb04 	ldr.w	pc, [sp], #4
    5412:	0000      	movs	r0, r0

00005414 <Macro_evalTriggerMacro>:
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    5414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];
    5418:	f8df 8230 	ldr.w	r8, [pc, #560]	; 564c <Macro_evalTriggerMacro+0x238>

// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
    541c:	4f83      	ldr	r7, [pc, #524]	; (562c <Macro_evalTriggerMacro+0x218>)
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];
    541e:	eb08 0640 	add.w	r6, r8, r0, lsl #1
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    5422:	b087      	sub	sp, #28
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    5424:	7872      	ldrb	r2, [r6, #1]

// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
    5426:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    542a:	2a01      	cmp	r2, #1
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    542c:	4681      	mov	r9, r0
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
    542e:	9303      	str	r3, [sp, #12]
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    5430:	d10c      	bne.n	544c <Macro_evalTriggerMacro+0x38>
	{
		record->state = TriggerMacro_Waiting;
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
    5432:	f818 1010 	ldrb.w	r1, [r8, r0, lsl #1]
    5436:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
	{
		record->state = TriggerMacro_Waiting;
    543a:	2202      	movs	r2, #2
    543c:	7072      	strb	r2, [r6, #1]
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
    543e:	5c42      	ldrb	r2, [r0, r1]
    5440:	1c4c      	adds	r4, r1, #1
    5442:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5446:	4422      	add	r2, r4
    5448:	f808 2019 	strb.w	r2, [r8, r9, lsl #1]
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    544c:	f818 3019 	ldrb.w	r3, [r8, r9, lsl #1]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    5450:	f857 2039 	ldr.w	r2, [r7, r9, lsl #3]
		record->state = TriggerMacro_Waiting;
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    5454:	9301      	str	r3, [sp, #4]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    5456:	5cd1      	ldrb	r1, [r2, r3]
    5458:	eb01 0141 	add.w	r1, r1, r1, lsl #1

	// If no combo items are left, remove the TriggerMacro from the pending list
	if ( comboLength == 0 )
    545c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    5460:	9104      	str	r1, [sp, #16]
    5462:	d101      	bne.n	5468 <Macro_evalTriggerMacro+0x54>
	{
		return TriggerMacroEval_Remove;
    5464:	2003      	movs	r0, #3
    5466:	e0de      	b.n	5626 <Macro_evalTriggerMacro+0x212>
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    5468:	7811      	ldrb	r1, [r2, #0]
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    546a:	9b01      	ldr	r3, [sp, #4]
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    546c:	2003      	movs	r0, #3
    546e:	fb00 2201 	mla	r2, r0, r1, r2
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    5472:	f103 0a01 	add.w	sl, r3, #1
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    5476:	7855      	ldrb	r5, [r2, #1]
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    5478:	fa5f fa8a 	uxtb.w	sl, sl
	// On scan after position increment, change to TriggerMacro_Waiting state
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
    547c:	2400      	movs	r4, #0
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    547e:	9901      	ldr	r1, [sp, #4]
    5480:	9b04      	ldr	r3, [sp, #16]
    5482:	4419      	add	r1, r3
    5484:	4551      	cmp	r1, sl
    5486:	db72      	blt.n	556e <Macro_evalTriggerMacro+0x15a>
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    5488:	9b03      	ldr	r3, [sp, #12]
    548a:	681a      	ldr	r2, [r3, #0]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
		// Iterate through the key buffer, comparing to each key in the combo
		for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
    548c:	f04f 0b00 	mov.w	fp, #0
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    5490:	4452      	add	r2, sl
    5492:	9202      	str	r2, [sp, #8]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
    5494:	465a      	mov	r2, fp
		// Iterate through the key buffer, comparing to each key in the combo
		for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
    5496:	4966      	ldr	r1, [pc, #408]	; (5630 <Macro_evalTriggerMacro+0x21c>)
    5498:	7808      	ldrb	r0, [r1, #0]
    549a:	fa5f f18b 	uxtb.w	r1, fp
    549e:	4288      	cmp	r0, r1
    54a0:	d95a      	bls.n	5558 <Macro_evalTriggerMacro+0x144>
		{
			// Lookup key information
			TriggerGuide *keyInfo = &macroTriggerListBuffer[ key ];
    54a2:	4864      	ldr	r0, [pc, #400]	; (5634 <Macro_evalTriggerMacro+0x220>)
    54a4:	9b02      	ldr	r3, [sp, #8]

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
    54a6:	b2d2      	uxtb	r2, r2
		TriggerMacroVote vote = TriggerMacroVote_Invalid;
		// Iterate through the key buffer, comparing to each key in the combo
		for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
		{
			// Lookup key information
			TriggerGuide *keyInfo = &macroTriggerListBuffer[ key ];
    54a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
    54ac:	9205      	str	r2, [sp, #20]
		TriggerMacroVote vote = TriggerMacroVote_Invalid;
		// Iterate through the key buffer, comparing to each key in the combo
		for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
		{
			// Lookup key information
			TriggerGuide *keyInfo = &macroTriggerListBuffer[ key ];
    54ae:	4401      	add	r1, r0
    54b0:	781a      	ldrb	r2, [r3, #0]

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
    54b2:	b335      	cbz	r5, 5502 <Macro_evalTriggerMacro+0xee>
// Votes on the given key vs. guide, long macros
// A long macro is defined as a guide with more than 1 combo
inline TriggerMacroVote Macro_evalLongTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    54b4:	2a01      	cmp	r2, #1
    54b6:	d01d      	beq.n	54f4 <Macro_evalTriggerMacro+0xe0>
    54b8:	d303      	bcc.n	54c2 <Macro_evalTriggerMacro+0xae>
    54ba:	2a02      	cmp	r2, #2
    54bc:	d11c      	bne.n	54f8 <Macro_evalTriggerMacro+0xe4>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    54be:	485e      	ldr	r0, [pc, #376]	; (5638 <Macro_evalTriggerMacro+0x224>)
    54c0:	e01b      	b.n	54fa <Macro_evalTriggerMacro+0xe6>
	{
	// Normal State Type
	case 0x00:
		// Depending on the state of the buffered key, make voting decision
		// Incorrect key
		if ( guide->scanCode != key->scanCode )
    54c2:	9b02      	ldr	r3, [sp, #8]
    54c4:	788a      	ldrb	r2, [r1, #2]
    54c6:	7898      	ldrb	r0, [r3, #2]
    54c8:	4290      	cmp	r0, r2
    54ca:	784a      	ldrb	r2, [r1, #1]
    54cc:	d009      	beq.n	54e2 <Macro_evalTriggerMacro+0xce>
		{
			switch ( key->state )
    54ce:	2a02      	cmp	r2, #2
    54d0:	d039      	beq.n	5546 <Macro_evalTriggerMacro+0x132>
    54d2:	2a03      	cmp	r2, #3
    54d4:	d003      	beq.n	54de <Macro_evalTriggerMacro+0xca>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    54d6:	1e51      	subs	r1, r2, #1
    54d8:	424a      	negs	r2, r1
    54da:	414a      	adcs	r2, r1
    54dc:	e033      	b.n	5546 <Macro_evalTriggerMacro+0x132>
			case 0x02:
				return TriggerMacroVote_DoNothing;

			// Wrong key released, fail out if pos == 0
			case 0x03:
				return TriggerMacroVote_DoNothing | TriggerMacroVote_DoNothingRelease;
    54de:	2206      	movs	r2, #6
    54e0:	e031      	b.n	5546 <Macro_evalTriggerMacro+0x132>
		}

		// Correct key
		else
		{
			switch ( key->state )
    54e2:	2a02      	cmp	r2, #2
    54e4:	d02e      	beq.n	5544 <Macro_evalTriggerMacro+0x130>
    54e6:	2a03      	cmp	r2, #3
    54e8:	d021      	beq.n	552e <Macro_evalTriggerMacro+0x11a>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    54ea:	2a01      	cmp	r2, #1
    54ec:	bf0c      	ite	eq
    54ee:	2208      	moveq	r2, #8
    54f0:	2200      	movne	r2, #0
    54f2:	e028      	b.n	5546 <Macro_evalTriggerMacro+0x132>

		break;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    54f4:	4851      	ldr	r0, [pc, #324]	; (563c <Macro_evalTriggerMacro+0x228>)
    54f6:	e000      	b.n	54fa <Macro_evalTriggerMacro+0xe6>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    54f8:	4851      	ldr	r0, [pc, #324]	; (5640 <Macro_evalTriggerMacro+0x22c>)
    54fa:	f002 f981 	bl	7800 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    54fe:	2200      	movs	r2, #0
    5500:	e021      	b.n	5546 <Macro_evalTriggerMacro+0x132>

// Votes on the given key vs. guide, short macros
inline TriggerMacroVote Macro_evalShortTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    5502:	2a01      	cmp	r2, #1
    5504:	d015      	beq.n	5532 <Macro_evalTriggerMacro+0x11e>
    5506:	d303      	bcc.n	5510 <Macro_evalTriggerMacro+0xfc>
    5508:	2a02      	cmp	r2, #2
    550a:	d114      	bne.n	5536 <Macro_evalTriggerMacro+0x122>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    550c:	484a      	ldr	r0, [pc, #296]	; (5638 <Macro_evalTriggerMacro+0x224>)
    550e:	e013      	b.n	5538 <Macro_evalTriggerMacro+0x124>
	switch ( guide->type )
	{
	// Normal State Type
	case 0x00:
		// For short TriggerMacros completely ignore incorrect keys
		if ( guide->scanCode == key->scanCode )
    5510:	9b02      	ldr	r3, [sp, #8]
    5512:	788a      	ldrb	r2, [r1, #2]
    5514:	7898      	ldrb	r0, [r3, #2]
    5516:	4290      	cmp	r0, r2
    5518:	d112      	bne.n	5540 <Macro_evalTriggerMacro+0x12c>
		{
			switch ( key->state )
    551a:	784a      	ldrb	r2, [r1, #1]
    551c:	2a02      	cmp	r2, #2
    551e:	d011      	beq.n	5544 <Macro_evalTriggerMacro+0x130>
    5520:	2a03      	cmp	r2, #3
    5522:	d004      	beq.n	552e <Macro_evalTriggerMacro+0x11a>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    5524:	2a01      	cmp	r2, #1
    5526:	bf0c      	ite	eq
    5528:	2208      	moveq	r2, #8
    552a:	2202      	movne	r2, #2
    552c:	e00b      	b.n	5546 <Macro_evalTriggerMacro+0x132>
			case 0x02:
				return TriggerMacroVote_PassRelease;

			// Correct key, released, possible release
			case 0x03:
				return TriggerMacroVote_Release;
    552e:	2210      	movs	r2, #16
    5530:	e009      	b.n	5546 <Macro_evalTriggerMacro+0x132>

		return TriggerMacroVote_DoNothing;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    5532:	4842      	ldr	r0, [pc, #264]	; (563c <Macro_evalTriggerMacro+0x228>)
    5534:	e000      	b.n	5538 <Macro_evalTriggerMacro+0x124>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    5536:	4842      	ldr	r0, [pc, #264]	; (5640 <Macro_evalTriggerMacro+0x22c>)
    5538:	f002 f962 	bl	7800 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    553c:	462a      	mov	r2, r5
    553e:	e002      	b.n	5546 <Macro_evalTriggerMacro+0x132>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    5540:	2202      	movs	r2, #2
    5542:	e000      	b.n	5546 <Macro_evalTriggerMacro+0x132>
			case 0x01:
				return TriggerMacroVote_Pass;

			// Correct key, held, possible passing or release
			case 0x02:
				return TriggerMacroVote_PassRelease;
    5544:	2218      	movs	r2, #24
			// Lookup key information
			TriggerGuide *keyInfo = &macroTriggerListBuffer[ key ];

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
    5546:	9b05      	ldr	r3, [sp, #20]
    5548:	b2d2      	uxtb	r2, r2
    554a:	431a      	orrs	r2, r3
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
			if ( vote >= TriggerMacroVote_Pass )
    554c:	2a07      	cmp	r2, #7
    554e:	f10b 0b01 	add.w	fp, fp, #1
    5552:	d9a0      	bls.n	5496 <Macro_evalTriggerMacro+0x82>
			{
				vote &= TriggerMacroVote_Release | TriggerMacroVote_PassRelease | TriggerMacroVote_Pass;
    5554:	f002 0218 	and.w	r2, r2, #24
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    5558:	b91d      	cbnz	r5, 5562 <Macro_evalTriggerMacro+0x14e>
    555a:	2a07      	cmp	r2, #7
			vote |= TriggerMacroVote_Fail;
    555c:	bf98      	it	ls
    555e:	f042 0201 	orrls.w	r2, r2, #1
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    5562:	f10a 0a03 	add.w	sl, sl, #3
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
			vote |= TriggerMacroVote_Fail;

		// After voting, append to overall vote
		overallVote |= vote;
    5566:	4314      	orrs	r4, r2
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    5568:	fa5f fa8a 	uxtb.w	sl, sl
    556c:	e787      	b.n	547e <Macro_evalTriggerMacro+0x6a>
		overallVote |= vote;
	}

	// If no pass vote was found after scanning the entire combo
	// And this is the first position in the combo, just remove it (nothing important happened)
	if ( longMacro && overallVote & TriggerMacroVote_DoNothingRelease && pos == 0 )
    556e:	b12d      	cbz	r5, 557c <Macro_evalTriggerMacro+0x168>
    5570:	0763      	lsls	r3, r4, #29
    5572:	d503      	bpl.n	557c <Macro_evalTriggerMacro+0x168>
    5574:	9b01      	ldr	r3, [sp, #4]
    5576:	b90b      	cbnz	r3, 557c <Macro_evalTriggerMacro+0x168>
		overallVote |= TriggerMacroVote_Fail;
    5578:	f044 0401 	orr.w	r4, r4, #1

	// Decide new state of macro after voting
	// Fail macro, remove from pending list
	if ( overallVote & TriggerMacroVote_Fail )
    557c:	07e0      	lsls	r0, r4, #31
    557e:	f53f af71 	bmi.w	5464 <Macro_evalTriggerMacro+0x50>
	{
		return TriggerMacroEval_Remove;
	}
	// Do nothing, incorrect key is being held or released
	else if ( overallVote & TriggerMacroVote_DoNothing && longMacro )
    5582:	07a2      	lsls	r2, r4, #30
    5584:	d502      	bpl.n	558c <Macro_evalTriggerMacro+0x178>
    5586:	b10d      	cbz	r5, 558c <Macro_evalTriggerMacro+0x178>
	// If this is a short macro, just remove it
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
    5588:	2000      	movs	r0, #0
    558a:	e04c      	b.n	5626 <Macro_evalTriggerMacro+0x212>
	{
		// Just doing nothing :)
	}
	// If ready for transition and in Press state, set to Waiting and increment combo position
	// Position is incremented (and possibly remove the macro from the pending list) on the next iteration
	else if ( overallVote & TriggerMacroVote_Release && record->state == TriggerMacro_Press )
    558c:	f004 0210 	and.w	r2, r4, #16
    5590:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    5594:	b1c2      	cbz	r2, 55c8 <Macro_evalTriggerMacro+0x1b4>
    5596:	7872      	ldrb	r2, [r6, #1]
    5598:	b9b2      	cbnz	r2, 55c8 <Macro_evalTriggerMacro+0x1b4>
	{
		record->state = TriggerMacro_Release;
    559a:	2201      	movs	r2, #1
    559c:	7072      	strb	r2, [r6, #1]

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
    559e:	f857 3039 	ldr.w	r3, [r7, r9, lsl #3]
    55a2:	f818 2019 	ldrb.w	r2, [r8, r9, lsl #1]
    55a6:	5c98      	ldrb	r0, [r3, r2]
    55a8:	1c51      	adds	r1, r2, #1
    55aa:	2203      	movs	r2, #3
    55ac:	fb12 1200 	smlabb	r2, r2, r0, r1
    55b0:	5c9b      	ldrb	r3, [r3, r2]
    55b2:	b13b      	cbz	r3, 55c4 <Macro_evalTriggerMacro+0x1b0>
		return TriggerMacroEval_DoResultAndRemove;
	}

	// If this is a short macro, just remove it
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
    55b4:	2d00      	cmp	r5, #0
    55b6:	f43f af55 	beq.w	5464 <Macro_evalTriggerMacro+0x50>
    55ba:	e7e5      	b.n	5588 <Macro_evalTriggerMacro+0x174>
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    55bc:	5ccb      	ldrb	r3, [r1, r3]
    55be:	b333      	cbz	r3, 560e <Macro_evalTriggerMacro+0x1fa>
			{
				// Only ever trigger result once, on press
				if ( overallVote == TriggerMacroVote_Pass )
    55c0:	2c08      	cmp	r4, #8
    55c2:	d1f7      	bne.n	55b4 <Macro_evalTriggerMacro+0x1a0>
	{
		record->state = TriggerMacro_Release;

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
			return TriggerMacroEval_DoResultAndRemove;
    55c4:	2002      	movs	r0, #2
    55c6:	e02e      	b.n	5626 <Macro_evalTriggerMacro+0x212>
	}
	// If passing and in Waiting state, set macro state to Press
	else if ( overallVote & TriggerMacroVote_Pass
    55c8:	0723      	lsls	r3, r4, #28
    55ca:	d529      	bpl.n	5620 <Macro_evalTriggerMacro+0x20c>
		&& ( record->state == TriggerMacro_Waiting || record->state == TriggerMacro_Press ) )
    55cc:	7872      	ldrb	r2, [r6, #1]
    55ce:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
    55d2:	d125      	bne.n	5620 <Macro_evalTriggerMacro+0x20c>
	{
		record->state = TriggerMacro_Press;
    55d4:	7072      	strb	r2, [r6, #1]

		// If in press state, and this is the final combo, send request for ResultMacro
		// Check to see if the result macro only has a single element
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
    55d6:	f857 2039 	ldr.w	r2, [r7, r9, lsl #3]
    55da:	4411      	add	r1, r2
    55dc:	7848      	ldrb	r0, [r1, #1]
    55de:	2800      	cmp	r0, #0
    55e0:	d1e8      	bne.n	55b4 <Macro_evalTriggerMacro+0x1a0>
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    55e2:	9b03      	ldr	r3, [sp, #12]
    55e4:	7919      	ldrb	r1, [r3, #4]
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    55e6:	4b17      	ldr	r3, [pc, #92]	; (5644 <Macro_evalTriggerMacro+0x230>)
    55e8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    55ec:	780e      	ldrb	r6, [r1, #0]
inline uint8_t Macro_isLongResultMacro( const ResultMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
    55ee:	2301      	movs	r3, #1
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    55f0:	b2c7      	uxtb	r7, r0
    55f2:	42b7      	cmp	r7, r6
    55f4:	d2e2      	bcs.n	55bc <Macro_evalTriggerMacro+0x1a8>
		position += ResultGuideSize( (ResultGuide*)&macro->guide[ position ] );
    55f6:	f811 c003 	ldrb.w	ip, [r1, r3]
    55fa:	4f13      	ldr	r7, [pc, #76]	; (5648 <Macro_evalTriggerMacro+0x234>)
    55fc:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
    5600:	3001      	adds	r0, #1
    5602:	793f      	ldrb	r7, [r7, #4]
    5604:	3701      	adds	r7, #1
    5606:	fa53 f387 	uxtab	r3, r3, r7
    560a:	b2db      	uxtb	r3, r3
    560c:	e7f0      	b.n	55f0 <Macro_evalTriggerMacro+0x1dc>
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    560e:	7813      	ldrb	r3, [r2, #0]
    5610:	2001      	movs	r0, #1
    5612:	2103      	movs	r1, #3
    5614:	fb11 0303 	smlabb	r3, r1, r3, r0
			}
			// Short result macro
			else
			{
				// Only trigger result once, on press, if long trigger (more than 1 combo)
				if ( Macro_isLongTriggerMacro( macro ) )
    5618:	5cd3      	ldrb	r3, [r2, r3]
    561a:	2b00      	cmp	r3, #0
    561c:	d1d2      	bne.n	55c4 <Macro_evalTriggerMacro+0x1b0>
    561e:	e002      	b.n	5626 <Macro_evalTriggerMacro+0x212>
			}
		}
	}
	// Otherwise, just remove the macro on key release
	// One more result has to be called to indicate to the ResultMacro that the key transitioned to the release state
	else if ( overallVote & TriggerMacroVote_Release )
    5620:	2800      	cmp	r0, #0
    5622:	d1cf      	bne.n	55c4 <Macro_evalTriggerMacro+0x1b0>
    5624:	e7c6      	b.n	55b4 <Macro_evalTriggerMacro+0x1a0>
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
}
    5626:	b007      	add	sp, #28
    5628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    562c:	0000a53c 	.word	0x0000a53c
    5630:	1fff9167 	.word	0x1fff9167
    5634:	1fff9dc2 	.word	0x1fff9dc2
    5638:	00009a0e 	.word	0x00009a0e
    563c:	000099d3 	.word	0x000099d3
    5640:	00009a4c 	.word	0x00009a4c
    5644:	00009dcc 	.word	0x00009dcc
    5648:	0000943c 	.word	0x0000943c
    564c:	1fffa12c 	.word	0x1fffa12c

00005650 <Macro_process>:


// Macro Procesing Loop
// Called once per USB buffer send
inline void Macro_process()
{
    5650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	// If this is a interconnect slave node, send all scancodes to master node
	if ( !Connect_master )
    5654:	4b9d      	ldr	r3, [pc, #628]	; (58cc <Macro_process+0x27c>)
    5656:	781d      	ldrb	r5, [r3, #0]


// Macro Procesing Loop
// Called once per USB buffer send
inline void Macro_process()
{
    5658:	b085      	sub	sp, #20
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	// If this is a interconnect slave node, send all scancodes to master node
	if ( !Connect_master )
    565a:	b95d      	cbnz	r5, 5674 <Macro_process+0x24>
	{
		if ( macroTriggerListBufferSize > 0 )
    565c:	4c9c      	ldr	r4, [pc, #624]	; (58d0 <Macro_process+0x280>)
    565e:	7822      	ldrb	r2, [r4, #0]
    5660:	2a00      	cmp	r2, #0
    5662:	f000 81b4 	beq.w	59ce <Macro_process+0x37e>
		{
			Connect_send_ScanCode( Connect_id, macroTriggerListBuffer, macroTriggerListBufferSize );
    5666:	4b9b      	ldr	r3, [pc, #620]	; (58d4 <Macro_process+0x284>)
    5668:	499b      	ldr	r1, [pc, #620]	; (58d8 <Macro_process+0x288>)
    566a:	7818      	ldrb	r0, [r3, #0]
    566c:	f7fe fe1e 	bl	42ac <Connect_send_ScanCode>
			macroTriggerListBufferSize = 0;
    5670:	7025      	strb	r5, [r4, #0]
    5672:	e1ac      	b.n	59ce <Macro_process+0x37e>
		return;
	}
#endif

	// Only do one round of macro processing between Output Module timer sends
	if ( USBKeys_Sent != 0 )
    5674:	4b99      	ldr	r3, [pc, #612]	; (58dc <Macro_process+0x28c>)
    5676:	781a      	ldrb	r2, [r3, #0]
    5678:	2a00      	cmp	r2, #0
    567a:	f040 81a8 	bne.w	59ce <Macro_process+0x37e>
		return;

#if defined(ConnectEnabled_define)
	// Check if there are any ScanCodes in the interconnect cache to process
	if ( Connect_master && macroInterconnectCacheSize > 0 )
    567e:	4898      	ldr	r0, [pc, #608]	; (58e0 <Macro_process+0x290>)
    5680:	7803      	ldrb	r3, [r0, #0]
    5682:	b91b      	cbnz	r3, 568c <Macro_process+0x3c>
		}
	}
#endif

	// If the pause flag is set, only process if the step counter is non-zero
	if ( macroPauseMode )
    5684:	4b97      	ldr	r3, [pc, #604]	; (58e4 <Macro_process+0x294>)
    5686:	781b      	ldrb	r3, [r3, #0]
    5688:	bb43      	cbnz	r3, 56dc <Macro_process+0x8c>
    568a:	e031      	b.n	56f0 <Macro_process+0xa0>
	// Check if there are any ScanCodes in the interconnect cache to process
	if ( Connect_master && macroInterconnectCacheSize > 0 )
	{
		// Iterate over all the cache ScanCodes
		uint8_t currentInterconnectCacheSize = macroInterconnectCacheSize;
		macroInterconnectCacheSize = 0;
    568c:	7002      	strb	r2, [r0, #0]
    568e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
		for ( uint8_t c = 0; c < currentInterconnectCacheSize; c++ )
		{
			// Add to the trigger list
			macroTriggerListBuffer[ macroTriggerListBufferSize++ ] = macroInterconnectCache[ c ];
    5692:	498f      	ldr	r1, [pc, #572]	; (58d0 <Macro_process+0x280>)
    5694:	4d90      	ldr	r5, [pc, #576]	; (58d8 <Macro_process+0x288>)
    5696:	780b      	ldrb	r3, [r1, #0]
    5698:	1c5c      	adds	r4, r3, #1
    569a:	700c      	strb	r4, [r1, #0]
    569c:	4992      	ldr	r1, [pc, #584]	; (58e8 <Macro_process+0x298>)
    569e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    56a2:	1853      	adds	r3, r2, r1
    56a4:	192f      	adds	r7, r5, r4
    56a6:	f8b3 c000 	ldrh.w	ip, [r3]
    56aa:	f825 c004 	strh.w	ip, [r5, r4]
    56ae:	789c      	ldrb	r4, [r3, #2]
    56b0:	70bc      	strb	r4, [r7, #2]

			// TODO Handle other TriggerGuide types (e.g. analog)
			switch ( macroInterconnectCache[ c ].type )
    56b2:	5c54      	ldrb	r4, [r2, r1]
    56b4:	b974      	cbnz	r4, 56d4 <Macro_process+0x84>
			{
			// Normal (Press/Hold/Release)
			case 0x00:
				// Decide what to do based on the current state
				switch ( macroInterconnectCache[ c ].state )
    56b6:	785c      	ldrb	r4, [r3, #1]
    56b8:	2c01      	cmp	r4, #1
    56ba:	d10b      	bne.n	56d4 <Macro_process+0x84>
				{
				// Re-add to interconnect cache in hold state
				case 0x01: // Press
				//case 0x02: // Hold // XXX Why does this not work? -HaaTa
					macroInterconnectCache[ c ].state = 0x02;
    56bc:	2402      	movs	r4, #2
    56be:	705c      	strb	r4, [r3, #1]
					macroInterconnectCache[ macroInterconnectCacheSize++ ] = macroInterconnectCache[ c ];
    56c0:	7804      	ldrb	r4, [r0, #0]
    56c2:	881f      	ldrh	r7, [r3, #0]
    56c4:	1c65      	adds	r5, r4, #1
    56c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    56ca:	7005      	strb	r5, [r0, #0]
    56cc:	530f      	strh	r7, [r1, r4]
    56ce:	190d      	adds	r5, r1, r4
    56d0:	789b      	ldrb	r3, [r3, #2]
    56d2:	70ab      	strb	r3, [r5, #2]
    56d4:	3203      	adds	r2, #3
	if ( Connect_master && macroInterconnectCacheSize > 0 )
	{
		// Iterate over all the cache ScanCodes
		uint8_t currentInterconnectCacheSize = macroInterconnectCacheSize;
		macroInterconnectCacheSize = 0;
		for ( uint8_t c = 0; c < currentInterconnectCacheSize; c++ )
    56d6:	42b2      	cmp	r2, r6
    56d8:	d1db      	bne.n	5692 <Macro_process+0x42>
    56da:	e7d3      	b.n	5684 <Macro_process+0x34>
#endif

	// If the pause flag is set, only process if the step counter is non-zero
	if ( macroPauseMode )
	{
		if ( macroStepCounter == 0 )
    56dc:	4b83      	ldr	r3, [pc, #524]	; (58ec <Macro_process+0x29c>)
    56de:	881a      	ldrh	r2, [r3, #0]
    56e0:	2a00      	cmp	r2, #0
    56e2:	f000 8174 	beq.w	59ce <Macro_process+0x37e>
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    56e6:	3a01      	subs	r2, #1
		dbug_print("Macro Step");
    56e8:	4881      	ldr	r0, [pc, #516]	; (58f0 <Macro_process+0x2a0>)
	{
		if ( macroStepCounter == 0 )
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    56ea:	801a      	strh	r2, [r3, #0]
		dbug_print("Macro Step");
    56ec:	f002 f888 	bl	7800 <_print>
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    56f0:	2400      	movs	r4, #0

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
    56f2:	4b77      	ldr	r3, [pc, #476]	; (58d0 <Macro_process+0x280>)
    56f4:	781a      	ldrb	r2, [r3, #0]
    56f6:	b2e0      	uxtb	r0, r4
    56f8:	4282      	cmp	r2, r0
    56fa:	4698      	mov	r8, r3
    56fc:	d937      	bls.n	576e <Macro_process+0x11e>
	{
		// TODO LED States
		// TODO Analog Switches
		// Only add TriggerMacro to pending list if key was pressed (not held, released or off)
		if ( macroTriggerListBuffer[ key ].state == 0x00 && macroTriggerListBuffer[ key ].state != 0x01 )
    56fe:	4b76      	ldr	r3, [pc, #472]	; (58d8 <Macro_process+0x288>)
    5700:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5704:	4418      	add	r0, r3
    5706:	7841      	ldrb	r1, [r0, #1]
    5708:	b379      	cbz	r1, 576a <Macro_process+0x11a>
		// TODO Analog
		// If this is a release case, indicate to layer lookup for possible latch expiry
		uint8_t latch_expire = macroTriggerListBuffer[ key ].state == 0x03;

		// Lookup Trigger List
		nat_ptr_t *triggerList = Macro_layerLookup( &macroTriggerListBuffer[ key ], latch_expire );
    570a:	1ecb      	subs	r3, r1, #3
    570c:	4259      	negs	r1, r3
    570e:	4159      	adcs	r1, r3
    5710:	f7ff fd18 	bl	5144 <Macro_layerLookup>

		// If there was an error during lookup, skip
		if ( triggerList == 0 )
    5714:	b348      	cbz	r0, 576a <Macro_process+0x11a>
    5716:	4f77      	ldr	r7, [pc, #476]	; (58f4 <Macro_process+0x2a4>)
			continue;

		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];
    5718:	f8d0 e000 	ldr.w	lr, [r0]
    571c:	883b      	ldrh	r3, [r7, #0]

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    571e:	2201      	movs	r2, #1
    5720:	f10e 0101 	add.w	r1, lr, #1
    5724:	428a      	cmp	r2, r1
    5726:	d21f      	bcs.n	5768 <Macro_process+0x118>
		{
			// Lookup trigger macro index
			var_uint_t triggerMacroIndex = triggerList[ macro ];
    5728:	f810 1022 	ldrb.w	r1, [r0, r2, lsl #2]
    572c:	2600      	movs	r6, #0
    572e:	b2f5      	uxtb	r5, r6

			// Iterate over macroTriggerMacroPendingList to see if any macro in the scancode's
			//  triggerList needs to be added
			var_uint_t pending = 0;
			for ( ; pending < macroTriggerMacroPendingListSize; pending++ )
    5730:	429d      	cmp	r5, r3
    5732:	d207      	bcs.n	5744 <Macro_process+0xf4>
			{
				// Stop scanning if the trigger macro index is found in the pending list
				if ( macroTriggerMacroPendingList[ pending ] == triggerMacroIndex )
    5734:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 58f8 <Macro_process+0x2a8>
    5738:	f83c c015 	ldrh.w	ip, [ip, r5, lsl #1]
    573c:	458c      	cmp	ip, r1
    573e:	f106 0601 	add.w	r6, r6, #1
    5742:	d1f4      	bne.n	572e <Macro_process+0xde>
					break;
			}

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
    5744:	429d      	cmp	r5, r3
    5746:	d10c      	bne.n	5762 <Macro_process+0x112>
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    5748:	4e6b      	ldr	r6, [pc, #428]	; (58f8 <Macro_process+0x2a8>)
    574a:	1c5d      	adds	r5, r3, #1
    574c:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
    5750:	4b6a      	ldr	r3, [pc, #424]	; (58fc <Macro_process+0x2ac>)
    5752:	2600      	movs	r6, #0
    5754:	f803 6011 	strb.w	r6, [r3, r1, lsl #1]
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    5758:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    575c:	2302      	movs	r3, #2
    575e:	704b      	strb	r3, [r1, #1]

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    5760:	b2ab      	uxth	r3, r5
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    5762:	3201      	adds	r2, #1
    5764:	b2d2      	uxtb	r2, r2
    5766:	e7db      	b.n	5720 <Macro_process+0xd0>
    5768:	803b      	strh	r3, [r7, #0]
    576a:	3401      	adds	r4, #1
    576c:	e7c1      	b.n	56f2 <Macro_process+0xa2>

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
    576e:	2700      	movs	r7, #0
    5770:	463e      	mov	r6, r7
	// Tail pointer for macroTriggerMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroTriggerMacroPendingListTail = 0;

	// Iterate through the pending TriggerMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    5772:	4b60      	ldr	r3, [pc, #384]	; (58f4 <Macro_process+0x2a4>)
    5774:	881a      	ldrh	r2, [r3, #0]
    5776:	b2fc      	uxtb	r4, r7
    5778:	4294      	cmp	r4, r2
    577a:	f080 80c9 	bcs.w	5910 <Macro_process+0x2c0>
	{
		switch ( Macro_evalTriggerMacro( macroTriggerMacroPendingList[ macro ] ) )
    577e:	4d5e      	ldr	r5, [pc, #376]	; (58f8 <Macro_process+0x2a8>)
    5780:	f815 0014 	ldrb.w	r0, [r5, r4, lsl #1]
    5784:	f7ff fe46 	bl	5414 <Macro_evalTriggerMacro>
    5788:	2802      	cmp	r0, #2
    578a:	d056      	beq.n	583a <Macro_process+0x1ea>
    578c:	2803      	cmp	r0, #3
    578e:	f000 809a 	beq.w	58c6 <Macro_process+0x276>
    5792:	2801      	cmp	r0, #1
    5794:	d14a      	bne.n	582c <Macro_process+0x1dc>
		{
		// Trigger Result Macro (purposely falling through)
		case TriggerMacroEval_DoResult:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    5796:	485a      	ldr	r0, [pc, #360]	; (5900 <Macro_process+0x2b0>)
    5798:	f835 e014 	ldrh.w	lr, [r5, r4, lsl #1]
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    579c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 590c <Macro_process+0x2bc>
		switch ( Macro_evalTriggerMacro( macroTriggerMacroPendingList[ macro ] ) )
		{
		// Trigger Result Macro (purposely falling through)
		case TriggerMacroEval_DoResult:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    57a0:	eb00 03ce 	add.w	r3, r0, lr, lsl #3
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    57a4:	f8b9 2000 	ldrh.w	r2, [r9]
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
inline void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    57a8:	791b      	ldrb	r3, [r3, #4]

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    57aa:	2100      	movs	r1, #0
    57ac:	fa5f fa81 	uxtb.w	sl, r1
    57b0:	4592      	cmp	sl, r2
    57b2:	f8df c154 	ldr.w	ip, [pc, #340]	; 5908 <Macro_process+0x2b8>
    57b6:	d206      	bcs.n	57c6 <Macro_process+0x176>
	{
		// If duplicate found, do nothing
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
    57b8:	f83c c01a 	ldrh.w	ip, [ip, sl, lsl #1]
    57bc:	459c      	cmp	ip, r3
    57be:	f101 0101 	add.w	r1, r1, #1
    57c2:	d1f3      	bne.n	57ac <Macro_process+0x15c>
    57c4:	e032      	b.n	582c <Macro_process+0x1dc>
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    57c6:	1c51      	adds	r1, r2, #1
    57c8:	f82c 3012 	strh.w	r3, [ip, r2, lsl #1]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    57cc:	f850 003e 	ldr.w	r0, [r0, lr, lsl #3]
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    57d0:	f8a9 1000 	strh.w	r1, [r9]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    57d4:	7802      	ldrb	r2, [r0, #0]

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
    57d6:	2100      	movs	r1, #0
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    57d8:	b132      	cbz	r2, 57e8 <Macro_process+0x198>
	{
		pos += TriggerGuideSize * comboLength + 1;
    57da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    57de:	3201      	adds	r2, #1
    57e0:	4411      	add	r1, r2
    57e2:	b2c9      	uxtb	r1, r1
		comboLength = triggerMacro->guide[ pos ];
    57e4:	5c42      	ldrb	r2, [r0, r1]
    57e6:	e7f7      	b.n	57d8 <Macro_process+0x188>
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    57e8:	4401      	add	r1, r0
    57ea:	f811 cc01 	ldrb.w	ip, [r1, #-1]
    57ee:	f898 1000 	ldrb.w	r1, [r8]
    57f2:	eb01 0941 	add.w	r9, r1, r1, lsl #1

	// Lookup scanCode in buffer list for the current state and stateType
	for ( uint8_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    57f6:	454a      	cmp	r2, r9
    57f8:	d013      	beq.n	5822 <Macro_process+0x1d2>
    57fa:	4837      	ldr	r0, [pc, #220]	; (58d8 <Macro_process+0x288>)
    57fc:	eb02 0e00 	add.w	lr, r2, r0
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
    5800:	f89e 1002 	ldrb.w	r1, [lr, #2]
    5804:	4561      	cmp	r1, ip
    5806:	d10a      	bne.n	581e <Macro_process+0x1ce>
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    5808:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 5904 <Macro_process+0x2b4>
    580c:	f89e e001 	ldrb.w	lr, [lr, #1]
			ResultMacroRecordList[ resultMacroIndex ].stateType = macroTriggerListBuffer[ keyIndex ].type;
    5810:	5c10      	ldrb	r0, [r2, r0]
	// Lookup scanCode in buffer list for the current state and stateType
	for ( uint8_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    5812:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    5816:	4451      	add	r1, sl
    5818:	f881 e001 	strb.w	lr, [r1, #1]
			ResultMacroRecordList[ resultMacroIndex ].stateType = macroTriggerListBuffer[ keyIndex ].type;
    581c:	7088      	strb	r0, [r1, #2]
    581e:	3203      	adds	r2, #3
    5820:	e7e9      	b.n	57f6 <Macro_process+0x1a6>
		}
	}

	// Reset the macro position
	ResultMacroRecordList[ resultMacroIndex ].pos = 0;
    5822:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5826:	4a37      	ldr	r2, [pc, #220]	; (5904 <Macro_process+0x2b4>)
    5828:	2100      	movs	r1, #0
    582a:	54d1      	strb	r1, [r2, r3]
		case TriggerMacroEval_DoResult:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );

		default:
			macroTriggerMacroPendingList[ macroTriggerMacroPendingListTail++ ] = macroTriggerMacroPendingList[ macro ];
    582c:	1c73      	adds	r3, r6, #1
    582e:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
    5832:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
    5836:	b2de      	uxtb	r6, r3
			break;
    5838:	e045      	b.n	58c6 <Macro_process+0x276>

		// Trigger Result Macro and Remove (purposely falling through)
		case TriggerMacroEval_DoResultAndRemove:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    583a:	4831      	ldr	r0, [pc, #196]	; (5900 <Macro_process+0x2b0>)
    583c:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    5840:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 590c <Macro_process+0x2bc>
			break;

		// Trigger Result Macro and Remove (purposely falling through)
		case TriggerMacroEval_DoResultAndRemove:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    5844:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    5848:	f8be 2000 	ldrh.w	r2, [lr]
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
inline void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    584c:	791b      	ldrb	r3, [r3, #4]

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    584e:	2100      	movs	r1, #0
    5850:	fa5f fc81 	uxtb.w	ip, r1
    5854:	4594      	cmp	ip, r2
    5856:	4d2c      	ldr	r5, [pc, #176]	; (5908 <Macro_process+0x2b8>)
    5858:	d206      	bcs.n	5868 <Macro_process+0x218>
	{
		// If duplicate found, do nothing
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
    585a:	f835 501c 	ldrh.w	r5, [r5, ip, lsl #1]
    585e:	429d      	cmp	r5, r3
    5860:	f101 0101 	add.w	r1, r1, #1
    5864:	d1f4      	bne.n	5850 <Macro_process+0x200>
    5866:	e02e      	b.n	58c6 <Macro_process+0x276>
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    5868:	1c51      	adds	r1, r2, #1
    586a:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    586e:	f850 0034 	ldr.w	r0, [r0, r4, lsl #3]
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    5872:	f8ae 1000 	strh.w	r1, [lr]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    5876:	7802      	ldrb	r2, [r0, #0]

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
    5878:	2100      	movs	r1, #0
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    587a:	b132      	cbz	r2, 588a <Macro_process+0x23a>
	{
		pos += TriggerGuideSize * comboLength + 1;
    587c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5880:	3201      	adds	r2, #1
    5882:	4411      	add	r1, r2
    5884:	b2c9      	uxtb	r1, r1
		comboLength = triggerMacro->guide[ pos ];
    5886:	5c42      	ldrb	r2, [r0, r1]
    5888:	e7f7      	b.n	587a <Macro_process+0x22a>
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    588a:	4401      	add	r1, r0
    588c:	f811 ec01 	ldrb.w	lr, [r1, #-1]
    5890:	f898 1000 	ldrb.w	r1, [r8]
    5894:	eb01 0541 	add.w	r5, r1, r1, lsl #1

	// Lookup scanCode in buffer list for the current state and stateType
	for ( uint8_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    5898:	42aa      	cmp	r2, r5
    589a:	d00f      	beq.n	58bc <Macro_process+0x26c>
    589c:	480e      	ldr	r0, [pc, #56]	; (58d8 <Macro_process+0x288>)
    589e:	1814      	adds	r4, r2, r0
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
    58a0:	78a1      	ldrb	r1, [r4, #2]
    58a2:	4571      	cmp	r1, lr
    58a4:	d108      	bne.n	58b8 <Macro_process+0x268>
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    58a6:	f8df c05c 	ldr.w	ip, [pc, #92]	; 5904 <Macro_process+0x2b4>
    58aa:	7864      	ldrb	r4, [r4, #1]
			ResultMacroRecordList[ resultMacroIndex ].stateType = macroTriggerListBuffer[ keyIndex ].type;
    58ac:	5c10      	ldrb	r0, [r2, r0]
	// Lookup scanCode in buffer list for the current state and stateType
	for ( uint8_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    58ae:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    58b2:	4461      	add	r1, ip
    58b4:	704c      	strb	r4, [r1, #1]
			ResultMacroRecordList[ resultMacroIndex ].stateType = macroTriggerListBuffer[ keyIndex ].type;
    58b6:	7088      	strb	r0, [r1, #2]
    58b8:	3203      	adds	r2, #3
    58ba:	e7ed      	b.n	5898 <Macro_process+0x248>
		}
	}

	// Reset the macro position
	ResultMacroRecordList[ resultMacroIndex ].pos = 0;
    58bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    58c0:	4a10      	ldr	r2, [pc, #64]	; (5904 <Macro_process+0x2b4>)
    58c2:	2100      	movs	r1, #0
    58c4:	54d1      	strb	r1, [r2, r3]
    58c6:	3701      	adds	r7, #1
    58c8:	e753      	b.n	5772 <Macro_process+0x122>
    58ca:	bf00      	nop
    58cc:	1fff9012 	.word	0x1fff9012
    58d0:	1fff9167 	.word	0x1fff9167
    58d4:	1fff89c5 	.word	0x1fff89c5
    58d8:	1fff9dc2 	.word	0x1fff9dc2
    58dc:	1fff917a 	.word	0x1fff917a
    58e0:	1fff9169 	.word	0x1fff9169
    58e4:	1fff9168 	.word	0x1fff9168
    58e8:	1fffa021 	.word	0x1fffa021
    58ec:	1fff90be 	.word	0x1fff90be
    58f0:	00009a86 	.word	0x00009a86
    58f4:	1fff9172 	.word	0x1fff9172
    58f8:	1fff90c0 	.word	0x1fff90c0
    58fc:	1fffa12c 	.word	0x1fffa12c
    5900:	0000a53c 	.word	0x0000a53c
    5904:	1fff9ecd 	.word	0x1fff9ecd
    5908:	1fff9016 	.word	0x1fff9016
    590c:	1fff90bc 	.word	0x1fff90bc
			break;
		}
	}

	// Update the macroTriggerMacroPendingListSize with the tail pointer
	macroTriggerMacroPendingListSize = macroTriggerMacroPendingListTail;
    5910:	801e      	strh	r6, [r3, #0]
	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroResultMacroPendingListTail = 0;

	// Iterate through the pending ResultMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    5912:	2600      	movs	r6, #0
	macroTriggerMacroPendingListSize = macroTriggerMacroPendingListTail;


	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroResultMacroPendingListTail = 0;
    5914:	4635      	mov	r5, r6

	// Iterate through the pending ResultMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    5916:	4b2f      	ldr	r3, [pc, #188]	; (59d4 <Macro_process+0x384>)
    5918:	881a      	ldrh	r2, [r3, #0]
    591a:	fa5f f986 	uxtb.w	r9, r6
    591e:	4591      	cmp	r9, r2
    5920:	d23e      	bcs.n	59a0 <Macro_process+0x350>

// Evaluate/Update ResultMacro
inline ResultMacroEval Macro_evalResultMacro( var_uint_t resultMacroIndex )
{
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
    5922:	4b2d      	ldr	r3, [pc, #180]	; (59d8 <Macro_process+0x388>)
    5924:	4a2d      	ldr	r2, [pc, #180]	; (59dc <Macro_process+0x38c>)
    5926:	f813 3019 	ldrb.w	r3, [r3, r9, lsl #1]
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];
    592a:	4f2d      	ldr	r7, [pc, #180]	; (59e0 <Macro_process+0x390>)
    592c:	eb03 0843 	add.w	r8, r3, r3, lsl #1

// Evaluate/Update ResultMacro
inline ResultMacroEval Macro_evalResultMacro( var_uint_t resultMacroIndex )
{
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
    5930:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];

	// Current Macro position
	var_uint_t pos = record->pos;
    5934:	f818 4007 	ldrb.w	r4, [r8, r7]

	// Length of combo being processed
	uint8_t comboLength = macro->guide[ pos ];
    5938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
// Evaluate/Update ResultMacro
inline ResultMacroEval Macro_evalResultMacro( var_uint_t resultMacroIndex )
{
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];
    593c:	eb08 0107 	add.w	r1, r8, r7

	// Current Macro position
	var_uint_t pos = record->pos;

	// Length of combo being processed
	uint8_t comboLength = macro->guide[ pos ];
    5940:	5d1b      	ldrb	r3, [r3, r4]
// Evaluate/Update ResultMacro
inline ResultMacroEval Macro_evalResultMacro( var_uint_t resultMacroIndex )
{
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];
    5942:	9102      	str	r1, [sp, #8]

	// Function Counter, used to keep track of the combo items processed
	var_uint_t funcCount = 0;

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;
    5944:	3401      	adds	r4, #1

	// Current Macro position
	var_uint_t pos = record->pos;

	// Length of combo being processed
	uint8_t comboLength = macro->guide[ pos ];
    5946:	9303      	str	r3, [sp, #12]

	// Function Counter, used to keep track of the combo items processed
	var_uint_t funcCount = 0;

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;
    5948:	b2e4      	uxtb	r4, r4
    594a:	f04f 0a00 	mov.w	sl, #0

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
    594e:	9903      	ldr	r1, [sp, #12]
    5950:	fa5f f38a 	uxtb.w	r3, sl
    5954:	428b      	cmp	r3, r1
    5956:	f8db 1000 	ldr.w	r1, [fp]
    595a:	d219      	bcs.n	5990 <Macro_process+0x340>
	{
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);
    595c:	eb01 0e04 	add.w	lr, r1, r4

		// Do lookup on capability function
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    5960:	4b20      	ldr	r3, [pc, #128]	; (59e4 <Macro_process+0x394>)
    5962:	5d09      	ldrb	r1, [r1, r4]

		// Call capability
		capability( record->state, record->stateType, &guide->args );
    5964:	9a02      	ldr	r2, [sp, #8]
    5966:	f853 c031 	ldr.w	ip, [r3, r1, lsl #3]
    596a:	7850      	ldrb	r0, [r2, #1]
    596c:	7891      	ldrb	r1, [r2, #2]
    596e:	9301      	str	r3, [sp, #4]
    5970:	f10e 0201 	add.w	r2, lr, #1
    5974:	47e0      	blx	ip

		// Increment counters
		funcCount++;
		comboItem += ResultGuideSize( (ResultGuide*)(&macro->guide[ comboItem ]) );
    5976:	f8db 2000 	ldr.w	r2, [fp]
    597a:	9b01      	ldr	r3, [sp, #4]
    597c:	5d12      	ldrb	r2, [r2, r4]
    597e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5982:	f10a 0a01 	add.w	sl, sl, #1
    5986:	791b      	ldrb	r3, [r3, #4]
    5988:	3301      	adds	r3, #1
    598a:	441c      	add	r4, r3
    598c:	b2e4      	uxtb	r4, r4
    598e:	e7de      	b.n	594e <Macro_process+0x2fe>
	}

	// Move to next item in the sequence
	record->pos = comboItem;
    5990:	f808 4007 	strb.w	r4, [r8, r7]

	// If the ResultMacro is finished, remove
	if ( macro->guide[ comboItem ] == 0 )
    5994:	5d0b      	ldrb	r3, [r1, r4]
    5996:	b993      	cbnz	r3, 59be <Macro_process+0x36e>
	{
		record->pos = 0;
    5998:	f808 3007 	strb.w	r3, [r8, r7]
    599c:	3601      	adds	r6, #1
    599e:	e7ba      	b.n	5916 <Macro_process+0x2c6>

	// Update the macroResultMacroPendingListSize with the tail pointer
	macroResultMacroPendingListSize = macroResultMacroPendingListTail;

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    59a0:	4c11      	ldr	r4, [pc, #68]	; (59e8 <Macro_process+0x398>)
			break;
		}
	}

	// Update the macroResultMacroPendingListSize with the tail pointer
	macroResultMacroPendingListSize = macroResultMacroPendingListTail;
    59a2:	801d      	strh	r5, [r3, #0]

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    59a4:	7820      	ldrb	r0, [r4, #0]
    59a6:	f7ff f88d 	bl	4ac4 <Scan_finishedWithMacro>

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    59aa:	4a10      	ldr	r2, [pc, #64]	; (59ec <Macro_process+0x39c>)
    59ac:	7812      	ldrb	r2, [r2, #0]

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;
    59ae:	2300      	movs	r3, #0
    59b0:	7023      	strb	r3, [r4, #0]

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    59b2:	b162      	cbz	r2, 59ce <Macro_process+0x37e>
	{
		USBKeys_Modifiers = 0;
    59b4:	4a0e      	ldr	r2, [pc, #56]	; (59f0 <Macro_process+0x3a0>)
    59b6:	7013      	strb	r3, [r2, #0]
		USBKeys_Sent = 0;
    59b8:	4a0e      	ldr	r2, [pc, #56]	; (59f4 <Macro_process+0x3a4>)
    59ba:	7013      	strb	r3, [r2, #0]
    59bc:	e007      	b.n	59ce <Macro_process+0x37e>
		switch ( Macro_evalResultMacro( macroResultMacroPendingList[ macro ] ) )
		{
		// Re-add macros to pending list
		case ResultMacroEval_DoNothing:
		default:
			macroResultMacroPendingList[ macroResultMacroPendingListTail++ ] = macroResultMacroPendingList[ macro ];
    59be:	4b06      	ldr	r3, [pc, #24]	; (59d8 <Macro_process+0x388>)
    59c0:	1c6a      	adds	r2, r5, #1
    59c2:	f833 1019 	ldrh.w	r1, [r3, r9, lsl #1]
    59c6:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
    59ca:	b2d5      	uxtb	r5, r2
			break;
    59cc:	e7e6      	b.n	599c <Macro_process+0x34c>
	if ( macroDebugMode )
	{
		USBKeys_Modifiers = 0;
		USBKeys_Sent = 0;
	}
}
    59ce:	b005      	add	sp, #20
    59d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59d4:	1fff90bc 	.word	0x1fff90bc
    59d8:	1fff9016 	.word	0x1fff9016
    59dc:	00009dcc 	.word	0x00009dcc
    59e0:	1fff9ecd 	.word	0x1fff9ecd
    59e4:	0000943c 	.word	0x0000943c
    59e8:	1fff9167 	.word	0x1fff9167
    59ec:	1fff9166 	.word	0x1fff9166
    59f0:	1fff9176 	.word	0x1fff9176
    59f4:	1fff917a 	.word	0x1fff917a

000059f8 <Macro_setup>:


inline void Macro_setup()
{
    59f8:	b508      	push	{r3, lr}
	// Register Macro CLI dictionary
	CLI_registerDictionary( macroCLIDict, macroCLIDictName );
    59fa:	4811      	ldr	r0, [pc, #68]	; (5a40 <Macro_setup+0x48>)
    59fc:	4911      	ldr	r1, [pc, #68]	; (5a44 <Macro_setup+0x4c>)
    59fe:	f001 fcc1 	bl	7384 <CLI_registerDictionary>

	// Disable Macro debug mode
	macroDebugMode = 0;
    5a02:	4a11      	ldr	r2, [pc, #68]	; (5a48 <Macro_setup+0x50>)
    5a04:	2300      	movs	r3, #0
    5a06:	7013      	strb	r3, [r2, #0]

	// Disable Macro pause flag
	macroPauseMode = 0;
    5a08:	4a10      	ldr	r2, [pc, #64]	; (5a4c <Macro_setup+0x54>)
    5a0a:	7013      	strb	r3, [r2, #0]

	// Set Macro step counter to zero
	macroStepCounter = 0;
    5a0c:	4a10      	ldr	r2, [pc, #64]	; (5a50 <Macro_setup+0x58>)
    5a0e:	8013      	strh	r3, [r2, #0]

	// Make sure macro trigger buffer is empty
	macroTriggerListBufferSize = 0;
    5a10:	4a10      	ldr	r2, [pc, #64]	; (5a54 <Macro_setup+0x5c>)
    5a12:	7013      	strb	r3, [r2, #0]

	// Set the current rotated layer to 0
	Macro_rotationLayer = 0;
    5a14:	4a10      	ldr	r2, [pc, #64]	; (5a58 <Macro_setup+0x60>)
    5a16:	8013      	strh	r3, [r2, #0]

	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
    5a18:	4910      	ldr	r1, [pc, #64]	; (5a5c <Macro_setup+0x64>)
    5a1a:	2200      	movs	r2, #0
    5a1c:	1858      	adds	r0, r3, r1
    5a1e:	545a      	strb	r2, [r3, r1]
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    5a20:	2102      	movs	r1, #2
    5a22:	440b      	add	r3, r1

	// Set the current rotated layer to 0
	Macro_rotationLayer = 0;

	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    5a24:	2ba6      	cmp	r3, #166	; 0xa6
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    5a26:	7041      	strb	r1, [r0, #1]

	// Set the current rotated layer to 0
	Macro_rotationLayer = 0;

	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    5a28:	d1f6      	bne.n	5a18 <Macro_setup+0x20>
    5a2a:	4613      	mov	r3, r2
	}

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
	{
		ResultMacroRecordList[ macro ].pos       = 0;
    5a2c:	480c      	ldr	r0, [pc, #48]	; (5a60 <Macro_setup+0x68>)
    5a2e:	2200      	movs	r2, #0
    5a30:	1819      	adds	r1, r3, r0
    5a32:	541a      	strb	r2, [r3, r0]
    5a34:	3303      	adds	r3, #3
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
	}

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    5a36:	2bf9      	cmp	r3, #249	; 0xf9
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
    5a38:	704a      	strb	r2, [r1, #1]
		ResultMacroRecordList[ macro ].stateType = 0;
    5a3a:	708a      	strb	r2, [r1, #2]
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
	}

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    5a3c:	d1f6      	bne.n	5a2c <Macro_setup+0x34>
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
		ResultMacroRecordList[ macro ].stateType = 0;
	}
}
    5a3e:	bd08      	pop	{r3, pc}
    5a40:	0000a23c 	.word	0x0000a23c
    5a44:	00009c95 	.word	0x00009c95
    5a48:	1fff9166 	.word	0x1fff9166
    5a4c:	1fff9168 	.word	0x1fff9168
    5a50:	1fff90be 	.word	0x1fff90be
    5a54:	1fff9167 	.word	0x1fff9167
    5a58:	1fff9dc0 	.word	0x1fff9dc0
    5a5c:	1fffa12c 	.word	0x1fffa12c
    5a60:	1fff9ecd 	.word	0x1fff9ecd

00005a64 <macroDebugShowTrigger>:
}

void macroDebugShowTrigger( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    5a64:	2852      	cmp	r0, #82	; 0x52
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
}

void macroDebugShowTrigger( var_uint_t index )
{
    5a66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a6a:	4605      	mov	r5, r0
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    5a6c:	d867      	bhi.n	5b3e <macroDebugShowTrigger+0xda>
		return;

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
    5a6e:	4c35      	ldr	r4, [pc, #212]	; (5b44 <macroDebugShowTrigger+0xe0>)
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];
    5a70:	f8df 9100 	ldr.w	r9, [pc, #256]	; 5b74 <macroDebugShowTrigger+0x110>
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
		return;

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
    5a74:	eb04 08c0 	add.w	r8, r4, r0, lsl #3
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];
    5a78:	eb09 0a40 	add.w	sl, r9, r0, lsl #1

	print( NL );
    5a7c:	4832      	ldr	r0, [pc, #200]	; (5b48 <macroDebugShowTrigger+0xe4>)
    5a7e:	f001 febf 	bl	7800 <_print>
	info_msg("Trigger Macro Index: ");
    5a82:	4832      	ldr	r0, [pc, #200]	; (5b4c <macroDebugShowTrigger+0xe8>)
    5a84:	f001 febc 	bl	7800 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    5a88:	4628      	mov	r0, r5
    5a8a:	f001 ff0b 	bl	78a4 <printInt16>
	print( NL );
    5a8e:	482e      	ldr	r0, [pc, #184]	; (5b48 <macroDebugShowTrigger+0xe4>)
    5a90:	f001 feb6 	bl	7800 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    5a94:	f854 3035 	ldr.w	r3, [r4, r5, lsl #3]
    5a98:	781e      	ldrb	r6, [r3, #0]
	info_msg("Trigger Macro Index: ");
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
    5a9a:	2400      	movs	r4, #0
	uint8_t comboLength = macro->guide[ pos ];

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    5a9c:	b366      	cbz	r6, 5af8 <macroDebugShowTrigger+0x94>
	{
		// Initial position of the combo
		var_uint_t comboPos = ++pos;
    5a9e:	3401      	adds	r4, #1
    5aa0:	b2e4      	uxtb	r4, r4

		// Iterate through the combo
		while ( pos < comboLength * TriggerGuideSize + comboPos )
    5aa2:	2303      	movs	r3, #3
    5aa4:	fb13 4606 	smlabb	r6, r3, r6, r4
    5aa8:	42b4      	cmp	r4, r6
    5aaa:	f8d8 7000 	ldr.w	r7, [r8]
    5aae:	d21d      	bcs.n	5aec <macroDebugShowTrigger+0x88>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ pos ]);
    5ab0:	eb07 0b04 	add.w	fp, r7, r4

			// Display guide information about trigger key
			printHex( guide->scanCode );
    5ab4:	2101      	movs	r1, #1
    5ab6:	f89b 0002 	ldrb.w	r0, [fp, #2]
    5aba:	f001 ff2a 	bl	7912 <printHex_op>
			print("|");
    5abe:	4824      	ldr	r0, [pc, #144]	; (5b50 <macroDebugShowTrigger+0xec>)
    5ac0:	f001 fe9e 	bl	7800 <_print>
			printHex( guide->type );
    5ac4:	5d38      	ldrb	r0, [r7, r4]
    5ac6:	2101      	movs	r1, #1
    5ac8:	f001 ff23 	bl	7912 <printHex_op>
			print("|");
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    5acc:	3403      	adds	r4, #3

			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
    5ace:	4820      	ldr	r0, [pc, #128]	; (5b50 <macroDebugShowTrigger+0xec>)
    5ad0:	f001 fe96 	bl	7800 <_print>
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    5ad4:	b2e4      	uxtb	r4, r4
			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
			printHex( guide->state );
    5ad6:	f89b 0001 	ldrb.w	r0, [fp, #1]
    5ada:	2101      	movs	r1, #1
    5adc:	f001 ff19 	bl	7912 <printHex_op>

			// Increment position
			pos += TriggerGuideSize;

			// Only show combo separator if there are combos left in the sequence element
			if ( pos < comboLength * TriggerGuideSize + comboPos )
    5ae0:	42b4      	cmp	r4, r6
    5ae2:	d2e1      	bcs.n	5aa8 <macroDebugShowTrigger+0x44>
				print("+");
    5ae4:	481b      	ldr	r0, [pc, #108]	; (5b54 <macroDebugShowTrigger+0xf0>)
    5ae6:	f001 fe8b 	bl	7800 <_print>
    5aea:	e7dd      	b.n	5aa8 <macroDebugShowTrigger+0x44>
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos ];
    5aec:	5d3e      	ldrb	r6, [r7, r4]

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    5aee:	b11e      	cbz	r6, 5af8 <macroDebugShowTrigger+0x94>
			print(";");
    5af0:	4819      	ldr	r0, [pc, #100]	; (5b58 <macroDebugShowTrigger+0xf4>)
    5af2:	f001 fe85 	bl	7800 <_print>
    5af6:	e7d1      	b.n	5a9c <macroDebugShowTrigger+0x38>
	}

	// Display current position
	print( NL "Position: " );
    5af8:	4818      	ldr	r0, [pc, #96]	; (5b5c <macroDebugShowTrigger+0xf8>)
    5afa:	f001 fe81 	bl	7800 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    5afe:	f819 0015 	ldrb.w	r0, [r9, r5, lsl #1]
    5b02:	f001 fecf 	bl	78a4 <printInt16>

	// Display result macro index
	print( NL "Result Macro Index: " );
    5b06:	4816      	ldr	r0, [pc, #88]	; (5b60 <macroDebugShowTrigger+0xfc>)
    5b08:	f001 fe7a 	bl	7800 <_print>
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    5b0c:	f898 0004 	ldrb.w	r0, [r8, #4]
    5b10:	f001 fec8 	bl	78a4 <printInt16>

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
    5b14:	4813      	ldr	r0, [pc, #76]	; (5b64 <macroDebugShowTrigger+0x100>)
    5b16:	f001 fe73 	bl	7800 <_print>
	switch ( record->state )
    5b1a:	f89a 3001 	ldrb.w	r3, [sl, #1]
    5b1e:	2b01      	cmp	r3, #1
    5b20:	d006      	beq.n	5b30 <macroDebugShowTrigger+0xcc>
    5b22:	d303      	bcc.n	5b2c <macroDebugShowTrigger+0xc8>
    5b24:	2b02      	cmp	r3, #2
    5b26:	d005      	beq.n	5b34 <macroDebugShowTrigger+0xd0>
    5b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	{
	case TriggerMacro_Press:   print("Press");   break;
    5b2c:	480e      	ldr	r0, [pc, #56]	; (5b68 <macroDebugShowTrigger+0x104>)
    5b2e:	e002      	b.n	5b36 <macroDebugShowTrigger+0xd2>
	case TriggerMacro_Release: print("Release"); break;
    5b30:	480e      	ldr	r0, [pc, #56]	; (5b6c <macroDebugShowTrigger+0x108>)
    5b32:	e000      	b.n	5b36 <macroDebugShowTrigger+0xd2>
	case TriggerMacro_Waiting: print("Waiting"); break;
    5b34:	480e      	ldr	r0, [pc, #56]	; (5b70 <macroDebugShowTrigger+0x10c>)
	}
}
    5b36:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	print( NL "Trigger Macro State: " );
	switch ( record->state )
	{
	case TriggerMacro_Press:   print("Press");   break;
	case TriggerMacro_Release: print("Release"); break;
	case TriggerMacro_Waiting: print("Waiting"); break;
    5b3a:	f001 be61 	b.w	7800 <_print>
    5b3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b42:	bf00      	nop
    5b44:	0000a53c 	.word	0x0000a53c
    5b48:	0000b26f 	.word	0x0000b26f
    5b4c:	00009aa6 	.word	0x00009aa6
    5b50:	00009ace 	.word	0x00009ace
    5b54:	00008f2a 	.word	0x00008f2a
    5b58:	00009ad0 	.word	0x00009ad0
    5b5c:	00009ad2 	.word	0x00009ad2
    5b60:	00009adf 	.word	0x00009adf
    5b64:	00009af6 	.word	0x00009af6
    5b68:	00009b83 	.word	0x00009b83
    5b6c:	00009b8c 	.word	0x00009b8c
    5b70:	00009b0e 	.word	0x00009b0e
    5b74:	1fffa12c 	.word	0x1fffa12c

00005b78 <macroDebugShowResult>:
}

void macroDebugShowResult( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    5b78:	2852      	cmp	r0, #82	; 0x52
	case TriggerMacro_Waiting: print("Waiting"); break;
	}
}

void macroDebugShowResult( var_uint_t index )
{
    5b7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b7e:	4604      	mov	r4, r0
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    5b80:	f200 8097 	bhi.w	5cb2 <macroDebugShowResult+0x13a>
		return;

	// Trigger Macro Show
	const ResultMacro *macro = &ResultMacroList[ index ];
    5b84:	4d4c      	ldr	r5, [pc, #304]	; (5cb8 <macroDebugShowResult+0x140>)
	ResultMacroRecord *record = &ResultMacroRecordList[ index ];
    5b86:	4b4d      	ldr	r3, [pc, #308]	; (5cbc <macroDebugShowResult+0x144>)
    5b88:	eb00 0940 	add.w	r9, r0, r0, lsl #1
    5b8c:	444b      	add	r3, r9
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
		return;

	// Trigger Macro Show
	const ResultMacro *macro = &ResultMacroList[ index ];
    5b8e:	eb05 0880 	add.w	r8, r5, r0, lsl #2
	ResultMacroRecord *record = &ResultMacroRecordList[ index ];

	print( NL );
    5b92:	484b      	ldr	r0, [pc, #300]	; (5cc0 <macroDebugShowResult+0x148>)
	if ( index >= ResultMacroNum )
		return;

	// Trigger Macro Show
	const ResultMacro *macro = &ResultMacroList[ index ];
	ResultMacroRecord *record = &ResultMacroRecordList[ index ];
    5b94:	9301      	str	r3, [sp, #4]

	print( NL );
    5b96:	f001 fe33 	bl	7800 <_print>
	info_msg("Result Macro Index: ");
    5b9a:	484a      	ldr	r0, [pc, #296]	; (5cc4 <macroDebugShowResult+0x14c>)
    5b9c:	f001 fe30 	bl	7800 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    5ba0:	4620      	mov	r0, r4
    5ba2:	f001 fe7f 	bl	78a4 <printInt16>
	print( NL );
    5ba6:	4846      	ldr	r0, [pc, #280]	; (5cc0 <macroDebugShowResult+0x148>)
    5ba8:	f001 fe2a 	bl	7800 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos++ ];
    5bac:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5bb0:	781d      	ldrb	r5, [r3, #0]
    5bb2:	2601      	movs	r6, #1

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    5bb4:	b9d5      	cbnz	r5, 5bec <macroDebugShowResult+0x74>
		if ( comboLength != 0 )
			print(";");
	}

	// Display current position
	print( NL "Position: " );
    5bb6:	4844      	ldr	r0, [pc, #272]	; (5cc8 <macroDebugShowResult+0x150>)
    5bb8:	f001 fe22 	bl	7800 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    5bbc:	4a3f      	ldr	r2, [pc, #252]	; (5cbc <macroDebugShowResult+0x144>)
    5bbe:	f812 0009 	ldrb.w	r0, [r2, r9]
    5bc2:	f001 fe6f 	bl	78a4 <printInt16>

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
    5bc6:	4841      	ldr	r0, [pc, #260]	; (5ccc <macroDebugShowResult+0x154>)
    5bc8:	f001 fe1a 	bl	7800 <_print>
	printHex( record->state );
    5bcc:	9b01      	ldr	r3, [sp, #4]
    5bce:	2101      	movs	r1, #1
    5bd0:	7858      	ldrb	r0, [r3, #1]
    5bd2:	f001 fe9e 	bl	7912 <printHex_op>
	print("/");
    5bd6:	483e      	ldr	r0, [pc, #248]	; (5cd0 <macroDebugShowResult+0x158>)
    5bd8:	f001 fe12 	bl	7800 <_print>
	printHex( record->stateType );
    5bdc:	9b01      	ldr	r3, [sp, #4]
    5bde:	7898      	ldrb	r0, [r3, #2]
    5be0:	2101      	movs	r1, #1
}
    5be2:	b003      	add	sp, #12
    5be4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
	printHex( record->state );
	print("/");
	printHex( record->stateType );
    5be8:	f001 be93 	b.w	7912 <printHex_op>
	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos++ ];

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    5bec:	4634      	mov	r4, r6
    5bee:	2600      	movs	r6, #0

		// Iterate through the combo
		while ( funcCount < comboLength )
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);
    5bf0:	f8d8 a000 	ldr.w	sl, [r8]
			// Display Function Index
			printHex( guide->index );
			print("|");

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    5bf4:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 5cec <macroDebugShowResult+0x174>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);

			// Display Function Index
			printHex( guide->index );
    5bf8:	f81a 0004 	ldrb.w	r0, [sl, r4]
    5bfc:	2101      	movs	r1, #1
    5bfe:	f001 fe88 	bl	7912 <printHex_op>
			print("|");
    5c02:	4834      	ldr	r0, [pc, #208]	; (5cd4 <macroDebugShowResult+0x15c>)
    5c04:	f001 fdfc 	bl	7800 <_print>

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    5c08:	f81a 2004 	ldrb.w	r2, [sl, r4]
    5c0c:	2101      	movs	r1, #1
    5c0e:	f83b 0032 	ldrh.w	r0, [fp, r2, lsl #3]
    5c12:	f001 fe7e 	bl	7912 <printHex_op>
			print("|");
    5c16:	482f      	ldr	r0, [pc, #188]	; (5cd4 <macroDebugShowResult+0x15c>)
    5c18:	f001 fdf2 	bl	7800 <_print>

			// Display/Lookup Capability Name (utilize debug mode of capability)
			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    5c1c:	f81a 3004 	ldrb.w	r3, [sl, r4]
			capability( 0xFF, 0xFF, 0 );
    5c20:	20ff      	movs	r0, #255	; 0xff
    5c22:	4601      	mov	r1, r0
    5c24:	f85b 3033 	ldr.w	r3, [fp, r3, lsl #3]
    5c28:	2200      	movs	r2, #0
    5c2a:	4798      	blx	r3

			// Display Argument(s)
			print("(");
    5c2c:	482a      	ldr	r0, [pc, #168]	; (5cd8 <macroDebugShowResult+0x160>)
    5c2e:	f001 fde7 	bl	7800 <_print>

		// Iterate through the combo
		while ( funcCount < comboLength )
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);
    5c32:	eb0a 0704 	add.w	r7, sl, r4
			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
			capability( 0xFF, 0xFF, 0 );

			// Display Argument(s)
			print("(");
			for ( var_uint_t arg = 0; arg < CapabilitiesList[ guide->index ].argCount; arg++ )
    5c36:	f04f 0a00 	mov.w	sl, #0
    5c3a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 5cec <macroDebugShowResult+0x174>
    5c3e:	783b      	ldrb	r3, [r7, #0]
    5c40:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
    5c44:	7919      	ldrb	r1, [r3, #4]
    5c46:	fa5f f38a 	uxtb.w	r3, sl
    5c4a:	4299      	cmp	r1, r3
    5c4c:	d913      	bls.n	5c76 <macroDebugShowResult+0xfe>
			{
				// Arguments are only 8 bit values
				printHex( (&guide->args)[ arg ] );
    5c4e:	18f9      	adds	r1, r7, r3
    5c50:	7848      	ldrb	r0, [r1, #1]
    5c52:	9300      	str	r3, [sp, #0]
    5c54:	2101      	movs	r1, #1
    5c56:	f001 fe5c 	bl	7912 <printHex_op>

				// Only show arg separator if there are args left
				if ( arg + 1 < CapabilitiesList[ guide->index ].argCount )
    5c5a:	7839      	ldrb	r1, [r7, #0]
    5c5c:	9b00      	ldr	r3, [sp, #0]
    5c5e:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
    5c62:	3301      	adds	r3, #1
    5c64:	7909      	ldrb	r1, [r1, #4]
    5c66:	428b      	cmp	r3, r1
    5c68:	da02      	bge.n	5c70 <macroDebugShowResult+0xf8>
					print(",");
    5c6a:	481c      	ldr	r0, [pc, #112]	; (5cdc <macroDebugShowResult+0x164>)
    5c6c:	f001 fdc8 	bl	7800 <_print>
    5c70:	f10a 0a01 	add.w	sl, sl, #1
    5c74:	e7e1      	b.n	5c3a <macroDebugShowResult+0xc2>
			}
			print(")");
    5c76:	481a      	ldr	r0, [pc, #104]	; (5ce0 <macroDebugShowResult+0x168>)
    5c78:	f001 fdc2 	bl	7800 <_print>

			// Increment position
			pos += ResultGuideSize( guide );
    5c7c:	783b      	ldrb	r3, [r7, #0]
    5c7e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3

			// Increment function count
			funcCount++;
    5c82:	3601      	adds	r6, #1
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    5c84:	791b      	ldrb	r3, [r3, #4]

			// Increment function count
			funcCount++;
    5c86:	b2f6      	uxtb	r6, r6
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    5c88:	3301      	adds	r3, #1
    5c8a:	441c      	add	r4, r3

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    5c8c:	42ae      	cmp	r6, r5
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    5c8e:	b2e4      	uxtb	r4, r4

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    5c90:	d202      	bcs.n	5c98 <macroDebugShowResult+0x120>
				print("+");
    5c92:	4814      	ldr	r0, [pc, #80]	; (5ce4 <macroDebugShowResult+0x16c>)
    5c94:	f001 fdb4 	bl	7800 <_print>
	{
		// Function Counter, used to keep track of the combos processed
		var_uint_t funcCount = 0;

		// Iterate through the combo
		while ( funcCount < comboLength )
    5c98:	42ae      	cmp	r6, r5
    5c9a:	d1a9      	bne.n	5bf0 <macroDebugShowResult+0x78>
			if ( funcCount < comboLength )
				print("+");
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos++ ];
    5c9c:	f8d8 3000 	ldr.w	r3, [r8]
    5ca0:	5d1d      	ldrb	r5, [r3, r4]
    5ca2:	1c66      	adds	r6, r4, #1
    5ca4:	b2f6      	uxtb	r6, r6

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    5ca6:	2d00      	cmp	r5, #0
    5ca8:	d085      	beq.n	5bb6 <macroDebugShowResult+0x3e>
			print(";");
    5caa:	480f      	ldr	r0, [pc, #60]	; (5ce8 <macroDebugShowResult+0x170>)
    5cac:	f001 fda8 	bl	7800 <_print>
    5cb0:	e780      	b.n	5bb4 <macroDebugShowResult+0x3c>
	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
	printHex( record->state );
	print("/");
	printHex( record->stateType );
}
    5cb2:	b003      	add	sp, #12
    5cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cb8:	00009dcc 	.word	0x00009dcc
    5cbc:	1fff9ecd 	.word	0x1fff9ecd
    5cc0:	0000b26f 	.word	0x0000b26f
    5cc4:	00009b16 	.word	0x00009b16
    5cc8:	00009ad2 	.word	0x00009ad2
    5ccc:	00009b41 	.word	0x00009b41
    5cd0:	00008e68 	.word	0x00008e68
    5cd4:	00009ace 	.word	0x00009ace
    5cd8:	00009b3d 	.word	0x00009b3d
    5cdc:	00009b3f 	.word	0x00009b3f
    5ce0:	0000ad63 	.word	0x0000ad63
    5ce4:	00008f2a 	.word	0x00008f2a
    5ce8:	00009ad0 	.word	0x00009ad0
    5cec:	0000943c 	.word	0x0000943c

00005cf0 <cliFunc_macroShow>:

void cliFunc_macroShow( char* args )
{
    5cf0:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5cf2:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5cf4:	9801      	ldr	r0, [sp, #4]
    5cf6:	4669      	mov	r1, sp
    5cf8:	aa01      	add	r2, sp, #4
    5cfa:	f001 facd 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5cfe:	9800      	ldr	r0, [sp, #0]
    5d00:	7803      	ldrb	r3, [r0, #0]
    5d02:	b18b      	cbz	r3, 5d28 <cliFunc_macroShow+0x38>
			break;

		// Ignore invalid codes
		switch ( arg1Ptr[0] )
    5d04:	2b52      	cmp	r3, #82	; 0x52
    5d06:	d008      	beq.n	5d1a <cliFunc_macroShow+0x2a>
    5d08:	2b54      	cmp	r3, #84	; 0x54
    5d0a:	d1f3      	bne.n	5cf4 <cliFunc_macroShow+0x4>
		{
		// Indexed Trigger Macro
		case 'T':
			macroDebugShowTrigger( numToInt( &arg1Ptr[1] ) );
    5d0c:	3001      	adds	r0, #1
    5d0e:	f001 fe55 	bl	79bc <numToInt>
    5d12:	b2c0      	uxtb	r0, r0
    5d14:	f7ff fea6 	bl	5a64 <macroDebugShowTrigger>
			break;
    5d18:	e7ec      	b.n	5cf4 <cliFunc_macroShow+0x4>
		// Indexed Result Macro
		case 'R':
			macroDebugShowResult( numToInt( &arg1Ptr[1] ) );
    5d1a:	3001      	adds	r0, #1
    5d1c:	f001 fe4e 	bl	79bc <numToInt>
    5d20:	b2c0      	uxtb	r0, r0
    5d22:	f7ff ff29 	bl	5b78 <macroDebugShowResult>
			break;
    5d26:	e7e5      	b.n	5cf4 <cliFunc_macroShow+0x4>
		}
	}
}
    5d28:	b003      	add	sp, #12
    5d2a:	f85d fb04 	ldr.w	pc, [sp], #4
    5d2e:	0000      	movs	r0, r0

00005d30 <cliFunc_sendKeys>:


void cliFunc_sendKeys( char* args )
{
	// Copy USBKeys_KeysCLI to USBKeys_Keys
	for ( uint8_t key = 0; key < USBKeys_SentCLI; ++key )
    5d30:	4b04      	ldr	r3, [pc, #16]	; (5d44 <cliFunc_sendKeys+0x14>)
	{
		// TODO
		//USBKeys_Keys[key] = USBKeys_KeysCLI[key];
	}
	USBKeys_Sent = USBKeys_SentCLI;
    5d32:	781a      	ldrb	r2, [r3, #0]
    5d34:	4b04      	ldr	r3, [pc, #16]	; (5d48 <cliFunc_sendKeys+0x18>)
    5d36:	701a      	strb	r2, [r3, #0]

	// Set modifier byte
	USBKeys_Modifiers = USBKeys_ModifiersCLI;
    5d38:	4b04      	ldr	r3, [pc, #16]	; (5d4c <cliFunc_sendKeys+0x1c>)
    5d3a:	781a      	ldrb	r2, [r3, #0]
    5d3c:	4b04      	ldr	r3, [pc, #16]	; (5d50 <cliFunc_sendKeys+0x20>)
    5d3e:	701a      	strb	r2, [r3, #0]
    5d40:	4770      	bx	lr
    5d42:	bf00      	nop
    5d44:	1fff917b 	.word	0x1fff917b
    5d48:	1fff917a 	.word	0x1fff917a
    5d4c:	1fff917d 	.word	0x1fff917d
    5d50:	1fff9176 	.word	0x1fff9176

00005d54 <cliFunc_kbdProtocol>:


// ----- CLI Command Functions -----

void cliFunc_kbdProtocol( char* args )
{
    5d54:	b508      	push	{r3, lr}
	print( NL );
    5d56:	4806      	ldr	r0, [pc, #24]	; (5d70 <cliFunc_kbdProtocol+0x1c>)
    5d58:	f001 fd52 	bl	7800 <_print>
	info_msg("Keyboard Protocol: ");
    5d5c:	4805      	ldr	r0, [pc, #20]	; (5d74 <cliFunc_kbdProtocol+0x20>)
    5d5e:	f001 fd4f 	bl	7800 <_print>
	printInt8( USBKeys_Protocol );
    5d62:	4b05      	ldr	r3, [pc, #20]	; (5d78 <cliFunc_kbdProtocol+0x24>)
    5d64:	7818      	ldrb	r0, [r3, #0]
}
    5d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void cliFunc_kbdProtocol( char* args )
{
	print( NL );
	info_msg("Keyboard Protocol: ");
	printInt8( USBKeys_Protocol );
    5d6a:	f001 bd7b 	b.w	7864 <printInt8>
    5d6e:	bf00      	nop
    5d70:	0000b26f 	.word	0x0000b26f
    5d74:	0000ac00 	.word	0x0000ac00
    5d78:	1fff8b8d 	.word	0x1fff8b8d

00005d7c <cliFunc_readLEDs>:
	}
}


void cliFunc_readLEDs( char* args )
{
    5d7c:	b508      	push	{r3, lr}
	print( NL );
    5d7e:	4806      	ldr	r0, [pc, #24]	; (5d98 <cliFunc_readLEDs+0x1c>)
    5d80:	f001 fd3e 	bl	7800 <_print>
	info_msg("LED State: ");
    5d84:	4805      	ldr	r0, [pc, #20]	; (5d9c <cliFunc_readLEDs+0x20>)
    5d86:	f001 fd3b 	bl	7800 <_print>
	printInt8( USBKeys_LEDs );
    5d8a:	4b05      	ldr	r3, [pc, #20]	; (5da0 <cliFunc_readLEDs+0x24>)
    5d8c:	7818      	ldrb	r0, [r3, #0]
}
    5d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void cliFunc_readLEDs( char* args )
{
	print( NL );
	info_msg("LED State: ");
	printInt8( USBKeys_LEDs );
    5d92:	f001 bd67 	b.w	7864 <printInt8>
    5d96:	bf00      	nop
    5d98:	0000b26f 	.word	0x0000b26f
    5d9c:	0000ac26 	.word	0x0000ac26
    5da0:	1fff9175 	.word	0x1fff9175

00005da4 <cliFunc_setKeys>:
	USBKeys_Modifiers = USBKeys_ModifiersCLI;
}


void cliFunc_setKeys( char* args )
{
    5da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5da6:	4b0b      	ldr	r3, [pc, #44]	; (5dd4 <cliFunc_setKeys+0x30>)

void cliFunc_setKeys( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5da8:	9001      	str	r0, [sp, #4]

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5daa:	2200      	movs	r2, #0
    5dac:	701a      	strb	r2, [r3, #0]
    5dae:	461d      	mov	r5, r3
    5db0:	782b      	ldrb	r3, [r5, #0]
    5db2:	4c08      	ldr	r4, [pc, #32]	; (5dd4 <cliFunc_setKeys+0x30>)
    5db4:	2b05      	cmp	r3, #5
    5db6:	d80b      	bhi.n	5dd0 <cliFunc_setKeys+0x2c>
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5db8:	aa01      	add	r2, sp, #4
    5dba:	9801      	ldr	r0, [sp, #4]
    5dbc:	4669      	mov	r1, sp
    5dbe:	f001 fa6b 	bl	7298 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5dc2:	9a00      	ldr	r2, [sp, #0]
    5dc4:	7813      	ldrb	r3, [r2, #0]
    5dc6:	b11b      	cbz	r3, 5dd0 <cliFunc_setKeys+0x2c>
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5dc8:	7823      	ldrb	r3, [r4, #0]
    5dca:	3301      	adds	r3, #1
    5dcc:	7023      	strb	r3, [r4, #0]
    5dce:	e7ef      	b.n	5db0 <cliFunc_setKeys+0xc>

		// Add the USB code to be sent
		// TODO
		//USBKeys_KeysCLI[USBKeys_SentCLI] = numToInt( arg1Ptr );
	}
}
    5dd0:	b003      	add	sp, #12
    5dd2:	bd30      	pop	{r4, r5, pc}
    5dd4:	1fff917b 	.word	0x1fff917b

00005dd8 <cliFunc_outputDebug>:
	printInt8( USBKeys_Protocol );
}


void cliFunc_outputDebug( char* args )
{
    5dd8:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    5dda:	4c07      	ldr	r4, [pc, #28]	; (5df8 <cliFunc_outputDebug+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    5ddc:	4669      	mov	r1, sp
    5dde:	aa01      	add	r2, sp, #4
    5de0:	f001 fa5a 	bl	7298 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    5de4:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    5de6:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    5de8:	7023      	strb	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    5dea:	7803      	ldrb	r3, [r0, #0]
    5dec:	b113      	cbz	r3, 5df4 <cliFunc_outputDebug+0x1c>
	{
		Output_DebugMode = (uint16_t)numToInt( arg1Ptr );
    5dee:	f001 fde5 	bl	79bc <numToInt>
    5df2:	7020      	strb	r0, [r4, #0]
	}
}
    5df4:	b002      	add	sp, #8
    5df6:	bd10      	pop	{r4, pc}
    5df8:	1fff9179 	.word	0x1fff9179

00005dfc <cliFunc_setMod>:
	}
}


void cliFunc_setMod( char* args )
{
    5dfc:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    5dfe:	4669      	mov	r1, sp
    5e00:	aa01      	add	r2, sp, #4
    5e02:	f001 fa49 	bl	7298 <CLI_argumentIsolation>

	USBKeys_ModifiersCLI = numToInt( arg1Ptr );
    5e06:	9800      	ldr	r0, [sp, #0]
    5e08:	f001 fdd8 	bl	79bc <numToInt>
    5e0c:	4b02      	ldr	r3, [pc, #8]	; (5e18 <cliFunc_setMod+0x1c>)
    5e0e:	7018      	strb	r0, [r3, #0]
}
    5e10:	b003      	add	sp, #12
    5e12:	f85d fb04 	ldr.w	pc, [sp], #4
    5e16:	bf00      	nop
    5e18:	1fff917d 	.word	0x1fff917d

00005e1c <Output_consCtrlSend_capability>:

// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5e1c:	29ff      	cmp	r1, #255	; 0xff
}


// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5e1e:	b530      	push	{r4, r5, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5e20:	d103      	bne.n	5e2a <Output_consCtrlSend_capability+0xe>
    5e22:	28ff      	cmp	r0, #255	; 0xff
    5e24:	d101      	bne.n	5e2a <Output_consCtrlSend_capability+0xe>
	{
		print("Output_consCtrlSend(consCode)");
    5e26:	480e      	ldr	r0, [pc, #56]	; (5e60 <Output_consCtrlSend_capability+0x44>)
    5e28:	e003      	b.n	5e32 <Output_consCtrlSend_capability+0x16>
		return;
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
    5e2a:	4b0e      	ldr	r3, [pc, #56]	; (5e64 <Output_consCtrlSend_capability+0x48>)
    5e2c:	781b      	ldrb	r3, [r3, #0]
    5e2e:	b923      	cbnz	r3, 5e3a <Output_consCtrlSend_capability+0x1e>
	{
		warn_print("Consumer Control is not implemented for Boot Mode");
    5e30:	480d      	ldr	r0, [pc, #52]	; (5e68 <Output_consCtrlSend_capability+0x4c>)
		return;
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
}
    5e32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
	{
		warn_print("Consumer Control is not implemented for Boot Mode");
    5e36:	f001 bce3 	b.w	7800 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    5e3a:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    5e3e:	2b01      	cmp	r3, #1
    5e40:	4b0a      	ldr	r3, [pc, #40]	; (5e6c <Output_consCtrlSend_capability+0x50>)
    5e42:	d109      	bne.n	5e58 <Output_consCtrlSend_capability+0x3c>
		USBKeys_Changed |= USBKeyChangeState_Consumer;
    5e44:	4c0a      	ldr	r4, [pc, #40]	; (5e70 <Output_consCtrlSend_capability+0x54>)
    5e46:	7825      	ldrb	r5, [r4, #0]
    5e48:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    5e4c:	7025      	strb	r5, [r4, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    5e4e:	b919      	cbnz	r1, 5e58 <Output_consCtrlSend_capability+0x3c>
    5e50:	2803      	cmp	r0, #3
    5e52:	d101      	bne.n	5e58 <Output_consCtrlSend_capability+0x3c>
	{
		USBKeys_ConsCtrl = 0;
    5e54:	8019      	strh	r1, [r3, #0]
		return;
    5e56:	bd30      	pop	{r4, r5, pc}
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
    5e58:	8812      	ldrh	r2, [r2, #0]
    5e5a:	801a      	strh	r2, [r3, #0]
    5e5c:	bd30      	pop	{r4, r5, pc}
    5e5e:	bf00      	nop
    5e60:	0000ac44 	.word	0x0000ac44
    5e64:	1fff8b8d 	.word	0x1fff8b8d
    5e68:	0000ac62 	.word	0x0000ac62
    5e6c:	1fffa20a 	.word	0x1fffa20a
    5e70:	1fff9177 	.word	0x1fff9177

00005e74 <Output_noneSend_capability>:
// Ignores the given key status update
// Used to prevent fall-through, this is the None keyword in KLL
void Output_noneSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5e74:	29ff      	cmp	r1, #255	; 0xff
    5e76:	d104      	bne.n	5e82 <Output_noneSend_capability+0xe>
    5e78:	28ff      	cmp	r0, #255	; 0xff
    5e7a:	d102      	bne.n	5e82 <Output_noneSend_capability+0xe>
	{
		print("Output_noneSend()");
    5e7c:	4801      	ldr	r0, [pc, #4]	; (5e84 <Output_noneSend_capability+0x10>)
    5e7e:	f001 bcbf 	b.w	7800 <_print>
    5e82:	4770      	bx	lr
    5e84:	0000acab 	.word	0x0000acab

00005e88 <Output_sysCtrlSend_capability>:

// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5e88:	29ff      	cmp	r1, #255	; 0xff
}


// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5e8a:	b530      	push	{r4, r5, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5e8c:	d103      	bne.n	5e96 <Output_sysCtrlSend_capability+0xe>
    5e8e:	28ff      	cmp	r0, #255	; 0xff
    5e90:	d101      	bne.n	5e96 <Output_sysCtrlSend_capability+0xe>
	{
		print("Output_sysCtrlSend(sysCode)");
    5e92:	480e      	ldr	r0, [pc, #56]	; (5ecc <Output_sysCtrlSend_capability+0x44>)
    5e94:	e003      	b.n	5e9e <Output_sysCtrlSend_capability+0x16>
		return;
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
    5e96:	4b0e      	ldr	r3, [pc, #56]	; (5ed0 <Output_sysCtrlSend_capability+0x48>)
    5e98:	781b      	ldrb	r3, [r3, #0]
    5e9a:	b923      	cbnz	r3, 5ea6 <Output_sysCtrlSend_capability+0x1e>
	{
		warn_print("System Control is not implemented for Boot Mode");
    5e9c:	480d      	ldr	r0, [pc, #52]	; (5ed4 <Output_sysCtrlSend_capability+0x4c>)
		return;
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
}
    5e9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
	{
		warn_print("System Control is not implemented for Boot Mode");
    5ea2:	f001 bcad 	b.w	7800 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    5ea6:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    5eaa:	2b01      	cmp	r3, #1
    5eac:	4b0a      	ldr	r3, [pc, #40]	; (5ed8 <Output_sysCtrlSend_capability+0x50>)
    5eae:	d109      	bne.n	5ec4 <Output_sysCtrlSend_capability+0x3c>
		USBKeys_Changed |= USBKeyChangeState_System;
    5eb0:	4c0a      	ldr	r4, [pc, #40]	; (5edc <Output_sysCtrlSend_capability+0x54>)
    5eb2:	7825      	ldrb	r5, [r4, #0]
    5eb4:	f045 0520 	orr.w	r5, r5, #32
    5eb8:	7025      	strb	r5, [r4, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    5eba:	b919      	cbnz	r1, 5ec4 <Output_sysCtrlSend_capability+0x3c>
    5ebc:	2803      	cmp	r0, #3
    5ebe:	d101      	bne.n	5ec4 <Output_sysCtrlSend_capability+0x3c>
	{
		USBKeys_SysCtrl = 0;
    5ec0:	7019      	strb	r1, [r3, #0]
		return;
    5ec2:	bd30      	pop	{r4, r5, pc}
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
    5ec4:	7812      	ldrb	r2, [r2, #0]
    5ec6:	701a      	strb	r2, [r3, #0]
    5ec8:	bd30      	pop	{r4, r5, pc}
    5eca:	bf00      	nop
    5ecc:	0000acbd 	.word	0x0000acbd
    5ed0:	1fff8b8d 	.word	0x1fff8b8d
    5ed4:	0000acd9 	.word	0x0000acd9
    5ed8:	1fffa1d2 	.word	0x1fffa1d2
    5edc:	1fff9177 	.word	0x1fff9177

00005ee0 <Output_flashMode_capability>:
}

void Output_flashMode_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5ee0:	29ff      	cmp	r1, #255	; 0xff
    5ee2:	d104      	bne.n	5eee <Output_flashMode_capability+0xe>
    5ee4:	28ff      	cmp	r0, #255	; 0xff
    5ee6:	d102      	bne.n	5eee <Output_flashMode_capability+0xe>
	{
		print("Output_flashMode()");
    5ee8:	4802      	ldr	r0, [pc, #8]	; (5ef4 <Output_flashMode_capability+0x14>)
    5eea:	f001 bc89 	b.w	7800 <_print>


// Sets the device into firmware reload mode
inline void Output_firmwareReload()
{
	usb_device_reload();
    5eee:	f000 ba59 	b.w	63a4 <usb_device_reload>
    5ef2:	bf00      	nop
    5ef4:	0000ad20 	.word	0x0000ad20

00005ef8 <Output_flushBuffers>:

// ----- Functions -----

// Flush Key buffers
void Output_flushBuffers()
{
    5ef8:	2200      	movs	r2, #0
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
		USBKeys_Keys[ c ] = 0;
    5efa:	4906      	ldr	r1, [pc, #24]	; (5f14 <Output_flushBuffers+0x1c>)
    5efc:	2300      	movs	r3, #0
    5efe:	5453      	strb	r3, [r2, r1]
    5f00:	3201      	adds	r2, #1

// Flush Key buffers
void Output_flushBuffers()
{
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
    5f02:	2a1b      	cmp	r2, #27
    5f04:	d1f9      	bne.n	5efa <Output_flushBuffers+0x2>
		USBKeys_Keys[ c ] = 0;

	// Zero out other key buffers
	USBKeys_ConsCtrl = 0;
    5f06:	4a04      	ldr	r2, [pc, #16]	; (5f18 <Output_flushBuffers+0x20>)
    5f08:	8013      	strh	r3, [r2, #0]
	USBKeys_Modifiers = 0;
    5f0a:	4a04      	ldr	r2, [pc, #16]	; (5f1c <Output_flushBuffers+0x24>)
    5f0c:	7013      	strb	r3, [r2, #0]
	USBKeys_SysCtrl = 0;
    5f0e:	4a04      	ldr	r2, [pc, #16]	; (5f20 <Output_flushBuffers+0x28>)
    5f10:	7013      	strb	r3, [r2, #0]
    5f12:	4770      	bx	lr
    5f14:	1fffa1d3 	.word	0x1fffa1d3
    5f18:	1fffa20a 	.word	0x1fffa20a
    5f1c:	1fff9176 	.word	0x1fff9176
    5f20:	1fffa1d2 	.word	0x1fffa1d2

00005f24 <Output_kbdProtocolBoot_capability>:

// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f24:	29ff      	cmp	r1, #255	; 0xff

// ----- Capabilities -----

// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5f26:	b510      	push	{r4, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f28:	d106      	bne.n	5f38 <Output_kbdProtocolBoot_capability+0x14>
    5f2a:	28ff      	cmp	r0, #255	; 0xff
    5f2c:	d104      	bne.n	5f38 <Output_kbdProtocolBoot_capability+0x14>
	{
		print("Output_kbdProtocolBoot()");
    5f2e:	4807      	ldr	r0, [pc, #28]	; (5f4c <Output_kbdProtocolBoot_capability+0x28>)
	// Flush the key buffers
	Output_flushBuffers();

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
}
    5f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolBoot()");
    5f34:	f001 bc64 	b.w	7800 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 0 )
    5f38:	4c05      	ldr	r4, [pc, #20]	; (5f50 <Output_kbdProtocolBoot_capability+0x2c>)
    5f3a:	7823      	ldrb	r3, [r4, #0]
    5f3c:	b12b      	cbz	r3, 5f4a <Output_kbdProtocolBoot_capability+0x26>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    5f3e:	2901      	cmp	r1, #1
    5f40:	d103      	bne.n	5f4a <Output_kbdProtocolBoot_capability+0x26>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    5f42:	f7ff ffd9 	bl	5ef8 <Output_flushBuffers>

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
    5f46:	2300      	movs	r3, #0
    5f48:	7023      	strb	r3, [r4, #0]
    5f4a:	bd10      	pop	{r4, pc}
    5f4c:	0000ad33 	.word	0x0000ad33
    5f50:	1fff8b8d 	.word	0x1fff8b8d

00005f54 <Output_kbdProtocolNKRO_capability>:

// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f54:	29ff      	cmp	r1, #255	; 0xff
}


// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5f56:	b538      	push	{r3, r4, r5, lr}
    5f58:	460c      	mov	r4, r1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f5a:	d106      	bne.n	5f6a <Output_kbdProtocolNKRO_capability+0x16>
    5f5c:	28ff      	cmp	r0, #255	; 0xff
    5f5e:	d104      	bne.n	5f6a <Output_kbdProtocolNKRO_capability+0x16>
	{
		print("Output_kbdProtocolNKRO()");
    5f60:	4807      	ldr	r0, [pc, #28]	; (5f80 <Output_kbdProtocolNKRO_capability+0x2c>)
	// Flush the key buffers
	Output_flushBuffers();

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
}
    5f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolNKRO()");
    5f66:	f001 bc4b 	b.w	7800 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 1 )
    5f6a:	4d06      	ldr	r5, [pc, #24]	; (5f84 <Output_kbdProtocolNKRO_capability+0x30>)
    5f6c:	782b      	ldrb	r3, [r5, #0]
    5f6e:	2b01      	cmp	r3, #1
    5f70:	d004      	beq.n	5f7c <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    5f72:	2c01      	cmp	r4, #1
    5f74:	d102      	bne.n	5f7c <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    5f76:	f7ff ffbf 	bl	5ef8 <Output_flushBuffers>

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
    5f7a:	702c      	strb	r4, [r5, #0]
    5f7c:	bd38      	pop	{r3, r4, r5, pc}
    5f7e:	bf00      	nop
    5f80:	0000ad4c 	.word	0x0000ad4c
    5f84:	1fff8b8d 	.word	0x1fff8b8d

00005f88 <Output_usbCodeSend_capability>:
// Adds a single USB Code to the USB Output buffer
// Argument #1: USB Code
void Output_usbCodeSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f88:	29ff      	cmp	r1, #255	; 0xff


// Adds a single USB Code to the USB Output buffer
// Argument #1: USB Code
void Output_usbCodeSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5f8a:	b570      	push	{r4, r5, r6, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f8c:	d103      	bne.n	5f96 <Output_usbCodeSend_capability+0xe>
    5f8e:	28ff      	cmp	r0, #255	; 0xff
    5f90:	d101      	bne.n	5f96 <Output_usbCodeSend_capability+0xe>
	{
		print("Output_usbCodeSend(usbCode)");
    5f92:	4863      	ldr	r0, [pc, #396]	; (6120 <Output_usbCodeSend_capability+0x198>)
    5f94:	e0ab      	b.n	60ee <Output_usbCodeSend_capability+0x166>
		return;
	}

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release, only used for NKRO
	switch ( USBKeys_Protocol )
    5f96:	4c63      	ldr	r4, [pc, #396]	; (6124 <Output_usbCodeSend_capability+0x19c>)
    5f98:	7823      	ldrb	r3, [r4, #0]
    5f9a:	4625      	mov	r5, r4
    5f9c:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    5fa0:	b113      	cbz	r3, 5fa8 <Output_usbCodeSend_capability+0x20>
    5fa2:	2e01      	cmp	r6, #1
    5fa4:	d00b      	beq.n	5fbe <Output_usbCodeSend_capability+0x36>
    5fa6:	e012      	b.n	5fce <Output_usbCodeSend_capability+0x46>
	{
	case 0: // Boot Mode
		// TODO Analog inputs
		// Only indicate USB has changed if either a press or release has occured
		if ( state == 0x01 || state == 0x03 )
    5fa8:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    5fac:	2b01      	cmp	r3, #1
    5fae:	d10e      	bne.n	5fce <Output_usbCodeSend_capability+0x46>
			USBKeys_Changed = USBKeyChangeState_MainKeys;
    5fb0:	4b5d      	ldr	r3, [pc, #372]	; (6128 <Output_usbCodeSend_capability+0x1a0>)
    5fb2:	2402      	movs	r4, #2
    5fb4:	701c      	strb	r4, [r3, #0]

		// Only send keypresses if press or hold state
		if ( stateType == 0x00 && state == 0x03 ) // Release state
    5fb6:	b951      	cbnz	r1, 5fce <Output_usbCodeSend_capability+0x46>
    5fb8:	2803      	cmp	r0, #3
    5fba:	d108      	bne.n	5fce <Output_usbCodeSend_capability+0x46>
    5fbc:	bd70      	pop	{r4, r5, r6, pc}
			return;
		break;
	case 1: // NKRO Mode
		// Only send press and release events
		if ( stateType == 0x00 && state == 0x02 ) // Hold state
    5fbe:	b931      	cbnz	r1, 5fce <Output_usbCodeSend_capability+0x46>
    5fc0:	2802      	cmp	r0, #2
    5fc2:	f000 80ab 	beq.w	611c <Output_usbCodeSend_capability+0x194>
		print("Output_usbCodeSend(usbCode)");
		return;
	}

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release, only used for NKRO
    5fc6:	1e43      	subs	r3, r0, #1
    5fc8:	4258      	negs	r0, r3
    5fca:	4158      	adcs	r0, r3
    5fcc:	e000      	b.n	5fd0 <Output_usbCodeSend_capability+0x48>
    5fce:	2000      	movs	r0, #0
	//  Bits  48 - 161 (bytes  6 - 20) correspond to USB Codes  51 - 164 (Secondary)
	//  Bits 168 - 213 (bytes 21 - 26) correspond to USB Codes 176 - 221 (Tertiary)
	//  Bits 214 - 216                 unused
	uint8_t bytePosition = 0;
	uint8_t byteShift = 0;
	switch ( USBKeys_Protocol )
    5fd0:	782b      	ldrb	r3, [r5, #0]
			keyPress = 1;
		break;
	}

	// Get the keycode from arguments
	uint8_t key = args[0];
    5fd2:	7814      	ldrb	r4, [r2, #0]
	//  Bits  48 - 161 (bytes  6 - 20) correspond to USB Codes  51 - 164 (Secondary)
	//  Bits 168 - 213 (bytes 21 - 26) correspond to USB Codes 176 - 221 (Tertiary)
	//  Bits 214 - 216                 unused
	uint8_t bytePosition = 0;
	uint8_t byteShift = 0;
	switch ( USBKeys_Protocol )
    5fd4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    5fd8:	b113      	cbz	r3, 5fe0 <Output_usbCodeSend_capability+0x58>
    5fda:	2d01      	cmp	r5, #1
    5fdc:	d021      	beq.n	6022 <Output_usbCodeSend_capability+0x9a>
    5fde:	bd70      	pop	{r4, r5, r6, pc}
	{
	case 0: // Boot Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    5fe0:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    5fe4:	2be0      	cmp	r3, #224	; 0xe0
    5fe6:	d109      	bne.n	5ffc <Output_usbCodeSend_capability+0x74>
		{
			USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    5fe8:	4b50      	ldr	r3, [pc, #320]	; (612c <Output_usbCodeSend_capability+0x1a4>)
    5fea:	2201      	movs	r2, #1
    5fec:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
    5ff0:	fa02 f404 	lsl.w	r4, r2, r4
    5ff4:	781a      	ldrb	r2, [r3, #0]
    5ff6:	4314      	orrs	r4, r2
    5ff8:	701c      	strb	r4, [r3, #0]
    5ffa:	bd70      	pop	{r4, r5, r6, pc}
		}
		// Normal USB Code
		else
		{
			// USB Key limit reached
			if ( USBKeys_Sent >= USB_BOOT_MAX_KEYS )
    5ffc:	4a4c      	ldr	r2, [pc, #304]	; (6130 <Output_usbCodeSend_capability+0x1a8>)
    5ffe:	7813      	ldrb	r3, [r2, #0]
    6000:	2b05      	cmp	r3, #5
    6002:	d901      	bls.n	6008 <Output_usbCodeSend_capability+0x80>
			{
				warn_print("USB Key limit reached");
    6004:	484b      	ldr	r0, [pc, #300]	; (6134 <Output_usbCodeSend_capability+0x1ac>)
    6006:	e072      	b.n	60ee <Output_usbCodeSend_capability+0x166>
				return;
			}

			// Make sure key is within the USB HID range
			if ( key <= 104 )
    6008:	2c68      	cmp	r4, #104	; 0x68
    600a:	d804      	bhi.n	6016 <Output_usbCodeSend_capability+0x8e>
			{
				USBKeys_Keys[USBKeys_Sent++] = key;
    600c:	1c59      	adds	r1, r3, #1
    600e:	7011      	strb	r1, [r2, #0]
    6010:	4a49      	ldr	r2, [pc, #292]	; (6138 <Output_usbCodeSend_capability+0x1b0>)
    6012:	54d4      	strb	r4, [r2, r3]
    6014:	bd70      	pop	{r4, r5, r6, pc}
			}
			// Invalid key
			else
			{
				warn_msg("USB Code above 104/0x68 in Boot Mode: ");
    6016:	4849      	ldr	r0, [pc, #292]	; (613c <Output_usbCodeSend_capability+0x1b4>)
    6018:	f001 fbf2 	bl	7800 <_print>
				printHex( key );
    601c:	4620      	mov	r0, r4
    601e:	2101      	movs	r1, #1
    6020:	e062      	b.n	60e8 <Output_usbCodeSend_capability+0x160>
		}
		break;

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    6022:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    6026:	2be0      	cmp	r3, #224	; 0xe0
    6028:	d111      	bne.n	604e <Output_usbCodeSend_capability+0xc6>
    602a:	4b40      	ldr	r3, [pc, #256]	; (612c <Output_usbCodeSend_capability+0x1a4>)
    602c:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
		{
			if ( keyPress )
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    6030:	fa05 f404 	lsl.w	r4, r5, r4
    6034:	781a      	ldrb	r2, [r3, #0]

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
		{
			if ( keyPress )
    6036:	b108      	cbz	r0, 603c <Output_usbCodeSend_capability+0xb4>
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    6038:	4314      	orrs	r4, r2
    603a:	e001      	b.n	6040 <Output_usbCodeSend_capability+0xb8>
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    603c:	ea22 0404 	bic.w	r4, r2, r4
    6040:	701c      	strb	r4, [r3, #0]
			}

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
    6042:	4b39      	ldr	r3, [pc, #228]	; (6128 <Output_usbCodeSend_capability+0x1a0>)
    6044:	781a      	ldrb	r2, [r3, #0]
    6046:	f042 0201 	orr.w	r2, r2, #1
    604a:	701a      	strb	r2, [r3, #0]
			break;
    604c:	bd70      	pop	{r4, r5, r6, pc}
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    604e:	1f23      	subs	r3, r4, #4
    6050:	2b2d      	cmp	r3, #45	; 0x2d
    6052:	d80f      	bhi.n	6074 <Output_usbCodeSend_capability+0xec>
    6054:	3c05      	subs	r4, #5
    6056:	b2e4      	uxtb	r4, r4
    6058:	2c2e      	cmp	r4, #46	; 0x2e
    605a:	d804      	bhi.n	6066 <Output_usbCodeSend_capability+0xde>
    605c:	4b38      	ldr	r3, [pc, #224]	; (6140 <Output_usbCodeSend_capability+0x1b8>)
    605e:	4a39      	ldr	r2, [pc, #228]	; (6144 <Output_usbCodeSend_capability+0x1bc>)
    6060:	5d1b      	ldrb	r3, [r3, r4]
    6062:	5d12      	ldrb	r2, [r2, r4]
    6064:	e001      	b.n	606a <Output_usbCodeSend_capability+0xe2>
    6066:	2200      	movs	r2, #0
    6068:	4613      	mov	r3, r2
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    606a:	492f      	ldr	r1, [pc, #188]	; (6128 <Output_usbCodeSend_capability+0x1a0>)
    606c:	780c      	ldrb	r4, [r1, #0]
    606e:	f044 0402 	orr.w	r4, r4, #2
    6072:	e00c      	b.n	608e <Output_usbCodeSend_capability+0x106>
		}
		// Next 14 bytes
		else if ( key >= 51 && key <= 155 )
    6074:	f1a4 0233 	sub.w	r2, r4, #51	; 0x33
    6078:	b2d2      	uxtb	r2, r2
    607a:	2a68      	cmp	r2, #104	; 0x68
    607c:	d809      	bhi.n	6092 <Output_usbCodeSend_capability+0x10a>
    607e:	4932      	ldr	r1, [pc, #200]	; (6148 <Output_usbCodeSend_capability+0x1c0>)
    6080:	4b32      	ldr	r3, [pc, #200]	; (614c <Output_usbCodeSend_capability+0x1c4>)
    6082:	5c9b      	ldrb	r3, [r3, r2]
    6084:	5c8a      	ldrb	r2, [r1, r2]
				byteLookup( 17 );
				byteLookup( 18 );
				byteLookup( 19 );
			}

			USBKeys_Changed |= USBKeyChangeState_SecondaryKeys;
    6086:	4928      	ldr	r1, [pc, #160]	; (6128 <Output_usbCodeSend_capability+0x1a0>)
    6088:	780c      	ldrb	r4, [r1, #0]
    608a:	f044 0404 	orr.w	r4, r4, #4
    608e:	700c      	strb	r4, [r1, #0]
    6090:	e031      	b.n	60f6 <Output_usbCodeSend_capability+0x16e>
		}
		// Next byte
		else if ( key >= 157 && key <= 164 )
    6092:	f104 0363 	add.w	r3, r4, #99	; 0x63
    6096:	b2db      	uxtb	r3, r3
    6098:	2b07      	cmp	r3, #7
    609a:	d808      	bhi.n	60ae <Output_usbCodeSend_capability+0x126>
    609c:	4a2c      	ldr	r2, [pc, #176]	; (6150 <Output_usbCodeSend_capability+0x1c8>)
    609e:	5cd2      	ldrb	r2, [r2, r3]
			switch ( keyPos )
			{
				byteLookup( 20 );
			}

			USBKeys_Changed |= USBKeyChangeState_TertiaryKeys;
    60a0:	4b21      	ldr	r3, [pc, #132]	; (6128 <Output_usbCodeSend_capability+0x1a0>)
    60a2:	7819      	ldrb	r1, [r3, #0]
    60a4:	f041 0108 	orr.w	r1, r1, #8
    60a8:	7019      	strb	r1, [r3, #0]
    60aa:	2314      	movs	r3, #20
    60ac:	e023      	b.n	60f6 <Output_usbCodeSend_capability+0x16e>
		}
		// Last 6 bytes
		else if ( key >= 176 && key <= 221 )
    60ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
    60b2:	b2d2      	uxtb	r2, r2
    60b4:	2a2d      	cmp	r2, #45	; 0x2d
    60b6:	d808      	bhi.n	60ca <Output_usbCodeSend_capability+0x142>
    60b8:	4926      	ldr	r1, [pc, #152]	; (6154 <Output_usbCodeSend_capability+0x1cc>)
    60ba:	4b27      	ldr	r3, [pc, #156]	; (6158 <Output_usbCodeSend_capability+0x1d0>)
    60bc:	5c9b      	ldrb	r3, [r3, r2]
    60be:	5c8a      	ldrb	r2, [r1, r2]
				byteLookup( 24 );
				byteLookup( 25 );
				byteLookup( 26 );
			}

			USBKeys_Changed |= USBKeyChangeState_QuartiaryKeys;
    60c0:	4919      	ldr	r1, [pc, #100]	; (6128 <Output_usbCodeSend_capability+0x1a0>)
    60c2:	780c      	ldrb	r4, [r1, #0]
    60c4:	f044 0410 	orr.w	r4, r4, #16
    60c8:	e7e1      	b.n	608e <Output_usbCodeSend_capability+0x106>
		}
		// Received 0x00
		// This is a special USB Code that internally indicates a "break"
		// It is used to send "nothing" in order to break up sequences of USB Codes
		else if ( key == 0x00 )
    60ca:	b944      	cbnz	r4, 60de <Output_usbCodeSend_capability+0x156>
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    60cc:	4b16      	ldr	r3, [pc, #88]	; (6128 <Output_usbCodeSend_capability+0x1a0>)
    60ce:	781a      	ldrb	r2, [r3, #0]
			USBKeys_Sent++;
		}

		break;
	}
}
    60d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		// Received 0x00
		// This is a special USB Code that internally indicates a "break"
		// It is used to send "nothing" in order to break up sequences of USB Codes
		else if ( key == 0x00 )
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    60d4:	f042 0202 	orr.w	r2, r2, #2
    60d8:	701a      	strb	r2, [r3, #0]

			// Also flush out buffers just in case
			Output_flushBuffers();
    60da:	f7ff bf0d 	b.w	5ef8 <Output_flushBuffers>
			break;
		}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
    60de:	481f      	ldr	r0, [pc, #124]	; (615c <Output_usbCodeSend_capability+0x1d4>)
    60e0:	f001 fb8e 	bl	7800 <_print>
			printHex( key );
    60e4:	4620      	mov	r0, r4
    60e6:	4629      	mov	r1, r5
    60e8:	f001 fc13 	bl	7912 <printHex_op>
			print( NL );
    60ec:	481c      	ldr	r0, [pc, #112]	; (6160 <Output_usbCodeSend_capability+0x1d8>)
			USBKeys_Sent++;
		}

		break;
	}
}
    60ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
			printHex( key );
			print( NL );
    60f2:	f001 bb85 	b.w	7800 <_print>
    60f6:	2501      	movs	r5, #1
    60f8:	490d      	ldr	r1, [pc, #52]	; (6130 <Output_usbCodeSend_capability+0x1a8>)
    60fa:	4c0f      	ldr	r4, [pc, #60]	; (6138 <Output_usbCodeSend_capability+0x1b0>)
		}

		// Set/Unset
		if ( keyPress )
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    60fc:	fa05 f202 	lsl.w	r2, r5, r2
			print( NL );
			break;
		}

		// Set/Unset
		if ( keyPress )
    6100:	b128      	cbz	r0, 610e <Output_usbCodeSend_capability+0x186>
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    6102:	5ce0      	ldrb	r0, [r4, r3]
    6104:	4302      	orrs	r2, r0
    6106:	54e2      	strb	r2, [r4, r3]
			USBKeys_Sent++;
    6108:	780b      	ldrb	r3, [r1, #0]
    610a:	442b      	add	r3, r5
    610c:	e005      	b.n	611a <Output_usbCodeSend_capability+0x192>
		}
		else // Release
		{
			USBKeys_Keys[bytePosition] &= ~(1 << byteShift);
    610e:	5ce0      	ldrb	r0, [r4, r3]
    6110:	ea20 0202 	bic.w	r2, r0, r2
    6114:	54e2      	strb	r2, [r4, r3]
			USBKeys_Sent++;
    6116:	780b      	ldrb	r3, [r1, #0]
    6118:	3301      	adds	r3, #1
    611a:	700b      	strb	r3, [r1, #0]
    611c:	bd70      	pop	{r4, r5, r6, pc}
    611e:	bf00      	nop
    6120:	0000ad65 	.word	0x0000ad65
    6124:	1fff8b8d 	.word	0x1fff8b8d
    6128:	1fff9177 	.word	0x1fff9177
    612c:	1fff9176 	.word	0x1fff9176
    6130:	1fff917a 	.word	0x1fff917a
    6134:	0000ad81 	.word	0x0000ad81
    6138:	1fffa1d3 	.word	0x1fffa1d3
    613c:	0000adae 	.word	0x0000adae
    6140:	0000aab5 	.word	0x0000aab5
    6144:	0000af17 	.word	0x0000af17
    6148:	0000afb6 	.word	0x0000afb6
    614c:	0000af46 	.word	0x0000af46
    6150:	0000b026 	.word	0x0000b026
    6154:	0000a9e8 	.word	0x0000a9e8
    6158:	0000aae4 	.word	0x0000aae4
    615c:	0000adea 	.word	0x0000adea
    6160:	0000b26f 	.word	0x0000b26f

00006164 <Output_setup>:
}


// USB Module Setup
inline void Output_setup()
{
    6164:	b508      	push	{r3, lr}
	// Initialize the USB
	// If a USB connection does not exist, just ignore it
	// All usb related functions will non-fatally fail if called
	// If the USB initialization is delayed, then functionality will just be delayed
	usb_init();
    6166:	f000 fccd 	bl	6b04 <usb_init>

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );
    616a:	4804      	ldr	r0, [pc, #16]	; (617c <Output_setup+0x18>)
    616c:	4904      	ldr	r1, [pc, #16]	; (6180 <Output_setup+0x1c>)
    616e:	f001 f909 	bl	7384 <CLI_registerDictionary>

	// Flush key buffers
	Output_flushBuffers();
}
    6172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );

	// Flush key buffers
	Output_flushBuffers();
    6176:	f7ff bebf 	b.w	5ef8 <Output_flushBuffers>
    617a:	bf00      	nop
    617c:	0000ab14 	.word	0x0000ab14
    6180:	0000aaa1 	.word	0x0000aaa1

00006184 <Output_send>:
}


// USB Data Send
inline void Output_send()
{
    6184:	b510      	push	{r4, lr}
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
    6186:	4b12      	ldr	r3, [pc, #72]	; (61d0 <Output_send+0x4c>)
    6188:	781a      	ldrb	r2, [r3, #0]
    618a:	461c      	mov	r4, r3
    618c:	b94a      	cbnz	r2, 61a2 <Output_send+0x1e>
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    618e:	4b11      	ldr	r3, [pc, #68]	; (61d4 <Output_send+0x50>)
    6190:	781b      	ldrb	r3, [r3, #0]
    6192:	2b05      	cmp	r3, #5
    6194:	d805      	bhi.n	61a2 <Output_send+0x1e>
			USBKeys_Keys[c] = 0;
    6196:	4a10      	ldr	r2, [pc, #64]	; (61d8 <Output_send+0x54>)
    6198:	2100      	movs	r1, #0
    619a:	54d1      	strb	r1, [r2, r3]
// USB Data Send
inline void Output_send()
{
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    619c:	3301      	adds	r3, #1
    619e:	b2db      	uxtb	r3, r3
    61a0:	e7f7      	b.n	6192 <Output_send+0xe>
			USBKeys_Keys[c] = 0;

	// Send keypresses while there are pending changes
	while ( USBKeys_Changed )
    61a2:	4b0e      	ldr	r3, [pc, #56]	; (61dc <Output_send+0x58>)
    61a4:	781b      	ldrb	r3, [r3, #0]
    61a6:	b113      	cbz	r3, 61ae <Output_send+0x2a>
		usb_keyboard_send();
    61a8:	f000 fcfe 	bl	6ba8 <usb_keyboard_send>
    61ac:	e7f9      	b.n	61a2 <Output_send+0x1e>

	// Clear keys sent
	USBKeys_Sent = 0;
    61ae:	4a09      	ldr	r2, [pc, #36]	; (61d4 <Output_send+0x50>)
    61b0:	7013      	strb	r3, [r2, #0]

	// Signal Scan Module we are finished
	switch ( USBKeys_Protocol )
    61b2:	7822      	ldrb	r2, [r4, #0]
    61b4:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    61b8:	b112      	cbz	r2, 61c0 <Output_send+0x3c>
    61ba:	2801      	cmp	r0, #1
    61bc:	d003      	beq.n	61c6 <Output_send+0x42>
    61be:	bd10      	pop	{r4, pc}
	{
	case 0: // Boot Mode
		// Clear modifiers only in boot mode
		USBKeys_Modifiers = 0;
    61c0:	4b07      	ldr	r3, [pc, #28]	; (61e0 <Output_send+0x5c>)
    61c2:	7018      	strb	r0, [r3, #0]
    61c4:	e000      	b.n	61c8 <Output_send+0x44>
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    61c6:	4618      	mov	r0, r3
		break;
	}
}
    61c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		// Clear modifiers only in boot mode
		USBKeys_Modifiers = 0;
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    61cc:	f7fe bc7c 	b.w	4ac8 <Scan_finishedWithOutput>
    61d0:	1fff8b8d 	.word	0x1fff8b8d
    61d4:	1fff917a 	.word	0x1fff917a
    61d8:	1fffa1d3 	.word	0x1fffa1d3
    61dc:	1fff9177 	.word	0x1fff9177
    61e0:	1fff9176 	.word	0x1fff9176

000061e4 <Output_firmwareReload>:


// Sets the device into firmware reload mode
inline void Output_firmwareReload()
{
	usb_device_reload();
    61e4:	f000 b8de 	b.w	63a4 <usb_device_reload>

000061e8 <Output_availablechar>:


// USB Input buffer available
inline unsigned int Output_availablechar()
{
	return usb_serial_available();
    61e8:	f000 bea6 	b.w	6f38 <usb_serial_available>

000061ec <Output_getchar>:

// USB Get Character from input buffer
inline int Output_getchar()
{
	// XXX Make sure to check output_availablechar() first! Information is lost with the cast (error codes) (AVR)
	return (int)usb_serial_getchar();
    61ec:	f000 be7e 	b.w	6eec <usb_serial_getchar>

000061f0 <Output_putstr>:
inline int Output_putstr( char* str )
{
#if defined(_at90usb162_) || defined(_atmega32u4_) || defined(_at90usb646_) || defined(_at90usb1286_) // AVR
	uint16_t count = 0;
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	uint32_t count = 0;
    61f0:	2100      	movs	r1, #0
#endif
	// Count characters until NULL character, then send the amount counted
	while ( str[count] != '\0' )
    61f2:	5c43      	ldrb	r3, [r0, r1]
    61f4:	b10b      	cbz	r3, 61fa <Output_putstr+0xa>
		count++;
    61f6:	3101      	adds	r1, #1
    61f8:	e7fb      	b.n	61f2 <Output_putstr+0x2>

	return usb_serial_write( str, count );
    61fa:	f000 beab 	b.w	6f54 <usb_serial_write>
    61fe:	0000      	movs	r0, r0

00006200 <Output_softReset>:


// Soft Chip Reset
inline void Output_softReset()
{
	usb_device_software_reset();
    6200:	4b01      	ldr	r3, [pc, #4]	; (6208 <Output_softReset+0x8>)
    6202:	4a02      	ldr	r2, [pc, #8]	; (620c <Output_softReset+0xc>)
    6204:	601a      	str	r2, [r3, #0]
    6206:	4770      	bx	lr
    6208:	e000ed0c 	.word	0xe000ed0c
    620c:	05fa0004 	.word	0x05fa0004

00006210 <endpoint0_transmit>:
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
    6210:	b5f0      	push	{r4, r5, r6, r7, lr}
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6212:	4b0c      	ldr	r3, [pc, #48]	; (6244 <endpoint0_transmit+0x34>)
    6214:	4c0c      	ldr	r4, [pc, #48]	; (6248 <endpoint0_transmit+0x38>)
    6216:	781a      	ldrb	r2, [r3, #0]
    6218:	f042 0502 	orr.w	r5, r2, #2
    621c:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6220:	f082 0201 	eor.w	r2, r2, #1
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6224:	6070      	str	r0, [r6, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6226:	4809      	ldr	r0, [pc, #36]	; (624c <endpoint0_transmit+0x3c>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6228:	701a      	strb	r2, [r3, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    622a:	7806      	ldrb	r6, [r0, #0]
    622c:	2e00      	cmp	r6, #0
    622e:	bf0c      	ite	eq
    6230:	2788      	moveq	r7, #136	; 0x88
    6232:	27c8      	movne	r7, #200	; 0xc8
	ep0_tx_data_toggle ^= 1;
    6234:	f086 0601 	eor.w	r6, r6, #1
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6238:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
	ep0_tx_data_toggle ^= 1;
    623c:	7006      	strb	r6, [r0, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    623e:	f844 1035 	str.w	r1, [r4, r5, lsl #3]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6244:	1fff920c 	.word	0x1fff920c
    6248:	1fff8000 	.word	0x1fff8000
    624c:	1fff92a4 	.word	0x1fff92a4

00006250 <usb_rx>:

usb_packet_t *usb_rx( uint32_t endpoint )
{
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
    6250:	1e43      	subs	r3, r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    6252:	2b07      	cmp	r3, #7
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
}

usb_packet_t *usb_rx( uint32_t endpoint )
{
    6254:	b510      	push	{r4, lr}
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
    6256:	d810      	bhi.n	627a <usb_rx+0x2a>
		return NULL;
	__disable_irq();
    6258:	b672      	cpsid	i
	ret = rx_first[endpoint];
    625a:	4a09      	ldr	r2, [pc, #36]	; (6280 <usb_rx+0x30>)
    625c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if ( ret )
    6260:	b110      	cbz	r0, 6268 <usb_rx+0x18>
		rx_first[ endpoint ] = ret->next;
    6262:	6841      	ldr	r1, [r0, #4]
    6264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	usb_rx_byte_count_data[ endpoint ] -= ret->len;
    6268:	4a06      	ldr	r2, [pc, #24]	; (6284 <usb_rx+0x34>)
    626a:	8801      	ldrh	r1, [r0, #0]
    626c:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
    6270:	1a61      	subs	r1, r4, r1
    6272:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	__enable_irq();
    6276:	b662      	cpsie	i
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    6278:	bd10      	pop	{r4, pc}
{
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return NULL;
    627a:	2000      	movs	r0, #0
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    627c:	bd10      	pop	{r4, pc}
    627e:	bf00      	nop
    6280:	1fff91ec 	.word	0x1fff91ec
    6284:	1fffa20c 	.word	0x1fffa20c

00006288 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    6288:	3801      	subs	r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    628a:	2807      	cmp	r0, #7
    628c:	d80a      	bhi.n	62a4 <usb_tx_packet_count+0x1c>
		return 0;
	__disable_irq();
    628e:	b672      	cpsid	i
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    6290:	4b05      	ldr	r3, [pc, #20]	; (62a8 <usb_tx_packet_count+0x20>)
    6292:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
}

uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;
    6296:	2000      	movs	r0, #0

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    6298:	b113      	cbz	r3, 62a0 <usb_tx_packet_count+0x18>
		count++;
    629a:	3001      	adds	r0, #1

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    629c:	685b      	ldr	r3, [r3, #4]
    629e:	e7fb      	b.n	6298 <usb_tx_packet_count+0x10>
		count++;
	__enable_irq();
    62a0:	b662      	cpsie	i
	return count;
    62a2:	4770      	bx	lr
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
    62a4:	2000      	movs	r0, #0
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
		count++;
	__enable_irq();
	return count;
}
    62a6:	4770      	bx	lr
    62a8:	1fff9250 	.word	0x1fff9250

000062ac <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory( usb_packet_t *packet )
{
    62ac:	b510      	push	{r4, lr}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    62ae:	b672      	cpsid	i
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    62b0:	2301      	movs	r3, #1
    62b2:	4a17      	ldr	r2, [pc, #92]	; (6310 <usb_rx_memory+0x64>)
    62b4:	441a      	add	r2, r3
	{
		if ( *cfg++ & USB_ENDPT_EPRXEN )
    62b6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    62ba:	0712      	lsls	r2, r2, #28
    62bc:	d51c      	bpl.n	62f8 <usb_rx_memory+0x4c>
		{
			if ( table[ index( i, RX, EVEN ) ].desc == 0 )
    62be:	0099      	lsls	r1, r3, #2
    62c0:	4a14      	ldr	r2, [pc, #80]	; (6314 <usb_rx_memory+0x68>)
    62c2:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    62c6:	b92c      	cbnz	r4, 62d4 <usb_rx_memory+0x28>
			{
				table[ index( i, RX, EVEN ) ].addr = packet->buf;
    62c8:	eb02 1343 	add.w	r3, r2, r3, lsl #5
    62cc:	3008      	adds	r0, #8
    62ce:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    62d0:	4b11      	ldr	r3, [pc, #68]	; (6318 <usb_rx_memory+0x6c>)
    62d2:	e009      	b.n	62e8 <usb_rx_memory+0x3c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if ( table[ index( i, RX, ODD ) ].desc == 0 )
    62d4:	f041 0101 	orr.w	r1, r1, #1
    62d8:	f852 4031 	ldr.w	r4, [r2, r1, lsl #3]
    62dc:	b964      	cbnz	r4, 62f8 <usb_rx_memory+0x4c>
			{
				table[ index( i, RX, ODD ) ].addr = packet->buf;
    62de:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    62e2:	3008      	adds	r0, #8
    62e4:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    62e6:	4b0d      	ldr	r3, [pc, #52]	; (631c <usb_rx_memory+0x70>)
    62e8:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
				usb_rx_memory_needed--;
    62ec:	4b0c      	ldr	r3, [pc, #48]	; (6320 <usb_rx_memory+0x74>)
    62ee:	781a      	ldrb	r2, [r3, #0]
    62f0:	3a01      	subs	r2, #1
    62f2:	701a      	strb	r2, [r3, #0]
				__enable_irq();
    62f4:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    62f6:	bd10      	pop	{r4, pc}
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    62f8:	3301      	adds	r3, #1
    62fa:	2b09      	cmp	r3, #9
    62fc:	d1d9      	bne.n	62b2 <usb_rx_memory+0x6>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    62fe:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    6300:	4b07      	ldr	r3, [pc, #28]	; (6320 <usb_rx_memory+0x74>)
    6302:	2200      	movs	r2, #0
    6304:	701a      	strb	r2, [r3, #0]
	usb_free( packet );
	return;
}
    6306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free( packet );
    630a:	f000 bdcd 	b.w	6ea8 <usb_free>
    630e:	bf00      	nop
    6310:	0000b02e 	.word	0x0000b02e
    6314:	1fff8000 	.word	0x1fff8000
    6318:	00400088 	.word	0x00400088
    631c:	004000c8 	.word	0x004000c8
    6320:	1fff929a 	.word	0x1fff929a

00006324 <usb_tx>:
void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
	uint8_t next;

	endpoint--;
    6324:	1e43      	subs	r3, r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    6326:	2b07      	cmp	r3, #7

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    6328:	b530      	push	{r4, r5, lr}
	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
	uint8_t next;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
    632a:	d832      	bhi.n	6392 <usb_tx+0x6e>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
    632c:	4a19      	ldr	r2, [pc, #100]	; (6394 <usb_tx+0x70>)
    632e:	0140      	lsls	r0, r0, #5
    6330:	f040 0010 	orr.w	r0, r0, #16
    6334:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return;
	__disable_irq();
    6336:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
    6338:	4c17      	ldr	r4, [pc, #92]	; (6398 <usb_tx+0x74>)
    633a:	5ce2      	ldrb	r2, [r4, r3]
    633c:	2a03      	cmp	r2, #3
    633e:	d809      	bhi.n	6354 <usb_tx+0x30>
    6340:	e8df f002 	tbb	[pc, r2]
    6344:	05180216 	.word	0x05180216
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    6348:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    634a:	2202      	movs	r2, #2
		break;
    634c:	e013      	b.n	6376 <usb_tx+0x52>
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	case TX_STATE_ODD_FREE:
		b++;
    634e:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    6350:	2204      	movs	r2, #4
		break;
    6352:	e010      	b.n	6376 <usb_tx+0x52>
	default:
		if (tx_first[ endpoint ] == NULL)
    6354:	4811      	ldr	r0, [pc, #68]	; (639c <usb_tx+0x78>)
    6356:	4a12      	ldr	r2, [pc, #72]	; (63a0 <usb_tx+0x7c>)
    6358:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    635c:	b914      	cbnz	r4, 6364 <usb_tx+0x40>
		{
			tx_first[ endpoint ] = packet;
    635e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    6362:	e002      	b.n	636a <usb_tx+0x46>
		}
		else
		{
			tx_last[ endpoint ]->next = packet;
    6364:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6368:	6041      	str	r1, [r0, #4]
		}
		tx_last[ endpoint ] = packet;
    636a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    636e:	e00f      	b.n	6390 <usb_tx+0x6c>
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    6370:	2203      	movs	r2, #3
    6372:	e000      	b.n	6376 <usb_tx+0x52>
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    6374:	2205      	movs	r2, #5
		tx_last[ endpoint ] = packet;
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
    6376:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6378:	f010 0f08 	tst.w	r0, #8
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    637c:	f101 0308 	add.w	r3, r1, #8
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6380:	880a      	ldrh	r2, [r1, #0]
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    6382:	6043      	str	r3, [r0, #4]
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6384:	bf0c      	ite	eq
    6386:	2388      	moveq	r3, #136	; 0x88
    6388:	23c8      	movne	r3, #200	; 0xc8
    638a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    638e:	6003      	str	r3, [r0, #0]
	__enable_irq();
    6390:	b662      	cpsie	i
    6392:	bd30      	pop	{r4, r5, pc}
    6394:	1fff8000 	.word	0x1fff8000
    6398:	1fff91a4 	.word	0x1fff91a4
    639c:	1fff9250 	.word	0x1fff9250
    63a0:	1fff9270 	.word	0x1fff9270

000063a4 <usb_device_reload>:
}


void usb_device_reload()
{
    63a4:	4b05      	ldr	r3, [pc, #20]	; (63bc <usb_device_reload+0x18>)
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
    63a6:	4a06      	ldr	r2, [pc, #24]	; (63c0 <usb_device_reload+0x1c>)
    63a8:	5c9a      	ldrb	r2, [r3, r2]
    63aa:	f803 2b01 	strb.w	r2, [r3], #1
{
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
    63ae:	4a05      	ldr	r2, [pc, #20]	; (63c4 <usb_device_reload+0x20>)
    63b0:	4293      	cmp	r3, r2
    63b2:	d1f8      	bne.n	63a6 <usb_device_reload+0x2>
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
	SOFTWARE_RESET();
    63b4:	4b04      	ldr	r3, [pc, #16]	; (63c8 <usb_device_reload+0x24>)
    63b6:	4a05      	ldr	r2, [pc, #20]	; (63cc <usb_device_reload+0x28>)
    63b8:	601a      	str	r2, [r3, #0]
    63ba:	4770      	bx	lr
    63bc:	4003e000 	.word	0x4003e000
    63c0:	bffc9acb 	.word	0xbffc9acb
    63c4:	4003e016 	.word	0x4003e016
    63c8:	e000ed0c 	.word	0xe000ed0c
    63cc:	05fa0004 	.word	0x05fa0004

000063d0 <usb_isr>:
#endif
}


void usb_isr()
{
    63d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
restart:
	status = USB0_ISTAT;
    63d4:	4eb2      	ldr	r6, [pc, #712]	; (66a0 <usb_isr+0x2d0>)
    63d6:	7834      	ldrb	r4, [r6, #0]
    63d8:	b2e4      	uxtb	r4, r4
	print("USB ISR STATUS: ");
	printHex( status );
	print( NL );
	*/

	if ( (status & USB_INTEN_SOFTOKEN /* 04 */ ) )
    63da:	f014 0f04 	tst.w	r4, #4
    63de:	4635      	mov	r5, r6
    63e0:	d01a      	beq.n	6418 <usb_isr+0x48>
	{
		if ( usb_configuration )
    63e2:	4bb0      	ldr	r3, [pc, #704]	; (66a4 <usb_isr+0x2d4>)
    63e4:	781b      	ldrb	r3, [r3, #0]
    63e6:	b1ab      	cbz	r3, 6414 <usb_isr+0x44>
		{
			t = usb_reboot_timer;
    63e8:	4aaf      	ldr	r2, [pc, #700]	; (66a8 <usb_isr+0x2d8>)
    63ea:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    63ec:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    63f0:	b129      	cbz	r1, 63fe <usb_isr+0x2e>
			{
				usb_reboot_timer = --t;
    63f2:	3b01      	subs	r3, #1
    63f4:	b2db      	uxtb	r3, r3
    63f6:	7013      	strb	r3, [r2, #0]
				if ( !t )
    63f8:	b90b      	cbnz	r3, 63fe <usb_isr+0x2e>
					usb_device_reload();
    63fa:	f7ff ffd3 	bl	63a4 <usb_device_reload>
			}

			// CDC Interface
			t = usb_cdc_transmit_flush_timer;
    63fe:	4aab      	ldr	r2, [pc, #684]	; (66ac <usb_isr+0x2dc>)
    6400:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    6402:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    6406:	b129      	cbz	r1, 6414 <usb_isr+0x44>
			{
				usb_cdc_transmit_flush_timer = --t;
    6408:	3b01      	subs	r3, #1
    640a:	b2db      	uxtb	r3, r3
    640c:	7013      	strb	r3, [r2, #0]
				if ( t == 0 )
    640e:	b90b      	cbnz	r3, 6414 <usb_isr+0x44>
					usb_serial_flush_callback();
    6410:	f000 fe08 	bl	7024 <usb_serial_flush_callback>
			}

		}
		USB0_ISTAT = USB_INTEN_SOFTOKEN;
    6414:	2304      	movs	r3, #4
    6416:	7033      	strb	r3, [r6, #0]
	}

	if ( (status & USB_ISTAT_TOKDNE /* 08 */ ) )
    6418:	f004 0308 	and.w	r3, r4, #8
    641c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    6420:	2b00      	cmp	r3, #0
    6422:	f000 831a 	beq.w	6a5a <usb_isr+0x68a>
	{
		uint8_t endpoint;
		stat = USB0_STAT;
    6426:	4ba2      	ldr	r3, [pc, #648]	; (66b0 <usb_isr+0x2e0>)
    6428:	4ca2      	ldr	r4, [pc, #648]	; (66b4 <usb_isr+0x2e4>)
    642a:	781a      	ldrb	r2, [r3, #0]
    642c:	b2d2      	uxtb	r2, r2
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if ( endpoint == 0 )
    642e:	0915      	lsrs	r5, r2, #4
    6430:	ea4f 0892 	mov.w	r8, r2, lsr #2
    6434:	f040 8270 	bne.w	6918 <usb_isr+0x548>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
    6438:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
	pid = BDT_PID( b->desc );
	buf = b->addr;
    643c:	685a      	ldr	r2, [r3, #4]
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
	pid = BDT_PID( b->desc );
    643e:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
    6442:	f3c3 0383 	ubfx	r3, r3, #2, #4
	print(", count:");
	printHex32(b->desc);
	print(" - ");
	#endif

	switch (pid)
    6446:	3b01      	subs	r3, #1
    6448:	2b0c      	cmp	r3, #12
    644a:	f200 8262 	bhi.w	6912 <usb_isr+0x542>
    644e:	e8df f013 	tbh	[pc, r3, lsl #1]
    6452:	0204      	.short	0x0204
    6454:	02600204 	.word	0x02600204
    6458:	02600260 	.word	0x02600260
    645c:	02600260 	.word	0x02600260
    6460:	023c0260 	.word	0x023c0260
    6464:	02600260 	.word	0x02600260
    6468:	000d0260 	.word	0x000d0260
	{
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    646c:	4d92      	ldr	r5, [pc, #584]	; (66b8 <usb_isr+0x2e8>)
    646e:	6813      	ldr	r3, [r2, #0]
		setup.word2 = *(uint32_t *)(buf + 4);
    6470:	6852      	ldr	r2, [r2, #4]
    6472:	606a      	str	r2, [r5, #4]

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    6474:	4a91      	ldr	r2, [pc, #580]	; (66bc <usb_isr+0x2ec>)
    6476:	f844 2038 	str.w	r2, [r4, r8, lsl #3]
	{
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    647a:	602b      	str	r3, [r5, #0]
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    647c:	4f90      	ldr	r7, [pc, #576]	; (66c0 <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    647e:	4a91      	ldr	r2, [pc, #580]	; (66c4 <usb_isr+0x2f4>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    6480:	b29b      	uxth	r3, r3
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    6482:	2100      	movs	r1, #0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6484:	f04f 0801 	mov.w	r8, #1
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    6488:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    648c:	6039      	str	r1, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    648e:	6121      	str	r1, [r4, #16]
		table[index(0, TX, ODD)].desc = 0;
    6490:	61a1      	str	r1, [r4, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6492:	f882 8000 	strb.w	r8, [r2]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    6496:	f000 81b1 	beq.w	67fc <usb_isr+0x42c>
    649a:	d82b      	bhi.n	64f4 <usb_isr+0x124>
    649c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    64a0:	f000 8146 	beq.w	6730 <usb_isr+0x360>
    64a4:	d810      	bhi.n	64c8 <usb_isr+0xf8>
    64a6:	2b82      	cmp	r3, #130	; 0x82
    64a8:	f000 8134 	beq.w	6714 <usb_isr+0x344>
    64ac:	d806      	bhi.n	64bc <usb_isr+0xec>
    64ae:	2b80      	cmp	r3, #128	; 0x80
    64b0:	f040 819d 	bne.w	67ee <usb_isr+0x41e>
		datalen = 1;
		data = reply_buffer;
		goto send;

	case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    64b4:	4c84      	ldr	r4, [pc, #528]	; (66c8 <usb_isr+0x2f8>)
    64b6:	7021      	strb	r1, [r4, #0]
		reply_buffer[1] = 0;
    64b8:	7061      	strb	r1, [r4, #1]
    64ba:	e1a1      	b.n	6800 <usb_isr+0x430>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    64bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    64c0:	f0c0 8195 	bcc.w	67ee <usb_isr+0x41e>
		goto send;

	case 0x0100: // CLEAR_FEATURE (device)
	case 0x0101: // CLEAR_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_print("CLEAR_FEATURE - Device/Interface");
    64c4:	4881      	ldr	r0, [pc, #516]	; (66cc <usb_isr+0x2fc>)
    64c6:	e174      	b.n	67b2 <usb_isr+0x3e2>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    64c8:	f240 3201 	movw	r2, #769	; 0x301
    64cc:	4293      	cmp	r3, r2
    64ce:	d80b      	bhi.n	64e8 <usb_isr+0x118>
    64d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    64d4:	f080 813b 	bcs.w	674e <usb_isr+0x37e>
    64d8:	f240 12a1 	movw	r2, #417	; 0x1a1
    64dc:	4293      	cmp	r3, r2
    64de:	f040 8186 	bne.w	67ee <usb_isr+0x41e>
		{
			if ( list->addr == NULL )
				break;
			if ( list->wValue != 0x2200 )
				continue;
			if ( setup.wIndex == list->wIndex )
    64e2:	88aa      	ldrh	r2, [r5, #4]
    64e4:	4b7a      	ldr	r3, [pc, #488]	; (66d0 <usb_isr+0x300>)
    64e6:	e16d      	b.n	67c4 <usb_isr+0x3f4>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    64e8:	f240 3202 	movw	r2, #770	; 0x302
    64ec:	4293      	cmp	r3, r2
    64ee:	f000 8130 	beq.w	6752 <usb_isr+0x382>
    64f2:	e17c      	b.n	67ee <usb_isr+0x41e>
    64f4:	f640 1221 	movw	r2, #2337	; 0x921
    64f8:	4293      	cmp	r3, r2
    64fa:	f000 814f 	beq.w	679c <usb_isr+0x3cc>
    64fe:	d81d      	bhi.n	653c <usb_isr+0x16c>
    6500:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    6504:	f000 8100 	beq.w	6708 <usb_isr+0x338>
    6508:	d808      	bhi.n	651c <usb_isr+0x14c>
    650a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    650e:	2b01      	cmp	r3, #1
    6510:	f200 816d 	bhi.w	67ee <usb_isr+0x41e>
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    6514:	886a      	ldrh	r2, [r5, #2]
    6516:	88a9      	ldrh	r1, [r5, #4]
    6518:	4b6d      	ldr	r3, [pc, #436]	; (66d0 <usb_isr+0x300>)
    651a:	e12e      	b.n	677a <usb_isr+0x3aa>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    651c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    6520:	f040 8165 	bne.w	67ee <usb_isr+0x41e>

	case 0x0900: // SET_CONFIGURATION
		#ifdef UART_DEBUG
		print("CONFIGURE - ");
		#endif
		usb_configuration = setup.wValue;
    6524:	4b5f      	ldr	r3, [pc, #380]	; (66a4 <usb_isr+0x2d4>)
    6526:	78aa      	ldrb	r2, [r5, #2]
    6528:	701a      	strb	r2, [r3, #0]
		Output_Available = usb_configuration;
    652a:	781a      	ldrb	r2, [r3, #0]
    652c:	f8df 8184 	ldr.w	r8, [pc, #388]	; 66b4 <usb_isr+0x2e4>
    6530:	4b68      	ldr	r3, [pc, #416]	; (66d4 <usb_isr+0x304>)
    6532:	b2d2      	uxtb	r2, r2
    6534:	701a      	strb	r2, [r3, #0]
    6536:	f508 7980 	add.w	r9, r8, #256	; 0x100
    653a:	e01f      	b.n	657c <usb_isr+0x1ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    653c:	f242 0221 	movw	r2, #8225	; 0x2021
    6540:	4293      	cmp	r3, r2
    6542:	f000 8187 	beq.w	6854 <usb_isr+0x484>
    6546:	d80c      	bhi.n	6562 <usb_isr+0x192>
    6548:	f640 2221 	movw	r2, #2593	; 0xa21
    654c:	4293      	cmp	r3, r2
    654e:	f000 8145 	beq.w	67dc <usb_isr+0x40c>
    6552:	f640 3221 	movw	r2, #2849	; 0xb21
    6556:	4293      	cmp	r3, r2
    6558:	f040 8149 	bne.w	67ee <usb_isr+0x41e>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue & 0xFF );
		print(NL);
		#endif
		USBKeys_Protocol = setup.wValue & 0xFF; // 0 - Boot Mode, 1 - NKRO Mode
    655c:	78aa      	ldrb	r2, [r5, #2]
    655e:	4b5e      	ldr	r3, [pc, #376]	; (66d8 <usb_isr+0x308>)
    6560:	e143      	b.n	67ea <usb_isr+0x41a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    6562:	f242 12a1 	movw	r2, #8609	; 0x21a1
    6566:	4293      	cmp	r3, r2
    6568:	f000 8145 	beq.w	67f6 <usb_isr+0x426>
    656c:	f242 2221 	movw	r2, #8737	; 0x2221
    6570:	4293      	cmp	r3, r2
    6572:	f040 813c 	bne.w	67ee <usb_isr+0x41e>
		#endif
		endpoint0_stall();
		return;

	case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr = setup.wValue;
    6576:	78aa      	ldrb	r2, [r5, #2]
    6578:	4b58      	ldr	r3, [pc, #352]	; (66dc <usb_isr+0x30c>)
    657a:	e136      	b.n	67ea <usb_isr+0x41a>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
		{
			if ( table[i].desc & BDT_OWN )
    657c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    6580:	061a      	lsls	r2, r3, #24
    6582:	d504      	bpl.n	658e <usb_isr+0x1be>
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
    6584:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    6588:	3808      	subs	r0, #8
    658a:	f000 fc8d 	bl	6ea8 <usb_free>
    658e:	f108 0808 	add.w	r8, r8, #8
		usb_configuration = setup.wValue;
		Output_Available = usb_configuration;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
    6592:	45c8      	cmp	r8, r9
    6594:	d1f2      	bne.n	657c <usb_isr+0x1ac>
    6596:	f04f 0800 	mov.w	r8, #0
    659a:	46c1      	mov	r9, r8
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
		{
			usb_packet_t *p, *n;
			p = rx_first[i];
    659c:	f8df a160 	ldr.w	sl, [pc, #352]	; 6700 <usb_isr+0x330>
    65a0:	f858 000a 	ldr.w	r0, [r8, sl]
			while ( p )
    65a4:	b128      	cbz	r0, 65b2 <usb_isr+0x1e2>
			{
				n = p->next;
    65a6:	f8d0 b004 	ldr.w	fp, [r0, #4]
				usb_free(p);
    65aa:	f000 fc7d 	bl	6ea8 <usb_free>
				p = n;
    65ae:	4658      	mov	r0, fp
    65b0:	e7f8      	b.n	65a4 <usb_isr+0x1d4>
			}
			rx_first[ i ] = NULL;
    65b2:	f84a 0008 	str.w	r0, [sl, r8]
			rx_last[ i ] = NULL;
    65b6:	4b4a      	ldr	r3, [pc, #296]	; (66e0 <usb_isr+0x310>)
			p = tx_first[i];
    65b8:	f8df a148 	ldr.w	sl, [pc, #328]	; 6704 <usb_isr+0x334>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[ i ] = NULL;
			rx_last[ i ] = NULL;
    65bc:	f848 0003 	str.w	r0, [r8, r3]
			p = tx_first[i];
    65c0:	f858 000a 	ldr.w	r0, [r8, sl]
			while (p)
    65c4:	b128      	cbz	r0, 65d2 <usb_isr+0x202>
			{
				n = p->next;
    65c6:	f8d0 b004 	ldr.w	fp, [r0, #4]
				usb_free(p);
    65ca:	f000 fc6d 	bl	6ea8 <usb_free>
				p = n;
    65ce:	4658      	mov	r0, fp
    65d0:	e7f8      	b.n	65c4 <usb_isr+0x1f4>
			}
			tx_first[ i ] = NULL;
			tx_last[ i ] = NULL;
    65d2:	4b44      	ldr	r3, [pc, #272]	; (66e4 <usb_isr+0x314>)
			{
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[ i ] = NULL;
    65d4:	f84a 0008 	str.w	r0, [sl, r8]
			tx_last[ i ] = NULL;
    65d8:	f848 0003 	str.w	r0, [r8, r3]
			usb_rx_byte_count_data[i] = 0;
    65dc:	4b42      	ldr	r3, [pc, #264]	; (66e8 <usb_isr+0x318>)
    65de:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]

			switch ( tx_state[ i ] )
    65e2:	4b42      	ldr	r3, [pc, #264]	; (66ec <usb_isr+0x31c>)
    65e4:	f819 2003 	ldrb.w	r2, [r9, r3]
    65e8:	3a02      	subs	r2, #2
    65ea:	2a03      	cmp	r2, #3
    65ec:	d808      	bhi.n	6600 <usb_isr+0x230>
    65ee:	e8df f002 	tbb	[pc, r2]
    65f2:	0402      	.short	0x0402
    65f4:	0402      	.short	0x0402
			{
			case TX_STATE_EVEN_FREE:
			case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    65f6:	2200      	movs	r2, #0
    65f8:	e000      	b.n	65fc <usb_isr+0x22c>
				break;
			case TX_STATE_ODD_FREE:
			case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    65fa:	2201      	movs	r2, #1
    65fc:	f803 2009 	strb.w	r2, [r3, r9]
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
			}
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
    6600:	f109 0901 	add.w	r9, r9, #1
    6604:	f1b9 0f08 	cmp.w	r9, #8
    6608:	f108 0804 	add.w	r8, r8, #4
    660c:	d1c6      	bne.n	659c <usb_isr+0x1cc>
				break;
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    660e:	4b38      	ldr	r3, [pc, #224]	; (66f0 <usb_isr+0x320>)
    6610:	2200      	movs	r2, #0
    6612:	701a      	strb	r2, [r3, #0]
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6614:	f04f 0801 	mov.w	r8, #1
    6618:	469a      	mov	sl, r3
    661a:	4a36      	ldr	r2, [pc, #216]	; (66f4 <usb_isr+0x324>)
    661c:	4b36      	ldr	r3, [pc, #216]	; (66f8 <usb_isr+0x328>)
    661e:	4442      	add	r2, r8
    6620:	4443      	add	r3, r8
		{
			epconf = *cfg++;
    6622:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    6626:	009b      	lsls	r3, r3, #2
			*reg = epconf;
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    6628:	f012 0f08 	tst.w	r2, #8
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
		{
			epconf = *cfg++;
			*reg = epconf;
    662c:	701a      	strb	r2, [r3, #0]
    662e:	ea4f 0988 	mov.w	r9, r8, lsl #2
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    6632:	d025      	beq.n	6680 <usb_isr+0x2b0>
			{
				usb_packet_t *p;
				p = usb_malloc();
    6634:	f000 fc1a 	bl	6e6c <usb_malloc>
				if ( p )
    6638:	b138      	cbz	r0, 664a <usb_isr+0x27a>
				{
					table[ index( i, RX, EVEN ) ].addr = p->buf;
    663a:	eb04 1348 	add.w	r3, r4, r8, lsl #5
    663e:	3008      	adds	r0, #8
    6640:	6058      	str	r0, [r3, #4]
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    6642:	4b2e      	ldr	r3, [pc, #184]	; (66fc <usb_isr+0x32c>)
    6644:	f844 3039 	str.w	r3, [r4, r9, lsl #3]
    6648:	e006      	b.n	6658 <usb_isr+0x288>
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
    664a:	f89a 3000 	ldrb.w	r3, [sl]
					table[ index( i, RX, EVEN ) ].addr = p->buf;
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
    664e:	f844 0039 	str.w	r0, [r4, r9, lsl #3]
					usb_rx_memory_needed++;
    6652:	3301      	adds	r3, #1
    6654:	f88a 3000 	strb.w	r3, [sl]
				}
				p = usb_malloc();
    6658:	f000 fc08 	bl	6e6c <usb_malloc>
				if ( p )
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    665c:	f049 0301 	orr.w	r3, r9, #1
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if ( p )
    6660:	b138      	cbz	r0, 6672 <usb_isr+0x2a2>
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    6662:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6666:	3008      	adds	r0, #8
    6668:	6050      	str	r0, [r2, #4]
					table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    666a:	4a14      	ldr	r2, [pc, #80]	; (66bc <usb_isr+0x2ec>)
    666c:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
    6670:	e006      	b.n	6680 <usb_isr+0x2b0>
				}
				else
				{
					table[ index( i, RX, ODD ) ].desc = 0;
    6672:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
					usb_rx_memory_needed++;
    6676:	f89a 3000 	ldrb.w	r3, [sl]
    667a:	3301      	adds	r3, #1
    667c:	f88a 3000 	strb.w	r3, [sl]
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
    6680:	f049 0302 	orr.w	r3, r9, #2
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6684:	f108 0801 	add.w	r8, r8, #1
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
			table[ index( i, TX, ODD ) ].desc = 0;
    6688:	f049 0903 	orr.w	r9, r9, #3
				{
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
    668c:	2100      	movs	r1, #0
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    668e:	f1b8 0f09 	cmp.w	r8, #9
				{
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
    6692:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
			table[ index( i, TX, ODD ) ].desc = 0;
    6696:	f844 1039 	str.w	r1, [r4, r9, lsl #3]
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    669a:	d1be      	bne.n	661a <usb_isr+0x24a>
    669c:	e0ae      	b.n	67fc <usb_isr+0x42c>
    669e:	bf00      	nop
    66a0:	40072080 	.word	0x40072080
    66a4:	1fff92a3 	.word	0x1fff92a3
    66a8:	1fff920d 	.word	0x1fff920d
    66ac:	1fff92a6 	.word	0x1fff92a6
    66b0:	40072090 	.word	0x40072090
    66b4:	1fff8000 	.word	0x1fff8000
    66b8:	1fff9290 	.word	0x1fff9290
    66bc:	004000c8 	.word	0x004000c8
    66c0:	1fff9180 	.word	0x1fff9180
    66c4:	1fff92a4 	.word	0x1fff92a4
    66c8:	1fff929b 	.word	0x1fff929b
    66cc:	0000b170 	.word	0x0000b170
    66d0:	0000b044 	.word	0x0000b044
    66d4:	1fff917c 	.word	0x1fff917c
    66d8:	1fff8b8d 	.word	0x1fff8b8d
    66dc:	1fff92b4 	.word	0x1fff92b4
    66e0:	1fff9184 	.word	0x1fff9184
    66e4:	1fff9270 	.word	0x1fff9270
    66e8:	1fffa20c 	.word	0x1fffa20c
    66ec:	1fff91a4 	.word	0x1fff91a4
    66f0:	1fff929a 	.word	0x1fff929a
    66f4:	0000b02e 	.word	0x0000b02e
    66f8:	1001c830 	.word	0x1001c830
    66fc:	00400088 	.word	0x00400088
    6700:	1fff91ec 	.word	0x1fff91ec
    6704:	1fff9250 	.word	0x1fff9250
			table[ index( i, TX, ODD ) ].desc = 0;
		}
		goto send;

	case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    6708:	4ba2      	ldr	r3, [pc, #648]	; (6994 <usb_isr+0x5c4>)
    670a:	4ca3      	ldr	r4, [pc, #652]	; (6998 <usb_isr+0x5c8>)
    670c:	781b      	ldrb	r3, [r3, #0]
    670e:	7023      	strb	r3, [r4, #0]
		datalen = 1;
    6710:	4641      	mov	r1, r8
    6712:	e076      	b.n	6802 <usb_isr+0x432>
		datalen = 2;
		data = reply_buffer;
		goto send;

	case 0x0082: // GET_STATUS (endpoint)
		if ( setup.wIndex > NUM_ENDPOINTS )
    6714:	88ab      	ldrh	r3, [r5, #4]
    6716:	2b08      	cmp	r3, #8
    6718:	d869      	bhi.n	67ee <usb_isr+0x41e>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    671a:	4c9f      	ldr	r4, [pc, #636]	; (6998 <usb_isr+0x5c8>)
		reply_buffer[1] = 0;
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
    671c:	009a      	lsls	r2, r3, #2
    671e:	4b9f      	ldr	r3, [pc, #636]	; (699c <usb_isr+0x5cc>)
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    6720:	7021      	strb	r1, [r4, #0]
		reply_buffer[1] = 0;
    6722:	7061      	strb	r1, [r4, #1]
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
    6724:	5c9b      	ldrb	r3, [r3, r2]
    6726:	079b      	lsls	r3, r3, #30
    6728:	d56a      	bpl.n	6800 <usb_isr+0x430>
			reply_buffer[0] = 1;
    672a:	f884 8000 	strb.w	r8, [r4]
    672e:	e067      	b.n	6800 <usb_isr+0x430>
		warn_print("CLEAR_FEATURE - Device/Interface");
		endpoint0_stall();
		return;

	case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    6730:	88ab      	ldrh	r3, [r5, #4]
    6732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    6736:	2a08      	cmp	r2, #8
    6738:	dc59      	bgt.n	67ee <usb_isr+0x41e>
    673a:	8869      	ldrh	r1, [r5, #2]
    673c:	2900      	cmp	r1, #0
    673e:	d156      	bne.n	67ee <usb_isr+0x41e>
		{
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
    6740:	009a      	lsls	r2, r3, #2
    6742:	4b96      	ldr	r3, [pc, #600]	; (699c <usb_isr+0x5cc>)
    6744:	4413      	add	r3, r2
    6746:	781a      	ldrb	r2, [r3, #0]
    6748:	f022 0202 	bic.w	r2, r2, #2
    674c:	e04d      	b.n	67ea <usb_isr+0x41a>
		goto send;

	case 0x0300: // SET_FEATURE (device)
	case 0x0301: // SET_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_print("SET_FEATURE - Device/Interface");
    674e:	4894      	ldr	r0, [pc, #592]	; (69a0 <usb_isr+0x5d0>)
    6750:	e02f      	b.n	67b2 <usb_isr+0x3e2>
		endpoint0_stall();
		return;

	case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    6752:	88ab      	ldrh	r3, [r5, #4]
    6754:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    6758:	2a08      	cmp	r2, #8
    675a:	dc48      	bgt.n	67ee <usb_isr+0x41e>
    675c:	8869      	ldrh	r1, [r5, #2]
    675e:	2900      	cmp	r1, #0
    6760:	d145      	bne.n	67ee <usb_isr+0x41e>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) |= 0x02;
    6762:	009a      	lsls	r2, r3, #2
    6764:	4b8d      	ldr	r3, [pc, #564]	; (699c <usb_isr+0x5cc>)
    6766:	4413      	add	r3, r2
    6768:	781a      	ldrb	r2, [r3, #0]
    676a:	f042 0202 	orr.w	r2, r2, #2
    676e:	e03c      	b.n	67ea <usb_isr+0x41a>
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    6770:	f833 cc0c 	ldrh.w	ip, [r3, #-12]
    6774:	4594      	cmp	ip, r2
    6776:	d007      	beq.n	6788 <usb_isr+0x3b8>
    6778:	330c      	adds	r3, #12
		printHex( setup.wValue );
		print( NL );
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
    677a:	f853 4c08 	ldr.w	r4, [r3, #-8]
    677e:	f1a3 000c 	sub.w	r0, r3, #12
    6782:	2c00      	cmp	r4, #0
    6784:	d1f4      	bne.n	6770 <usb_isr+0x3a0>
    6786:	e032      	b.n	67ee <usb_isr+0x41e>
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    6788:	f833 cc0a 	ldrh.w	ip, [r3, #-10]
    678c:	458c      	cmp	ip, r1
    678e:	d1f3      	bne.n	6778 <usb_isr+0x3a8>
			{
				data = list->addr;
				if ( (setup.wValue >> 8) == 3 )
    6790:	0a12      	lsrs	r2, r2, #8
    6792:	2a03      	cmp	r2, #3
				{
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    6794:	bf0c      	ite	eq
    6796:	7821      	ldrbeq	r1, [r4, #0]
				}
				else
				{
					datalen = list->length;
    6798:	8901      	ldrhne	r1, [r0, #8]
    679a:	e032      	b.n	6802 <usb_isr+0x432>
		//serial_print("set coding, waiting...\n");
		return;

	case 0x0921: // HID SET_REPORT
		// Interface
		switch ( setup.wIndex & 0xFF )
    679c:	792b      	ldrb	r3, [r5, #4]
    679e:	2b01      	cmp	r3, #1
    67a0:	d958      	bls.n	6854 <usb_isr+0x484>
			break;
		// NKRO Keyboard Interface
		case NKRO_KEYBOARD_INTERFACE:
			break;
		default:
			warn_msg("Unknown interface - ");
    67a2:	4880      	ldr	r0, [pc, #512]	; (69a4 <usb_isr+0x5d4>)
    67a4:	f001 f82c 	bl	7800 <_print>
			printHex( setup.wIndex );
    67a8:	88a8      	ldrh	r0, [r5, #4]
    67aa:	4641      	mov	r1, r8
    67ac:	f001 f8b1 	bl	7912 <printHex_op>
			print( NL );
    67b0:	487d      	ldr	r0, [pc, #500]	; (69a8 <usb_isr+0x5d8>)
    67b2:	f001 f825 	bl	7800 <_print>
    67b6:	e01a      	b.n	67ee <usb_isr+0x41e>
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( list->wValue != 0x2200 )
    67b8:	f833 0c0c 	ldrh.w	r0, [r3, #-12]
    67bc:	f5b0 5f08 	cmp.w	r0, #8704	; 0x2200
    67c0:	d005      	beq.n	67ce <usb_isr+0x3fe>
    67c2:	330c      	adds	r3, #12
		print(NL);
		#endif
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
    67c4:	f853 4c08 	ldr.w	r4, [r3, #-8]
    67c8:	2c00      	cmp	r4, #0
    67ca:	d1f5      	bne.n	67b8 <usb_isr+0x3e8>
    67cc:	e00f      	b.n	67ee <usb_isr+0x41e>
				break;
			if ( list->wValue != 0x2200 )
				continue;
			if ( setup.wIndex == list->wIndex )
    67ce:	f833 0c0a 	ldrh.w	r0, [r3, #-10]
    67d2:	4290      	cmp	r0, r2
    67d4:	d1f5      	bne.n	67c2 <usb_isr+0x3f2>
			{
				data = list->addr;
				datalen = list->length;
    67d6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    67da:	e012      	b.n	6802 <usb_isr+0x432>
		#ifdef UART_DEBUG
		print("SET_IDLE - ");
		printHex( setup.wValue );
		print(NL);
		#endif
		USBKeys_Idle_Config = (setup.wValue >> 8);
    67dc:	886a      	ldrh	r2, [r5, #2]
    67de:	4b73      	ldr	r3, [pc, #460]	; (69ac <usb_isr+0x5dc>)
    67e0:	0a12      	lsrs	r2, r2, #8
    67e2:	701a      	strb	r2, [r3, #0]
		USBKeys_Idle_Count = 0;
    67e4:	4b72      	ldr	r3, [pc, #456]	; (69b0 <usb_isr+0x5e0>)
    67e6:	7019      	strb	r1, [r3, #0]
    67e8:	e008      	b.n	67fc <usb_isr+0x42c>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue & 0xFF );
		print(NL);
		#endif
		USBKeys_Protocol = setup.wValue & 0xFF; // 0 - Boot Mode, 1 - NKRO Mode
    67ea:	701a      	strb	r2, [r3, #0]
    67ec:	e006      	b.n	67fc <usb_isr+0x42c>
static void endpoint0_stall()
{
	#ifdef UART_DEBUG_UNKNOWN
	print("STALL" NL );
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    67ee:	4b6b      	ldr	r3, [pc, #428]	; (699c <usb_isr+0x5cc>)
    67f0:	220f      	movs	r2, #15
    67f2:	701a      	strb	r2, [r3, #0]
    67f4:	e02e      	b.n	6854 <usb_isr+0x484>
		//serial_print("set control line state\n");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)usb_cdc_line_coding;
		datalen = sizeof( usb_cdc_line_coding );
    67f6:	2107      	movs	r1, #7
		usb_cdc_line_rtsdtr = setup.wValue;
		//serial_print("set control line state\n");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)usb_cdc_line_coding;
    67f8:	4c6e      	ldr	r4, [pc, #440]	; (69b4 <usb_isr+0x5e4>)
    67fa:	e002      	b.n	6802 <usb_isr+0x432>
	ep0_tx_bdt_bank ^= 1;
}

static void usb_setup()
{
	const uint8_t *data = NULL;
    67fc:	460c      	mov	r4, r1
    67fe:	e000      	b.n	6802 <usb_isr+0x432>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
			reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    6800:	2102      	movs	r1, #2
	print(",");
	printHex( datalen );
	print( NL );
	#endif

	if ( datalen > setup.wLength )
    6802:	f8b5 8006 	ldrh.w	r8, [r5, #6]
    6806:	4541      	cmp	r1, r8
    6808:	bf38      	it	cc
    680a:	4688      	movcc	r8, r1
    680c:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    6810:	bf34      	ite	cc
    6812:	4645      	movcc	r5, r8
    6814:	2540      	movcs	r5, #64	; 0x40

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit(data, size);
    6816:	4620      	mov	r0, r4
    6818:	4629      	mov	r1, r5
    681a:	f7ff fcf9 	bl	6210 <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    681e:	ebb8 0805 	subs.w	r8, r8, r5
	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit(data, size);
	data += size;
    6822:	442c      	add	r4, r5
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6824:	d103      	bne.n	682e <usb_isr+0x45e>
    6826:	2d40      	cmp	r5, #64	; 0x40
    6828:	d114      	bne.n	6854 <usb_isr+0x484>
    682a:	4645      	mov	r5, r8
    682c:	e004      	b.n	6838 <usb_isr+0x468>
    682e:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    6832:	bf34      	ite	cc
    6834:	4645      	movcc	r5, r8
    6836:	2540      	movcs	r5, #64	; 0x40
		return;

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit(data, size);
    6838:	4620      	mov	r0, r4
    683a:	4629      	mov	r1, r5
    683c:	f7ff fce8 	bl	6210 <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6840:	ebb8 0805 	subs.w	r8, r8, r5

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6844:	442c      	add	r4, r5
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6846:	d101      	bne.n	684c <usb_isr+0x47c>
    6848:	2d40      	cmp	r5, #64	; 0x40
    684a:	d103      	bne.n	6854 <usb_isr+0x484>
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    684c:	4b5a      	ldr	r3, [pc, #360]	; (69b8 <usb_isr+0x5e8>)
	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
    684e:	603c      	str	r4, [r7, #0]
	ep0_tx_len = datalen;
    6850:	f8a3 8000 	strh.w	r8, [r3]
		print(NL);
		#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6854:	2201      	movs	r2, #1
    6856:	4b59      	ldr	r3, [pc, #356]	; (69bc <usb_isr+0x5ec>)
    6858:	e05a      	b.n	6910 <usb_isr+0x540>
		printHex32(setup.word2);
		print(NL);
		#endif

		// CDC Interface
		if ( setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/ )
    685a:	4d59      	ldr	r5, [pc, #356]	; (69c0 <usb_isr+0x5f0>)
    685c:	882b      	ldrh	r3, [r5, #0]
    685e:	f242 0121 	movw	r1, #8225	; 0x2021
    6862:	428b      	cmp	r3, r1
    6864:	d10e      	bne.n	6884 <usb_isr+0x4b4>
    6866:	2300      	movs	r3, #0
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for ( i = 0; i < 7; i++ )
			{
				//serial_phex(*buf);
				*dst++ = *buf++;
    6868:	4952      	ldr	r1, [pc, #328]	; (69b4 <usb_isr+0x5e4>)
    686a:	5cd0      	ldrb	r0, [r2, r3]
    686c:	5458      	strb	r0, [r3, r1]
		if ( setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/ )
		{
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for ( i = 0; i < 7; i++ )
    686e:	3301      	adds	r3, #1
    6870:	2b07      	cmp	r3, #7
    6872:	d1f9      	bne.n	6868 <usb_isr+0x498>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if ( usb_cdc_line_coding[0] == 134 )
    6874:	780b      	ldrb	r3, [r1, #0]
    6876:	2b86      	cmp	r3, #134	; 0x86
    6878:	d102      	bne.n	6880 <usb_isr+0x4b0>
				usb_reboot_timer = 15;
    687a:	4b52      	ldr	r3, [pc, #328]	; (69c4 <usb_isr+0x5f4>)
    687c:	220f      	movs	r2, #15
    687e:	701a      	strb	r2, [r3, #0]
			endpoint0_transmit( NULL, 0 );
    6880:	2000      	movs	r0, #0
    6882:	e010      	b.n	68a6 <usb_isr+0x4d6>
		}

		// Keyboard SET_REPORT
		if ( setup.wRequestAndType == 0x921 && setup.wValue & 0x200 )
    6884:	f640 1121 	movw	r1, #2337	; 0x921
    6888:	428b      	cmp	r3, r1
    688a:	d11a      	bne.n	68c2 <usb_isr+0x4f2>
    688c:	886b      	ldrh	r3, [r5, #2]
    688e:	059f      	lsls	r7, r3, #22
    6890:	d517      	bpl.n	68c2 <usb_isr+0x4f2>
		{
			// Interface
			switch ( setup.wIndex & 0xFF )
    6892:	7928      	ldrb	r0, [r5, #4]
    6894:	b120      	cbz	r0, 68a0 <usb_isr+0x4d0>
    6896:	2801      	cmp	r0, #1
    6898:	d109      	bne.n	68ae <usb_isr+0x4de>
				endpoint0_transmit( NULL, 0 );
				break;
			// NKRO Keyboard Interface
			case NKRO_KEYBOARD_INTERFACE:
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
    689a:	7852      	ldrb	r2, [r2, #1]
    689c:	4b4a      	ldr	r3, [pc, #296]	; (69c8 <usb_isr+0x5f8>)
    689e:	e7ee      	b.n	687e <usb_isr+0x4ae>
			// Interface
			switch ( setup.wIndex & 0xFF )
			{
			// Keyboard Interface
			case KEYBOARD_INTERFACE:
				USBKeys_LEDs = buf[0];
    68a0:	4b49      	ldr	r3, [pc, #292]	; (69c8 <usb_isr+0x5f8>)
    68a2:	7812      	ldrb	r2, [r2, #0]
    68a4:	701a      	strb	r2, [r3, #0]
				endpoint0_transmit( NULL, 0 );
    68a6:	4601      	mov	r1, r0
    68a8:	f7ff fcb2 	bl	6210 <endpoint0_transmit>
    68ac:	e009      	b.n	68c2 <usb_isr+0x4f2>
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
				endpoint0_transmit( NULL, 0 );
				break;
			default:
				warn_msg("Unknown interface - ");
    68ae:	483d      	ldr	r0, [pc, #244]	; (69a4 <usb_isr+0x5d4>)
    68b0:	f000 ffa6 	bl	7800 <_print>
				printHex( setup.wIndex );
    68b4:	88a8      	ldrh	r0, [r5, #4]
    68b6:	2101      	movs	r1, #1
    68b8:	f001 f82b 	bl	7912 <printHex_op>
				print( NL );
    68bc:	483a      	ldr	r0, [pc, #232]	; (69a8 <usb_isr+0x5d8>)
    68be:	f000 ff9f 	bl	7800 <_print>
			print( NL );
			#endif
		}

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    68c2:	4b42      	ldr	r3, [pc, #264]	; (69cc <usb_isr+0x5fc>)
    68c4:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
    68c8:	e023      	b.n	6912 <usb_isr+0x542>
		printHex(stat);
		print(NL);
		#endif

		// send remaining data, if any...
		data = ep0_tx_ptr;
    68ca:	4f41      	ldr	r7, [pc, #260]	; (69d0 <usb_isr+0x600>)
    68cc:	683d      	ldr	r5, [r7, #0]
		if ( data )
    68ce:	b1b5      	cbz	r5, 68fe <usb_isr+0x52e>
		{
			size = ep0_tx_len;
    68d0:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 69b8 <usb_isr+0x5e8>
    68d4:	f8b8 9000 	ldrh.w	r9, [r8]
    68d8:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
    68dc:	bf34      	ite	cc
    68de:	464c      	movcc	r4, r9
    68e0:	2440      	movcs	r4, #64	; 0x40
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
    68e2:	4628      	mov	r0, r5
    68e4:	4621      	mov	r1, r4
    68e6:	f7ff fc93 	bl	6210 <endpoint0_transmit>
			data += size;
			ep0_tx_len -= size;
    68ea:	ebc4 0309 	rsb	r3, r4, r9
    68ee:	b29b      	uxth	r3, r3
    68f0:	f8a8 3000 	strh.w	r3, [r8]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    68f4:	b90b      	cbnz	r3, 68fa <usb_isr+0x52a>
    68f6:	2c40      	cmp	r4, #64	; 0x40
    68f8:	d100      	bne.n	68fc <usb_isr+0x52c>
		if ( data )
		{
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    68fa:	192b      	adds	r3, r5, r4
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    68fc:	603b      	str	r3, [r7, #0]
		}

		if ( setup.bRequest == 5 && setup.bmRequestType == 0 )
    68fe:	4b30      	ldr	r3, [pc, #192]	; (69c0 <usb_isr+0x5f0>)
    6900:	881a      	ldrh	r2, [r3, #0]
    6902:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    6906:	d104      	bne.n	6912 <usb_isr+0x542>
		{
			setup.bRequest = 0;
    6908:	2200      	movs	r2, #0
    690a:	705a      	strb	r2, [r3, #1]
			#ifdef UART_DEBUG
			print("set address: ");
			printHex(setup.wValue);
			print(NL);
			#endif
			USB0_ADDR = setup.wValue;
    690c:	789a      	ldrb	r2, [r3, #2]
    690e:	4b31      	ldr	r3, [pc, #196]	; (69d4 <usb_isr+0x604>)
    6910:	701a      	strb	r2, [r3, #0]
		printHex(pid);
		print(NL);
		#endif
		break;
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6912:	2201      	movs	r2, #1
    6914:	4b29      	ldr	r3, [pc, #164]	; (69bc <usb_isr+0x5ec>)
    6916:	e093      	b.n	6a40 <usb_isr+0x670>
		{
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
    6918:	eb04 07c8 	add.w	r7, r4, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    691c:	3d01      	subs	r5, #1
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    691e:	687b      	ldr	r3, [r7, #4]
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays

			if ( stat & 0x08 )
    6920:	f002 0208 	and.w	r2, r2, #8
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6924:	f1a3 0008 	sub.w	r0, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    6928:	b2ed      	uxtb	r5, r5

			if ( stat & 0x08 )
    692a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    692e:	2a00      	cmp	r2, #0
    6930:	d05d      	beq.n	69ee <usb_isr+0x61e>
			{ // transmit
				usb_free( packet );
    6932:	f000 fab9 	bl	6ea8 <usb_free>
				packet = tx_first[ endpoint ];
    6936:	4828      	ldr	r0, [pc, #160]	; (69d8 <usb_isr+0x608>)
    6938:	4b28      	ldr	r3, [pc, #160]	; (69dc <usb_isr+0x60c>)
    693a:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
				if ( packet )
    693e:	b1ea      	cbz	r2, 697c <usb_isr+0x5ac>
				{
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    6940:	6851      	ldr	r1, [r2, #4]
    6942:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
					b->addr = packet->buf;
    6946:	f102 0108 	add.w	r1, r2, #8
    694a:	6079      	str	r1, [r7, #4]
					switch ( tx_state[ endpoint ] )
    694c:	5d59      	ldrb	r1, [r3, r5]
    694e:	2903      	cmp	r1, #3
    6950:	d80b      	bhi.n	696a <usb_isr+0x59a>
    6952:	e8df f001 	tbb	[pc, r1]
    6956:	0402      	.short	0x0402
    6958:	0806      	.short	0x0806
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[ endpoint ] = TX_STATE_ODD_FREE;
    695a:	2103      	movs	r1, #3
    695c:	e004      	b.n	6968 <usb_isr+0x598>
						break;
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[ endpoint ] = TX_STATE_EVEN_FREE;
    695e:	2102      	movs	r1, #2
    6960:	e002      	b.n	6968 <usb_isr+0x598>
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_ODD_FIRST;
    6962:	2105      	movs	r1, #5
    6964:	e000      	b.n	6968 <usb_isr+0x598>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_EVEN_FIRST;
    6966:	2104      	movs	r1, #4
    6968:	5559      	strb	r1, [r3, r5]
						break;
					default:
						break;
					}
					b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    696a:	f017 0f08 	tst.w	r7, #8
    696e:	8812      	ldrh	r2, [r2, #0]
    6970:	bf0c      	ite	eq
    6972:	2388      	moveq	r3, #136	; 0x88
    6974:	23c8      	movne	r3, #200	; 0xc8
    6976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    697a:	e069      	b.n	6a50 <usb_isr+0x680>
				} else {
					//serial_print("tx no packet\n");
					switch ( tx_state[ endpoint ] )
    697c:	5d5a      	ldrb	r2, [r3, r5]
    697e:	2a03      	cmp	r2, #3
    6980:	d82e      	bhi.n	69e0 <usb_isr+0x610>
    6982:	e8df f002 	tbb	[pc, r2]
    6986:	6767      	.short	0x6767
    6988:	0402      	.short	0x0402
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    698a:	2200      	movs	r2, #0
    698c:	e02d      	b.n	69ea <usb_isr+0x61a>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    698e:	2201      	movs	r2, #1
    6990:	e02b      	b.n	69ea <usb_isr+0x61a>
    6992:	bf00      	nop
    6994:	1fff92a3 	.word	0x1fff92a3
    6998:	1fff929b 	.word	0x1fff929b
    699c:	400720c0 	.word	0x400720c0
    69a0:	0000b1a8 	.word	0x0000b1a8
    69a4:	0000b1de 	.word	0x0000b1de
    69a8:	0000b26f 	.word	0x0000b26f
    69ac:	1fff8b8c 	.word	0x1fff8b8c
    69b0:	1fff9178 	.word	0x1fff9178
    69b4:	1fff8fd8 	.word	0x1fff8fd8
    69b8:	1fff9298 	.word	0x1fff9298
    69bc:	40072094 	.word	0x40072094
    69c0:	1fff9290 	.word	0x1fff9290
    69c4:	1fff920d 	.word	0x1fff920d
    69c8:	1fff9175 	.word	0x1fff9175
    69cc:	004000c8 	.word	0x004000c8
    69d0:	1fff9180 	.word	0x1fff9180
    69d4:	40072098 	.word	0x40072098
    69d8:	1fff9250 	.word	0x1fff9250
    69dc:	1fff91a4 	.word	0x1fff91a4
						break;
					default:
						tx_state[ endpoint ] = ((uint32_t)b & 8)
    69e0:	f017 0f08 	tst.w	r7, #8
    69e4:	bf0c      	ite	eq
    69e6:	2202      	moveq	r2, #2
    69e8:	2203      	movne	r2, #3
    69ea:	555a      	strb	r2, [r3, r5]
							? TX_STATE_ODD_FREE
							: TX_STATE_EVEN_FREE;
						break;
    69ec:	e032      	b.n	6a54 <usb_isr+0x684>
					}
				}
			}
			else
			{ // receive
				packet->len = b->desc >> 16;
    69ee:	f854 2038 	ldr.w	r2, [r4, r8, lsl #3]
    69f2:	0c12      	lsrs	r2, r2, #16
    69f4:	f823 2c08 	strh.w	r2, [r3, #-8]
				if ( packet->len > 0 )
    69f8:	b322      	cbz	r2, 6a44 <usb_isr+0x674>
				{
					packet->index = 0;
					packet->next = NULL;
					if ( rx_first[ endpoint ] == NULL )
    69fa:	f8df e104 	ldr.w	lr, [pc, #260]	; 6b00 <usb_isr+0x730>
			else
			{ // receive
				packet->len = b->desc >> 16;
				if ( packet->len > 0 )
				{
					packet->index = 0;
    69fe:	f823 1c06 	strh.w	r1, [r3, #-6]
					packet->next = NULL;
    6a02:	f843 1c04 	str.w	r1, [r3, #-4]
					if ( rx_first[ endpoint ] == NULL )
    6a06:	f85e 3025 	ldr.w	r3, [lr, r5, lsl #2]
    6a0a:	492f      	ldr	r1, [pc, #188]	; (6ac8 <usb_isr+0x6f8>)
    6a0c:	b913      	cbnz	r3, 6a14 <usb_isr+0x644>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[ endpoint ] = packet;
    6a0e:	f84e 0025 	str.w	r0, [lr, r5, lsl #2]
    6a12:	e002      	b.n	6a1a <usb_isr+0x64a>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
    6a14:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    6a18:	6058      	str	r0, [r3, #4]
					}
					rx_last[ endpoint ] = packet;
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    6a1a:	4b2c      	ldr	r3, [pc, #176]	; (6acc <usb_isr+0x6fc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
					}
					rx_last[ endpoint ] = packet;
    6a1c:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    6a20:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
    6a24:	440a      	add	r2, r1
    6a26:	f823 2015 	strh.w	r2, [r3, r5, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated packets
					// so a flood of incoming data on 1 endpoint doesn't starve
					// the others if the user isn't reading it regularly
					packet = usb_malloc();
    6a2a:	f000 fa1f 	bl	6e6c <usb_malloc>
					if ( packet )
    6a2e:	b110      	cbz	r0, 6a36 <usb_isr+0x666>
					{
						b->addr = packet->buf;
    6a30:	3008      	adds	r0, #8
    6a32:	6078      	str	r0, [r7, #4]
    6a34:	e006      	b.n	6a44 <usb_isr+0x674>
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
						usb_rx_memory_needed++;
    6a36:	4b26      	ldr	r3, [pc, #152]	; (6ad0 <usb_isr+0x700>)
					else
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
    6a38:	f844 0038 	str.w	r0, [r4, r8, lsl #3]
						usb_rx_memory_needed++;
    6a3c:	781a      	ldrb	r2, [r3, #0]
    6a3e:	3201      	adds	r2, #1
    6a40:	701a      	strb	r2, [r3, #0]
    6a42:	e007      	b.n	6a54 <usb_isr+0x684>
					}
				}
				else
				{
					b->desc = BDT_DESC( 64, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6a44:	4b23      	ldr	r3, [pc, #140]	; (6ad4 <usb_isr+0x704>)
    6a46:	4a24      	ldr	r2, [pc, #144]	; (6ad8 <usb_isr+0x708>)
    6a48:	f017 0f08 	tst.w	r7, #8
    6a4c:	bf08      	it	eq
    6a4e:	4613      	moveq	r3, r2
    6a50:	f844 3038 	str.w	r3, [r4, r8, lsl #3]




		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    6a54:	2308      	movs	r3, #8
    6a56:	7033      	strb	r3, [r6, #0]
		goto restart;
    6a58:	e4bc      	b.n	63d4 <usb_isr+0x4>
	}


	if ( status & USB_ISTAT_USBRST /* 01 */ )
    6a5a:	07e0      	lsls	r0, r4, #31
    6a5c:	d51f      	bpl.n	6a9e <usb_isr+0x6ce>
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6a5e:	491f      	ldr	r1, [pc, #124]	; (6adc <usb_isr+0x70c>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    6a60:	481d      	ldr	r0, [pc, #116]	; (6ad8 <usb_isr+0x708>)
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    6a62:	4c1f      	ldr	r4, [pc, #124]	; (6ae0 <usb_isr+0x710>)
	if ( status & USB_ISTAT_USBRST /* 01 */ )
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6a64:	2302      	movs	r3, #2
    6a66:	700b      	strb	r3, [r1, #0]
		ep0_tx_bdt_bank = 0;
    6a68:	4b1e      	ldr	r3, [pc, #120]	; (6ae4 <usb_isr+0x714>)
    6a6a:	701a      	strb	r2, [r3, #0]

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    6a6c:	4b1e      	ldr	r3, [pc, #120]	; (6ae8 <usb_isr+0x718>)
    6a6e:	6018      	str	r0, [r3, #0]
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
		table[index( 0, RX, ODD ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    6a70:	6098      	str	r0, [r3, #8]
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
    6a72:	481e      	ldr	r0, [pc, #120]	; (6aec <usb_isr+0x71c>)
    6a74:	60d8      	str	r0, [r3, #12]
		table[index( 0, TX, EVEN ) ].desc = 0;
    6a76:	611a      	str	r2, [r3, #16]
		table[index( 0, TX, ODD ) ].desc = 0;
    6a78:	619a      	str	r2, [r3, #24]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    6a7a:	605c      	str	r4, [r3, #4]
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
		table[index( 0, TX, EVEN ) ].desc = 0;
		table[index( 0, TX, ODD ) ].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6a7c:	4b1c      	ldr	r3, [pc, #112]	; (6af0 <usb_isr+0x720>)
    6a7e:	200d      	movs	r0, #13
    6a80:	7018      	strb	r0, [r3, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    6a82:	481c      	ldr	r0, [pc, #112]	; (6af4 <usb_isr+0x724>)
    6a84:	23ff      	movs	r3, #255	; 0xff
    6a86:	7003      	strb	r3, [r0, #0]
		USB0_ISTAT = 0xFF;
    6a88:	702b      	strb	r3, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    6a8a:	7402      	strb	r2, [r0, #16]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    6a8c:	4a1a      	ldr	r2, [pc, #104]	; (6af8 <usb_isr+0x728>)
    6a8e:	7013      	strb	r3, [r2, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    6a90:	4b1a      	ldr	r3, [pc, #104]	; (6afc <usb_isr+0x72c>)
    6a92:	229f      	movs	r2, #159	; 0x9f
    6a94:	701a      	strb	r2, [r3, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    6a96:	2301      	movs	r3, #1
    6a98:	700b      	strb	r3, [r1, #0]
		return;
    6a9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}


	if ( (status & USB_ISTAT_STALL /* 80 */ ) )
    6a9e:	0621      	lsls	r1, r4, #24
    6aa0:	d504      	bpl.n	6aac <usb_isr+0x6dc>
	{
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6aa2:	4b13      	ldr	r3, [pc, #76]	; (6af0 <usb_isr+0x720>)
    6aa4:	220d      	movs	r2, #13
    6aa6:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    6aa8:	2380      	movs	r3, #128	; 0x80
    6aaa:	702b      	strb	r3, [r5, #0]
	}
	if ( (status & USB_ISTAT_ERROR /* 02 */ ) )
    6aac:	07a2      	lsls	r2, r4, #30
    6aae:	d505      	bpl.n	6abc <usb_isr+0x6ec>
	{
		uint8_t err = USB0_ERRSTAT;
    6ab0:	4b10      	ldr	r3, [pc, #64]	; (6af4 <usb_isr+0x724>)
    6ab2:	781a      	ldrb	r2, [r3, #0]
    6ab4:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    6ab6:	701a      	strb	r2, [r3, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    6ab8:	2302      	movs	r3, #2
    6aba:	702b      	strb	r3, [r5, #0]
	}

	if ( (status & USB_ISTAT_SLEEP /* 10 */ ) )
    6abc:	06e3      	lsls	r3, r4, #27
	{
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    6abe:	bf44      	itt	mi
    6ac0:	2310      	movmi	r3, #16
    6ac2:	702b      	strbmi	r3, [r5, #0]
    6ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ac8:	1fff9184 	.word	0x1fff9184
    6acc:	1fffa20c 	.word	0x1fffa20c
    6ad0:	1fff929a 	.word	0x1fff929a
    6ad4:	004000c8 	.word	0x004000c8
    6ad8:	00400088 	.word	0x00400088
    6adc:	40072094 	.word	0x40072094
    6ae0:	1fff91ac 	.word	0x1fff91ac
    6ae4:	1fff920c 	.word	0x1fff920c
    6ae8:	1fff8000 	.word	0x1fff8000
    6aec:	1fff9210 	.word	0x1fff9210
    6af0:	400720c0 	.word	0x400720c0
    6af4:	40072088 	.word	0x40072088
    6af8:	4007208c 	.word	0x4007208c
    6afc:	40072084 	.word	0x40072084
    6b00:	1fff91ec 	.word	0x1fff91ec

00006b04 <usb_init>:
}



uint8_t usb_init()
{
    6b04:	2300      	movs	r3, #0
	#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
	{
		table[i].desc = 0;
    6b06:	4a21      	ldr	r2, [pc, #132]	; (6b8c <usb_init+0x88>)
    6b08:	2100      	movs	r1, #0
    6b0a:	5099      	str	r1, [r3, r2]
    6b0c:	18d0      	adds	r0, r2, r3
    6b0e:	3308      	adds	r3, #8
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    6b10:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
	{
		table[i].desc = 0;
		table[i].addr = 0;
    6b14:	6041      	str	r1, [r0, #4]
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    6b16:	d1f6      	bne.n	6b06 <usb_init+0x2>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    6b18:	4b1d      	ldr	r3, [pc, #116]	; (6b90 <usb_init+0x8c>)
    6b1a:	6819      	ldr	r1, [r3, #0]
    6b1c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    6b20:	6019      	str	r1, [r3, #0]

	// reset USB module
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
    6b22:	f503 3328 	add.w	r3, r3, #172032	; 0x2a000
    6b26:	33d8      	adds	r3, #216	; 0xd8
    6b28:	2180      	movs	r1, #128	; 0x80
    6b2a:	7019      	strb	r1, [r3, #0]
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end
    6b2c:	7818      	ldrb	r0, [r3, #0]
    6b2e:	4919      	ldr	r1, [pc, #100]	; (6b94 <usb_init+0x90>)
    6b30:	0600      	lsls	r0, r0, #24
    6b32:	d4fb      	bmi.n	6b2c <usb_init+0x28>

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    6b34:	4b18      	ldr	r3, [pc, #96]	; (6b98 <usb_init+0x94>)
    6b36:	f3c2 2007 	ubfx	r0, r2, #8, #8
    6b3a:	7018      	strb	r0, [r3, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    6b3c:	f3c2 4007 	ubfx	r0, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    6b40:	0e12      	lsrs	r2, r2, #24
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    6b42:	7518      	strb	r0, [r3, #20]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    6b44:	761a      	strb	r2, [r3, #24]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    6b46:	4a15      	ldr	r2, [pc, #84]	; (6b9c <usb_init+0x98>)
    6b48:	23ff      	movs	r3, #255	; 0xff
    6b4a:	7013      	strb	r3, [r2, #0]
	USB0_ERRSTAT = 0xFF;
    6b4c:	7213      	strb	r3, [r2, #8]
	USB0_OTGISTAT = 0xFF;
    6b4e:	f802 3c70 	strb.w	r3, [r2, #-112]

	USB0_USBTRC0 |= 0x40; // undocumented bit
    6b52:	780b      	ldrb	r3, [r1, #0]
    6b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6b58:	700b      	strb	r3, [r1, #0]

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    6b5a:	4b11      	ldr	r3, [pc, #68]	; (6ba0 <usb_init+0x9c>)
    6b5c:	2001      	movs	r0, #1
	USB0_USBCTRL = 0;
    6b5e:	2200      	movs	r2, #0
	USB0_OTGISTAT = 0xFF;

	USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    6b60:	7018      	strb	r0, [r3, #0]
	USB0_USBCTRL = 0;
    6b62:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    6b66:	f803 0c10 	strb.w	r0, [r3, #-16]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    6b6a:	4b0e      	ldr	r3, [pc, #56]	; (6ba4 <usb_init+0xa0>)
    6b6c:	2270      	movs	r2, #112	; 0x70
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    6b6e:	f46f 7150 	mvn.w	r1, #832	; 0x340

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    6b72:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    6b74:	440b      	add	r3, r1
    6b76:	f44f 7200 	mov.w	r2, #512	; 0x200
    6b7a:	601a      	str	r2, [r3, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    6b7c:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
    6b80:	f503 23c8 	add.w	r3, r3, #409600	; 0x64000
    6b84:	2210      	movs	r2, #16
    6b86:	701a      	strb	r2, [r3, #0]

	return 1;
}
    6b88:	4770      	bx	lr
    6b8a:	bf00      	nop
    6b8c:	1fff8000 	.word	0x1fff8000
    6b90:	40048034 	.word	0x40048034
    6b94:	4007210c 	.word	0x4007210c
    6b98:	4007209c 	.word	0x4007209c
    6b9c:	40072080 	.word	0x40072080
    6ba0:	40072094 	.word	0x40072094
    6ba4:	e000e449 	.word	0xe000e449

00006ba8 <usb_keyboard_send>:

// ----- Functions -----

// send the contents of keyboard_keys and keyboard_modifier_keys
void usb_keyboard_send()
{
    6ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bac:	f246 4501 	movw	r5, #25601	; 0x6401
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    6bb0:	4b99      	ldr	r3, [pc, #612]	; (6e18 <usb_keyboard_send+0x270>)
    6bb2:	781b      	ldrb	r3, [r3, #0]
    6bb4:	b90b      	cbnz	r3, 6bba <usb_keyboard_send+0x12>
		{
			erro_print("USB not configured...");
    6bb6:	4899      	ldr	r0, [pc, #612]	; (6e1c <usb_keyboard_send+0x274>)
    6bb8:	e023      	b.n	6c02 <usb_keyboard_send+0x5a>
			return;
		}

		if ( USBKeys_Protocol == 0 ) // Boot Mode
    6bba:	4b99      	ldr	r3, [pc, #612]	; (6e20 <usb_keyboard_send+0x278>)
    6bbc:	781a      	ldrb	r2, [r3, #0]
    6bbe:	461e      	mov	r6, r3
    6bc0:	b942      	cbnz	r2, 6bd4 <usb_keyboard_send+0x2c>
		{
			if ( usb_tx_packet_count( KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    6bc2:	2001      	movs	r0, #1
    6bc4:	f7ff fb60 	bl	6288 <usb_tx_packet_count>
    6bc8:	2803      	cmp	r0, #3
    6bca:	d90f      	bls.n	6bec <usb_keyboard_send+0x44>
				if ( tx_packet )
					break;
			}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    6bcc:	3d01      	subs	r5, #1
    6bce:	4b95      	ldr	r3, [pc, #596]	; (6e24 <usb_keyboard_send+0x27c>)
    6bd0:	d112      	bne.n	6bf8 <usb_keyboard_send+0x50>
    6bd2:	e013      	b.n	6bfc <usb_keyboard_send+0x54>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Protocol == 1 ) // NKRO Mode
    6bd4:	781b      	ldrb	r3, [r3, #0]
    6bd6:	2b01      	cmp	r3, #1
    6bd8:	d101      	bne.n	6bde <usb_keyboard_send+0x36>
		{
			if ( usb_tx_packet_count( NKRO_KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    6bda:	2002      	movs	r0, #2
    6bdc:	e7f2      	b.n	6bc4 <usb_keyboard_send+0x1c>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Changed &
    6bde:	4b92      	ldr	r3, [pc, #584]	; (6e28 <usb_keyboard_send+0x280>)
    6be0:	781b      	ldrb	r3, [r3, #0]
    6be2:	f013 0f60 	tst.w	r3, #96	; 0x60
    6be6:	d0f1      	beq.n	6bcc <usb_keyboard_send+0x24>
			( USBKeyChangeState_System | USBKeyChangeState_Consumer )
		)
		{
			if ( usb_tx_packet_count( SYS_CTRL_ENDPOINT ) < TX_PACKET_LIMIT )
    6be8:	2008      	movs	r0, #8
    6bea:	e7eb      	b.n	6bc4 <usb_keyboard_send+0x1c>
			{
				tx_packet = usb_malloc();
    6bec:	f000 f93e 	bl	6e6c <usb_malloc>
				if ( tx_packet )
    6bf0:	4604      	mov	r4, r0
    6bf2:	2800      	cmp	r0, #0
    6bf4:	d0ea      	beq.n	6bcc <usb_keyboard_send+0x24>
    6bf6:	e00b      	b.n	6c10 <usb_keyboard_send+0x68>
					break;
			}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    6bf8:	781a      	ldrb	r2, [r3, #0]
    6bfa:	b132      	cbz	r2, 6c0a <usb_keyboard_send+0x62>
		{
			transmit_previous_timeout = 1;
    6bfc:	2201      	movs	r2, #1
			warn_print("USB Transmit Timeout...");
    6bfe:	488b      	ldr	r0, [pc, #556]	; (6e2c <usb_keyboard_send+0x284>)
			}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
    6c00:	701a      	strb	r2, [r3, #0]

		break;
	}

	return;
}
    6c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
			warn_print("USB Transmit Timeout...");
    6c06:	f000 bdfb 	b.w	7800 <_print>
			return;
		}
		yield();
    6c0a:	f7fb fcbe 	bl	258a <yield>
	}
    6c0e:	e7cf      	b.n	6bb0 <usb_keyboard_send+0x8>

	// Pointer to USB tx packet buffer
	uint8_t *tx_buf = tx_packet->buf;

	// Check system control keys
	if ( USBKeys_Changed & USBKeyChangeState_System )
    6c10:	4d85      	ldr	r5, [pc, #532]	; (6e28 <usb_keyboard_send+0x280>)
    6c12:	782b      	ldrb	r3, [r5, #0]
    6c14:	069a      	lsls	r2, r3, #26
    6c16:	d51a      	bpl.n	6c4e <usb_keyboard_send+0xa6>
	{
		if ( Output_DebugMode )
    6c18:	4b85      	ldr	r3, [pc, #532]	; (6e30 <usb_keyboard_send+0x288>)
    6c1a:	4e86      	ldr	r6, [pc, #536]	; (6e34 <usb_keyboard_send+0x28c>)
    6c1c:	781b      	ldrb	r3, [r3, #0]
    6c1e:	b14b      	cbz	r3, 6c34 <usb_keyboard_send+0x8c>
		{
			print("SysCtrl[");
    6c20:	4885      	ldr	r0, [pc, #532]	; (6e38 <usb_keyboard_send+0x290>)
    6c22:	f000 fded 	bl	7800 <_print>
			printHex_op( USBKeys_SysCtrl, 2 );
    6c26:	7830      	ldrb	r0, [r6, #0]
    6c28:	2102      	movs	r1, #2
    6c2a:	f000 fe72 	bl	7912 <printHex_op>
			print( "] " NL );
    6c2e:	4883      	ldr	r0, [pc, #524]	; (6e3c <usb_keyboard_send+0x294>)
    6c30:	f000 fde6 	bl	7800 <_print>
		}

		*tx_buf++ = 0x02; // ID
    6c34:	2302      	movs	r3, #2
		*tx_buf   = USBKeys_SysCtrl;
    6c36:	7832      	ldrb	r2, [r6, #0]
			print("SysCtrl[");
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
    6c38:	7223      	strb	r3, [r4, #8]
		*tx_buf   = USBKeys_SysCtrl;
		tx_packet->len = 2;
    6c3a:	8023      	strh	r3, [r4, #0]
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
		*tx_buf   = USBKeys_SysCtrl;
    6c3c:	7262      	strb	r2, [r4, #9]
		tx_packet->len = 2;

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    6c3e:	2008      	movs	r0, #8
    6c40:	4621      	mov	r1, r4
    6c42:	f7ff fb6f 	bl	6324 <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_System; // Mark sent
    6c46:	782b      	ldrb	r3, [r5, #0]
    6c48:	f023 0320 	bic.w	r3, r3, #32
    6c4c:	e0e0      	b.n	6e10 <usb_keyboard_send+0x268>
		return;
	}

	// Check consumer control keys
	if ( USBKeys_Changed & USBKeyChangeState_Consumer )
    6c4e:	065b      	lsls	r3, r3, #25
    6c50:	d51c      	bpl.n	6c8c <usb_keyboard_send+0xe4>
	{
		if ( Output_DebugMode )
    6c52:	4b77      	ldr	r3, [pc, #476]	; (6e30 <usb_keyboard_send+0x288>)
    6c54:	4e7a      	ldr	r6, [pc, #488]	; (6e40 <usb_keyboard_send+0x298>)
    6c56:	781b      	ldrb	r3, [r3, #0]
    6c58:	b14b      	cbz	r3, 6c6e <usb_keyboard_send+0xc6>
		{
			print("ConsCtrl[");
    6c5a:	487a      	ldr	r0, [pc, #488]	; (6e44 <usb_keyboard_send+0x29c>)
    6c5c:	f000 fdd0 	bl	7800 <_print>
			printHex_op( USBKeys_ConsCtrl, 2 );
    6c60:	8830      	ldrh	r0, [r6, #0]
    6c62:	2102      	movs	r1, #2
    6c64:	f000 fe55 	bl	7912 <printHex_op>
			print( "] " NL );
    6c68:	4874      	ldr	r0, [pc, #464]	; (6e3c <usb_keyboard_send+0x294>)
    6c6a:	f000 fdc9 	bl	7800 <_print>
		}

		*tx_buf++ = 0x03; // ID
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
    6c6e:	8832      	ldrh	r2, [r6, #0]
    6c70:	7262      	strb	r2, [r4, #9]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    6c72:	2303      	movs	r3, #3
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
    6c74:	0a12      	lsrs	r2, r2, #8
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    6c76:	7223      	strb	r3, [r4, #8]
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
		tx_packet->len = 3;
    6c78:	8023      	strh	r3, [r4, #0]
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
    6c7a:	72a2      	strb	r2, [r4, #10]
		tx_packet->len = 3;

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    6c7c:	2008      	movs	r0, #8
    6c7e:	4621      	mov	r1, r4
    6c80:	f7ff fb50 	bl	6324 <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_Consumer; // Mark sent
    6c84:	782b      	ldrb	r3, [r5, #0]
    6c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    6c8a:	e0c1      	b.n	6e10 <usb_keyboard_send+0x268>
		return;
	}

	switch ( USBKeys_Protocol )
    6c8c:	7833      	ldrb	r3, [r6, #0]
    6c8e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    6c92:	b11b      	cbz	r3, 6c9c <usb_keyboard_send+0xf4>
    6c94:	2e01      	cmp	r6, #1
    6c96:	d045      	beq.n	6d24 <usb_keyboard_send+0x17c>
    6c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	{
	// Send boot keyboard interrupt packet(s)
	case 0:
		// USB Boot Mode debug output
		if ( Output_DebugMode )
    6c9c:	4b64      	ldr	r3, [pc, #400]	; (6e30 <usb_keyboard_send+0x288>)
    6c9e:	4f6a      	ldr	r7, [pc, #424]	; (6e48 <usb_keyboard_send+0x2a0>)
    6ca0:	781b      	ldrb	r3, [r3, #0]
    6ca2:	b363      	cbz	r3, 6cfe <usb_keyboard_send+0x156>
		{
			dbug_msg("Boot USB: ");
    6ca4:	4869      	ldr	r0, [pc, #420]	; (6e4c <usb_keyboard_send+0x2a4>)
    6ca6:	f000 fdab 	bl	7800 <_print>
			printHex_op( USBKeys_Modifiers, 2 );
    6caa:	2102      	movs	r1, #2
    6cac:	7838      	ldrb	r0, [r7, #0]
    6cae:	f000 fe30 	bl	7912 <printHex_op>
			print(" ");
    6cb2:	4867      	ldr	r0, [pc, #412]	; (6e50 <usb_keyboard_send+0x2a8>)
    6cb4:	f000 fda4 	bl	7800 <_print>
			printHex( 0 );
    6cb8:	4630      	mov	r0, r6
    6cba:	2101      	movs	r1, #1
			print(" ");
			printHex_op( USBKeys_Keys[0], 2 );
    6cbc:	4e65      	ldr	r6, [pc, #404]	; (6e54 <usb_keyboard_send+0x2ac>)
		if ( Output_DebugMode )
		{
			dbug_msg("Boot USB: ");
			printHex_op( USBKeys_Modifiers, 2 );
			print(" ");
			printHex( 0 );
    6cbe:	f000 fe28 	bl	7912 <printHex_op>
			print(" ");
    6cc2:	4863      	ldr	r0, [pc, #396]	; (6e50 <usb_keyboard_send+0x2a8>)
    6cc4:	f000 fd9c 	bl	7800 <_print>
			printHex_op( USBKeys_Keys[0], 2 );
    6cc8:	7830      	ldrb	r0, [r6, #0]
    6cca:	2102      	movs	r1, #2
    6ccc:	f000 fe21 	bl	7912 <printHex_op>
			printHex_op( USBKeys_Keys[1], 2 );
    6cd0:	7870      	ldrb	r0, [r6, #1]
    6cd2:	2102      	movs	r1, #2
    6cd4:	f000 fe1d 	bl	7912 <printHex_op>
			printHex_op( USBKeys_Keys[2], 2 );
    6cd8:	78b0      	ldrb	r0, [r6, #2]
    6cda:	2102      	movs	r1, #2
    6cdc:	f000 fe19 	bl	7912 <printHex_op>
			printHex_op( USBKeys_Keys[3], 2 );
    6ce0:	78f0      	ldrb	r0, [r6, #3]
    6ce2:	2102      	movs	r1, #2
    6ce4:	f000 fe15 	bl	7912 <printHex_op>
			printHex_op( USBKeys_Keys[4], 2 );
    6ce8:	7930      	ldrb	r0, [r6, #4]
    6cea:	2102      	movs	r1, #2
    6cec:	f000 fe11 	bl	7912 <printHex_op>
			printHex_op( USBKeys_Keys[5], 2 );
    6cf0:	7970      	ldrb	r0, [r6, #5]
    6cf2:	2102      	movs	r1, #2
    6cf4:	f000 fe0d 	bl	7912 <printHex_op>
			print( NL );
    6cf8:	4857      	ldr	r0, [pc, #348]	; (6e58 <usb_keyboard_send+0x2b0>)
    6cfa:	f000 fd81 	bl	7800 <_print>
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
    6cfe:	783b      	ldrb	r3, [r7, #0]
    6d00:	7223      	strb	r3, [r4, #8]
		*tx_buf++ = 0;
    6d02:	2600      	movs	r6, #0
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    6d04:	4953      	ldr	r1, [pc, #332]	; (6e54 <usb_keyboard_send+0x2ac>)
			print( NL );
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
		*tx_buf++ = 0;
    6d06:	7266      	strb	r6, [r4, #9]
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    6d08:	2206      	movs	r2, #6
    6d0a:	f104 000a 	add.w	r0, r4, #10
    6d0e:	f7fb fc33 	bl	2578 <memcpy>
		tx_packet->len = 8;
    6d12:	2308      	movs	r3, #8
    6d14:	8023      	strh	r3, [r4, #0]

		// Send USB Packet
		usb_tx( KEYBOARD_ENDPOINT, tx_packet );
    6d16:	2001      	movs	r0, #1
    6d18:	4621      	mov	r1, r4
    6d1a:	f7ff fb03 	bl	6324 <usb_tx>
		USBKeys_Changed = USBKeyChangeState_None;
    6d1e:	702e      	strb	r6, [r5, #0]
		break;
    6d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	// Send NKRO keyboard interrupts packet(s)
	case 1:
		if ( Output_DebugMode )
    6d24:	4b42      	ldr	r3, [pc, #264]	; (6e30 <usb_keyboard_send+0x288>)
    6d26:	781a      	ldrb	r2, [r3, #0]
    6d28:	461e      	mov	r6, r3
    6d2a:	b112      	cbz	r2, 6d32 <usb_keyboard_send+0x18a>
		{
			dbug_msg("NKRO USB: ");
    6d2c:	484b      	ldr	r0, [pc, #300]	; (6e5c <usb_keyboard_send+0x2b4>)
    6d2e:	f000 fd67 	bl	7800 <_print>
		}

		// Standard HID Keyboard
		if ( USBKeys_Changed )
    6d32:	782b      	ldrb	r3, [r5, #0]
    6d34:	2b00      	cmp	r3, #0
    6d36:	d06c      	beq.n	6e12 <usb_keyboard_send+0x26a>
		{
			// USB NKRO Debug output
			if ( Output_DebugMode )
    6d38:	7833      	ldrb	r3, [r6, #0]
    6d3a:	4f43      	ldr	r7, [pc, #268]	; (6e48 <usb_keyboard_send+0x2a0>)
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d036      	beq.n	6dae <usb_keyboard_send+0x206>
			{
				printHex_op( USBKeys_Modifiers, 2 );
    6d40:	7838      	ldrb	r0, [r7, #0]
    6d42:	2102      	movs	r1, #2
    6d44:	f000 fde5 	bl	7912 <printHex_op>
				print(" ");
    6d48:	4841      	ldr	r0, [pc, #260]	; (6e50 <usb_keyboard_send+0x2a8>)
    6d4a:	f000 fd59 	bl	7800 <_print>
    6d4e:	2600      	movs	r6, #0
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    6d50:	f8df 8100 	ldr.w	r8, [pc, #256]	; 6e54 <usb_keyboard_send+0x2ac>
    6d54:	2102      	movs	r1, #2
    6d56:	f818 0006 	ldrb.w	r0, [r8, r6]
    6d5a:	3601      	adds	r6, #1
    6d5c:	f000 fdd9 	bl	7912 <printHex_op>
			// USB NKRO Debug output
			if ( Output_DebugMode )
			{
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
    6d60:	2e06      	cmp	r6, #6
    6d62:	d1f5      	bne.n	6d50 <usb_keyboard_send+0x1a8>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    6d64:	483a      	ldr	r0, [pc, #232]	; (6e50 <usb_keyboard_send+0x2a8>)
    6d66:	f000 fd4b 	bl	7800 <_print>
    6d6a:	2600      	movs	r6, #0
    6d6c:	eb08 0306 	add.w	r3, r8, r6
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    6d70:	2102      	movs	r1, #2
    6d72:	7998      	ldrb	r0, [r3, #6]
    6d74:	3601      	adds	r6, #1
    6d76:	f000 fdcc 	bl	7912 <printHex_op>
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				for ( uint8_t c = 6; c < 20; c++ )
    6d7a:	2e0e      	cmp	r6, #14
    6d7c:	d1f6      	bne.n	6d6c <usb_keyboard_send+0x1c4>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    6d7e:	4834      	ldr	r0, [pc, #208]	; (6e50 <usb_keyboard_send+0x2a8>)
    6d80:	f000 fd3e 	bl	7800 <_print>
				printHex_op( USBKeys_Keys[20], 2 );
    6d84:	4b33      	ldr	r3, [pc, #204]	; (6e54 <usb_keyboard_send+0x2ac>)
    6d86:	2102      	movs	r1, #2
    6d88:	7d18      	ldrb	r0, [r3, #20]
    6d8a:	f000 fdc2 	bl	7912 <printHex_op>
				print(" ");
    6d8e:	4830      	ldr	r0, [pc, #192]	; (6e50 <usb_keyboard_send+0x2a8>)
    6d90:	f000 fd36 	bl	7800 <_print>
    6d94:	2600      	movs	r6, #0
    6d96:	eb08 0306 	add.w	r3, r8, r6
				for ( uint8_t c = 21; c < 27; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    6d9a:	2102      	movs	r1, #2
    6d9c:	7d58      	ldrb	r0, [r3, #21]
    6d9e:	3601      	adds	r6, #1
    6da0:	f000 fdb7 	bl	7912 <printHex_op>
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				printHex_op( USBKeys_Keys[20], 2 );
				print(" ");
				for ( uint8_t c = 21; c < 27; c++ )
    6da4:	2e06      	cmp	r6, #6
    6da6:	d1f6      	bne.n	6d96 <usb_keyboard_send+0x1ee>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print( NL );
    6da8:	482b      	ldr	r0, [pc, #172]	; (6e58 <usb_keyboard_send+0x2b0>)
    6daa:	f000 fd29 	bl	7800 <_print>
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    6dae:	4620      	mov	r0, r4

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
    6db0:	783b      	ldrb	r3, [r7, #0]
    6db2:	7263      	strb	r3, [r4, #9]
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    6db4:	f04f 0801 	mov.w	r8, #1
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    6db8:	2602      	movs	r6, #2
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    6dba:	f884 8008 	strb.w	r8, [r4, #8]
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    6dbe:	4925      	ldr	r1, [pc, #148]	; (6e54 <usb_keyboard_send+0x2ac>)
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    6dc0:	f820 6b0a 	strh.w	r6, [r0], #10

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    6dc4:	2206      	movs	r2, #6
    6dc6:	f7fb fbd7 	bl	2578 <memcpy>
			tx_buf += 6;
			tx_packet->len += 6;
    6dca:	8822      	ldrh	r2, [r4, #0]

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    6dcc:	4924      	ldr	r1, [pc, #144]	; (6e60 <usb_keyboard_send+0x2b8>)
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
			tx_buf += 6;
			tx_packet->len += 6;
    6dce:	4620      	mov	r0, r4
    6dd0:	3206      	adds	r2, #6
    6dd2:	f820 2b10 	strh.w	r2, [r0], #16

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    6dd6:	220e      	movs	r2, #14
    6dd8:	f7fb fbce 	bl	2578 <memcpy>
			tx_buf += 14;
			tx_packet->len += 14;
    6ddc:	8822      	ldrh	r2, [r4, #0]

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    6dde:	4921      	ldr	r1, [pc, #132]	; (6e64 <usb_keyboard_send+0x2bc>)
			tx_packet->len += 6;

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
			tx_buf += 14;
			tx_packet->len += 14;
    6de0:	4620      	mov	r0, r4
    6de2:	320e      	adds	r2, #14
    6de4:	f820 2b1e 	strh.w	r2, [r0], #30

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    6de8:	4642      	mov	r2, r8
    6dea:	f7fb fbc5 	bl	2578 <memcpy>
			tx_buf += 1;
			tx_packet->len += 1;
    6dee:	8822      	ldrh	r2, [r4, #0]

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    6df0:	491d      	ldr	r1, [pc, #116]	; (6e68 <usb_keyboard_send+0x2c0>)
			tx_packet->len += 14;

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
			tx_buf += 1;
			tx_packet->len += 1;
    6df2:	4620      	mov	r0, r4
    6df4:	4442      	add	r2, r8
    6df6:	f820 2b1f 	strh.w	r2, [r0], #31

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    6dfa:	2206      	movs	r2, #6
    6dfc:	f7fb fbbc 	bl	2578 <memcpy>
			tx_packet->len += 6;
    6e00:	8823      	ldrh	r3, [r4, #0]
    6e02:	3306      	adds	r3, #6
    6e04:	8023      	strh	r3, [r4, #0]

			// Send USB Packet
			usb_tx( NKRO_KEYBOARD_ENDPOINT, tx_packet );
    6e06:	4630      	mov	r0, r6
    6e08:	4621      	mov	r1, r4
    6e0a:	f7ff fa8b 	bl	6324 <usb_tx>
			USBKeys_Changed = USBKeyChangeState_None; // Mark sent
    6e0e:	2300      	movs	r3, #0
    6e10:	702b      	strb	r3, [r5, #0]
    6e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e16:	bf00      	nop
    6e18:	1fff92a3 	.word	0x1fff92a3
    6e1c:	0000b208 	.word	0x0000b208
    6e20:	1fff8b8d 	.word	0x1fff8b8d
    6e24:	1fff92a5 	.word	0x1fff92a5
    6e28:	1fff9177 	.word	0x1fff9177
    6e2c:	0000b235 	.word	0x0000b235
    6e30:	1fff9179 	.word	0x1fff9179
    6e34:	1fffa1d2 	.word	0x1fffa1d2
    6e38:	0000b264 	.word	0x0000b264
    6e3c:	0000b26d 	.word	0x0000b26d
    6e40:	1fffa20a 	.word	0x1fffa20a
    6e44:	0000b272 	.word	0x0000b272
    6e48:	1fff9176 	.word	0x1fff9176
    6e4c:	0000b27c 	.word	0x0000b27c
    6e50:	00008152 	.word	0x00008152
    6e54:	1fffa1d3 	.word	0x1fffa1d3
    6e58:	0000b26f 	.word	0x0000b26f
    6e5c:	0000b29a 	.word	0x0000b29a
    6e60:	1fffa1d9 	.word	0x1fffa1d9
    6e64:	1fffa1e7 	.word	0x1fffa1e7
    6e68:	1fffa1e8 	.word	0x1fffa1e8

00006e6c <usb_malloc>:
usb_packet_t *usb_malloc()
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    6e6c:	b672      	cpsid	i
	avail = usb_buffer_available;
    6e6e:	4a0c      	ldr	r2, [pc, #48]	; (6ea0 <usb_malloc+0x34>)
    6e70:	6811      	ldr	r1, [r2, #0]
	n = __builtin_clz( avail ); // clz = count leading zeros
    6e72:	fab1 f381 	clz	r3, r1
	if ( n >= NUM_USB_BUFFERS )
    6e76:	2b1d      	cmp	r3, #29
    6e78:	d902      	bls.n	6e80 <usb_malloc+0x14>
	{
		__enable_irq();
    6e7a:	b662      	cpsie	i
		return NULL;
    6e7c:	2000      	movs	r0, #0
    6e7e:	4770      	bx	lr
	}

	usb_buffer_available = avail & ~(0x80000000 >> n);
    6e80:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    6e84:	40d8      	lsrs	r0, r3
    6e86:	ea21 0100 	bic.w	r1, r1, r0
    6e8a:	6011      	str	r1, [r2, #0]
	__enable_irq();
    6e8c:	b662      	cpsie	i
	p = usb_buffer_memory + ( n * sizeof(usb_packet_t) );
    6e8e:	4905      	ldr	r1, [pc, #20]	; (6ea4 <usb_malloc+0x38>)
    6e90:	2248      	movs	r2, #72	; 0x48
    6e92:	4353      	muls	r3, r2
    6e94:	18c8      	adds	r0, r1, r3
	*(uint32_t *)p = 0;
    6e96:	2200      	movs	r2, #0
    6e98:	50ca      	str	r2, [r1, r3]
	*(uint32_t *)(p + 4) = 0;
    6e9a:	6042      	str	r2, [r0, #4]
	return (usb_packet_t *)p;
}
    6e9c:	4770      	bx	lr
    6e9e:	bf00      	nop
    6ea0:	1fff8fd4 	.word	0x1fff8fd4
    6ea4:	1fff8120 	.word	0x1fff8120

00006ea8 <usb_free>:

void usb_free( usb_packet_t *p )
{
	unsigned int n, mask;

	n = ( (uint8_t *)p - usb_buffer_memory ) / sizeof(usb_packet_t);
    6ea8:	4b0c      	ldr	r3, [pc, #48]	; (6edc <usb_free+0x34>)
    6eaa:	2248      	movs	r2, #72	; 0x48
    6eac:	1ac3      	subs	r3, r0, r3
    6eae:	fbb3 f3f2 	udiv	r3, r3, r2
	if ( n >= NUM_USB_BUFFERS )
    6eb2:	2b1d      	cmp	r3, #29
    6eb4:	d811      	bhi.n	6eda <usb_free+0x32>
		return;

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if ( usb_rx_memory_needed && usb_configuration )
    6eb6:	4a0a      	ldr	r2, [pc, #40]	; (6ee0 <usb_free+0x38>)
    6eb8:	7812      	ldrb	r2, [r2, #0]
    6eba:	b122      	cbz	r2, 6ec6 <usb_free+0x1e>
    6ebc:	4a09      	ldr	r2, [pc, #36]	; (6ee4 <usb_free+0x3c>)
    6ebe:	7812      	ldrb	r2, [r2, #0]
    6ec0:	b10a      	cbz	r2, 6ec6 <usb_free+0x1e>
	{
		usb_rx_memory( p );
    6ec2:	f7ff b9f3 	b.w	62ac <usb_rx_memory>
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    6ec6:	b672      	cpsid	i
	usb_buffer_available |= mask;
    6ec8:	4a07      	ldr	r2, [pc, #28]	; (6ee8 <usb_free+0x40>)
	{
		usb_rx_memory( p );
		return;
	}

	mask = (0x80000000 >> n);
    6eca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    6ece:	fa21 f303 	lsr.w	r3, r1, r3
	__disable_irq();
	usb_buffer_available |= mask;
    6ed2:	6811      	ldr	r1, [r2, #0]
    6ed4:	4319      	orrs	r1, r3
    6ed6:	6011      	str	r1, [r2, #0]
	__enable_irq();
    6ed8:	b662      	cpsie	i
    6eda:	4770      	bx	lr
    6edc:	1fff8120 	.word	0x1fff8120
    6ee0:	1fff929a 	.word	0x1fff929a
    6ee4:	1fff92a3 	.word	0x1fff92a3
    6ee8:	1fff8fd4 	.word	0x1fff8fd4

00006eec <usb_serial_getchar>:

// ----- Functions -----

// get the next character, or -1 if nothing received
int usb_serial_getchar()
{
    6eec:	b510      	push	{r4, lr}
	unsigned int i;
	int c;

	if ( !rx_packet )
    6eee:	4c10      	ldr	r4, [pc, #64]	; (6f30 <usb_serial_getchar+0x44>)
    6ef0:	6823      	ldr	r3, [r4, #0]
    6ef2:	b16b      	cbz	r3, 6f10 <usb_serial_getchar+0x24>
			return -1;
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
		if ( !rx_packet )
			return -1;
	}
	i = rx_packet->index;
    6ef4:	6820      	ldr	r0, [r4, #0]
    6ef6:	8842      	ldrh	r2, [r0, #2]
	c = rx_packet->buf[i++];
    6ef8:	1c53      	adds	r3, r2, #1
    6efa:	4402      	add	r2, r0
    6efc:	7a14      	ldrb	r4, [r2, #8]
	if ( i >= rx_packet->len )
    6efe:	8802      	ldrh	r2, [r0, #0]
    6f00:	4293      	cmp	r3, r2
    6f02:	d312      	bcc.n	6f2a <usb_serial_getchar+0x3e>
	{
		usb_free( rx_packet );
    6f04:	f7ff ffd0 	bl	6ea8 <usb_free>
		rx_packet = NULL;
    6f08:	4b09      	ldr	r3, [pc, #36]	; (6f30 <usb_serial_getchar+0x44>)
    6f0a:	2200      	movs	r2, #0
    6f0c:	601a      	str	r2, [r3, #0]
    6f0e:	e00d      	b.n	6f2c <usb_serial_getchar+0x40>
	unsigned int i;
	int c;

	if ( !rx_packet )
	{
		if ( !usb_configuration )
    6f10:	4b08      	ldr	r3, [pc, #32]	; (6f34 <usb_serial_getchar+0x48>)
    6f12:	781b      	ldrb	r3, [r3, #0]
    6f14:	b913      	cbnz	r3, 6f1c <usb_serial_getchar+0x30>
			return -1;
    6f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6f1a:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
    6f1c:	2004      	movs	r0, #4
    6f1e:	f7ff f997 	bl	6250 <usb_rx>
    6f22:	6020      	str	r0, [r4, #0]
		if ( !rx_packet )
    6f24:	2800      	cmp	r0, #0
    6f26:	d1e5      	bne.n	6ef4 <usb_serial_getchar+0x8>
    6f28:	e7f5      	b.n	6f16 <usb_serial_getchar+0x2a>
		usb_free( rx_packet );
		rx_packet = NULL;
	}
	else
	{
		rx_packet->index = i;
    6f2a:	8043      	strh	r3, [r0, #2]
	}
	return c;
    6f2c:	4620      	mov	r0, r4
}
    6f2e:	bd10      	pop	{r4, pc}
    6f30:	1fff92b0 	.word	0x1fff92b0
    6f34:	1fff92a3 	.word	0x1fff92a3

00006f38 <usb_serial_available>:
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	return usb_rx_byte_count_data[ endpoint ];
    6f38:	4b04      	ldr	r3, [pc, #16]	; (6f4c <usb_serial_available+0x14>)
}

// number of bytes available in the receive buffer
int usb_serial_available()
{
	int count = usb_rx_byte_count( CDC_RX_ENDPOINT );
    6f3a:	88d8      	ldrh	r0, [r3, #6]
	if ( rx_packet )
    6f3c:	4b04      	ldr	r3, [pc, #16]	; (6f50 <usb_serial_available+0x18>)
    6f3e:	681b      	ldr	r3, [r3, #0]
    6f40:	b11b      	cbz	r3, 6f4a <usb_serial_available+0x12>
		count += rx_packet->len - rx_packet->index;
    6f42:	881a      	ldrh	r2, [r3, #0]
    6f44:	885b      	ldrh	r3, [r3, #2]
    6f46:	1ad3      	subs	r3, r2, r3
    6f48:	4418      	add	r0, r3
	return count;
}
    6f4a:	4770      	bx	lr
    6f4c:	1fffa20c 	.word	0x1fffa20c
    6f50:	1fff92b0 	.word	0x1fff92b0

00006f54 <usb_serial_write>:
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    6f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    6f58:	4e2d      	ldr	r6, [pc, #180]	; (7010 <usb_serial_write+0xbc>)
    6f5a:	2301      	movs	r3, #1
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    6f5c:	4607      	mov	r7, r0
    6f5e:	460c      	mov	r4, r1
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    6f60:	7033      	strb	r3, [r6, #0]
	while ( size > 0 )
    6f62:	2c00      	cmp	r4, #0
    6f64:	d04f      	beq.n	7006 <usb_serial_write+0xb2>
	{
		if ( !tx_packet )
    6f66:	4d2b      	ldr	r5, [pc, #172]	; (7014 <usb_serial_write+0xc0>)
    6f68:	682b      	ldr	r3, [r5, #0]
    6f6a:	46a9      	mov	r9, r5
    6f6c:	bb2b      	cbnz	r3, 6fba <usb_serial_write+0x66>
    6f6e:	f648 4801 	movw	r8, #35841	; 0x8c01
		{
			wait_count = 0;
			while ( 1 )
			{
				if ( !usb_configuration )
    6f72:	4b29      	ldr	r3, [pc, #164]	; (7018 <usb_serial_write+0xc4>)
    6f74:	781b      	ldrb	r3, [r3, #0]
    6f76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    6f7a:	b90b      	cbnz	r3, 6f80 <usb_serial_write+0x2c>
				{
					tx_noautoflush = 0;
    6f7c:	7032      	strb	r2, [r6, #0]
    6f7e:	e015      	b.n	6fac <usb_serial_write+0x58>
					return -1;
				}
				if ( usb_tx_packet_count( CDC_TX_ENDPOINT ) < TX_PACKET_LIMIT )
    6f80:	2005      	movs	r0, #5
    6f82:	f7ff f981 	bl	6288 <usb_tx_packet_count>
    6f86:	2807      	cmp	r0, #7
    6f88:	d808      	bhi.n	6f9c <usb_serial_write+0x48>
				{
					tx_noautoflush = 1;
    6f8a:	2301      	movs	r3, #1
    6f8c:	7033      	strb	r3, [r6, #0]
					tx_packet = usb_malloc();
    6f8e:	f7ff ff6d 	bl	6e6c <usb_malloc>
    6f92:	f8c9 0000 	str.w	r0, [r9]
					if ( tx_packet )
    6f96:	b980      	cbnz	r0, 6fba <usb_serial_write+0x66>
						break;
					tx_noautoflush = 0;
    6f98:	4b1d      	ldr	r3, [pc, #116]	; (7010 <usb_serial_write+0xbc>)
    6f9a:	7018      	strb	r0, [r3, #0]
				}
				if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    6f9c:	f1b8 0801 	subs.w	r8, r8, #1
    6fa0:	4b1e      	ldr	r3, [pc, #120]	; (701c <usb_serial_write+0xc8>)
    6fa2:	d001      	beq.n	6fa8 <usb_serial_write+0x54>
    6fa4:	781a      	ldrb	r2, [r3, #0]
    6fa6:	b12a      	cbz	r2, 6fb4 <usb_serial_write+0x60>
				{
					transmit_previous_timeout = 1;
    6fa8:	2201      	movs	r2, #1
    6faa:	701a      	strb	r2, [r3, #0]
					return -1;
    6fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
				yield();
    6fb4:	f7fb fae9 	bl	258a <yield>
			}
    6fb8:	e7db      	b.n	6f72 <usb_serial_write+0x1e>
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    6fba:	6829      	ldr	r1, [r5, #0]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    6fbc:	4a17      	ldr	r2, [pc, #92]	; (701c <usb_serial_write+0xc8>)
		len = CDC_TX_SIZE - tx_packet->index;
    6fbe:	8848      	ldrh	r0, [r1, #2]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    6fc0:	2300      	movs	r3, #0
    6fc2:	7013      	strb	r3, [r2, #0]
		len = CDC_TX_SIZE - tx_packet->index;
    6fc4:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    6fc8:	4294      	cmp	r4, r2
    6fca:	bf38      	it	cc
    6fcc:	4622      	movcc	r2, r4
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
    6fce:	f100 0c08 	add.w	ip, r0, #8
		tx_packet->index += len;
    6fd2:	4410      	add	r0, r2
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
    6fd4:	448c      	add	ip, r1
		tx_packet->index += len;
    6fd6:	8048      	strh	r0, [r1, #2]
		size -= len;
    6fd8:	1aa4      	subs	r4, r4, r2
		while ( len-- > 0 )
    6fda:	4293      	cmp	r3, r2
    6fdc:	d004      	beq.n	6fe8 <usb_serial_write+0x94>
			*dest++ = *src++;
    6fde:	5cf8      	ldrb	r0, [r7, r3]
    6fe0:	f80c 0003 	strb.w	r0, [ip, r3]
    6fe4:	3301      	adds	r3, #1
    6fe6:	e7f8      	b.n	6fda <usb_serial_write+0x86>
    6fe8:	441f      	add	r7, r3
		if ( tx_packet->index >= CDC_TX_SIZE )
    6fea:	884b      	ldrh	r3, [r1, #2]
    6fec:	2b3f      	cmp	r3, #63	; 0x3f
    6fee:	d906      	bls.n	6ffe <usb_serial_write+0xaa>
		{
			tx_packet->len = CDC_TX_SIZE;
    6ff0:	2340      	movs	r3, #64	; 0x40
    6ff2:	800b      	strh	r3, [r1, #0]
			usb_tx( CDC_TX_ENDPOINT, tx_packet );
    6ff4:	2005      	movs	r0, #5
    6ff6:	f7ff f995 	bl	6324 <usb_tx>
			tx_packet = NULL;
    6ffa:	2300      	movs	r3, #0
    6ffc:	602b      	str	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    6ffe:	4b08      	ldr	r3, [pc, #32]	; (7020 <usb_serial_write+0xcc>)
    7000:	2205      	movs	r2, #5
    7002:	701a      	strb	r2, [r3, #0]
    7004:	e7ad      	b.n	6f62 <usb_serial_write+0xe>
	}
	tx_noautoflush = 0;
    7006:	7034      	strb	r4, [r6, #0]
	return 0;
    7008:	4620      	mov	r0, r4
}
    700a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    700e:	bf00      	nop
    7010:	1fff92a7 	.word	0x1fff92a7
    7014:	1fff92a8 	.word	0x1fff92a8
    7018:	1fff92a3 	.word	0x1fff92a3
    701c:	1fff92ac 	.word	0x1fff92ac
    7020:	1fff92a6 	.word	0x1fff92a6

00007024 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback()
{
    7024:	b538      	push	{r3, r4, r5, lr}
	if ( tx_noautoflush )
    7026:	4b0e      	ldr	r3, [pc, #56]	; (7060 <usb_serial_flush_callback+0x3c>)
    7028:	781b      	ldrb	r3, [r3, #0]
    702a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    702e:	b9ab      	cbnz	r3, 705c <usb_serial_flush_callback+0x38>
		return;
	if ( tx_packet )
    7030:	4c0c      	ldr	r4, [pc, #48]	; (7064 <usb_serial_flush_callback+0x40>)
    7032:	6821      	ldr	r1, [r4, #0]
    7034:	b131      	cbz	r1, 7044 <usb_serial_flush_callback+0x20>
	{
		tx_packet->len = tx_packet->index;
    7036:	884b      	ldrh	r3, [r1, #2]
    7038:	800b      	strh	r3, [r1, #0]
		usb_tx( CDC_TX_ENDPOINT, tx_packet );
    703a:	2005      	movs	r0, #5
    703c:	f7ff f972 	bl	6324 <usb_tx>
		tx_packet = NULL;
    7040:	6025      	str	r5, [r4, #0]
    7042:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
    7044:	f7ff ff12 	bl	6e6c <usb_malloc>
		if ( tx )
    7048:	4601      	mov	r1, r0
    704a:	b120      	cbz	r0, 7056 <usb_serial_flush_callback+0x32>
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    704c:	2005      	movs	r0, #5
		else
		{
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    704e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if ( tx )
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    7052:	f7ff b967 	b.w	6324 <usb_tx>
		}
		else
		{
			usb_cdc_transmit_flush_timer = 1;
    7056:	4b04      	ldr	r3, [pc, #16]	; (7068 <usb_serial_flush_callback+0x44>)
    7058:	2201      	movs	r2, #1
    705a:	701a      	strb	r2, [r3, #0]
    705c:	bd38      	pop	{r3, r4, r5, pc}
    705e:	bf00      	nop
    7060:	1fff92a7 	.word	0x1fff92a7
    7064:	1fff92a8 	.word	0x1fff92a8
    7068:	1fff92a6 	.word	0x1fff92a6

0000706c <cliFunc_clear>:

// ----- CLI Command Functions -----

void cliFunc_clear( char* args)
{
	print("\033[2J\033[H\r"); // Erases the whole screen
    706c:	4801      	ldr	r0, [pc, #4]	; (7074 <cliFunc_clear+0x8>)
    706e:	f000 bbc7 	b.w	7800 <_print>
    7072:	bf00      	nop
    7074:	0000b381 	.word	0x0000b381

00007078 <cliFunc_reset>:
	Output_firmwareReload();
}

void cliFunc_reset( char* args )
{
	print("\033c"); // Resets the terminal
    7078:	4801      	ldr	r0, [pc, #4]	; (7080 <cliFunc_reset+0x8>)
    707a:	f000 bbc1 	b.w	7800 <_print>
    707e:	bf00      	nop
    7080:	0000b38a 	.word	0x0000b38a

00007084 <cliFunc_help>:
		CLIHexDebugMode = 1;
	}
}

void cliFunc_help( char* args )
{
    7084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Scan array of dictionaries and print every description
	//  (no alphabetical here, too much processing/memory to sort...)
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    7088:	2500      	movs	r5, #0
    708a:	4b22      	ldr	r3, [pc, #136]	; (7114 <cliFunc_help+0x90>)
    708c:	781b      	ldrb	r3, [r3, #0]
    708e:	b2ec      	uxtb	r4, r5
    7090:	42a3      	cmp	r3, r4
    7092:	d93c      	bls.n	710e <cliFunc_help+0x8a>
	{
		// Print the name of each dictionary as a title
		print( NL "\033[1;32m" );
    7094:	4820      	ldr	r0, [pc, #128]	; (7118 <cliFunc_help+0x94>)
    7096:	f000 fbb3 	bl	7800 <_print>
		_print( CLIDictNames[dict] ); // This print is requride by AVR (flash)
    709a:	4b20      	ldr	r3, [pc, #128]	; (711c <cliFunc_help+0x98>)
    709c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    70a0:	f000 fbae 	bl	7800 <_print>
		print( "\033[0m" NL );
    70a4:	481e      	ldr	r0, [pc, #120]	; (7120 <cliFunc_help+0x9c>)
    70a6:	f000 fbab 	bl	7800 <_print>

		// Parse each cmd/description until a null command entry is found
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    70aa:	f04f 0800 	mov.w	r8, #0
    70ae:	4f1d      	ldr	r7, [pc, #116]	; (7124 <cliFunc_help+0xa0>)
    70b0:	fa5f f388 	uxtb.w	r3, r8
    70b4:	260c      	movs	r6, #12
    70b6:	435e      	muls	r6, r3
    70b8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    70bc:	5999      	ldr	r1, [r3, r6]
    70be:	b321      	cbz	r1, 710a <cliFunc_help+0x86>
		{
			dPrintStrs(" \033[35m", CLIDict[dict][cmd].name, "\033[0m");
    70c0:	4819      	ldr	r0, [pc, #100]	; (7128 <cliFunc_help+0xa4>)
    70c2:	4a1a      	ldr	r2, [pc, #104]	; (712c <cliFunc_help+0xa8>)
    70c4:	4b1a      	ldr	r3, [pc, #104]	; (7130 <cliFunc_help+0xac>)
    70c6:	f000 fb81 	bl	77cc <printstrs>

			// Determine number of spaces to tab by the length of the command and TabAlign
			uint8_t padLength = CLIEntryTabAlign - lenStr( (char*)CLIDict[dict][cmd].name );
    70ca:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    70ce:	5998      	ldr	r0, [r3, r6]
    70d0:	f000 fb98 	bl	7804 <lenStr>
    70d4:	f1c0 000d 	rsb	r0, r0, #13
    70d8:	fa5f f980 	uxtb.w	r9, r0
			while ( padLength-- > 0 )
    70dc:	f1b9 0f00 	cmp.w	r9, #0
    70e0:	d007      	beq.n	70f2 <cliFunc_help+0x6e>
				print(" ");
    70e2:	4814      	ldr	r0, [pc, #80]	; (7134 <cliFunc_help+0xb0>)
    70e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    70e8:	f000 fb8a 	bl	7800 <_print>
    70ec:	fa5f f989 	uxtb.w	r9, r9
    70f0:	e7f4      	b.n	70dc <cliFunc_help+0x58>

			_print( CLIDict[dict][cmd].description ); // This print is required by AVR (flash)
    70f2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    70f6:	441e      	add	r6, r3
    70f8:	f108 0801 	add.w	r8, r8, #1
    70fc:	6870      	ldr	r0, [r6, #4]
    70fe:	f000 fb7f 	bl	7800 <_print>
			print( NL );
    7102:	480d      	ldr	r0, [pc, #52]	; (7138 <cliFunc_help+0xb4>)
    7104:	f000 fb7c 	bl	7800 <_print>
    7108:	e7d1      	b.n	70ae <cliFunc_help+0x2a>
    710a:	3501      	adds	r5, #1
    710c:	e7bd      	b.n	708a <cliFunc_help+0x6>
		}
	}
}
    710e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7112:	bf00      	nop
    7114:	1fff92bb 	.word	0x1fff92bb
    7118:	0000b38d 	.word	0x0000b38d
    711c:	1fff9738 	.word	0x1fff9738
    7120:	0000b397 	.word	0x0000b397
    7124:	1fff970c 	.word	0x1fff970c
    7128:	0000b39e 	.word	0x0000b39e
    712c:	000096c4 	.word	0x000096c4
    7130:	0000b2b8 	.word	0x0000b2b8
    7134:	00008152 	.word	0x00008152
    7138:	0000b26f 	.word	0x0000b26f

0000713c <cliFunc_led>:

void cliFunc_led( char* args )
{
	CLILEDState ^= 1 << 1; // Toggle between 0 and 1
    713c:	4b03      	ldr	r3, [pc, #12]	; (714c <cliFunc_led+0x10>)
    713e:	7818      	ldrb	r0, [r3, #0]
    7140:	f080 0002 	eor.w	r0, r0, #2
    7144:	7018      	strb	r0, [r3, #0]
	errorLED( CLILEDState ); // Enable/Disable error LED
    7146:	f000 bb33 	b.w	77b0 <errorLED>
    714a:	bf00      	nop
    714c:	1fff92ba 	.word	0x1fff92ba

00007150 <cliFunc_reload>:
		info_msg("Set flashModeEnabled to 1 in your kll configuration.");
		return;
	}

	// Request to output module to be set into firmware reload mode
	Output_firmwareReload();
    7150:	f7ff b848 	b.w	61e4 <Output_firmwareReload>

00007154 <cliFunc_restart>:
}

void cliFunc_restart( char* args )
{
	// Trigger an overall software reset
	Output_softReset();
    7154:	f7ff b854 	b.w	6200 <Output_softReset>

00007158 <cliFunc_version>:
}

void cliFunc_version( char* args )
{
    7158:	b508      	push	{r3, lr}
	print( NL );
    715a:	4821      	ldr	r0, [pc, #132]	; (71e0 <cliFunc_version+0x88>)
    715c:	f000 fb50 	bl	7800 <_print>
	print( " \033[1mRevision:\033[0m      " CLI_Revision       NL );
    7160:	4820      	ldr	r0, [pc, #128]	; (71e4 <cliFunc_version+0x8c>)
    7162:	f000 fb4d 	bl	7800 <_print>
	print( " \033[1mBranch:\033[0m        " CLI_Branch         NL );
    7166:	4820      	ldr	r0, [pc, #128]	; (71e8 <cliFunc_version+0x90>)
    7168:	f000 fb4a 	bl	7800 <_print>
	print( " \033[1mTree Status:\033[0m   " CLI_ModifiedStatus CLI_ModifiedFiles NL );
    716c:	481f      	ldr	r0, [pc, #124]	; (71ec <cliFunc_version+0x94>)
    716e:	f000 fb47 	bl	7800 <_print>
	print( " \033[1mRepo Origin:\033[0m   " CLI_RepoOrigin     NL );
    7172:	481f      	ldr	r0, [pc, #124]	; (71f0 <cliFunc_version+0x98>)
    7174:	f000 fb44 	bl	7800 <_print>
	print( " \033[1mCommit Date:\033[0m   " CLI_CommitDate     NL );
    7178:	481e      	ldr	r0, [pc, #120]	; (71f4 <cliFunc_version+0x9c>)
    717a:	f000 fb41 	bl	7800 <_print>
	print( " \033[1mCommit Author:\033[0m " CLI_CommitAuthor   NL );
    717e:	481e      	ldr	r0, [pc, #120]	; (71f8 <cliFunc_version+0xa0>)
    7180:	f000 fb3e 	bl	7800 <_print>
	print( " \033[1mBuild Date:\033[0m    " CLI_BuildDate      NL );
    7184:	481d      	ldr	r0, [pc, #116]	; (71fc <cliFunc_version+0xa4>)
    7186:	f000 fb3b 	bl	7800 <_print>
	print( " \033[1mBuild OS:\033[0m      " CLI_BuildOS        NL );
    718a:	481d      	ldr	r0, [pc, #116]	; (7200 <cliFunc_version+0xa8>)
    718c:	f000 fb38 	bl	7800 <_print>
	print( " \033[1mArchitecture:\033[0m  " CLI_Arch           NL );
    7190:	481c      	ldr	r0, [pc, #112]	; (7204 <cliFunc_version+0xac>)
    7192:	f000 fb35 	bl	7800 <_print>
	print( " \033[1mChip:\033[0m          " CLI_Chip           NL );
    7196:	481c      	ldr	r0, [pc, #112]	; (7208 <cliFunc_version+0xb0>)
    7198:	f000 fb32 	bl	7800 <_print>
	print( " \033[1mCPU:\033[0m           " CLI_CPU            NL );
    719c:	481b      	ldr	r0, [pc, #108]	; (720c <cliFunc_version+0xb4>)
    719e:	f000 fb2f 	bl	7800 <_print>
	print( " \033[1mDevice:\033[0m        " CLI_Device         NL );
    71a2:	481b      	ldr	r0, [pc, #108]	; (7210 <cliFunc_version+0xb8>)
    71a4:	f000 fb2c 	bl	7800 <_print>
	print( " \033[1mModules:\033[0m       " CLI_Modules        NL );
    71a8:	481a      	ldr	r0, [pc, #104]	; (7214 <cliFunc_version+0xbc>)
    71aa:	f000 fb29 	bl	7800 <_print>
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
    71ae:	481a      	ldr	r0, [pc, #104]	; (7218 <cliFunc_version+0xc0>)
    71b0:	f000 fb26 	bl	7800 <_print>
	printHex32_op( SIM_UIDH, 4 );
    71b4:	4b19      	ldr	r3, [pc, #100]	; (721c <cliFunc_version+0xc4>)
    71b6:	2104      	movs	r1, #4
    71b8:	6818      	ldr	r0, [r3, #0]
    71ba:	f000 fbdf 	bl	797c <printHex32_op>
	printHex32_op( SIM_UIDMH, 4 );
    71be:	4b18      	ldr	r3, [pc, #96]	; (7220 <cliFunc_version+0xc8>)
    71c0:	2104      	movs	r1, #4
    71c2:	6818      	ldr	r0, [r3, #0]
    71c4:	f000 fbda 	bl	797c <printHex32_op>
	printHex32_op( SIM_UIDML, 4 );
    71c8:	4b16      	ldr	r3, [pc, #88]	; (7224 <cliFunc_version+0xcc>)
    71ca:	2104      	movs	r1, #4
    71cc:	6818      	ldr	r0, [r3, #0]
    71ce:	f000 fbd5 	bl	797c <printHex32_op>
	printHex32_op( SIM_UIDL, 4 );
    71d2:	4b15      	ldr	r3, [pc, #84]	; (7228 <cliFunc_version+0xd0>)
    71d4:	2104      	movs	r1, #4
    71d6:	6818      	ldr	r0, [r3, #0]
#elif defined(_at90usb162_) || defined(_atmega32u4_) || defined(_at90usb646_) || defined(_at90usb1286_)
#else
#error "No unique id defined."
#endif
}
    71d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
	printHex32_op( SIM_UIDH, 4 );
	printHex32_op( SIM_UIDMH, 4 );
	printHex32_op( SIM_UIDML, 4 );
	printHex32_op( SIM_UIDL, 4 );
    71dc:	f000 bbce 	b.w	797c <printHex32_op>
    71e0:	0000b26f 	.word	0x0000b26f
    71e4:	0000b3a5 	.word	0x0000b3a5
    71e8:	0000b3e8 	.word	0x0000b3e8
    71ec:	0000b409 	.word	0x0000b409
    71f0:	0000b448 	.word	0x0000b448
    71f4:	0000b496 	.word	0x0000b496
    71f8:	0000b4ca 	.word	0x0000b4ca
    71fc:	0000b512 	.word	0x0000b512
    7200:	0000b546 	.word	0x0000b546
    7204:	0000b578 	.word	0x0000b578
    7208:	0000b596 	.word	0x0000b596
    720c:	0000b5be 	.word	0x0000b5be
    7210:	0000b5e2 	.word	0x0000b5e2
    7214:	0000b605 	.word	0x0000b605
    7218:	0000b65b 	.word	0x0000b65b
    721c:	40048054 	.word	0x40048054
    7220:	40048058 	.word	0x40048058
    7224:	4004805c 	.word	0x4004805c
    7228:	40048060 	.word	0x40048060

0000722c <cliFunc_cliDebug>:
{
	print("\033[2J\033[H\r"); // Erases the whole screen
}

void cliFunc_cliDebug( char* args )
{
    722c:	b510      	push	{r4, lr}
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    722e:	4c09      	ldr	r4, [pc, #36]	; (7254 <cliFunc_cliDebug+0x28>)
	{
		print( NL );
    7230:	4809      	ldr	r0, [pc, #36]	; (7258 <cliFunc_cliDebug+0x2c>)
}

void cliFunc_cliDebug( char* args )
{
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    7232:	7823      	ldrb	r3, [r4, #0]
    7234:	b133      	cbz	r3, 7244 <cliFunc_cliDebug+0x18>
	{
		print( NL );
    7236:	f000 fae3 	bl	7800 <_print>
		info_print("Hex debug mode disabled...");
    723a:	4808      	ldr	r0, [pc, #32]	; (725c <cliFunc_cliDebug+0x30>)
    723c:	f000 fae0 	bl	7800 <_print>
		CLIHexDebugMode = 0;
    7240:	2300      	movs	r3, #0
    7242:	e005      	b.n	7250 <cliFunc_cliDebug+0x24>
	}
	else
	{
		print( NL );
    7244:	f000 fadc 	bl	7800 <_print>
		info_print("Hex debug mode enabled...");
    7248:	4805      	ldr	r0, [pc, #20]	; (7260 <cliFunc_cliDebug+0x34>)
    724a:	f000 fad9 	bl	7800 <_print>
		CLIHexDebugMode = 1;
    724e:	2301      	movs	r3, #1
    7250:	7023      	strb	r3, [r4, #0]
    7252:	bd10      	pop	{r4, pc}
    7254:	1fff92b8 	.word	0x1fff92b8
    7258:	0000b26f 	.word	0x0000b26f
    725c:	0000b674 	.word	0x0000b674
    7260:	0000b6a3 	.word	0x0000b6a3

00007264 <CLI_saveHistory.part.1>:
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    7264:	4b08      	ldr	r3, [pc, #32]	; (7288 <CLI_saveHistory.part.1+0x24>)
    7266:	781a      	ldrb	r2, [r3, #0]
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    7268:	4b08      	ldr	r3, [pc, #32]	; (728c <CLI_saveHistory.part.1+0x28>)
    726a:	7818      	ldrb	r0, [r3, #0]
    726c:	4b08      	ldr	r3, [pc, #32]	; (7290 <CLI_saveHistory.part.1+0x2c>)
    726e:	2164      	movs	r1, #100	; 0x64
    7270:	fb00 3101 	mla	r1, r0, r1, r3
    7274:	2300      	movs	r3, #0
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    7276:	4293      	cmp	r3, r2
    7278:	da04      	bge.n	7284 <CLI_saveHistory.part.1+0x20>
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    727a:	4806      	ldr	r0, [pc, #24]	; (7294 <CLI_saveHistory.part.1+0x30>)
    727c:	5c18      	ldrb	r0, [r3, r0]
    727e:	54c8      	strb	r0, [r1, r3]
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    7280:	3301      	adds	r3, #1
    7282:	e7f8      	b.n	7276 <CLI_saveHistory.part.1+0x12>
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
	}
}
    7284:	4770      	bx	lr
    7286:	bf00      	nop
    7288:	1fff9760 	.word	0x1fff9760
    728c:	1fff9734 	.word	0x1fff9734
    7290:	1fff92bc 	.word	0x1fff92bc
    7294:	1fff96a4 	.word	0x1fff96a4

00007298 <CLI_argumentIsolation>:
// Takes a string, returns two pointers
//  One to the first non-space character
//  The second to the next argument (first NULL if there isn't an argument). delimited by a space
//  Places a NULL at the first space after the first argument
void CLI_argumentIsolation( char* string, char** first, char** second )
{
    7298:	b530      	push	{r4, r5, lr}
	// Mark out the first argument
	// This is done by finding the first space after a list of non-spaces and setting it NULL
	char* cmdPtr = string - 1;
	while ( *++cmdPtr == ' ' ); // Skips leading spaces, and points to first character of cmd
    729a:	4604      	mov	r4, r0
    729c:	3001      	adds	r0, #1
    729e:	7823      	ldrb	r3, [r4, #0]
    72a0:	2b20      	cmp	r3, #32
    72a2:	d0fa      	beq.n	729a <CLI_argumentIsolation+0x2>
    72a4:	4603      	mov	r3, r0
    72a6:	3001      	adds	r0, #1

	// Locates first space delimiter
	char* argPtr = cmdPtr + 1;
	while ( *argPtr != ' ' && *argPtr != '\0' )
    72a8:	781d      	ldrb	r5, [r3, #0]
    72aa:	f015 05df 	ands.w	r5, r5, #223	; 0xdf
    72ae:	d1f9      	bne.n	72a4 <CLI_argumentIsolation+0xc>
		argPtr++;

	// Point to the first character of args or a NULL (no args) and set the space delimiter as a NULL
	(++argPtr)[-1] = '\0';
    72b0:	f803 5b01 	strb.w	r5, [r3], #1

	// Set return variables
	*first = cmdPtr;
    72b4:	600c      	str	r4, [r1, #0]
	*second = argPtr;
    72b6:	6013      	str	r3, [r2, #0]
    72b8:	bd30      	pop	{r4, r5, pc}
    72ba:	0000      	movs	r0, r0

000072bc <CLI_commandLookup>:
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    72bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    72c0:	4b23      	ldr	r3, [pc, #140]	; (7350 <CLI_commandLookup+0x94>)
    72c2:	781b      	ldrb	r3, [r3, #0]
	*second = argPtr;
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    72c4:	b089      	sub	sp, #36	; 0x24
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    72c6:	2b00      	cmp	r3, #0
    72c8:	d03e      	beq.n	7348 <CLI_commandLookup+0x8c>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    72ca:	4c22      	ldr	r4, [pc, #136]	; (7354 <CLI_commandLookup+0x98>)
    72cc:	2600      	movs	r6, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    72ce:	4620      	mov	r0, r4
    72d0:	a906      	add	r1, sp, #24
    72d2:	aa07      	add	r2, sp, #28
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    72d4:	54e6      	strb	r6, [r4, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    72d6:	f7ff ffdf 	bl	7298 <CLI_argumentIsolation>
    72da:	46a1      	mov	r9, r4

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    72dc:	4b1e      	ldr	r3, [pc, #120]	; (7358 <CLI_commandLookup+0x9c>)
    72de:	781b      	ldrb	r3, [r3, #0]
    72e0:	b2f7      	uxtb	r7, r6
    72e2:	42bb      	cmp	r3, r7
    72e4:	d91b      	bls.n	731e <CLI_commandLookup+0x62>
    72e6:	2500      	movs	r5, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    72e8:	4c1c      	ldr	r4, [pc, #112]	; (735c <CLI_commandLookup+0xa0>)
    72ea:	b2eb      	uxtb	r3, r5
    72ec:	f04f 080c 	mov.w	r8, #12
    72f0:	fb08 f803 	mul.w	r8, r8, r3
    72f4:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
    72f8:	f853 1008 	ldr.w	r1, [r3, r8]
    72fc:	b169      	cbz	r1, 731a <CLI_commandLookup+0x5e>
		{
			// Compare the first argument and each command entry
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == -1 )
    72fe:	9806      	ldr	r0, [sp, #24]
    7300:	f000 fb47 	bl	7992 <eqStr>
    7304:	3001      	adds	r0, #1
    7306:	f105 0501 	add.w	r5, r5, #1
    730a:	d1ed      	bne.n	72e8 <CLI_commandLookup+0x2c>
			{
				// Run the specified command function pointer
				//   argPtr is already pointing at the first character of the arguments
				(*(void (*)(char*))CLIDict[dict][cmd].function)( argPtr );
    730c:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
    7310:	9807      	ldr	r0, [sp, #28]
    7312:	4443      	add	r3, r8
    7314:	689b      	ldr	r3, [r3, #8]
    7316:	4798      	blx	r3

				return;
    7318:	e016      	b.n	7348 <CLI_commandLookup+0x8c>
    731a:	3601      	adds	r6, #1
    731c:	e7de      	b.n	72dc <CLI_commandLookup+0x20>
			}
		}
	}

	// No match for the command...
	print( NL );
    731e:	4d10      	ldr	r5, [pc, #64]	; (7360 <CLI_commandLookup+0xa4>)
    7320:	4628      	mov	r0, r5
    7322:	f000 fa6d 	bl	7800 <_print>
	erro_dPrint("\"", CLILineBuffer, "\" is not a valid command...type \033[35mhelp\033[0m");
    7326:	4b0f      	ldr	r3, [pc, #60]	; (7364 <CLI_commandLookup+0xa8>)
    7328:	9300      	str	r3, [sp, #0]
    732a:	4b0f      	ldr	r3, [pc, #60]	; (7368 <CLI_commandLookup+0xac>)
    732c:	9301      	str	r3, [sp, #4]
    732e:	4b0f      	ldr	r3, [pc, #60]	; (736c <CLI_commandLookup+0xb0>)
    7330:	9303      	str	r3, [sp, #12]
    7332:	4b0f      	ldr	r3, [pc, #60]	; (7370 <CLI_commandLookup+0xb4>)
    7334:	9305      	str	r3, [sp, #20]
    7336:	f8cd 9008 	str.w	r9, [sp, #8]
    733a:	9504      	str	r5, [sp, #16]
    733c:	480d      	ldr	r0, [pc, #52]	; (7374 <CLI_commandLookup+0xb8>)
    733e:	490e      	ldr	r1, [pc, #56]	; (7378 <CLI_commandLookup+0xbc>)
    7340:	4a0e      	ldr	r2, [pc, #56]	; (737c <CLI_commandLookup+0xc0>)
    7342:	4b0f      	ldr	r3, [pc, #60]	; (7380 <CLI_commandLookup+0xc4>)
    7344:	f000 fa42 	bl	77cc <printstrs>
}
    7348:	b009      	add	sp, #36	; 0x24
    734a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    734e:	bf00      	nop
    7350:	1fff9760 	.word	0x1fff9760
    7354:	1fff96a4 	.word	0x1fff96a4
    7358:	1fff92bb 	.word	0x1fff92bb
    735c:	1fff970c 	.word	0x1fff970c
    7360:	0000b26f 	.word	0x0000b26f
    7364:	00008fb4 	.word	0x00008fb4
    7368:	0000b6e1 	.word	0x0000b6e1
    736c:	0000b6e3 	.word	0x0000b6e3
    7370:	0000b2b8 	.word	0x0000b2b8
    7374:	0000b6d1 	.word	0x0000b6d1
    7378:	0000b6d4 	.word	0x0000b6d4
    737c:	000096c7 	.word	0x000096c7
    7380:	0000b6db 	.word	0x0000b6db

00007384 <CLI_registerDictionary>:

// Registers a command dictionary with the CLI
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
    7384:	b510      	push	{r4, lr}
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
    7386:	4a09      	ldr	r2, [pc, #36]	; (73ac <CLI_registerDictionary+0x28>)
    7388:	7813      	ldrb	r3, [r2, #0]
    738a:	2b09      	cmp	r3, #9
    738c:	d904      	bls.n	7398 <CLI_registerDictionary+0x14>
	{
		erro_print("Max number of dictionaries defined already...");
    738e:	4808      	ldr	r0, [pc, #32]	; (73b0 <CLI_registerDictionary+0x2c>)
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}
    7390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
	{
		erro_print("Max number of dictionaries defined already...");
    7394:	f000 ba34 	b.w	7800 <_print>
		return;
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
    7398:	4c06      	ldr	r4, [pc, #24]	; (73b4 <CLI_registerDictionary+0x30>)
    739a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
    739e:	1c59      	adds	r1, r3, #1
    73a0:	7011      	strb	r1, [r2, #0]
    73a2:	4a05      	ldr	r2, [pc, #20]	; (73b8 <CLI_registerDictionary+0x34>)
    73a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    73a8:	bd10      	pop	{r4, pc}
    73aa:	bf00      	nop
    73ac:	1fff92bb 	.word	0x1fff92bb
    73b0:	0000b711 	.word	0x0000b711
    73b4:	1fff9738 	.word	0x1fff9738
    73b8:	1fff970c 	.word	0x1fff970c

000073bc <CLI_init>:

// Initialize the CLI
inline void CLI_init()
{
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    73bc:	4b0e      	ldr	r3, [pc, #56]	; (73f8 <CLI_init+0x3c>)

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    73be:	480f      	ldr	r0, [pc, #60]	; (73fc <CLI_init+0x40>)
	print("\033[1;34m:\033[0m "); // Blue bold prompt
}

// Initialize the CLI
inline void CLI_init()
{
    73c0:	b510      	push	{r4, lr}
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    73c2:	2400      	movs	r4, #0
    73c4:	701c      	strb	r4, [r3, #0]

	// History starts empty
	CLIHistoryHead = 0;
    73c6:	4b0e      	ldr	r3, [pc, #56]	; (7400 <CLI_init+0x44>)
    73c8:	701c      	strb	r4, [r3, #0]
	CLIHistoryCurrent = 0;
    73ca:	4b0e      	ldr	r3, [pc, #56]	; (7404 <CLI_init+0x48>)
    73cc:	701c      	strb	r4, [r3, #0]
	CLIHistoryTail = 0;
    73ce:	4b0e      	ldr	r3, [pc, #56]	; (7408 <CLI_init+0x4c>)
    73d0:	701c      	strb	r4, [r3, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    73d2:	f000 fa15 	bl	7800 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    73d6:	480d      	ldr	r0, [pc, #52]	; (740c <CLI_init+0x50>)
    73d8:	f000 fa12 	bl	7800 <_print>

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    73dc:	4b0c      	ldr	r3, [pc, #48]	; (7410 <CLI_init+0x54>)
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    73de:	480d      	ldr	r0, [pc, #52]	; (7414 <CLI_init+0x58>)
    73e0:	490d      	ldr	r1, [pc, #52]	; (7418 <CLI_init+0x5c>)

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    73e2:	701c      	strb	r4, [r3, #0]
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    73e4:	f7ff ffce 	bl	7384 <CLI_registerDictionary>

	// Initialize main LED
	init_errorLED();
    73e8:	f000 f9d4 	bl	7794 <init_errorLED>
	CLILEDState = 0;
    73ec:	4b0b      	ldr	r3, [pc, #44]	; (741c <CLI_init+0x60>)
    73ee:	701c      	strb	r4, [r3, #0]

	// Hex debug mode is off by default
	CLIHexDebugMode = 0;
    73f0:	4b0b      	ldr	r3, [pc, #44]	; (7420 <CLI_init+0x64>)
    73f2:	701c      	strb	r4, [r3, #0]
    73f4:	bd10      	pop	{r4, pc}
    73f6:	bf00      	nop
    73f8:	1fff9760 	.word	0x1fff9760
    73fc:	0000b756 	.word	0x0000b756
    7400:	1fff9709 	.word	0x1fff9709
    7404:	1fff92b9 	.word	0x1fff92b9
    7408:	1fff9734 	.word	0x1fff9734
    740c:	0000b75c 	.word	0x0000b75c
    7410:	1fff92bb 	.word	0x1fff92bb
    7414:	0000b838 	.word	0x0000b838
    7418:	0000b93a 	.word	0x0000b93a
    741c:	1fff92ba 	.word	0x1fff92ba
    7420:	1fff92b8 	.word	0x1fff92b8

00007424 <CLI_tabCompletion>:
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    7424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    7428:	4d28      	ldr	r5, [pc, #160]	; (74cc <CLI_tabCompletion+0xa8>)
    742a:	782b      	ldrb	r3, [r5, #0]
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    742c:	b085      	sub	sp, #20
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    742e:	2b00      	cmp	r3, #0
    7430:	d048      	beq.n	74c4 <CLI_tabCompletion+0xa0>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    7432:	4f27      	ldr	r7, [pc, #156]	; (74d0 <CLI_tabCompletion+0xac>)
    7434:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    7436:	4638      	mov	r0, r7
    7438:	a902      	add	r1, sp, #8
    743a:	aa03      	add	r2, sp, #12
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    743c:	54fc      	strb	r4, [r7, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    743e:	f7ff ff2b 	bl	7298 <CLI_argumentIsolation>

	// Tab match pointer
	char* tabMatch = 0;
	uint8_t matches = 0;
    7442:	46a0      	mov	r8, r4
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );

	// Tab match pointer
	char* tabMatch = 0;
    7444:	4626      	mov	r6, r4
	uint8_t matches = 0;

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    7446:	4b23      	ldr	r3, [pc, #140]	; (74d4 <CLI_tabCompletion+0xb0>)
    7448:	781b      	ldrb	r3, [r3, #0]
    744a:	fa5f fa84 	uxtb.w	sl, r4
    744e:	4553      	cmp	r3, sl
    7450:	d920      	bls.n	7494 <CLI_tabCompletion+0x70>
    7452:	f04f 0900 	mov.w	r9, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    7456:	fa5f f389 	uxtb.w	r3, r9
    745a:	f04f 0b0c 	mov.w	fp, #12
    745e:	fb0b fb03 	mul.w	fp, fp, r3
    7462:	4b1d      	ldr	r3, [pc, #116]	; (74d8 <CLI_tabCompletion+0xb4>)
    7464:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
    7468:	f852 100b 	ldr.w	r1, [r2, fp]
    746c:	b181      	cbz	r1, 7490 <CLI_tabCompletion+0x6c>
		{
			// Compare the first argument piece to each command entry to see if it is "like"
			// NOTE: To save on processing, we only care about the commands and ignore the arguments
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
    746e:	9802      	ldr	r0, [sp, #8]
    7470:	9301      	str	r3, [sp, #4]
    7472:	f000 fa8e 	bl	7992 <eqStr>
    7476:	9b01      	ldr	r3, [sp, #4]
    7478:	b938      	cbnz	r0, 748a <CLI_tabCompletion+0x66>
			{
				// TODO Make list of commands if multiple matches
				matches++;
				tabMatch = (char*)CLIDict[dict][cmd].name;
    747a:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    747e:	f108 0801 	add.w	r8, r8, #1
				tabMatch = (char*)CLIDict[dict][cmd].name;
    7482:	f853 600b 	ldr.w	r6, [r3, fp]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    7486:	fa5f f888 	uxtb.w	r8, r8
    748a:	f109 0901 	add.w	r9, r9, #1
    748e:	e7e2      	b.n	7456 <CLI_tabCompletion+0x32>
    7490:	3401      	adds	r4, #1
    7492:	e7d8      	b.n	7446 <CLI_tabCompletion+0x22>
			}
		}
	}

	// Only tab complete if there was 1 match
	if ( matches == 1 )
    7494:	f1b8 0f01 	cmp.w	r8, #1
    7498:	d114      	bne.n	74c4 <CLI_tabCompletion+0xa0>
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    749a:	2300      	movs	r3, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    749c:	480f      	ldr	r0, [pc, #60]	; (74dc <CLI_tabCompletion+0xb8>)

	// Only tab complete if there was 1 match
	if ( matches == 1 )
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    749e:	702b      	strb	r3, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    74a0:	f000 f9ae 	bl	7800 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    74a4:	480e      	ldr	r0, [pc, #56]	; (74e0 <CLI_tabCompletion+0xbc>)
    74a6:	f000 f9ab 	bl	7800 <_print>

		// Reprint the prompt (automatically clears the line)
		prompt();

		// Display the command
		dPrint( tabMatch );
    74aa:	4630      	mov	r0, r6
    74ac:	f7fe fea0 	bl	61f0 <Output_putstr>

		// There are no index counts, so just copy the whole string to the input buffer
		while ( *tabMatch != '\0' )
    74b0:	f816 3b01 	ldrb.w	r3, [r6], #1
    74b4:	b133      	cbz	r3, 74c4 <CLI_tabCompletion+0xa0>
		{
			CLILineBuffer[CLILineBufferCurrent++] = *tabMatch++;
    74b6:	782b      	ldrb	r3, [r5, #0]
    74b8:	1c5a      	adds	r2, r3, #1
    74ba:	702a      	strb	r2, [r5, #0]
    74bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
    74c0:	54fa      	strb	r2, [r7, r3]
    74c2:	e7f5      	b.n	74b0 <CLI_tabCompletion+0x8c>
		}
	}
}
    74c4:	b005      	add	sp, #20
    74c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74ca:	bf00      	nop
    74cc:	1fff9760 	.word	0x1fff9760
    74d0:	1fff96a4 	.word	0x1fff96a4
    74d4:	1fff92bb 	.word	0x1fff92bb
    74d8:	1fff970c 	.word	0x1fff970c
    74dc:	0000b756 	.word	0x0000b756
    74e0:	0000b75c 	.word	0x0000b75c

000074e4 <CLI_wrap>:

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    74e4:	1a52      	subs	r2, r2, r1

	if ( kX < kLowerBound )
    74e6:	4288      	cmp	r0, r1
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    74e8:	f102 0201 	add.w	r2, r2, #1

	if ( kX < kLowerBound )
    74ec:	da05      	bge.n	74fa <CLI_wrap+0x16>
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    74ee:	1a0b      	subs	r3, r1, r0
    74f0:	fb93 f3f2 	sdiv	r3, r3, r2
    74f4:	fb03 2302 	mla	r3, r3, r2, r2
    74f8:	4418      	add	r0, r3

	return kLowerBound + (kX - kLowerBound) % range_size;
    74fa:	1a40      	subs	r0, r0, r1
    74fc:	fb90 f3f2 	sdiv	r3, r0, r2
    7500:	fb02 0013 	mls	r0, r2, r3, r0
}
    7504:	4408      	add	r0, r1
    7506:	4770      	bx	lr

00007508 <CLI_saveHistory>:

inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
    7508:	b108      	cbz	r0, 750e <CLI_saveHistory+0x6>
    750a:	3801      	subs	r0, #1
    750c:	e006      	b.n	751c <CLI_saveHistory+0x14>
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    750e:	4b07      	ldr	r3, [pc, #28]	; (752c <CLI_saveHistory+0x24>)
    7510:	781b      	ldrb	r3, [r3, #0]
    7512:	2264      	movs	r2, #100	; 0x64
    7514:	4353      	muls	r3, r2
    7516:	4a06      	ldr	r2, [pc, #24]	; (7530 <CLI_saveHistory+0x28>)
    7518:	54d0      	strb	r0, [r2, r3]
		return;
    751a:	4770      	bx	lr
	}

        // Don't write empty lines to the history
        const char *cursor = buff;
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
    751c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7520:	2b20      	cmp	r3, #32
    7522:	d0fb      	beq.n	751c <CLI_saveHistory+0x14>
        if (*cursor == '\0') { return ; }
    7524:	b10b      	cbz	r3, 752a <CLI_saveHistory+0x22>
    7526:	f7ff be9d 	b.w	7264 <CLI_saveHistory.part.1>
    752a:	4770      	bx	lr
    752c:	1fff9734 	.word	0x1fff9734
    7530:	1fff92bc 	.word	0x1fff92bc

00007534 <CLI_retreiveHistory>:
	}
}

void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];
    7534:	4b0d      	ldr	r3, [pc, #52]	; (756c <CLI_retreiveHistory+0x38>)
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
	}
}

void CLI_retreiveHistory( int index )
{
    7536:	b570      	push	{r4, r5, r6, lr}
	char *histMatch = CLIHistoryBuffer[ index ];
    7538:	2464      	movs	r4, #100	; 0x64

	// Reset the buffer
	CLILineBufferCurrent = 0;
    753a:	4d0d      	ldr	r5, [pc, #52]	; (7570 <CLI_retreiveHistory+0x3c>)
	}
}

void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];
    753c:	fb04 3400 	mla	r4, r4, r0, r3

	// Reset the buffer
	CLILineBufferCurrent = 0;
    7540:	2600      	movs	r6, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7542:	480c      	ldr	r0, [pc, #48]	; (7574 <CLI_retreiveHistory+0x40>)
void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];

	// Reset the buffer
	CLILineBufferCurrent = 0;
    7544:	702e      	strb	r6, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7546:	f000 f95b 	bl	7800 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    754a:	480b      	ldr	r0, [pc, #44]	; (7578 <CLI_retreiveHistory+0x44>)
    754c:	f000 f958 	bl	7800 <_print>

	// Reprint the prompt (automatically clears the line)
	prompt();

	// Display the command
	dPrint( histMatch );
    7550:	4620      	mov	r0, r4
    7552:	f7fe fe4d 	bl	61f0 <Output_putstr>

	// There are no index counts, so just copy the whole string to the input buffe
	CLILineBufferCurrent = 0;
	while ( *histMatch != '\0' )
    7556:	4633      	mov	r3, r6
    7558:	b2da      	uxtb	r2, r3
    755a:	1c59      	adds	r1, r3, #1
    755c:	5ce3      	ldrb	r3, [r4, r3]
    755e:	b11b      	cbz	r3, 7568 <CLI_retreiveHistory+0x34>
	{
		CLILineBuffer[ CLILineBufferCurrent++ ] = *histMatch++;
    7560:	4806      	ldr	r0, [pc, #24]	; (757c <CLI_retreiveHistory+0x48>)
    7562:	5483      	strb	r3, [r0, r2]
    7564:	460b      	mov	r3, r1
    7566:	e7f7      	b.n	7558 <CLI_retreiveHistory+0x24>
    7568:	702a      	strb	r2, [r5, #0]
    756a:	bd70      	pop	{r4, r5, r6, pc}
    756c:	1fff92bc 	.word	0x1fff92bc
    7570:	1fff9760 	.word	0x1fff9760
    7574:	0000b756 	.word	0x0000b756
    7578:	0000b75c 	.word	0x0000b75c
    757c:	1fff96a4 	.word	0x1fff96a4

00007580 <CLI_process>:
	CLIHexDebugMode = 0;
}

// Query the serial input buffer for any new characters
void CLI_process()
{
    7580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Current buffer position
	uint8_t prev_buf_pos = CLILineBufferCurrent;
    7582:	4d74      	ldr	r5, [pc, #464]	; (7754 <CLI_process+0x1d4>)
    7584:	782c      	ldrb	r4, [r5, #0]

	// Process each character while available
	while ( 1 )
	{
		// No more characters to process
		if ( Output_availablechar() == 0 )
    7586:	f7fe fe2f 	bl	61e8 <Output_availablechar>
    758a:	b1a0      	cbz	r0, 75b6 <CLI_process+0x36>
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    758c:	f7fe fe2e 	bl	61ec <Output_getchar>

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    7590:	782b      	ldrb	r3, [r5, #0]
    7592:	4e70      	ldr	r6, [pc, #448]	; (7754 <CLI_process+0x1d4>)
    7594:	2b63      	cmp	r3, #99	; 0x63
		// No more characters to process
		if ( Output_availablechar() == 0 )
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    7596:	b2c0      	uxtb	r0, r0

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    7598:	d908      	bls.n	75ac <CLI_process+0x2c>
		{
			print( NL );
    759a:	486f      	ldr	r0, [pc, #444]	; (7758 <CLI_process+0x1d8>)
    759c:	f000 f930 	bl	7800 <_print>
			erro_print("Serial line buffer is full, dropping character and resetting...");
    75a0:	486e      	ldr	r0, [pc, #440]	; (775c <CLI_process+0x1dc>)
    75a2:	f000 f92d 	bl	7800 <_print>

			// Clear buffer
			CLILineBufferCurrent = 0;
    75a6:	2300      	movs	r3, #0
    75a8:	7033      	strb	r3, [r6, #0]
    75aa:	e03e      	b.n	762a <CLI_process+0xaa>

			return;
		}

		// Place into line buffer
		CLILineBuffer[CLILineBufferCurrent++] = cur_char;
    75ac:	1c5a      	adds	r2, r3, #1
    75ae:	7032      	strb	r2, [r6, #0]
    75b0:	4a6b      	ldr	r2, [pc, #428]	; (7760 <CLI_process+0x1e0>)
    75b2:	54d0      	strb	r0, [r2, r3]
	}
    75b4:	e7e7      	b.n	7586 <CLI_process+0x6>

	// Display Hex Key Input if enabled
	if ( CLIHexDebugMode && CLILineBufferCurrent > prev_buf_pos )
    75b6:	4b6b      	ldr	r3, [pc, #428]	; (7764 <CLI_process+0x1e4>)
    75b8:	781b      	ldrb	r3, [r3, #0]
    75ba:	b30b      	cbz	r3, 7600 <CLI_process+0x80>
    75bc:	782b      	ldrb	r3, [r5, #0]
    75be:	42a3      	cmp	r3, r4
    75c0:	d91e      	bls.n	7600 <CLI_process+0x80>
	{
		print("\033[s\r\n"); // Save cursor position, and move to the next line
    75c2:	4869      	ldr	r0, [pc, #420]	; (7768 <CLI_process+0x1e8>)
    75c4:	f000 f91c 	bl	7800 <_print>
		print("\033[2K");    // Erases the current line
    75c8:	4868      	ldr	r0, [pc, #416]	; (776c <CLI_process+0x1ec>)
    75ca:	f000 f919 	bl	7800 <_print>

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
    75ce:	4623      	mov	r3, r4
    75d0:	782a      	ldrb	r2, [r5, #0]
    75d2:	429a      	cmp	r2, r3
    75d4:	d90b      	bls.n	75ee <CLI_process+0x6e>
		{
			printHex( CLILineBuffer[pos++] );
    75d6:	4a62      	ldr	r2, [pc, #392]	; (7760 <CLI_process+0x1e0>)
    75d8:	1c5e      	adds	r6, r3, #1
    75da:	5cd0      	ldrb	r0, [r2, r3]
    75dc:	2101      	movs	r1, #1
    75de:	f000 f998 	bl	7912 <printHex_op>
    75e2:	b2f6      	uxtb	r6, r6
			print(" ");
    75e4:	4862      	ldr	r0, [pc, #392]	; (7770 <CLI_process+0x1f0>)
    75e6:	f000 f90b 	bl	7800 <_print>
		print("\033[2K");    // Erases the current line

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
		{
			printHex( CLILineBuffer[pos++] );
    75ea:	4633      	mov	r3, r6
    75ec:	e7f0      	b.n	75d0 <CLI_process+0x50>
			print(" ");
		}

		print("\033[u"); // Restore cursor position
    75ee:	4861      	ldr	r0, [pc, #388]	; (7774 <CLI_process+0x1f4>)
    75f0:	e026      	b.n	7640 <CLI_process+0xc0>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    75f2:	d830      	bhi.n	7656 <CLI_process+0xd6>
    75f4:	2a08      	cmp	r2, #8
    75f6:	d126      	bne.n	7646 <CLI_process+0xc6>
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
    75f8:	2b01      	cmp	r3, #1
    75fa:	d11e      	bne.n	763a <CLI_process+0xba>
			return;

		case 0x08:
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace
    75fc:	2300      	movs	r3, #0
    75fe:	702b      	strb	r3, [r5, #0]

		print("\033[u"); // Restore cursor position
	}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
    7600:	782b      	ldrb	r3, [r5, #0]
    7602:	4f54      	ldr	r7, [pc, #336]	; (7754 <CLI_process+0x1d4>)
    7604:	42a3      	cmp	r3, r4
    7606:	f240 80a3 	bls.w	7750 <CLI_process+0x1d0>
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    760a:	4955      	ldr	r1, [pc, #340]	; (7760 <CLI_process+0x1e0>)
    760c:	5d0a      	ldrb	r2, [r1, r4]
    760e:	2a0a      	cmp	r2, #10
    7610:	460e      	mov	r6, r1
    7612:	d1ee      	bne.n	75f2 <CLI_process+0x72>
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    7614:	441e      	add	r6, r3
    7616:	2220      	movs	r2, #32

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    7618:	2b01      	cmp	r3, #1
		switch ( CLILineBuffer[prev_buf_pos] )
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    761a:	f806 2c01 	strb.w	r2, [r6, #-1]

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    761e:	d121      	bne.n	7664 <CLI_process+0xe4>
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    7620:	2300      	movs	r3, #0

			// Reset the prompt after processing has finished
			print( NL );
    7622:	484d      	ldr	r0, [pc, #308]	; (7758 <CLI_process+0x1d8>)
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    7624:	702b      	strb	r3, [r5, #0]

			// Reset the prompt after processing has finished
			print( NL );
    7626:	f000 f8eb 	bl	7800 <_print>

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    762a:	4853      	ldr	r0, [pc, #332]	; (7778 <CLI_process+0x1f8>)
    762c:	f000 f8e8 	bl	7800 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7630:	4852      	ldr	r0, [pc, #328]	; (777c <CLI_process+0x1fc>)
			prev_buf_pos++;

			break;
		}
	}
}
    7632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7636:	f000 b8e3 	b.w	7800 <_print>

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    763a:	3b02      	subs	r3, #2

				// Remove character from tty
				print("\b \b");
    763c:	4850      	ldr	r0, [pc, #320]	; (7780 <CLI_process+0x200>)

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    763e:	702b      	strb	r3, [r5, #0]

				// Remove character from tty
				print("\b \b");
    7640:	f000 f8de 	bl	7800 <_print>
    7644:	e7dc      	b.n	7600 <CLI_process+0x80>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    7646:	2a09      	cmp	r2, #9
    7648:	d17a      	bne.n	7740 <CLI_process+0x1c0>
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;

		case 0x09: // Tab
			// Tab completion for the current command
			CLI_tabCompletion();
    764a:	f7ff feeb 	bl	7424 <CLI_tabCompletion>

			CLILineBufferCurrent--; // Remove the Tab
    764e:	783b      	ldrb	r3, [r7, #0]
    7650:	3b01      	subs	r3, #1
    7652:	703b      	strb	r3, [r7, #0]

			// XXX There is a potential bug here when resetting the buffer (losing valid keypresses)
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;
    7654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    7656:	2a1b      	cmp	r2, #27
    7658:	d029      	beq.n	76ae <CLI_process+0x12e>
    765a:	2a7f      	cmp	r2, #127	; 0x7f
    765c:	d0cc      	beq.n	75f8 <CLI_process+0x78>
    765e:	2a0d      	cmp	r2, #13
    7660:	d16e      	bne.n	7740 <CLI_process+0x1c0>
    7662:	e7d7      	b.n	7614 <CLI_process+0x94>
				CLILineBufferCurrent--;
			}
			else
			{
				// Add the command to the history
				CLI_saveHistory( CLILineBuffer );
    7664:	483e      	ldr	r0, [pc, #248]	; (7760 <CLI_process+0x1e0>)
    7666:	f7ff ff4f 	bl	7508 <CLI_saveHistory>

				// Process the current line buffer
				CLI_commandLookup();
    766a:	f7ff fe27 	bl	72bc <CLI_commandLookup>

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
    766e:	4b45      	ldr	r3, [pc, #276]	; (7784 <CLI_process+0x204>)
    7670:	4a45      	ldr	r2, [pc, #276]	; (7788 <CLI_process+0x208>)
    7672:	7819      	ldrb	r1, [r3, #0]
    7674:	7814      	ldrb	r4, [r2, #0]
    7676:	42a1      	cmp	r1, r4
    7678:	d206      	bcs.n	7688 <CLI_process+0x108>
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
    767a:	3401      	adds	r4, #1
    767c:	200a      	movs	r0, #10
    767e:	fb94 f6f0 	sdiv	r6, r4, r0
    7682:	fb00 4016 	mls	r0, r0, r6, r4
    7686:	7010      	strb	r0, [r2, #0]
				CLIHistoryTail++;
    7688:	3101      	adds	r1, #1
    768a:	b2c9      	uxtb	r1, r1
				if ( CLIHistoryTail == CLIMaxHistorySize )
    768c:	290a      	cmp	r1, #10
    768e:	d001      	beq.n	7694 <CLI_process+0x114>
				CLI_commandLookup();

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
				CLIHistoryTail++;
    7690:	7019      	strb	r1, [r3, #0]
    7692:	e003      	b.n	769c <CLI_process+0x11c>
				if ( CLIHistoryTail == CLIMaxHistorySize )
				{
					CLIHistoryTail = 0;
    7694:	2100      	movs	r1, #0
    7696:	7019      	strb	r1, [r3, #0]
					CLIHistoryHead = 1;
    7698:	2101      	movs	r1, #1
    769a:	7011      	strb	r1, [r2, #0]
				}

				CLIHistoryCurrent = CLIHistoryTail; // 'Up' starts at the last item
    769c:	4a3b      	ldr	r2, [pc, #236]	; (778c <CLI_process+0x20c>)
    769e:	781b      	ldrb	r3, [r3, #0]
    76a0:	7013      	strb	r3, [r2, #0]
inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    76a2:	2264      	movs	r2, #100	; 0x64
    76a4:	4353      	muls	r3, r2
    76a6:	4a3a      	ldr	r2, [pc, #232]	; (7790 <CLI_process+0x210>)
    76a8:	2100      	movs	r1, #0
    76aa:	54d1      	strb	r1, [r2, r3]
    76ac:	e7b8      	b.n	7620 <CLI_process+0xa0>

		case 0x1B: // Esc / Escape codes
			// Check for other escape sequence

			// \e[ is an escape code in vt100 compatible terminals
			if ( CLILineBufferCurrent >= prev_buf_pos + 3
    76ae:	1ca5      	adds	r5, r4, #2
    76b0:	429d      	cmp	r5, r3
    76b2:	da4d      	bge.n	7750 <CLI_process+0x1d0>
				&& CLILineBuffer[ prev_buf_pos ] == 0x1B
				&& CLILineBuffer[ prev_buf_pos + 1] == 0x5B )
    76b4:	190b      	adds	r3, r1, r4
    76b6:	785b      	ldrb	r3, [r3, #1]
    76b8:	2b5b      	cmp	r3, #91	; 0x5b
    76ba:	d149      	bne.n	7750 <CLI_process+0x1d0>
			{
				// Arrow Keys: A (0x41) = Up, B (0x42) = Down, C (0x43) = Right, D (0x44) = Left

				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
    76bc:	5d4b      	ldrb	r3, [r1, r5]
    76be:	2b41      	cmp	r3, #65	; 0x41
    76c0:	d122      	bne.n	7708 <CLI_process+0x188>
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
    76c2:	4f32      	ldr	r7, [pc, #200]	; (778c <CLI_process+0x20c>)
    76c4:	4b2f      	ldr	r3, [pc, #188]	; (7784 <CLI_process+0x204>)
    76c6:	f997 2000 	ldrsb.w	r2, [r7]
    76ca:	781b      	ldrb	r3, [r3, #0]
    76cc:	429a      	cmp	r2, r3
    76ce:	d104      	bne.n	76da <CLI_process+0x15a>
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    76d0:	2300      	movs	r3, #0
						CLI_saveHistory( CLILineBuffer );
    76d2:	4608      	mov	r0, r1
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    76d4:	550b      	strb	r3, [r1, r4]
						CLI_saveHistory( CLILineBuffer );
    76d6:	f7ff ff17 	bl	7508 <CLI_saveHistory>
					}

					// Grab the previus item from the history if there is one
					if ( RING_PREV( CLIHistoryCurrent ) != RING_PREV( CLIHistoryHead ) )
    76da:	f997 0000 	ldrsb.w	r0, [r7]
    76de:	2100      	movs	r1, #0
    76e0:	2209      	movs	r2, #9
    76e2:	3801      	subs	r0, #1
    76e4:	f7ff fefe 	bl	74e4 <CLI_wrap>
    76e8:	4b27      	ldr	r3, [pc, #156]	; (7788 <CLI_process+0x208>)
    76ea:	4604      	mov	r4, r0
    76ec:	7818      	ldrb	r0, [r3, #0]
    76ee:	2100      	movs	r1, #0
    76f0:	3801      	subs	r0, #1
    76f2:	2209      	movs	r2, #9
    76f4:	f7ff fef6 	bl	74e4 <CLI_wrap>
    76f8:	4284      	cmp	r4, r0
						CLIHistoryCurrent = RING_PREV( CLIHistoryCurrent );
    76fa:	bf1c      	itt	ne
    76fc:	4b23      	ldrne	r3, [pc, #140]	; (778c <CLI_process+0x20c>)
    76fe:	701c      	strbne	r4, [r3, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    7700:	f997 0000 	ldrsb.w	r0, [r7]
    7704:	f7ff ff16 	bl	7534 <CLI_retreiveHistory>
				}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
    7708:	5d73      	ldrb	r3, [r6, r5]
    770a:	2b42      	cmp	r3, #66	; 0x42
    770c:	d120      	bne.n	7750 <CLI_process+0x1d0>
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
    770e:	4d1f      	ldr	r5, [pc, #124]	; (778c <CLI_process+0x20c>)
    7710:	f995 0000 	ldrsb.w	r0, [r5]
    7714:	2100      	movs	r1, #0
    7716:	2209      	movs	r2, #9
    7718:	3001      	adds	r0, #1
    771a:	f7ff fee3 	bl	74e4 <CLI_wrap>
    771e:	4b19      	ldr	r3, [pc, #100]	; (7784 <CLI_process+0x204>)
    7720:	4604      	mov	r4, r0
    7722:	7818      	ldrb	r0, [r3, #0]
    7724:	2100      	movs	r1, #0
    7726:	3001      	adds	r0, #1
    7728:	2209      	movs	r2, #9
    772a:	f7ff fedb 	bl	74e4 <CLI_wrap>
    772e:	4284      	cmp	r4, r0
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
    7730:	bf18      	it	ne
    7732:	702c      	strbne	r4, [r5, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    7734:	f995 0000 	ldrsb.w	r0, [r5]
			prev_buf_pos++;

			break;
		}
	}
}
    7738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
					CLI_retreiveHistory( CLIHistoryCurrent );
    773c:	f7ff befa 	b.w	7534 <CLI_retreiveHistory>

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    7740:	2200      	movs	r2, #0

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    7742:	1930      	adds	r0, r6, r4

			// Buffer reset
			prev_buf_pos++;
    7744:	3401      	adds	r4, #1

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    7746:	54ca      	strb	r2, [r1, r3]

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );

			// Buffer reset
			prev_buf_pos++;
    7748:	b2e4      	uxtb	r4, r4
		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    774a:	f7fe fd51 	bl	61f0 <Output_putstr>

			// Buffer reset
			prev_buf_pos++;

			break;
    774e:	e757      	b.n	7600 <CLI_process+0x80>
    7750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7752:	bf00      	nop
    7754:	1fff9760 	.word	0x1fff9760
    7758:	0000b26f 	.word	0x0000b26f
    775c:	0000b76a 	.word	0x0000b76a
    7760:	1fff96a4 	.word	0x1fff96a4
    7764:	1fff92b8 	.word	0x1fff92b8
    7768:	0000b7c1 	.word	0x0000b7c1
    776c:	0000b7c7 	.word	0x0000b7c7
    7770:	00008152 	.word	0x00008152
    7774:	0000b7cc 	.word	0x0000b7cc
    7778:	0000b756 	.word	0x0000b756
    777c:	0000b75c 	.word	0x0000b75c
    7780:	0000b7d0 	.word	0x0000b7d0
    7784:	1fff9734 	.word	0x1fff9734
    7788:	1fff9709 	.word	0x1fff9709
    778c:	1fff92b9 	.word	0x1fff92b9
    7790:	1fff92bc 	.word	0x1fff92bc

00007794 <init_errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Enable pin
	GPIOA_PDDR |= (1<<5);
    7794:	4b05      	ldr	r3, [pc, #20]	; (77ac <init_errorLED+0x18>)
    7796:	681a      	ldr	r2, [r3, #0]
    7798:	f042 0220 	orr.w	r2, r2, #32
    779c:	601a      	str	r2, [r3, #0]

	// Setup pin - A5 - See Lib/pin_map.mchck for more details on pins
	PORTA_PCR5 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    779e:	f5a3 2336 	sub.w	r3, r3, #745472	; 0xb6000
    77a2:	f44f 72a2 	mov.w	r2, #324	; 0x144
    77a6:	601a      	str	r2, [r3, #0]
    77a8:	4770      	bx	lr
    77aa:	bf00      	nop
    77ac:	400ff014 	.word	0x400ff014

000077b0 <errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Error LED On (A5)
	if ( on ) {
    77b0:	b108      	cbz	r0, 77b6 <errorLED+0x6>
		GPIOA_PSOR |= (1<<5);
    77b2:	4b04      	ldr	r3, [pc, #16]	; (77c4 <errorLED+0x14>)
    77b4:	e000      	b.n	77b8 <errorLED+0x8>
	}
	// Error LED Off
	else {
		GPIOA_PCOR |= (1<<5);
    77b6:	4b04      	ldr	r3, [pc, #16]	; (77c8 <errorLED+0x18>)
    77b8:	681a      	ldr	r2, [r3, #0]
    77ba:	f042 0220 	orr.w	r2, r2, #32
    77be:	601a      	str	r2, [r3, #0]
    77c0:	4770      	bx	lr
    77c2:	bf00      	nop
    77c4:	400ff004 	.word	0x400ff004
    77c8:	400ff008 	.word	0x400ff008

000077cc <printstrs>:

// ----- Functions -----

// Multiple string Output
void printstrs( char* first, ... )
{
    77cc:	b40f      	push	{r0, r1, r2, r3}
    77ce:	b507      	push	{r0, r1, r2, lr}
    77d0:	ab04      	add	r3, sp, #16
    77d2:	f853 0b04 	ldr.w	r0, [r3], #4
	// Initialize the variadic function parameter list
	va_list ap;

	// Get the first parameter
	va_start( ap, first );
    77d6:	9301      	str	r3, [sp, #4]
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    77d8:	7803      	ldrb	r3, [r0, #0]
    77da:	b133      	cbz	r3, 77ea <printstrs+0x1e>
	{
		// Print out the given string
		Output_putstr( cur );
    77dc:	f7fe fd08 	bl	61f0 <Output_putstr>

		// Get the next argument ready
		cur = va_arg( ap, char* );
    77e0:	9b01      	ldr	r3, [sp, #4]
    77e2:	1d1a      	adds	r2, r3, #4
    77e4:	9201      	str	r2, [sp, #4]
    77e6:	6818      	ldr	r0, [r3, #0]
    77e8:	e7f6      	b.n	77d8 <printstrs+0xc>
	// Get the first parameter
	va_start( ap, first );
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    77ea:	7843      	ldrb	r3, [r0, #1]
    77ec:	2b00      	cmp	r3, #0
    77ee:	d1f5      	bne.n	77dc <printstrs+0x10>
    77f0:	7883      	ldrb	r3, [r0, #2]
    77f2:	2b00      	cmp	r3, #0
    77f4:	d1f2      	bne.n	77dc <printstrs+0x10>
		// Get the next argument ready
		cur = va_arg( ap, char* );
	}

	va_end( ap ); // Not required, but good practice
}
    77f6:	b003      	add	sp, #12
    77f8:	f85d eb04 	ldr.w	lr, [sp], #4
    77fc:	b004      	add	sp, #16
    77fe:	4770      	bx	lr

00007800 <_print>:
	while ( ( c = pgm_read_byte( s++ ) ) != '\0' )
	{
		Output_putchar( c );
	}
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	Output_putstr( (char*)s );
    7800:	f7fe bcf6 	b.w	61f0 <Output_putstr>

00007804 <lenStr>:
	}
}


uint16_t lenStr( char* in )
{
    7804:	4603      	mov	r3, r0
    7806:	461a      	mov	r2, r3
    7808:	3301      	adds	r3, #1
	// Iterator
	char *pos;

	// Loop until null is found
	for ( pos = in; *pos; pos++ );
    780a:	7811      	ldrb	r1, [r2, #0]
    780c:	2900      	cmp	r1, #0
    780e:	d1fa      	bne.n	7806 <lenStr+0x2>

	// Return the difference between the pointers of in and pos (which is the string length)
	return (pos - in);
    7810:	1a10      	subs	r0, r2, r0
}
    7812:	b280      	uxth	r0, r0
    7814:	4770      	bx	lr

00007816 <revsStr>:
	revsStr(out);
}


void revsStr( char* in )
{
    7816:	b510      	push	{r4, lr}
    7818:	4604      	mov	r4, r0

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    781a:	f7ff fff3 	bl	7804 <lenStr>
    781e:	2200      	movs	r2, #0
    7820:	1e43      	subs	r3, r0, #1
    7822:	429a      	cmp	r2, r3
    7824:	da06      	bge.n	7834 <revsStr+0x1e>
	{
		c = in[i];
    7826:	5ca1      	ldrb	r1, [r4, r2]
		in[i] = in[j];
    7828:	5ce0      	ldrb	r0, [r4, r3]
    782a:	54a0      	strb	r0, [r4, r2]
		in[j] = c;
    782c:	54e1      	strb	r1, [r4, r3]

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    782e:	3201      	adds	r2, #1
    7830:	3b01      	subs	r3, #1
    7832:	e7f6      	b.n	7822 <revsStr+0xc>
	{
		c = in[i];
		in[i] = in[j];
		in[j] = c;
	}
}
    7834:	bd10      	pop	{r4, pc}

00007836 <int8ToStr>:



// String Functions
void int8ToStr( uint8_t in, char* out )
{
    7836:	b530      	push	{r4, r5, lr}
    7838:	4603      	mov	r3, r0
	// Position and sign containers
	uint8_t pos;
	pos = 0;
    783a:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    783c:	250a      	movs	r5, #10
    783e:	fbb3 f0f5 	udiv	r0, r3, r5
    7842:	fb05 3310 	mls	r3, r5, r0, r3
    7846:	3330      	adds	r3, #48	; 0x30
    7848:	1c54      	adds	r4, r2, #1
    784a:	548b      	strb	r3, [r1, r2]
	}
	while ( (in /= 10) > 0 );
    784c:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7850:	b2e4      	uxtb	r4, r4
	}
	while ( (in /= 10) > 0 );
    7852:	d001      	beq.n	7858 <int8ToStr+0x22>
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7854:	4622      	mov	r2, r4
    7856:	e7f1      	b.n	783c <int8ToStr+0x6>
	}
	while ( (in /= 10) > 0 );

	// Append null
	out[pos] = '\0';
    7858:	550b      	strb	r3, [r1, r4]

	// Reverse the string to the correct order
	revsStr(out);
    785a:	4608      	mov	r0, r1
}
    785c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    7860:	f7ff bfd9 	b.w	7816 <revsStr>

00007864 <printInt8>:



// Number Printing Functions
void printInt8( uint8_t in )
{
    7864:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 3 + 1 for null
	char tmpStr[4];

	// Convert number
	int8ToStr( in, tmpStr );
    7866:	a901      	add	r1, sp, #4
    7868:	f7ff ffe5 	bl	7836 <int8ToStr>

	// Print number
	dPrintStr( tmpStr );
    786c:	a801      	add	r0, sp, #4
    786e:	f7fe fcbf 	bl	61f0 <Output_putstr>
}
    7872:	b003      	add	sp, #12
    7874:	f85d fb04 	ldr.w	pc, [sp], #4

00007878 <int16ToStr>:
	revsStr(out);
}


void int16ToStr( uint16_t in, char* out )
{
    7878:	b530      	push	{r4, r5, lr}
    787a:	4603      	mov	r3, r0
	// Position and sign containers
	uint16_t pos;
	pos = 0;
    787c:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    787e:	250a      	movs	r5, #10
    7880:	fbb3 f4f5 	udiv	r4, r3, r5
    7884:	fb05 3314 	mls	r3, r5, r4, r3
    7888:	3330      	adds	r3, #48	; 0x30
    788a:	1c50      	adds	r0, r2, #1
    788c:	548b      	strb	r3, [r1, r2]
	}
	while ( (in /= 10) > 0 );
    788e:	b2a3      	uxth	r3, r4
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7890:	b280      	uxth	r0, r0
	}
	while ( (in /= 10) > 0 );
    7892:	b10b      	cbz	r3, 7898 <int16ToStr+0x20>
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7894:	4602      	mov	r2, r0
    7896:	e7f2      	b.n	787e <int16ToStr+0x6>
	}
	while ( (in /= 10) > 0 );

	// Append null
	out[pos] = '\0';
    7898:	540b      	strb	r3, [r1, r0]

	// Reverse the string to the correct order
	revsStr(out);
}
    789a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    789e:	4608      	mov	r0, r1
    78a0:	f7ff bfb9 	b.w	7816 <revsStr>

000078a4 <printInt16>:
	// Print number
	dPrintStr( tmpStr );
}

void printInt16( uint16_t in )
{
    78a4:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 5 + 1 for null
	char tmpStr[6];

	// Convert number
	int16ToStr( in, tmpStr );
    78a6:	4669      	mov	r1, sp
    78a8:	f7ff ffe6 	bl	7878 <int16ToStr>

	// Print number
	dPrintStr( tmpStr );
    78ac:	4668      	mov	r0, sp
    78ae:	f7fe fc9f 	bl	61f0 <Output_putstr>
}
    78b2:	b003      	add	sp, #12
    78b4:	f85d fb04 	ldr.w	pc, [sp], #4

000078b8 <hexToStr_op>:
	revsStr(out);
}


void hexToStr_op( uint16_t in, char* out, uint8_t op )
{
    78b8:	b570      	push	{r4, r5, r6, lr}
	// Position container
	uint16_t pos = 0;
    78ba:	2400      	movs	r4, #0

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
    78bc:	f000 050f 	and.w	r5, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    78c0:	2d09      	cmp	r5, #9
    78c2:	bf8c      	ite	hi
    78c4:	2637      	movhi	r6, #55	; 0x37
    78c6:	2630      	movls	r6, #48	; 0x30
    78c8:	1c63      	adds	r3, r4, #1
    78ca:	4435      	add	r5, r6
	}
	while ( (in /= 16) > 0 );
    78cc:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    78ce:	b29b      	uxth	r3, r3
    78d0:	550d      	strb	r5, [r1, r4]
	}
	while ( (in /= 16) > 0 );
    78d2:	d001      	beq.n	78d8 <hexToStr_op+0x20>

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    78d4:	461c      	mov	r4, r3
    78d6:	e7f1      	b.n	78bc <hexToStr_op+0x4>
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    78d8:	2a02      	cmp	r2, #2
    78da:	d00c      	beq.n	78f6 <hexToStr_op+0x3e>
    78dc:	2a04      	cmp	r2, #4
    78de:	d00a      	beq.n	78f6 <hexToStr_op+0x3e>
    78e0:	2a01      	cmp	r2, #1
    78e2:	d10f      	bne.n	7904 <hexToStr_op+0x4c>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    78e4:	2278      	movs	r2, #120	; 0x78
    78e6:	54ca      	strb	r2, [r1, r3]
		out[pos++] = '0';
    78e8:	1ce3      	adds	r3, r4, #3

	// Output formatting options
	switch ( op )
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    78ea:	3402      	adds	r4, #2
		out[pos++] = '0';
    78ec:	b2a4      	uxth	r4, r4
    78ee:	2230      	movs	r2, #48	; 0x30
    78f0:	b29b      	uxth	r3, r3
    78f2:	550a      	strb	r2, [r1, r4]
		break;
    78f4:	e006      	b.n	7904 <hexToStr_op+0x4c>
	case 2: //  8-bit padding
	case 4: // 16-bit padding
		while ( pos < op )
    78f6:	4293      	cmp	r3, r2
    78f8:	d204      	bcs.n	7904 <hexToStr_op+0x4c>
			out[pos++] = '0';
    78fa:	1c58      	adds	r0, r3, #1
    78fc:	2430      	movs	r4, #48	; 0x30
    78fe:	54cc      	strb	r4, [r1, r3]
    7900:	b283      	uxth	r3, r0
    7902:	e7f8      	b.n	78f6 <hexToStr_op+0x3e>
		break;
	}

	// Append null
	out[pos] = '\0';
    7904:	2200      	movs	r2, #0
    7906:	54ca      	strb	r2, [r1, r3]

	// Reverse the string to the correct order
	revsStr(out);
    7908:	4608      	mov	r0, r1
}
    790a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    790e:	f7ff bf82 	b.w	7816 <revsStr>

00007912 <printHex_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex_op( uint16_t in, uint8_t op )
{
    7912:	b507      	push	{r0, r1, r2, lr}
    7914:	460a      	mov	r2, r1
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[7];

	// Convert number
	hexToStr_op( in, tmpStr, op );
    7916:	4669      	mov	r1, sp
    7918:	f7ff ffce 	bl	78b8 <hexToStr_op>

	// Print number
	dPrintStr( tmpStr );
    791c:	4668      	mov	r0, sp
    791e:	f7fe fc67 	bl	61f0 <Output_putstr>
}
    7922:	b003      	add	sp, #12
    7924:	f85d fb04 	ldr.w	pc, [sp], #4

00007928 <hex32ToStr_op>:
	revsStr(out);
}


void hex32ToStr_op( uint32_t in, char* out, uint8_t op )
{
    7928:	b570      	push	{r4, r5, r6, lr}
	// Position container
	uint32_t pos = 0;
    792a:	2400      	movs	r4, #0

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
    792c:	f000 050f 	and.w	r5, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7930:	2d09      	cmp	r5, #9
    7932:	bf8c      	ite	hi
    7934:	2637      	movhi	r6, #55	; 0x37
    7936:	2630      	movls	r6, #48	; 0x30
    7938:	4435      	add	r5, r6
	}
	while ( (in /= 16) > 0 );
    793a:	0900      	lsrs	r0, r0, #4
    793c:	f104 0301 	add.w	r3, r4, #1

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7940:	550d      	strb	r5, [r1, r4]
	}
	while ( (in /= 16) > 0 );
    7942:	d001      	beq.n	7948 <hex32ToStr_op+0x20>

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7944:	461c      	mov	r4, r3
    7946:	e7f1      	b.n	792c <hex32ToStr_op+0x4>
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    7948:	2a02      	cmp	r2, #2
    794a:	d00a      	beq.n	7962 <hex32ToStr_op+0x3a>
    794c:	2a04      	cmp	r2, #4
    794e:	d008      	beq.n	7962 <hex32ToStr_op+0x3a>
    7950:	2a01      	cmp	r2, #1
    7952:	d10c      	bne.n	796e <hex32ToStr_op+0x46>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    7954:	2278      	movs	r2, #120	; 0x78
    7956:	54ca      	strb	r2, [r1, r3]
		out[pos++] = '0';
    7958:	1ce3      	adds	r3, r4, #3
    795a:	440c      	add	r4, r1
    795c:	2230      	movs	r2, #48	; 0x30
    795e:	70a2      	strb	r2, [r4, #2]
		break;
    7960:	e005      	b.n	796e <hex32ToStr_op+0x46>
	case 2: //  8-bit padding
	case 4: // 16-bit padding
		while ( pos < op )
    7962:	4293      	cmp	r3, r2
    7964:	d203      	bcs.n	796e <hex32ToStr_op+0x46>
			out[pos++] = '0';
    7966:	2030      	movs	r0, #48	; 0x30
    7968:	54c8      	strb	r0, [r1, r3]
    796a:	3301      	adds	r3, #1
    796c:	e7f9      	b.n	7962 <hex32ToStr_op+0x3a>
		break;
	}

	// Append null
	out[pos] = '\0';
    796e:	2200      	movs	r2, #0
    7970:	54ca      	strb	r2, [r1, r3]

	// Reverse the string to the correct order
	revsStr(out);
    7972:	4608      	mov	r0, r1
}
    7974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    7978:	f7ff bf4d 	b.w	7816 <revsStr>

0000797c <printHex32_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex32_op( uint32_t in, uint8_t op )
{
    797c:	b507      	push	{r0, r1, r2, lr}
    797e:	460a      	mov	r2, r1
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[7];

	// Convert number
	hex32ToStr_op( in, tmpStr, op );
    7980:	4669      	mov	r1, sp
    7982:	f7ff ffd1 	bl	7928 <hex32ToStr_op>

	// Print number
	dPrintStr( tmpStr );
    7986:	4668      	mov	r0, sp
    7988:	f7fe fc32 	bl	61f0 <Output_putstr>
}
    798c:	b003      	add	sp, #12
    798e:	f85d fb04 	ldr.w	pc, [sp], #4

00007992 <eqStr>:
	return (pos - in);
}


int16_t eqStr( char* str1, char* str2 )
{
    7992:	b510      	push	{r4, lr}
    7994:	4603      	mov	r3, r0
	// Scan each string for NULLs and whether they are the same
	while( *str1 != '\0' && *str1++ == *str2++ );
    7996:	f810 2b01 	ldrb.w	r2, [r0], #1
    799a:	b122      	cbz	r2, 79a6 <eqStr+0x14>
    799c:	f811 4b01 	ldrb.w	r4, [r1], #1
    79a0:	4294      	cmp	r4, r2
    79a2:	4603      	mov	r3, r0
    79a4:	d0f6      	beq.n	7994 <eqStr+0x2>

	// If the strings are still identical (i.e. both NULL), then return -1, otherwise current *str1
	// If *str1 is 0, then str1 ended (and str1 is "like" str2), otherwise strings are different
	return *--str1 == *--str2 ? -1 : *++str1;
    79a6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    79aa:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    79ae:	4290      	cmp	r0, r2
    79b0:	bf14      	ite	ne
    79b2:	7818      	ldrbne	r0, [r3, #0]
    79b4:	f64f 70ff 	movweq	r0, #65535	; 0xffff
}
    79b8:	b200      	sxth	r0, r0
    79ba:	bd10      	pop	{r4, pc}

000079bc <numToInt>:

int numToInt( char* in )
{
    79bc:	b570      	push	{r4, r5, r6, lr}
    79be:	4601      	mov	r1, r0
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16
    79c0:	250a      	movs	r5, #10
	// Pointers to the LSD (Least Significant Digit) and MSD
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
    79c2:	2601      	movs	r6, #1
    79c4:	460a      	mov	r2, r1
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
    79c6:	f811 3b01 	ldrb.w	r3, [r1], #1
    79ca:	b193      	cbz	r3, 79f2 <numToInt+0x36>
	{
		// Check for positive/negative
		switch ( *lsd++ )
    79cc:	2b2b      	cmp	r3, #43	; 0x2b
    79ce:	460a      	mov	r2, r1
    79d0:	d00d      	beq.n	79ee <numToInt+0x32>
    79d2:	d802      	bhi.n	79da <numToInt+0x1e>
    79d4:	2b20      	cmp	r3, #32
    79d6:	d00a      	beq.n	79ee <numToInt+0x32>
    79d8:	e003      	b.n	79e2 <numToInt+0x26>
    79da:	2b2d      	cmp	r3, #45	; 0x2d
    79dc:	d003      	beq.n	79e6 <numToInt+0x2a>
    79de:	2b78      	cmp	r3, #120	; 0x78
    79e0:	d004      	beq.n	79ec <numToInt+0x30>
    79e2:	4602      	mov	r2, r0
    79e4:	e003      	b.n	79ee <numToInt+0x32>
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    79e6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    79ea:	e000      	b.n	79ee <numToInt+0x32>
		case '+':
		case ' ':
			msd = lsd;
			break;
		case 'x': // Hex Mode
			base = 0x10;
    79ec:	2510      	movs	r5, #16
		// Check for positive/negative
		switch ( *lsd++ )
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    79ee:	4610      	mov	r0, r2
    79f0:	e7e8      	b.n	79c4 <numToInt+0x8>
			break;
		}
	}

	// Process string depending on which base
	switch ( base )
    79f2:	2d0a      	cmp	r5, #10
    79f4:	d004      	beq.n	7a00 <numToInt+0x44>
    79f6:	2d10      	cmp	r5, #16
    79f8:	d122      	bne.n	7a40 <numToInt+0x84>
    79fa:	4614      	mov	r4, r2
    79fc:	2101      	movs	r1, #1
    79fe:	e014      	b.n	7a2a <numToInt+0x6e>
    7a00:	2101      	movs	r1, #1
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    7a02:	4282      	cmp	r2, r0
    7a04:	4614      	mov	r4, r2
    7a06:	d91b      	bls.n	7a40 <numToInt+0x84>
			total += ( (*--lsd) - '0' ) * digit;
    7a08:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    7a0c:	3c30      	subs	r4, #48	; 0x30
    7a0e:	fb01 3304 	mla	r3, r1, r4, r3
	// Process string depending on which base
	switch ( base )
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    7a12:	240a      	movs	r4, #10
    7a14:	3a01      	subs	r2, #1
    7a16:	4361      	muls	r1, r4
    7a18:	e7f3      	b.n	7a02 <numToInt+0x46>

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
    7a1a:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
    7a1e:	2a39      	cmp	r2, #57	; 0x39
    7a20:	d806      	bhi.n	7a30 <numToInt+0x74>
    7a22:	3a30      	subs	r2, #48	; 0x30
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    7a24:	fb01 3302 	mla	r3, r1, r2, r3
			total += ( (*--lsd) - '0' ) * digit;
		break;

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
    7a28:	0109      	lsls	r1, r1, #4
    7a2a:	4284      	cmp	r4, r0
    7a2c:	d8f5      	bhi.n	7a1a <numToInt+0x5e>
    7a2e:	e007      	b.n	7a40 <numToInt+0x84>
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
    7a30:	2a46      	cmp	r2, #70	; 0x46
    7a32:	d801      	bhi.n	7a38 <numToInt+0x7c>
    7a34:	3a37      	subs	r2, #55	; 0x37
    7a36:	e7f5      	b.n	7a24 <numToInt+0x68>
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    7a38:	2a66      	cmp	r2, #102	; 0x66
    7a3a:	d8f5      	bhi.n	7a28 <numToInt+0x6c>
    7a3c:	3a57      	subs	r2, #87	; 0x57
    7a3e:	e7f1      	b.n	7a24 <numToInt+0x68>
		break;
	}

	// Propagate sign and return
	return total * sign;
}
    7a40:	fb06 f003 	mul.w	r0, r6, r3
    7a44:	bd70      	pop	{r4, r5, r6, pc}
    7a46:	4d4e      	.short	0x4d4e
    7a48:	0a0d2149 	.word	0x0a0d2149
    7a4c:	72614800 	.word	0x72614800
    7a50:	61462064 	.word	0x61462064
    7a54:	21746c75 	.word	0x21746c75
    7a58:	42435320 	.word	0x42435320
    7a5c:	5346485f 	.word	0x5346485f
    7a60:	00203a52 	.word	0x00203a52
    7a64:	6f6d654d 	.word	0x6f6d654d
    7a68:	4d207972 	.word	0x4d207972
    7a6c:	67616e61 	.word	0x67616e61
    7a70:	46207265 	.word	0x46207265
    7a74:	746c7561 	.word	0x746c7561
    7a78:	43532021 	.word	0x43532021
    7a7c:	46435f42 	.word	0x46435f42
    7a80:	203a5253 	.word	0x203a5253
    7a84:	43532000 	.word	0x43532000
    7a88:	4d4d5f42 	.word	0x4d4d5f42
    7a8c:	203a5241 	.word	0x203a5241
    7a90:	73754200 	.word	0x73754200
    7a94:	75614620 	.word	0x75614620
    7a98:	2021746c 	.word	0x2021746c
    7a9c:	5f424353 	.word	0x5f424353
    7aa0:	52534643 	.word	0x52534643
    7aa4:	2000203a 	.word	0x2000203a
    7aa8:	5f424353 	.word	0x5f424353
    7aac:	52414642 	.word	0x52414642
    7ab0:	5500203a 	.word	0x5500203a
    7ab4:	65676173 	.word	0x65676173
    7ab8:	75614620 	.word	0x75614620
    7abc:	2021746c 	.word	0x2021746c
    7ac0:	5f424353 	.word	0x5f424353
    7ac4:	52534643 	.word	0x52534643
    7ac8:	203a      	.short	0x203a
    7aca:	00          	.byte	0x00

00007acb <sys_reset_to_loader_magic>:
    7acb:	ff 00 7f 52 45 53 45 54 20 54 4f 20 4c 4f 41 44     ...RESET TO LOAD
    7adb:	45 52 7f 00 ff 00 e8 fd 00                          ER.......

00007ae4 <ledWPageCLIDict_DescEntry>:
    7ae4:	57 72 69 74 65 20 74 6f 20 67 69 76 65 6e 20 72     Write to given r
    7af4:	65 67 69 73 74 65 72 20 70 61 67 65 20 73 74 61     egister page sta
    7b04:	72 74 69 6e 67 20 61 74 20 61 64 64 72 65 73 73     rting at address
    7b14:	2e 20 69 2e 65 2e 20 30 78 32 20 30 78 32 34 20     . i.e. 0x2 0x24 
    7b24:	30 78 46 30 20 30 78 31 32 00                       0xF0 0x12.

00007b2e <ledTestCLIDict_DescEntry>:
    7b2e:	54 65 73 74 20 6f 75 74 20 74 68 65 20 6c 65 64     Test out the led
    7b3e:	20 70 61 67 65 73 2e 00 00 00                        pages....

00007b48 <ledCLIDict>:
    7b48:	99 7d 00 00 d2 7e 00 00 7d 2c 00 00 a1 7d 00 00     .}...~..},...}..
    7b58:	4b 7f 00 00 f5 2b 00 00 a9 7d 00 00 dc 7d 00 00     K....+...}...}..
    7b68:	39 2e 00 00 b1 7d 00 00 b4 7b 00 00 c9 2b 00 00     9....}...{...+..
    7b78:	ba 7d 00 00 d2 7b 00 00 fd 2a 00 00 c3 7d 00 00     .}...{...*...}..
    7b88:	2e 7b 00 00 d5 29 00 00 cb 7d 00 00 e4 7a 00 00     .{...)...}...z..
    7b98:	05 2d 00 00 d4 7d 00 00 a1 7e 00 00 75 29 00 00     .-...}...~..u)..
    7ba8:	00 00 00 00 00 00 00 00 00 00 00 00                 ............

00007bb4 <ledRPageCLIDict_DescEntry>:
    7bb4:	52 65 61 64 20 74 68 65 20 67 69 76 65 6e 20 72     Read the given r
    7bc4:	65 67 69 73 74 65 72 20 70 61 67 65 2e 00           egister page..

00007bd2 <ledStartCLIDict_DescEntry>:
    7bd2:	44 69 73 61 62 6c 65 20 73 6f 66 74 77 61 72 65     Disable software
    7be2:	20 73 68 75 74 64 6f 77 6e 2e 00 1b 5b 31 3b 33      shutdown...[1;3
    7bf2:	35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20 44 41     5mDEBUG.[0m - DA
    7c02:	54 41 3a 20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e     TA: ..[1;33mWARN
    7c12:	49 4e 47 1b 5b 30 6d 20 2d 20 49 32 43 5f 42 75     ING.[0m - I2C_Bu
    7c22:	66 66 65 72 50 75 73 68 20 66 61 69 6c 65 64 2c     fferPush failed,
    7c32:	20 62 75 66 66 65 72 20 66 75 6c 6c 3a 20 00 1b      buffer full: ..
    7c42:	5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30     [1;5;31mERROR.[0
    7c52:	6d 20 2d 20 4e 6f 20 62 75 66 66 65 72 20 74 6f     m - No buffer to
    7c62:	20 70 6f 70 20 61 6e 20 65 6e 74 72 79 20 66 72      pop an entry fr
    7c72:	6f 6d 2e 2e 2e 20 00 1b 5b 31 3b 35 3b 33 31 6d     om... ..[1;5;31m
    7c82:	45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 32 43 20     ERROR.[0m - I2C 
    7c92:	4e 41 4b 20 64 65 74 65 63 74 65 64 2e 2e 2e 0d     NAK detected....
    7ca2:	0a 00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52     ...[1;5;31mERROR
    7cb2:	1b 5b 30 6d 20 2d 20 41 72 62 69 74 72 61 74 69     .[0m - Arbitrati
    7cc2:	6f 6e 20 6c 6f 73 74 2e 2e 2e 0d 0a 00 1b 5b 31     on lost.......[1
    7cd2:	3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30 6d 20     ;5;31mERROR.[0m 
    7ce2:	2d 20 53 6c 61 76 65 20 41 64 64 72 65 73 73 20     - Slave Address 
    7cf2:	49 32 43 20 4e 41 4b 20 64 65 74 65 63 74 65 64     I2C NAK detected
    7d02:	2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 35 6d 44 45 42     .......[1;35mDEB
    7d12:	55 47 1b 5b 30 6d 20 2d 20 41 74 74 65 6d 70 74     UG.[0m - Attempt
    7d22:	69 6e 67 20 74 6f 20 72 65 61 64 20 62 79 74 65     ing to read byte
    7d32:	20 2d 20 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47      - ..[1;35mDEBUG
    7d42:	1b 5b 30 6d 20 2d 20 4e 45 58 54 0d 0a 00 1b 5b     .[0m - NEXT....[
    7d52:	31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20     1;32mINFO.[0m - 
    7d62:	53 65 6e 64 69 6e 67 3a 20 00 7c 20 00 4c 45 44     Sending: .| .LED
    7d72:	5f 63 6f 6e 74 72 6f 6c 5f 63 61 70 61 62 69 6c     _control_capabil
    7d82:	69 74 79 28 6d 6f 64 65 2c 61 6d 6f 75 6e 74 2c     ity(mode,amount,
    7d92:	69 6e 64 65 78 29 00 69 32 63 52 65 63 76 00 69     index).i2cRecv.i
    7da2:	32 63 53 65 6e 64 00 6c 65 64 43 74 72 6c 00 6c     2cSend.ledCtrl.l
    7db2:	65 64 52 50 61 67 65 00 6c 65 64 53 74 61 72 74     edRPage.ledStart
    7dc2:	00 6c 65 64 54 65 73 74 00 6c 65 64 57 50 61 67     .ledTest.ledWPag
    7dd2:	65 00 6c 65 64 5a 65 72 6f 00                       e.ledZero.

00007ddc <ledCtrlCLIDict_DescEntry>:
    7ddc:	42 61 73 69 63 20 4c 45 44 20 63 6f 6e 74 72 6f     Basic LED contro
    7dec:	6c 2e 20 41 72 67 73 3a 20 3c 6d 6f 64 65 3e 20     l. Args: <mode> 
    7dfc:	3c 61 6d 6f 75 6e 74 3e 20 5b 3c 69 6e 64 65 78     <amount> [<index
    7e0c:	3e 5d 00                                            >].

00007e0f <LED_defaultBrightness1>:
    7e0f:	e8 24 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     .$..............
    7e1f:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    7e2f:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    7e3f:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    7e4f:	00 00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    7e5f:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    7e6f:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    7e7f:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    7e8f:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    7e9f:	00 00                                               ..

00007ea1 <ledZeroCLIDict_DescEntry>:
    7ea1:	5a 65 72 6f 20 6f 75 74 20 4c 45 44 20 72 65 67     Zero out LED reg
    7eb1:	69 73 74 65 72 20 70 61 67 65 73 20 28 6e 6f 6e     ister pages (non
    7ec1:	2d 63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 29 2e     -configuration).
    7ed1:	00                                                  .

00007ed2 <i2cRecvCLIDict_DescEntry>:
    7ed2:	53 65 6e 64 20 49 32 43 20 73 65 71 75 65 6e 63     Send I2C sequenc
    7ee2:	65 20 6f 66 20 62 79 74 65 73 20 61 6e 64 20 65     e of bytes and e
    7ef2:	78 70 65 63 74 20 61 20 72 65 70 6c 79 20 6f 66     xpect a reply of
    7f02:	20 31 20 62 79 74 65 20 6f 6e 20 74 68 65 20 6c      1 byte on the l
    7f12:	61 73 74 20 73 65 71 75 65 6e 63 65 2e 0d 0a 09     ast sequence....
    7f22:	09 55 73 65 20 7c 27 73 20 74 6f 20 73 70 6c 69     .Use |'s to spli
    7f32:	74 20 73 65 71 75 65 6e 63 65 73 20 77 69 74 68     t sequences with
    7f42:	20 61 20 73 74 6f 70 2e 00                           a stop..

00007f4b <i2cSendCLIDict_DescEntry>:
    7f4b:	53 65 6e 64 20 49 32 43 20 73 65 71 75 65 6e 63     Send I2C sequenc
    7f5b:	65 20 6f 66 20 62 79 74 65 73 2e 20 55 73 65 20     e of bytes. Use 
    7f6b:	7c 27 73 20 74 6f 20 73 70 6c 69 74 20 73 65 71     |'s to split seq
    7f7b:	75 65 6e 63 65 73 20 77 69 74 68 20 61 20 73 74     uences with a st
    7f8b:	6f 70 2e 00                                         op..

00007f8f <LED_ledEnableMask1>:
    7f8f:	e8 00 ff 00 ff 00 ff 00 ff 00 3f 00 00 00 00 00     ..........?.....
    7f9f:	00 00 00 00                                         ....

00007fa3 <ledCLIDictName>:
    7fa3:	49 53 53 49 20 4c 45 44 20 4d 6f 64 75 6c 65 20     ISSI LED Module 
    7fb3:	43 6f 6d 6d 61 6e 64 73 00                          Commands.

00007fbc <matrixDebugCLIDict_DescEntry>:
    7fbc:	45 6e 61 62 6c 65 73 20 6d 61 74 72 69 78 20 64     Enables matrix d
    7fcc:	65 62 75 67 20 6d 6f 64 65 2c 20 70 72 69 6e 74     ebug mode, print
    7fdc:	73 20 6f 75 74 20 65 61 63 68 20 73 63 61 6e 20     s out each scan 
    7fec:	63 6f 64 65 2e 0d 0a 09 09 49 66 20 61 72 67 75     code.....If argu
    7ffc:	6d 65 6e 74 20 1b 5b 33 35 6d 54 1b 5b 30 6d 20     ment .[35mT.[0m 
    800c:	69 73 20 67 69 76 65 6e 2c 20 70 72 69 6e 74 73     is given, prints
    801c:	20 6f 75 74 20 65 61 63 68 20 73 63 61 6e 20 63      out each scan c
    802c:	6f 64 65 20 73 74 61 74 65 20 74 72 61 6e 73 69     ode state transi
    803c:	74 69 6f 6e 2e 00 1b 5b 31 3b 33 32 6d 49 4e 46     tion...[1;32mINF
    804c:	4f 1b 5b 30 6d 20 2d 20 4d 61 74 72 69 78 20 44     O.[0m - Matrix D
    805c:	65 62 75 67 20 4d 6f 64 65 3a 20 00 1b 5b 31 3b     ebug Mode: ..[1;
    806c:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 43 6f     32mINFO.[0m - Co
    807c:	6c 75 6d 6e 73 3a 20 20 00 1b 5b 31 3b 33 32 6d     lumns:  ..[1;32m
    808c:	49 4e 46 4f 1b 5b 30 6d 20 2d 20 52 6f 77 73 3a     INFO.[0m - Rows:
    809c:	20 20 20 20 20 00 1b 5b 31 3b 33 32 6d 49 4e 46          ..[1;32mINF
    80ac:	4f 1b 5b 30 6d 20 2d 20 4d 61 78 20 4b 65 79 73     O.[0m - Max Keys
    80bc:	3a 20 00 1b 5b 31 6d 4f 1b 5b 30 6d 00 1b 5b 31     : ..[1mO.[0m..[1
    80cc:	3b 33 33 6d 50 1b 5b 30 6d 00 1b 5b 31 3b 33 32     ;33mP.[0m..[1;32
    80dc:	6d 48 1b 5b 30 6d 00 1b 5b 31 3b 33 35 6d 52 1b     mH.[0m..[1;35mR.
    80ec:	5b 30 6d 00 1b 5b 31 3b 33 31 6d 49 1b 5b 30 6d     [0m..[1;31mI.[0m
    80fc:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    810c:	5b 30 6d 20 2d 20 4d 61 74 72 69 78 20 73 63 61     [0m - Matrix sca
    811c:	6e 20 62 75 67 21 21 20 52 65 70 6f 72 74 20 6d     n bug!! Report m
    812c:	65 21 0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     e!....[1;32mINFO
    813c:	1b 5b 30 6d 20 2d 20 4d 61 78 20 73 63 61 6e 73     .[0m - Max scans
    814c:	3a 20 20 20 20 20 20 00 1b 5b 31 3b 33 32 6d 49     :      ..[1;32mI
    815c:	4e 46 4f 1b 5b 30 6d 20 2d 20 50 72 65 76 69 6f     NFO.[0m - Previo
    816c:	75 73 20 73 63 61 6e 73 3a 20 00 1b 5b 31 3b 33     us scans: ..[1;3
    817c:	32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 53 63 61     2mINFO.[0m - Sca
    818c:	6e 20 4e 75 6d 62 65 72 3a 20 20 20 20 00 3c 6b     n Number:    .<k
    819c:	65 79 3e 3a 3c 70 72 65 76 69 6f 75 73 20 73 74     ey>:<previous st
    81ac:	61 74 65 3e 3c 63 75 72 72 65 6e 74 20 73 74 61     ate><current sta
    81bc:	74 65 3e 20 3c 61 63 74 69 76 65 20 63 6f 75 6e     te> <active coun
    81cc:	74 3e 20 3c 69 6e 61 63 74 69 76 65 20 63 6f 75     t> <inactive cou
    81dc:	6e 74 3e 00 1b 5b 31 6d 30 78 00 3a 00 20 30 78     nt>..[1m0x.:. 0x
    81ec:	00 6d 61 74 72 69 78 44 65 62 75 67 00 6d 61 74     .matrixDebug.mat
    81fc:	72 69 78 53 74 61 74 65 00                          rixState.

00008205 <matrixStateCLIDict_DescEntry>:
    8205:	50 72 69 6e 74 73 20 6f 75 74 20 74 68 65 20 63     Prints out the c
    8215:	75 72 72 65 6e 74 20 73 63 61 6e 20 74 61 62 6c     urrent scan tabl
    8225:	65 20 4e 20 74 69 6d 65 73 2e 0d 0a 09 09 20 1b     e N times..... .
    8235:	5b 31 6d 4f 1b 5b 30 6d 20 2d 20 4f 66 66 2c 20     [1mO.[0m - Off, 
    8245:	1b 5b 31 3b 33 33 6d 50 1b 5b 30 6d 20 2d 20 50     .[1;33mP.[0m - P
    8255:	72 65 73 73 2c 20 1b 5b 31 3b 33 32 6d 48 1b 5b     ress, .[1;32mH.[
    8265:	30 6d 20 2d 20 48 6f 6c 64 2c 20 1b 5b 31 3b 33     0m - Hold, .[1;3
    8275:	35 6d 52 1b 5b 30 6d 20 2d 20 52 65 6c 65 61 73     5mR.[0m - Releas
    8285:	65 2c 20 1b 5b 31 3b 33 31 6d 49 1b 5b 30 6d 20     e, .[1;31mI.[0m 
    8295:	2d 20 49 6e 76 61 6c 69 64 00                       - Invalid.

0000829f <matrixCLIDictName>:
    829f:	4d 61 74 72 69 78 20 4d 6f 64 75 6c 65 20 43 6f     Matrix Module Co
    82af:	6d 6d 61 6e 64 73 00 00 00                          mmands...

000082b8 <matrixCLIDict>:
    82b8:	ed 81 00 00 bc 7f 00 00 51 2f 00 00 f9 81 00 00     ........Q/......
    82c8:	05 82 00 00 2d 2f 00 00 00 00 00 00 00 00 00 00     ....-/..........
    82d8:	00 00 00 00 00 00 00 ff ff ff ff ff ff 3f 3f 3f     .............???
    82e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    82f8:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8308:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    8318:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8328:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    8338:	ff 00 00 00 00 00 00 ff ff ff ff ff ff fc fc fc     ................
    8348:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    8358:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8368:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    8378:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8388:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    8398:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    83a8:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    83b8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    83c8:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    83d8:	00 00 00 00 00 00 00 ff ff ff ff ff ff 3f 3f 3f     .............???
    83e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    83f8:	3f 00 00 00 00 00 00 ff ff ff ff ff ff e0 e0 e0     ?...............
    8408:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    8418:	e0 00 00 00 00 00 00 07 07 07 07 07 07 07 07 07     ................
    8428:	07 07 07 07 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    8438:	ff 00 00 00 00 00 00 fc fc fc fc fc fc fc fc fc     ................
    8448:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    8458:	ff 00 00 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f     .......?????????
    8468:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    8478:	ff 00 00 00 00 00 00 00 00 00 00 00 00 e0 e0 e0     ................
    8488:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    8498:	ff 00 00 00 00 00 00 00 00 00 00 00 00 07 07 07     ................
    84a8:	07 07 07 07 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    84b8:	ff 00 00 00 00 00 00 fc fc fc fc fc fc fc fc fc     ................
    84c8:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    84d8:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    84e8:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    84f8:	ff 00 00 00 00 00 00 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    8508:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    8518:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 07 07 07     ................
    8528:	07 07 07 07 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    8538:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8548:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    8558:	ff 00 00 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f     .......?????????
    8568:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    8578:	ff 00 00 00 00 00 00 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    8588:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    8598:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 07 07 07     ................
    85a8:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    85b8:	07 00 00 00 00 00 00 ff ff ff ff ff ff fc fc fc     ................
    85c8:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    85d8:	fc 00 00 00 00 00 00 ff ff ff ff ff ff 3f 3f 3f     .............???
    85e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    85f8:	ff 00 00 00 00 00 00 ff ff ff ff ff ff e0 e0 e0     ................
    8608:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    8618:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 07 07 07     ................
    8628:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    8638:	07 00 00 00 00 00 00 ff ff ff ff ff ff fc fc fc     ................
    8648:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    8658:	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8668:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    8678:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8688:	00 00 00 00 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    8698:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    86a8:	00 00 00 00 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    86b8:	ff 00 00 00 00 00 00 fc fc fc fc fc fc fc fc fc     ................
    86c8:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    86d8:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 3f 3f 3f     .............???
    86e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    86f8:	ff 00 00 00 00 00 00 ff ff ff ff ff ff e0 e0 e0     ................
    8708:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    8718:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 07 07 07     ................
    8728:	07 07 07 07 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    8738:	ff 00 00 00 00 00 00 ff ff ff ff ff ff fc fc fc     ................
    8748:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    8758:	ff 00 00 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f     .......?????????
    8768:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    8778:	ff 00 00 00 00 00 00 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    8788:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    8798:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 07 07 07     ................
    87a8:	07 07 07 07 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    87b8:	ff 00 00 00 00 00 00 ff ff ff ff ff ff fc fc fc     ................
    87c8:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    87d8:	ff 00 00 00 39 b9 ea aa 8d 8d a8 a8 27 27 a0 1f     ....9.......''..
    87e8:	4b 4b 8d 8d b5 34 00 00 42 82 f3 b3 f6 f6 a5 a5     KK...4..B.......
    87f8:	49 49 b7 b7 5d 5d 45 85 fc bc f6 b6 2d 2d c1 00     II..]]E.....--..
    8808:	7e 7e 3c 3c 03 83 94 13 f9 b9 ca 09 d3 12 84 84     ~~<<............

00008818 <lcdTestCLIDict_DescEntry>:
    8818:	54 65 73 74 20 6f 75 74 20 74 68 65 20 4c 43 44     Test out the LCD
    8828:	20 64 69 73 70 6c 61 79 2e 00                        display..

00008832 <lcdCLIDictName>:
    8832:	53 54 20 4c 43 44 20 4d 6f 64 75 6c 65 20 43 6f     ST LCD Module Co
    8842:	6d 6d 61 6e 64 73 00 00 00 00                       mmands....

0000884c <lcdCLIDict>:
    884c:	0d 89 00 00 35 89 00 00 fd 34 00 00 14 89 00 00     ....5....4......
    885c:	79 8b 00 00 29 34 00 00 1d 89 00 00 be 8b 00 00     y...)4..........
    886c:	4d 35 00 00 25 89 00 00 0c 8c 00 00 c3 36 00 00     M5..%........6..
    887c:	2d 89 00 00 18 88 00 00 f5 35 00 00 00 00 00 00     -........5......
    888c:	00 00 00 00 00 00 00 00 1b 5b 31 3b 33 32 6d 49     .........[1;32mI
    889c:	4e 46 4f 1b 5b 30 6d 20 2d 20 53 65 6e 64 69 6e     NFO.[0m - Sendin
    88ac:	67 20 2d 20 00 4c 43 44 5f 6c 61 79 65 72 53 74     g - .LCD_layerSt
    88bc:	61 63 6b 45 78 61 63 74 5f 63 61 70 61 62 69 6c     ackExact_capabil
    88cc:	69 74 79 28 6e 75 6d 2c 6c 61 79 65 72 31 2c 6c     ity(num,layer1,l
    88dc:	61 79 65 72 32 2c 6c 61 79 65 72 33 2c 6c 61 79     ayer2,layer3,lay
    88ec:	65 72 34 29 00 4c 43 44 5f 6c 61 79 65 72 53 74     er4).LCD_layerSt
    88fc:	61 63 6b 5f 63 61 70 61 62 69 6c 69 74 79 28 29     ack_capability()
    890c:	00 6c 63 64 43 6d 64 00 6c 63 64 43 6f 6c 6f 72     .lcdCmd.lcdColor
    891c:	00 6c 63 64 44 69 73 70 00 6c 63 64 49 6e 69 74     .lcdDisp.lcdInit
    892c:	00 6c 63 64 54 65 73 74 00                          .lcdTest.

00008935 <lcdCmdCLIDict_DescEntry>:
    8935:	53 65 6e 64 20 62 79 74 65 20 76 69 61 20 53 50     Send byte via SP
    8945:	49 2c 20 73 65 63 6f 6e 64 20 61 72 67 75 6d 65     I, second argume
    8955:	6e 74 20 65 6e 61 62 6c 65 73 20 61 30 2e 20 44     nt enables a0. D
    8965:	65 66 61 75 6c 74 73 20 74 6f 20 63 6f 6e 74 72     efaults to contr
    8975:	6f 6c 2e 00                                         ol..

00008979 <STLcdDefaultImage>:
    8979:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8989:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8999:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    89a9:	c0 c0 c0 c0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
    89b9:	ff ff ff ff ff 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    89c9:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    89d9:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    89e9:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    89f9:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a09:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a19:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8a29:	03 03 03 03 03 00 00 00 00 00 00 00 00 00 00 00     ................
    8a39:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8a49:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a59:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a69:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a79:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a89:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a99:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8aa9:	c0 c0 c0 c0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
    8ab9:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8ac9:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8ad9:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8ae9:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8af9:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8b09:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8b19:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8b29:	03 03 03 03 03 00 00 00 00 00 00 00 00 00 00 00     ................
    8b39:	ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8b49:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8b59:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8b69:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00008b79 <lcdColorCLIDict_DescEntry>:
    8b79:	53 65 74 20 62 61 63 6b 6c 69 67 68 74 20 63 6f     Set backlight co
    8b89:	6c 6f 72 2e 20 33 20 31 36 2d 62 69 74 20 6e 75     lor. 3 16-bit nu
    8b99:	6d 62 65 72 73 3a 20 52 20 47 20 42 2e 20 69 2e     mbers: R G B. i.
    8ba9:	65 2e 20 30 78 46 46 46 20 30 78 31 34 34 34 20     e. 0xFFF 0x1444 
    8bb9:	30 78 33 32 00                                      0x32.

00008bbe <lcdDispCLIDict_DescEntry>:
    8bbe:	57 72 69 74 65 20 62 79 74 65 28 73 29 20 74 6f     Write byte(s) to
    8bce:	20 67 69 76 65 6e 20 70 61 67 65 20 73 74 61 72      given page star
    8bde:	74 69 6e 67 20 61 74 20 67 69 76 65 6e 20 61 64     ting at given ad
    8bee:	64 72 65 73 73 2e 20 69 2e 65 2e 20 30 78 31 20     dress. i.e. 0x1 
    8bfe:	30 78 35 20 30 78 46 46 20 30 78 30 30 00           0x5 0xFF 0x00.

00008c0c <lcdInitCLIDict_DescEntry>:
    8c0c:	52 65 2d 69 6e 69 74 69 61 6c 69 7a 65 20 74 68     Re-initialize th
    8c1c:	65 20 4c 43 44 20 64 69 73 70 6c 61 79 2e 00 00     e LCD display...
    8c2c:	df 91 00 00 ea 91 00 00 f4 91 00 00 02 92 00 00     ................
    8c3c:	0b 92 00 00 14 92 00 00 1e 92 00 00 2f 92 00 00     ............/...
    8c4c:	3c 92 00 00 16 01 16 01 01 00 01 05 00 03 16 00     <...............

00008c5c <uartConnectCLIDict>:
    8c5c:	48 92 00 00 5c 93 00 00 09 43 00 00 53 92 00 00     H...\....C..S...
    8c6c:	bc 8c 00 00 c5 39 00 00 5e 92 00 00 c8 93 00 00     .....9..^.......
    8c7c:	9d 44 00 00 69 92 00 00 95 92 00 00 01 3b 00 00     .D..i........;..
    8c8c:	74 92 00 00 e3 92 00 00 a1 3c 00 00 7f 92 00 00     t........<......
    8c9c:	21 93 00 00 1d 45 00 00 8a 92 00 00 db 8c 00 00     !....E..........
    8cac:	59 3b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     Y;..............

00008cbc <connectDbgCLIDict_DescEntry>:
    8cbc:	54 6f 67 67 6c 65 20 55 41 52 54 43 6f 6e 6e 65     Toggle UARTConne
    8ccc:	63 74 20 64 65 62 75 67 20 6d 6f 64 65 2e 00        ct debug mode..

00008cdb <connectStsCLIDict_DescEntry>:
    8cdb:	55 41 52 54 43 6f 6e 6e 65 63 74 20 73 74 61 74     UARTConnect stat
    8ceb:	75 73 2e 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47     us...[1;35mDEBUG
    8cfb:	1b 5b 30 6d 20 2d 20 41 6e 69 6d 61 74 69 6f 6e     .[0m - Animation
    8d0b:	0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b     ....[1;32mINFO.[
    8d1b:	30 6d 20 2d 20 43 6f 6e 6e 65 63 74 20 44 65 62     0m - Connect Deb
    8d2b:	75 67 20 4d 6f 64 65 20 54 6f 67 67 6c 65 00 1b     ug Mode Toggle..
    8d3b:	5b 31 3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20     [1;35mDEBUG.[0m 
    8d4b:	2d 20 50 45 4e 44 49 4e 47 20 53 45 54 20 2d 3e     - PENDING SET ->
    8d5b:	20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47      ..[1;33mWARNING
    8d6b:	1b 5b 30 6d 20 2d 20 43 61 62 6c 65 20 46 61 75     .[0m - Cable Fau
    8d7b:	6c 74 21 0d 0a 00 20 53 6c 61 76 65 20 00 20 4d     lt!... Slave . M
    8d8b:	61 73 74 65 72 20 00 1b 5b 31 3b 33 35 6d 44 45     aster ..[1;35mDE
    8d9b:	42 55 47 1b 5b 30 6d 20 2d 20 43 41 42 4c 45 43     BUG.[0m - CABLEC
    8dab:	48 45 43 4b 20 52 45 43 45 49 56 45 20 2d 20 00     HECK RECEIVE - .
    8dbb:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    8dcb:	2d 20 4c 69 73 74 20 6f 66 20 55 41 52 54 43 6f     - List of UARTCo
    8ddb:	6e 6e 65 63 74 20 63 6f 6d 6d 61 6e 64 73 00 4d     nnect commands.M
    8deb:	61 73 74 65 72 00 53 6c 61 76 65 00 1b 5b 31 3b     aster.Slave..[1;
    8dfb:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 55 41     32mINFO.[0m - UA
    8e0b:	52 54 43 6f 6e 6e 65 63 74 20 53 74 61 74 75 73     RTConnect Status
    8e1b:	00 0d 0a 44 65 76 69 63 65 20 54 79 70 65 3a 09     ...Device Type:.
    8e2b:	00 0d 0a 44 65 76 69 63 65 20 49 64 3a 09 00 0d     ...Device Id:...
    8e3b:	0a 4d 61 78 20 49 64 3a 09 00 0d 0a 4d 61 73 74     .Max Id:....Mast
    8e4b:	65 72 20 3c 3d 0d 0a 09 53 74 61 74 75 73 3a 09     er <=...Status:.
    8e5b:	00 0d 0a 09 46 61 75 6c 74 73 3a 09 00 2f 00 0d     ....Faults:../..
    8e6b:	0a 09 52 78 3a 09 00 0d 0a 09 54 78 3a 09 00 0d     ..Rx:.....Tx:...
    8e7b:	0a 53 6c 61 76 65 20 3c 3d 0d 0a 09 53 74 61 74     .Slave <=...Stat
    8e8b:	75 73 3a 09 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     us:...[1;32mINFO
    8e9b:	1b 5b 30 6d 20 2d 20 53 65 74 74 69 6e 67 20 64     .[0m - Setting d
    8eab:	65 76 69 63 65 20 61 73 20 73 6c 61 76 65 2e 00     evice as slave..
    8ebb:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    8ecb:	2d 20 53 65 74 74 69 6e 67 20 64 65 76 69 63 65     - Setting device
    8edb:	20 61 73 20 6d 61 73 74 65 72 2e 00 1b 5b 31 3b      as master...[1;
    8eeb:	33 33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d     33mWARNING.[0m -
    8efb:	20 54 6f 6f 20 6d 75 63 68 20 64 61 74 61 20 74      Too much data t
    8f0b:	6f 20 73 65 6e 64 20 6f 6e 20 55 41 52 54 00 2c     o send on UART.,
    8f1b:	20 77 61 69 74 69 6e 67 2e 2e 2e 0d 0a 00 20 2b      waiting...... +
    8f2b:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    8f3b:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 53 63     [0m - Invalid Sc
    8f4b:	61 6e 43 6f 64 65 20 64 69 72 65 63 74 69 6f 6e     anCode direction
    8f5b:	2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 33 6d 57 41 52     .......[1;33mWAR
    8f6b:	4e 49 4e 47 1b 5b 30 6d 20 2d 20 4e 6f 74 20 65     NING.[0m - Not e
    8f7b:	6e 6f 75 67 68 20 69 6e 74 65 72 63 6f 6e 6e 65     nough interconne
    8f8b:	63 74 20 6c 61 79 6f 75 74 20 6e 6f 64 65 73 20     ct layout nodes 
    8f9b:	63 6f 6e 66 69 67 75 72 65 64 3a 20 00 1b 5b 31     configured: ..[1
    8fab:	3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20     ;35mDEBUG.[0m - 
    8fbb:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    8fcb:	5b 30 6d 20 2d 20 54 6f 6f 20 62 69 67 20 6f 66     [0m - Too big of
    8fdb:	20 61 20 63 6f 6d 6d 61 6e 64 20 74 6f 20 66 69      a command to fi
    8feb:	74 20 69 6e 74 6f 20 74 68 65 20 62 75 66 66 65     t into the buffe
    8ffb:	72 2e 2e 2e 00 1b 5b 31 3b 35 3b 33 31 6d 45 52     r.....[1;5;31mER
    900b:	52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76 61 6c 69     ROR.[0m - Invali
    901b:	64 20 55 41 52 54 20 74 6f 20 73 65 6e 64 20 66     d UART to send f
    902b:	72 6f 6d 2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 35 6d     rom.......[1;35m
    903b:	44 45 42 55 47 1b 5b 30 6d 20 2d 20 49 64 52 65     DEBUG.[0m - IdRe
    904b:	71 75 65 73 74 0d 0a 00 1b 5b 31 3b 35 3b 33 31     quest....[1;5;31
    905b:	6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76     mERROR.[0m - Inv
    906b:	61 6c 69 64 20 49 64 52 65 71 75 65 73 74 20 64     alid IdRequest d
    907b:	69 72 65 63 74 69 6f 6e 2e 2e 2e 0d 0a 00 1b 5b     irection.......[
    908b:	31 3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d     1;35mDEBUG.[0m -
    909b:	20 49 64 45 6e 75 6d 65 72 61 74 69 6f 6e 0d 0a      IdEnumeration..
    90ab:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    90bb:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 49 64     [0m - Invalid Id
    90cb:	45 6e 75 6d 65 72 61 74 69 6f 6e 20 64 69 72 65     Enumeration dire
    90db:	63 74 69 6f 6e 2e 2e 2e 0d 0a 00 1b 5b 31 3b 33     ction.......[1;3
    90eb:	35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20 49 64     5mDEBUG.[0m - Id
    90fb:	52 65 70 6f 72 74 0d 0a 00 1b 5b 31 3b 33 32 6d     Report....[1;32m
    910b:	49 4e 46 4f 1b 5b 30 6d 20 2d 20 49 64 20 52 65     INFO.[0m - Id Re
    911b:	70 6f 72 74 65 64 3a 20 00 1b 5b 31 3b 33 32 6d     ported: ..[1;32m
    912b:	49 4e 46 4f 1b 5b 30 6d 20 2d 20 53 65 6e 64 69     INFO.[0m - Sendi
    913b:	6e 67 20 53 79 6e 63 20 49 64 6c 65 73 2e 2e 2e     ng Sync Idles...
    914b:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    915b:	20 2d 20 52 65 73 65 74 74 69 6e 67 20 55 41 52      - Resetting UAR
    916b:	54 43 6f 6e 6e 65 63 74 20 73 74 61 74 65 2e 2e     TConnect state..
    917b:	2e 00 20 57 61 69 74 20 00 20 53 59 4e 20 00 20     .. Wait . SYN . 
    918b:	53 4f 48 20 00 20 23 23 23 20 00 20 43 4d 44 20     SOH . ### . CMD 
    919b:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    91ab:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 55 41     [0m - Invalid UA
    91bb:	52 54 53 74 61 74 75 73 2e 2e 2e 00 54 78 46 49     RTStatus....TxFI
    91cb:	46 4f 20 30 20 2d 20 00 54 78 46 49 46 4f 20 31     FO 0 - .TxFIFO 1
    91db:	20 2d 20 00 43 61 62 6c 65 43 68 65 63 6b 00 49      - .CableCheck.I
    91eb:	64 52 65 71 75 65 73 74 00 49 64 45 6e 75 6d 65     dRequest.IdEnume
    91fb:	72 61 74 69 6f 6e 00 49 64 52 65 70 6f 72 74 00     ration.IdReport.
    920b:	53 63 61 6e 43 6f 64 65 00 41 6e 69 6d 61 74 69     ScanCode.Animati
    921b:	6f 6e 00 52 65 6d 6f 74 65 43 61 70 61 62 69 6c     on.RemoteCapabil
    922b:	69 74 79 00 52 65 6d 6f 74 65 4f 75 74 70 75 74     ity.RemoteOutput
    923b:	00 52 65 6d 6f 74 65 49 6e 70 75 74 00 63 6f 6e     .RemoteInput.con
    924b:	6e 65 63 74 43 6d 64 00 63 6f 6e 6e 65 63 74 44     nectCmd.connectD
    925b:	62 67 00 63 6f 6e 6e 65 63 74 49 64 6c 00 63 6f     bg.connectIdl.co
    926b:	6e 6e 65 63 74 4c 73 74 00 63 6f 6e 6e 65 63 74     nnectLst.connect
    927b:	4d 73 74 00 63 6f 6e 6e 65 63 74 52 73 74 00 63     Mst.connectRst.c
    928b:	6f 6e 6e 65 63 74 53 74 73 00                       onnectSts.

00009295 <connectLstCLIDict_DescEntry>:
    9295:	4c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 20     Lists available 
    92a5:	55 41 52 54 43 6f 6e 6e 65 63 74 20 63 6f 6d 6d     UARTConnect comm
    92b5:	61 6e 64 73 20 61 6e 64 20 69 6e 64 65 78 20 69     ands and index i
    92c5:	64 00                                               d.

000092c7 <uartConnectCLIDictName>:
    92c7:	55 41 52 54 43 6f 6e 6e 65 63 74 20 4d 6f 64 75     UARTConnect Modu
    92d7:	6c 65 20 43 6f 6d 6d 61 6e 64 73 00                 le Commands.

000092e3 <connectMstCLIDict_DescEntry>:
    92e3:	53 65 74 73 20 74 68 65 20 64 65 76 69 63 65 20     Sets the device 
    92f3:	61 73 20 6d 61 73 74 65 72 2e 20 55 73 65 20 61     as master. Use a
    9303:	72 67 75 6d 65 6e 74 20 6f 66 20 73 20 74 6f 20     rgument of s to 
    9313:	73 65 74 20 61 73 20 73 6c 61 76 65 2e 00           set as slave..

00009321 <connectRstCLIDict_DescEntry>:
    9321:	52 65 73 65 74 73 20 62 6f 74 68 20 52 78 20 61     Resets both Rx a
    9331:	6e 64 20 54 78 20 63 6f 6e 6e 65 63 74 20 62 75     nd Tx connect bu
    9341:	66 66 65 72 73 20 61 6e 64 20 73 74 61 74 65 20     ffers and state 
    9351:	76 61 72 69 61 62 6c 65 73 2e 00                    variables..

0000935c <connectCmdCLIDict_DescEntry>:
    935c:	53 65 6e 64 73 20 61 20 63 6f 6d 6d 61 6e 64 20     Sends a command 
    936c:	76 69 61 20 55 41 52 54 20 43 6f 6e 6e 65 63 74     via UART Connect
    937c:	2c 20 66 69 72 73 74 20 61 72 67 20 69 73 20 77     , first arg is w
    938c:	68 69 63 68 20 75 61 72 74 2c 20 6e 65 78 74 20     hich uart, next 
    939c:	61 72 67 20 69 73 20 74 68 65 20 63 6f 6d 6d 61     arg is the comma
    93ac:	6e 64 2c 20 72 65 73 74 20 61 72 65 20 74 68 65     nd, rest are the
    93bc:	20 61 72 67 75 6d 65 6e 74 73 2e 00                  arguments..

000093c8 <connectIdlCLIDict_DescEntry>:
    93c8:	53 65 6e 64 73 20 4e 20 6e 75 6d 62 65 72 20 6f     Sends N number o
    93d8:	66 20 49 64 6c 65 20 63 6f 6d 6d 61 6e 64 73 2c     f Idle commands,
    93e8:	20 32 20 69 73 20 74 68 65 20 64 65 66 61 75 6c      2 is the defaul
    93f8:	74 20 76 61 6c 75 65 2c 20 61 6e 64 20 73 68 6f     t value, and sho
    9408:	75 6c 64 20 62 65 20 73 75 66 66 69 63 69 65 6e     uld be sufficien
    9418:	74 20 69 6e 20 6d 6f 73 74 20 63 61 73 65 73 2e     t in most cases.
    9428:	00                                                  .

00009429 <rm17_guide>:
    9429:	01 0e 51 00                                         ..Q.

0000942d <tm13_guide>:
    942d:	01 00 01 03 00                                      .....

00009432 <rm3_guide>:
    9432:	01 0e 33 00                                         ..3.

00009436 <tm34_guide>:
    9436:	01 00 01 25 00 00                                   ...%..

0000943c <CapabilitiesList>:
    943c:	e1 37 00 00 09 00 00 00 f9 38 00 00 00 00 00 00     .7.......8......
    944c:	95 2e 00 00 04 00 00 00 8d 50 00 00 02 00 00 00     .........P......
    945c:	b5 50 00 00 02 00 00 00 dd 50 00 00 01 00 00 00     .P.......P......
    946c:	65 50 00 00 02 00 00 00 3d 50 00 00 03 00 00 00     eP......=P......
    947c:	1d 5e 00 00 02 00 00 00 e1 5e 00 00 00 00 00 00     .^.......^......
    948c:	25 5f 00 00 00 00 00 00 55 5f 00 00 00 00 00 00     %_......U_......
    949c:	75 5e 00 00 00 00 00 00 89 5e 00 00 01 00 00 00     u^.......^......
    94ac:	89 5f 00 00 01 00 00 00                             ._......

000094b4 <rm8_guide>:
    94b4:	02 06 04 00 01 00                                   ......

000094ba <rm36_guide>:
    94ba:	01 0e 0c 00                                         ....

000094be <rm60_guide>:
    94be:	01 0e 2d 00                                         ..-.

000094c2 <tm36_guide>:
    94c2:	01 00 01 3b 00                                      ...;.

000094c7 <tm60_guide>:
    94c7:	01 00 01 35 00                                      ...5.

000094cc <tm27_guide>:
    94cc:	01 00 01 50 00                                      ...P.

000094d1 <rm75_guide>:
    94d1:	01 0e e7 00 00 00 00                                .......

000094d8 <default_tl_0x13>:
    94d8:	00 00 00 00                                         ....

000094dc <rm5_guide>:
    94dc:	01 0e 0d 00                                         ....

000094e0 <rm38_guide>:
    94e0:	01 0e 4e 00                                         ..N.

000094e4 <rm62_guide>:
    94e4:	01 0e 0f 00                                         ....

000094e8 <tm38_guide>:
    94e8:	01 00 01 52 00                                      ...R.

000094ed <tm62_guide>:
    94ed:	01 00 01 45 00                                      ...E.

000094f2 <rm25_guide>:
    94f2:	01 0e 0a 00                                         ....

000094f6 <tm11_guide>:
    94f6:	01 00 01 26 00                                      ...&.

000094fb <rm64_guide>:
    94fb:	01 0e 21 00                                         ..!.

000094ff <tm64_guide>:
    94ff:	01 00 01 04 00                                      .....

00009504 <rm35_guide>:
    9504:	01 0e 2f 00                                         ../.

00009508 <keyReleaseCLIDict_DescEntry>:
    9508:	53 65 6e 64 20 6b 65 79 2d 72 65 6c 65 61 73 65     Send key-release
    9518:	20 65 76 65 6e 74 20 74 6f 20 6d 61 63 72 6f 20      event to macro 
    9528:	6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69 63 61 74     module. Duplicat
    9538:	65 73 20 68 61 76 65 20 75 6e 64 65 66 69 6e 65     es have undefine
    9548:	64 20 62 65 68 61 76 69 6f 75 72 2e 0d 0a 09 09     d behaviour.....
    9558:	1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20 53 63 61     .[35mS10.[0m Sca
    9568:	6e 63 6f 64 65 20 30 78 30 41 00 00                 ncode 0x0A..

00009574 <default_tl_0x54>:
    9574:	01 00 00 00 15 00 00 00                             ........

0000957c <default_tl_0x1C>:
    957c:	01 00 00 00 3d 00 00 00                             ....=...

00009584 <rm15_guide>:
    9584:	01 0e 28 00                                         ..(.

00009588 <layer1_tl_0x44>:
    9588:	01 00 00 00 4e 00 00 00                             ....N...

00009590 <tm66_guide>:
    9590:	01 00 01 1d 00                                      .....

00009595 <rm19_guide>:
    9595:	01 0e 35 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b     ..5..[1;32mINFO.
    95a5:	5b 30 6d 20 2d 20 43 61 70 61 62 69 6c 69 74 69     [0m - Capabiliti
    95b5:	65 73 20 4c 69 73 74 20 00 0d 0a 09 00 1b 5b 31     es List ......[1
    95c5:	3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 4b     ;32mINFO.[0m - K
    95d5:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    95e5:	20 2d 20 4c 61 79 65 72 20 44 65 62 75 67 20 4d      - Layer Debug M
    95f5:	6f 64 65 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e 46     ode: ..[1;32mINF
    9605:	4f 1b 5b 30 6d 20 2d 20 53 65 74 74 69 6e 67 20     O.[0m - Setting 
    9615:	4c 61 79 65 72 20 4c 00 20 74 6f 20 2d 20 00 1b     Layer L. to - ..
    9625:	5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d     [1;32mINFO.[0m -
    9635:	20 4d 61 63 72 6f 20 44 65 62 75 67 20 4d 6f 64      Macro Debug Mod
    9645:	65 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b     e: ..[1;32mINFO.
    9655:	5b 30 6d 20 2d 20 4d 61 63 72 6f 20 50 72 6f 63     [0m - Macro Proc
    9665:	65 73 73 69 6e 67 20 4d 6f 64 65 3a 20 00 1b 5b     essing Mode: ..[
    9675:	31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20     1;32mINFO.[0m - 
    9685:	4c 61 79 65 72 20 4c 69 73 74 00 44 3a 20 52 65     Layer List.D: Re
    9695:	6d 6f 74 65 52 65 6c 6f 61 64 20 2b 20 6d 61 72     moteReload + mar
    96a5:	63 75 73 20 2b 20 6c 63 64 46 75 6e 63 4d 61 70     cus + lcdFuncMap
    96b5:	00 20 1b 5b 31 6d 28 64 65 66 61 75 6c 74 29 1b     . .[1m(default).
    96c5:	5b 30 6d 00 0d 0a 09 09 20 4c 61 79 65 72 20 53     [0m..... Layer S
    96d5:	74 61 74 65 3a 20 00 20 46 69 72 73 74 20 2d 3e     tate: . First ->
    96e5:	20 4c 61 73 74 20 49 6e 64 69 63 65 73 3a 20 00      Last Indices: .
    96f5:	31 3a 20 6d 61 72 63 75 73 00 1b 5b 31 3b 33 32     1: marcus..[1;32
    9705:	6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 50 65 6e 64     mINFO.[0m - Pend
    9715:	69 6e 67 20 4b 65 79 20 45 76 65 6e 74 73 3a 20     ing Key Events: 
    9725:	00 20 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     . : ..[1;32mINFO
    9735:	1b 5b 30 6d 20 2d 20 50 65 6e 64 69 6e 67 20 54     .[0m - Pending T
    9745:	72 69 67 67 65 72 20 4d 61 63 72 6f 73 3a 20 00     rigger Macros: .
    9755:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    9765:	2d 20 50 65 6e 64 69 6e 67 20 52 65 73 75 6c 74     - Pending Result
    9775:	20 4d 61 63 72 6f 73 3a 20 00 1b 5b 31 3b 33 32      Macros: ..[1;32
    9785:	6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 54 72 69 67     mINFO.[0m - Trig
    9795:	67 65 72 20 4d 61 63 72 6f 73 20 52 61 6e 67 65     ger Macros Range
    97a5:	3a 20 54 30 20 2d 3e 20 54 00 1b 5b 31 3b 33 32     : T0 -> T..[1;32
    97b5:	6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 52 65 73 75     mINFO.[0m - Resu
    97c5:	6c 74 20 20 4d 61 63 72 6f 73 20 52 61 6e 67 65     lt  Macros Range
    97d5:	3a 20 52 30 20 2d 3e 20 52 00 1b 5b 31 3b 33 32     : R0 -> R..[1;32
    97e5:	6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 54 72 69 67     mINFO.[0m - Trig
    97f5:	67 65 72 20 3a 20 52 65 73 75 6c 74 20 4d 61 63     ger : Result Mac
    9805:	72 6f 20 50 61 69 72 73 00 09 54 00 20 3a 20 52     ro Pairs..T. : R
    9815:	00 1b 5b 31 3b 33 35 6d 44 45 42 55 47 1b 5b 30     ..[1;35mDEBUG.[0
    9825:	6d 20 2d 20 4c 61 79 65 72 20 00 20 30 00 4d 61     m - Layer . 0.Ma
    9835:	63 72 6f 5f 6c 61 79 65 72 53 74 61 74 65 28 6c     cro_layerState(l
    9845:	61 79 65 72 49 6e 64 65 78 2c 6c 61 79 65 72 53     ayerIndex,layerS
    9855:	74 61 74 65 29 00 4d 61 63 72 6f 5f 6c 61 79 65     tate).Macro_laye
    9865:	72 53 68 69 66 74 28 6c 61 79 65 72 49 6e 64 65     rShift(layerInde
    9875:	78 29 00 4d 61 63 72 6f 5f 6c 61 79 65 72 4c 61     x).Macro_layerLa
    9885:	74 63 68 28 6c 61 79 65 72 49 6e 64 65 78 29 00     tch(layerIndex).
    9895:	4d 61 63 72 6f 5f 6c 61 79 65 72 4c 6f 63 6b 28     Macro_layerLock(
    98a5:	6c 61 79 65 72 49 6e 64 65 78 29 00 4d 61 63 72     layerIndex).Macr
    98b5:	6f 5f 6c 61 79 65 72 52 6f 74 61 74 65 28 70 72     o_layerRotate(pr
    98c5:	65 76 69 6f 75 73 29 00 1b 5b 31 3b 35 3b 33 31     evious)..[1;5;31
    98d5:	6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 53 63 61     mERROR.[0m - Sca
    98e5:	6e 20 43 6f 64 65 20 68 61 73 20 6e 6f 20 64 65     n Code has no de
    98f5:	66 69 6e 65 64 20 54 72 69 67 67 65 72 20 4d 61     fined Trigger Ma
    9905:	63 72 6f 3a 20 00 1b 5b 31 3b 35 3b 33 31 6d 45     cro: ..[1;5;31mE
    9915:	52 52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76 61 6c     RROR.[0m - Inval
    9925:	69 64 20 6b 65 79 20 73 74 61 74 65 20 2d 20 00     id key state - .
    9935:	1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b     .[1;5;31mERROR.[
    9945:	30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 74 79 70     0m - Invalid typ
    9955:	65 20 2d 20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e     e - ..[1;33mWARN
    9965:	49 4e 47 1b 5b 30 6d 20 2d 20 53 63 61 6e 43 6f     ING.[0m - ScanCo
    9975:	64 65 20 69 73 20 6f 75 74 20 6f 66 20 72 61 6e     de is out of ran
    9985:	67 65 2f 6e 6f 74 20 64 65 66 69 6e 65 64 20 2d     ge/not defined -
    9995:	20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47      ..[1;33mWARNING
    99a5:	1b 5b 30 6d 20 2d 20 53 63 61 6e 43 6f 64 65 20     .[0m - ScanCode 
    99b5:	69 73 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 2f     is out of range/
    99c5:	6e 6f 74 20 64 65 66 69 6e 65 64 3a 20 00 1b 5b     not defined: ..[
    99d5:	31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30 6d     1;5;31mERROR.[0m
    99e5:	20 2d 20 4c 45 44 20 53 74 61 74 65 20 54 79 70      - LED State Typ
    99f5:	65 20 2d 20 4e 6f 74 20 69 6d 70 6c 65 6d 65 6e     e - Not implemen
    9a05:	74 65 64 2e 2e 2e 0d 0a 00 1b 5b 31 3b 35 3b 33     ted.......[1;5;3
    9a15:	31 6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 41 6e     1mERROR.[0m - An
    9a25:	61 6c 6f 67 20 53 74 61 74 65 20 54 79 70 65 20     alog State Type 
    9a35:	2d 20 4e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65     - Not implemente
    9a45:	64 2e 2e 2e 0d 0a 00 1b 5b 31 3b 35 3b 33 31 6d     d.......[1;5;31m
    9a55:	45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76 61     ERROR.[0m - Inva
    9a65:	6c 69 64 20 53 74 61 74 65 20 54 79 70 65 2e 20     lid State Type. 
    9a75:	54 68 69 73 20 69 73 20 61 20 62 75 67 2e 0d 0a     This is a bug...
    9a85:	00 1b 5b 31 3b 33 35 6d 44 45 42 55 47 1b 5b 30     ..[1;35mDEBUG.[0
    9a95:	6d 20 2d 20 4d 61 63 72 6f 20 53 74 65 70 0d 0a     m - Macro Step..
    9aa5:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    9ab5:	20 2d 20 54 72 69 67 67 65 72 20 4d 61 63 72 6f      - Trigger Macro
    9ac5:	20 49 6e 64 65 78 3a 20 00 7c 00 3b 00 0d 0a 50      Index: .|.;...P
    9ad5:	6f 73 69 74 69 6f 6e 3a 20 00 0d 0a 52 65 73 75     osition: ...Resu
    9ae5:	6c 74 20 4d 61 63 72 6f 20 49 6e 64 65 78 3a 20     lt Macro Index: 
    9af5:	00 0d 0a 54 72 69 67 67 65 72 20 4d 61 63 72 6f     ...Trigger Macro
    9b05:	20 53 74 61 74 65 3a 20 00 57 61 69 74 69 6e 67      State: .Waiting
    9b15:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    9b25:	20 2d 20 52 65 73 75 6c 74 20 4d 61 63 72 6f 20      - Result Macro 
    9b35:	49 6e 64 65 78 3a 20 00 28 00 2c 00 0d 0a 46 69     Index: .(.,...Fi
    9b45:	6e 61 6c 20 54 72 69 67 67 65 72 20 53 74 61 74     nal Trigger Stat
    9b55:	65 20 28 53 74 61 74 65 2f 54 79 70 65 29 3a 20     e (State/Type): 
    9b65:	00 63 61 70 4c 69 73 74 00 63 61 70 53 65 6c 65     .capList.capSele
    9b75:	63 74 00 6b 65 79 48 6f 6c 64 00 6b 65 79 50 72     ct.keyHold.keyPr
    9b85:	65 73 73 00 6b 65 79 52 65 6c 65 61 73 65 00 6c     ess.keyRelease.l
    9b95:	61 79 65 72 44 65 62 75 67 00 6c 61 79 65 72 4c     ayerDebug.layerL
    9ba5:	69 73 74 00 6c 61 79 65 72 53 74 61 74 65 00 6d     ist.layerState.m
    9bb5:	61 63 72 6f 44 65 62 75 67 00 6d 61 63 72 6f 4c     acroDebug.macroL
    9bc5:	69 73 74 00 6d 61 63 72 6f 50 72 6f 63 00 6d 61     ist.macroProc.ma
    9bd5:	63 72 6f 53 68 6f 77 00 6d 61 63 72 6f 53 74 65     croShow.macroSte
    9be5:	70 00                                               p.

00009be7 <rm20_guide>:
    9be7:	01 0e 31 00                                         ..1.

00009beb <macroProcCLIDict_DescEntry>:
    9beb:	50 61 75 73 65 2f 52 65 73 75 6d 65 20 6d 61 63     Pause/Resume mac
    9bfb:	72 6f 20 70 72 6f 63 65 73 73 69 6e 67 2e 00        ro processing..

00009c0a <tm15_guide>:
    9c0a:	01 00 01 53 00                                      ...S.

00009c0f <rm78_guide>:
    9c0f:	01 08 b6 00 00                                      .....

00009c14 <rm41_guide>:
    9c14:	01 0e 1b 00                                         ....

00009c18 <tm17_guide>:
    9c18:	01 00 01 57 00                                      ...W.

00009c1d <tm68_guide>:
    9c1d:	01 00 01 58 00                                      ...X.

00009c22 <tm41_guide>:
    9c22:	01 00 01 21 00                                      ...!.

00009c27 <keyPressCLIDict_DescEntry>:
    9c27:	53 65 6e 64 20 6b 65 79 2d 70 72 65 73 73 20 65     Send key-press e
    9c37:	76 65 6e 74 73 20 74 6f 20 74 68 65 20 6d 61 63     vents to the mac
    9c47:	72 6f 20 6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69     ro module. Dupli
    9c57:	63 61 74 65 73 20 68 61 76 65 20 75 6e 64 65 66     cates have undef
    9c67:	69 6e 65 64 20 62 65 68 61 76 69 6f 75 72 2e 0d     ined behaviour..
    9c77:	0a 09 09 1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20     ....[35mS10.[0m 
    9c87:	53 63 61 6e 63 6f 64 65 20 30 78 30 41 00           Scancode 0x0A.

00009c95 <macroCLIDictName>:
    9c95:	4d 61 63 72 6f 20 4d 6f 64 75 6c 65 20 43 6f 6d     Macro Module Com
    9ca5:	6d 61 6e 64 73 00                                   mands.

00009cab <rm43_guide>:
    9cab:	01 0e 1c 00                                         ....

00009caf <tm19_guide>:
    9caf:	01 00 01 2b 00                                      ...+.

00009cb4 <rm81_guide>:
    9cb4:	01 08 ea 00 00                                      .....

00009cb9 <tm43_guide>:
    9cb9:	01 00 01 39 00                                      ...9.

00009cbe <rm16_guide>:
    9cbe:	01 0e 07 00                                         ....

00009cc2 <rm32_guide>:
    9cc2:	01 0e 08 00                                         ....

00009cc6 <rm23_guide>:
    9cc6:	01 0e 16 00                                         ....

00009cca <layerDebugCLIDict_DescEntry>:
    9cca:	4c 61 79 65 72 20 64 65 62 75 67 20 6d 6f 64 65     Layer debug mode
    9cda:	2e 20 53 68 6f 77 73 20 6c 61 79 65 72 20 73 74     . Shows layer st
    9cea:	61 63 6b 20 61 6e 64 20 61 6e 79 20 63 68 61 6e     ack and any chan
    9cfa:	67 65 73 2e 00                                      ges..

00009cff <rm34_guide>:
    9cff:	01 0e 4d 00                                         ..M.

00009d03 <rm54_guide>:
    9d03:	01 0e 23 00                                         ..#.

00009d07 <rm7_guide>:
    9d07:	01 0e 34 00                                         ..4.

00009d0b <rm45_guide>:
    9d0b:	01 0e 37 00                                         ..7.

00009d0f <tm45_guide>:
    9d0f:	01 00 01 4e 00                                      ...N.

00009d14 <default_tl_0x2E>:
    9d14:	00 00 00 00                                         ....

00009d18 <rm27_guide>:
    9d18:	01 0e e5 00                                         ....

00009d1c <tm23_guide>:
    9d1c:	01 00 01 18 00                                      .....

00009d21 <rm47_guide>:
    9d21:	01 0e 11 00                                         ....

00009d25 <rm10_guide>:
    9d25:	01 0e 0e 00 00 00 00                                .......

00009d2c <layer1_tl_0x42>:
    9d2c:	01 00 00 00 50 00 00 00                             ....P...

00009d34 <tm47_guide>:
    9d34:	01 00 01 4b 00                                      ...K.

00009d39 <tm10_guide>:
    9d39:	01 00 01 44 00                                      ...D.

00009d3e <tm71_guide>:
    9d3e:	01 00 01 2c 00 00                                   ...,..

00009d44 <default_tl_0x02>:
    9d44:	01 00 00 00 06 00 00 00                             ........

00009d4c <default_tl_0x03>:
    9d4c:	01 00 00 00 0d 00 00 00                             ........

00009d54 <default_tl_0x04>:
    9d54:	01 00 00 00 40 00 00 00                             ....@...

00009d5c <default_tl_0x05>:
    9d5c:	01 00 00 00 45 00 00 00                             ....E...

00009d64 <default_tl_0x06>:
    9d64:	01 00 00 00 00 00 00 00                             ........

00009d6c <default_tl_0x07>:
    9d6c:	01 00 00 00 34 00 00 00                             ....4...

00009d74 <default_tl_0x08>:
    9d74:	01 00 00 00 39 00 00 00                             ....9...

00009d7c <default_tl_0x09>:
    9d7c:	00 00 00 00                                         ....

00009d80 <rm55_guide>:
    9d80:	01 0e 15 00                                         ....

00009d84 <layer1_tl_0x49>:
    9d84:	00 00 00 00                                         ....

00009d88 <rm73_guide>:
    9d88:	01 0e 25 00                                         ..%.

00009d8c <tm49_guide>:
    9d8c:	01 00 01 4f 00                                      ...O.

00009d91 <tm12_guide>:
    9d91:	01 00 01 56 00                                      ...V.

00009d96 <tm73_guide>:
    9d96:	01 00 01 32 00 00                                   ...2..

00009d9c <default_tl_0x0A>:
    9d9c:	00 00 00 00                                         ....

00009da0 <default_tl_0x0B>:
    9da0:	01 00 00 00 23 00 00 00                             ....#...

00009da8 <default_tl_0x0C>:
    9da8:	01 00 00 00 30 00 00 00                             ....0...

00009db0 <default_tl_0x0D>:
    9db0:	01 00 00 00 37 00 00 00                             ....7...

00009db8 <default_tl_0x0E>:
    9db8:	01 00 00 00 20 00 00 00                             .... ...

00009dc0 <default_tl_0x0F>:
    9dc0:	01 00 00 00 25 00 00 00                             ....%...

00009dc8 <rm37_guide>:
    9dc8:	01 0e 1a 00                                         ....

00009dcc <ResultMacroList>:
    9dcc:	31 a0 00 00 d2 a9 00 00 57 a1 00 00 32 94 00 00     1.......W...2...
    9ddc:	cb a0 00 00 dc 94 00 00 78 a3 00 00 07 9d 00 00     ........x.......
    9dec:	b4 94 00 00 59 9f 00 00 25 9d 00 00 0a a5 00 00     ....Y...%.......
    9dfc:	5c a4 00 00 12 a5 00 00 57 a3 00 00 84 95 00 00     \.......W.......
    9e0c:	be 9c 00 00 29 94 00 00 16 a2 00 00 95 95 00 00     ....)...........
    9e1c:	e7 9b 00 00 c1 a9 00 00 51 9f 00 00 c6 9c 00 00     ........Q.......
    9e2c:	60 a1 00 00 f2 94 00 00 66 a3 00 00 18 9d 00 00     `.......f.......
    9e3c:	01 a8 00 00 09 a9 00 00 ce 9f 00 00 10 a2 00 00     ................
    9e4c:	c2 9c 00 00 69 a1 00 00 ff 9c 00 00 04 95 00 00     ....i...........
    9e5c:	ba 94 00 00 c8 9d 00 00 e0 94 00 00 1a a2 00 00     ................
    9e6c:	84 a3 00 00 14 9c 00 00 df a3 00 00 ab 9c 00 00     ................
    9e7c:	ce a9 00 00 0b 9d 00 00 70 a4 00 00 21 9d 00 00     ........p...!...
    9e8c:	06 a5 00 00 01 a0 00 00 3e 9f 00 00 cf a0 00 00     ........>.......
    9e9c:	62 9f 00 00 05 a9 00 00 03 9d 00 00 80 9d 00 00     b...............
    9eac:	55 9f 00 00 9c a9 00 00 28 a0 00 00 c5 a9 00 00     U.......(.......
    9ebc:	be 94 00 00 6c a4 00 00 e4 94 00 00 f3 a8 00 00     ....l...........
    9ecc:	fb 94 00 00 5d a3 00 00 e4 a2 00 00 80 a3 00 00     ....]...........
    9edc:	98 a9 00 00 7c a3 00 00 74 a4 00 00 25 a5 00 00     ....|...t...%...
    9eec:	0e a5 00 00 88 9d 00 00 ef a3 00 00 d1 94 00 00     ................
    9efc:	c3 a8 00 00 c9 9f 00 00 0f 9c 00 00 dc a3 00 00     ................
    9f0c:	fc 9f 00 00 b4 9c 00 00 75 9f 00 00                 ........u...

00009f18 <tm2_guide>:
    9f18:	01 00 01 16 00                                      .....

00009f1d <tm14_guide>:
    9f1d:	01 00 01 2a 00                                      ...*.

00009f22 <tm75_guide>:
    9f22:	01 00 01 59 00                                      ...Y.

00009f27 <tm31_guide>:
    9f27:	01 00 01 28 00                                      ...(.

00009f2c <default_tl_0x24>:
    9f2c:	01 00 00 00 1d 00 00 00                             ........

00009f34 <tm5_guide>:
    9f34:	01 00 01 43 00                                      ...C.

00009f39 <tm22_guide>:
    9f39:	01 00 01 3a 00                                      ...:.

00009f3e <rm50_guide>:
    9f3e:	01 0e 26 00                                         ..&.

00009f42 <tm26_guide>:
    9f42:	01 00 01 27 00                                      ...'.

00009f47 <tm77_guide>:
    9f47:	01 00 01 43 00                                      ...C.

00009f4c <tm50_guide>:
    9f4c:	01 00 01 33 00                                      ...3.

00009f51 <rm22_guide>:
    9f51:	01 0e 18 00                                         ....

00009f55 <rm56_guide>:
    9f55:	01 0e 27 00                                         ..'.

00009f59 <rm9_guide>:
    9f59:	01 0e e2 00                                         ....

00009f5d <tm7_guide>:
    9f5d:	01 00 01 47 00                                      ...G.

00009f62 <rm52_guide>:
    9f62:	01 0e 1e 00                                         ....

00009f66 <tm28_guide>:
    9f66:	01 00 01 42 00                                      ...B.

00009f6b <tm79_guide>:
    9f6b:	01 00 01 53 00                                      ...S.

00009f70 <tm52_guide>:
    9f70:	01 00 01 07 00                                      .....

00009f75 <rm82_guide>:
    9f75:	01 08 b5 00 00 00 00                                .......

00009f7c <default_tl_0x2C>:
    9f7c:	01 00 00 00 47 00 00 00                             ....G...

00009f84 <default_tl_0x10>:
    9f84:	01 00 00 00 2a 00 00 00                             ....*...

00009f8c <default_tl_0x11>:
    9f8c:	01 00 00 00 14 00 00 00                             ........

00009f94 <default_tl_0x12>:
    9f94:	00 00 00 00                                         ....

00009f98 <default_tl_0x14>:
    9f98:	00 00 00 00                                         ....

00009f9c <default_tl_0x15>:
    9f9c:	01 00 00 00 19 00 00 00                             ........

00009fa4 <default_tl_0x16>:
    9fa4:	01 00 00 00 02 00 00 00                             ........

00009fac <default_tl_0x17>:
    9fac:	01 00 00 00 10 00 00 00                             ........

00009fb4 <default_tl_0x18>:
    9fb4:	01 00 00 00 17 00 00 00                             ........

00009fbc <default_tl_0x19>:
    9fbc:	01 00 00 00 4a 00 00 00                             ....J...

00009fc4 <tm54_guide>:
    9fc4:	01 00 01 30 00                                      ...0.

00009fc9 <rm77_guide>:
    9fc9:	01 08 cd 00 00                                      .....

00009fce <rm30_guide>:
    9fce:	01 0e 36 00 00 00                                   ..6...

00009fd4 <default_tl_0x1A>:
    9fd4:	01 00 00 00 04 00 00 00                             ........

00009fdc <default_tl_0x1B>:
    9fdc:	01 00 00 00 09 00 00 00                             ........

00009fe4 <default_tl_0x1D>:
    9fe4:	01 00 00 00 42 00 00 00                             ....B...

00009fec <default_tl_0x1E>:
    9fec:	01 00 00 00 2c 00 00 00                             ....,...

00009ff4 <default_tl_0x1F>:
    9ff4:	01 00 00 00 3a 00 00 00                             ....:...

00009ffc <rm80_guide>:
    9ffc:	01 08 26 02 00                                      ..&..

0000a001 <rm49_guide>:
    a001:	01 0e 38 00                                         ..8.

0000a005 <tm56_guide>:
    a005:	01 00 01 34 00                                      ...4.

0000a00a <tm80_guide>:
    a00a:	01 00 01 42 00 00                                   ...B..

0000a010 <LayerIndex>:
    a010:	e4 89 ff 1f 90 96 00 00 02 59 00 00 44 8b ff 1f     .........Y..D...
    a020:	f5 96 00 00 42 53 00 00                             ....BS..

0000a028 <rm58_guide>:
    a028:	01 0e 19 00                                         ....

0000a02c <tm0_guide>:
    a02c:	01 00 01 06 00                                      .....

0000a031 <rm0_guide>:
    a031:	01 0e 1f 00                                         ....

0000a035 <tm58_guide>:
    a035:	01 00 01 1f 00                                      .....

0000a03a <tm21_guide>:
    a03a:	01 00 01 54 00                                      ...T.

0000a03f <tm82_guide>:
    a03f:	01 00 01 45 00                                      ...E.

0000a044 <layerStateCLIDict_DescEntry>:
    a044:	4d 6f 64 69 66 79 20 73 70 65 63 69 66 69 65 64     Modify specified
    a054:	20 69 6e 64 65 78 65 64 20 6c 61 79 65 72 20 73      indexed layer s
    a064:	74 61 74 65 20 3c 6c 61 79 65 72 3e 20 3c 73 74     tate <layer> <st
    a074:	61 74 65 20 62 79 74 65 3e 2e 0d 0a 09 09 1b 5b     ate byte>......[
    a084:	33 35 6d 4c 32 1b 5b 30 6d 20 49 6e 64 65 78 65     35mL2.[0m Indexe
    a094:	64 20 4c 61 79 65 72 20 30 78 30 32 0d 0a 09 09     d Layer 0x02....
    a0a4:	30 20 4f 66 66 2c 20 31 20 53 68 69 66 74 2c 20     0 Off, 1 Shift, 
    a0b4:	32 20 4c 61 74 63 68 2c 20 34 20 4c 6f 63 6b 20     2 Latch, 4 Lock 
    a0c4:	53 74 61 74 65 73 00                                States.

0000a0cb <rm4_guide>:
    a0cb:	01 0e 2b 00                                         ..+.

0000a0cf <rm51_guide>:
    a0cf:	01 0e e1 00                                         ....

0000a0d3 <macroShowCLIDict_DescEntry>:
    a0d3:	53 68 6f 77 20 74 68 65 20 6d 61 63 72 6f 20 63     Show the macro c
    a0e3:	6f 72 72 65 73 70 6f 6e 64 69 6e 67 20 74 6f 20     orresponding to 
    a0f3:	74 68 65 20 67 69 76 65 6e 20 69 6e 64 65 78 2e     the given index.
    a103:	0d 0a 09 09 1b 5b 33 35 6d 54 31 36 1b 5b 30 6d     .....[35mT16.[0m
    a113:	20 49 6e 64 65 78 65 64 20 54 72 69 67 67 65 72      Indexed Trigger
    a123:	20 4d 61 63 72 6f 20 30 78 31 30 2c 20 1b 5b 33      Macro 0x10, .[3
    a133:	35 6d 52 31 32 1b 5b 30 6d 20 49 6e 64 65 78 65     5mR12.[0m Indexe
    a143:	64 20 52 65 73 75 6c 74 20 4d 61 63 72 6f 20 30     d Result Macro 0
    a153:	78 30 43 00                                         x0C.

0000a157 <rm2_guide>:
    a157:	01 0e 09 00                                         ....

0000a15b <tm33_guide>:
    a15b:	01 00 01 51 00                                      ...Q.

0000a160 <rm24_guide>:
    a160:	01 0e 2e 00                                         ....

0000a164 <tm20_guide>:
    a164:	01 00 01 11 00                                      .....

0000a169 <rm33_guide>:
    a169:	01 0e 4b 00 00 00 00                                ..K....

0000a170 <default_tl_0x20>:
    a170:	01 00 00 00 3f 00 00 00                             ....?...

0000a178 <default_tl_0x21>:
    a178:	01 00 00 00 29 00 00 00                             ....)...

0000a180 <default_tl_0x22>:
    a180:	01 00 00 00 2e 00 00 00                             ........

0000a188 <default_tl_0x23>:
    a188:	01 00 00 00 33 00 00 00                             ....3...

0000a190 <tm35_guide>:
    a190:	01 00 01 0b 00 00 00 00                             ........

0000a198 <default_tl_0x25>:
    a198:	01 00 00 00 22 00 00 00                             ...."...

0000a1a0 <default_tl_0x26>:
    a1a0:	01 00 00 00 0b 00 00 00                             ........

0000a1a8 <default_tl_0x27>:
    a1a8:	01 00 00 00 1a 00 00 00                             ........

0000a1b0 <default_tl_0x28>:
    a1b0:	01 00 00 00 1f 00 00 00                             ........

0000a1b8 <default_tl_0x29>:
    a1b8:	01 00 00 00 08 00 00 00                             ........

0000a1c0 <tm42_guide>:
    a1c0:	01 00 01 10 00                                      .....

0000a1c5 <layerListCLIDict_DescEntry>:
    a1c5:	4c 69 73 74 20 61 76 61 69 6c 61 62 6c 65 20 6c     List available l
    a1d5:	61 79 65 72 73 2e 00                                ayers..

0000a1dc <layer1_tl_0x43>:
    a1dc:	01 00 00 00 4d 00 00 00                             ....M...

0000a1e4 <default_tl_0x2A>:
    a1e4:	01 00 00 00 0e 00 00 00                             ........

0000a1ec <default_tl_0x2B>:
    a1ec:	01 00 00 00 13 00 00 00                             ........

0000a1f4 <tm37_guide>:
    a1f4:	01 00 01 0f 00 00 00 00                             ........

0000a1fc <default_tl_0x2D>:
    a1fc:	00 00 00 00                                         ....

0000a200 <tm61_guide>:
    a200:	01 00 01 1c 00 00 00 00                             ........

0000a208 <default_tl_0x2F>:
    a208:	01 00 00 00 01 00 00 00                             ........

0000a210 <rm31_guide>:
    a210:	02 06 05 00 01 00                                   ......

0000a216 <rm18_guide>:
    a216:	01 0e 13 00                                         ....

0000a21a <rm39_guide>:
    a21a:	01 0e 30 00                                         ..0.

0000a21e <tm4_guide>:
    a21e:	01 00 01 1a 00                                      .....

0000a223 <tm9_guide>:
    a223:	01 00 01 1b 00                                      .....

0000a228 <tm39_guide>:
    a228:	01 00 01 38 00                                      ...8.

0000a22d <tm63_guide>:
    a22d:	01 00 01 20 00 00 00                                ... ...

0000a234 <default_tl_0x35>:
    a234:	01 00 00 00 3c 00 00 00                             ....<...

0000a23c <macroCLIDict>:
    a23c:	66 9b 00 00 14 a4 00 00 d5 4a 00 00 6e 9b 00 00     f........J..n...
    a24c:	4d a8 00 00 55 4b 00 00 78 9b 00 00 ea a2 00 00     M...UK..x.......
    a25c:	89 53 00 00 80 9b 00 00 27 9c 00 00 b7 53 00 00     .S......'....S..
    a26c:	89 9b 00 00 08 95 00 00 e5 53 00 00 94 9b 00 00     .........S......
    a27c:	ca 9c 00 00 25 4c 00 00 9f 9b 00 00 c5 a1 00 00     ....%L..........
    a28c:	31 4d 00 00 a9 9b 00 00 44 a0 00 00 59 4c 00 00     1M......D...YL..
    a29c:	b4 9b 00 00 b5 a4 00 00 c9 4c 00 00 bf 9b 00 00     .........L......
    a2ac:	17 a9 00 00 11 4e 00 00 c9 9b 00 00 eb 9b 00 00     .....N..........
    a2bc:	fd 4c 00 00 d3 9b 00 00 d3 a0 00 00 f1 5c 00 00     .L...........\..
    a2cc:	dd 9b 00 00 84 a4 00 00 2d 4b 00 00 00 00 00 00     ........-K......
    a2dc:	00 00 00 00 00 00 00 00                             ........

0000a2e4 <rm66_guide>:
    a2e4:	02 0e e1 0e 26 00                                   ....&.

0000a2ea <keyHoldCLIDict_DescEntry>:
    a2ea:	53 65 6e 64 20 6b 65 79 2d 68 6f 6c 64 20 65 76     Send key-hold ev
    a2fa:	65 6e 74 73 20 74 6f 20 74 68 65 20 6d 61 63 72     ents to the macr
    a30a:	6f 20 6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69 63     o module. Duplic
    a31a:	61 74 65 73 20 68 61 76 65 20 75 6e 64 65 66 69     ates have undefi
    a32a:	6e 65 64 20 62 65 68 61 76 69 6f 75 72 2e 0d 0a     ned behaviour...
    a33a:	09 09 1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20 53     ...[35mS10.[0m S
    a34a:	63 61 6e 63 6f 64 65 20 30 78 30 41 00              cancode 0x0A.

0000a357 <rm14_guide>:
    a357:	02 06 03 00 01 00                                   ......

0000a35d <rm65_guide>:
    a35d:	01 0e e4 00                                         ....

0000a361 <tm40_guide>:
    a361:	01 00 01 3c 00                                      ...<.

0000a366 <rm26_guide>:
    a366:	01 0e 2a 00                                         ..*.

0000a36a <tm65_guide>:
    a36a:	01 00 01 49 00 00                                   ...I..

0000a370 <default_tl_0x3E>:
    a370:	01 00 00 00 18 00 00 00                             ........

0000a378 <rm6_guide>:
    a378:	01 0e 29 00                                         ..).

0000a37c <rm69_guide>:
    a37c:	01 0e 20 00                                         .. .

0000a380 <rm67_guide>:
    a380:	01 0e 24 00                                         ..$.

0000a384 <rm40_guide>:
    a384:	01 0e 12 00                                         ....

0000a388 <tm16_guide>:
    a388:	01 00 01 17 00                                      .....

0000a38d <tm67_guide>:
    a38d:	01 00 01 31 00 00 00                                ...1...

0000a394 <default_tl_0x30>:
    a394:	01 00 00 00 36 00 00 00                             ....6...

0000a39c <default_tl_0x31>:
    a39c:	01 00 00 00 43 00 00 00                             ....C...

0000a3a4 <default_tl_0x32>:
    a3a4:	01 00 00 00 49 00 00 00                             ....I...

0000a3ac <default_tl_0x33>:
    a3ac:	01 00 00 00 32 00 00 00                             ....2...

0000a3b4 <default_tl_0x34>:
    a3b4:	01 00 00 00 38 00 00 00                             ....8...

0000a3bc <tm57_guide>:
    a3bc:	01 00 01 08 00 00 00 00                             ........

0000a3c4 <default_tl_0x36>:
    a3c4:	00 00 00 00                                         ....

0000a3c8 <default_tl_0x37>:
    a3c8:	00 00 00 00                                         ....

0000a3cc <default_tl_0x38>:
    a3cc:	01 00 00 00 27 00 00 00                             ....'...

0000a3d4 <default_tl_0x39>:
    a3d4:	01 00 00 00 2b 00 00 00                             ....+...

0000a3dc <rm79_guide>:
    a3dc:	01 09 00                                            ...

0000a3df <rm42_guide>:
    a3df:	01 0e 14 00                                         ....

0000a3e3 <tm18_guide>:
    a3e3:	01 00 01 3d 00                                      ...=.

0000a3e8 <tm69_guide>:
    a3e8:	01 00 01 05 00                                      .....

0000a3ed <InterconnectOffsetList>:
    a3ed:	2d 59                                               -Y

0000a3ef <rm74_guide>:
    a3ef:	01 0e 04 00 00                                      .....

0000a3f4 <default_tl_0x3A>:
    a3f4:	01 00 00 00 16 00 00 00                             ........

0000a3fc <default_tl_0x3B>:
    a3fc:	01 00 00 00 24 00 00 00                             ....$...

0000a404 <default_tl_0x3C>:
    a404:	01 00 00 00 28 00 00 00                             ....(...

0000a40c <default_tl_0x3D>:
    a40c:	01 00 00 00 12 00 00 00                             ........

0000a414 <capListCLIDict_DescEntry>:
    a414:	50 72 69 6e 74 73 20 61 6e 20 69 6e 64 65 78 65     Prints an indexe
    a424:	64 20 6c 69 73 74 20 6f 66 20 61 6c 6c 20 6e 6f     d list of all no
    a434:	6e 20 55 53 42 20 6b 65 79 63 6f 64 65 20 63 61     n USB keycode ca
    a444:	70 61 62 69 6c 69 74 69 65 73 2e 00                 pabilities..

0000a450 <default_tl_0x3F>:
    a450:	00 00 00 00                                         ....

0000a454 <layer1_tl_0x45>:
    a454:	01 00 00 00 52 00 00 00                             ....R...

0000a45c <rm12_guide>:
    a45c:	01 0e 52 00                                         ..R.

0000a460 <tm44_guide>:
    a460:	01 00 01 1e 00 00 00 00                             ........

0000a468 <layer1_tl_0x48>:
    a468:	00 00 00 00                                         ....

0000a46c <rm61_guide>:
    a46c:	01 0e e0 00                                         ....

0000a470 <rm46_guide>:
    a470:	01 0e 1d 00                                         ....

0000a474 <rm70_guide>:
    a474:	02 0e e1 0e 27 00                                   ....'.

0000a47a <tm46_guide>:
    a47a:	01 00 01 22 00                                      ...".

0000a47f <tm70_guide>:
    a47f:	01 00 01 4a 00                                      ...J.

0000a484 <macroStepCLIDict_DescEntry>:
    a484:	44 6f 20 4e 20 6d 61 63 72 6f 20 70 72 6f 63 65     Do N macro proce
    a494:	73 73 69 6e 67 20 73 74 65 70 73 2e 20 44 65 66     ssing steps. Def
    a4a4:	61 75 6c 74 73 20 74 6f 20 31 2e 00                 aults to 1..

0000a4b0 <tm30_guide>:
    a4b0:	01 00 01 4d 00                                      ...M.

0000a4b5 <macroDebugCLIDict_DescEntry>:
    a4b5:	44 69 73 61 62 6c 65 73 2f 45 6e 61 62 6c 65 73     Disables/Enables
    a4c5:	20 73 65 6e 64 69 6e 67 20 55 53 42 20 6b 65 79      sending USB key
    a4d5:	63 6f 64 65 73 20 74 6f 20 74 68 65 20 4f 75 74     codes to the Out
    a4e5:	70 75 74 20 4d 6f 64 75 6c 65 20 61 6e 64 20 70     put Module and p
    a4f5:	72 69 6e 74 73 20 55 2f 4b 20 63 6f 64 65 73 2e     rints U/K codes.
    a505:	00                                                  .

0000a506 <rm48_guide>:
    a506:	01 0e 17 00                                         ....

0000a50a <rm11_guide>:
    a50a:	01 0e 4c 00                                         ..L.

0000a50e <rm72_guide>:
    a50e:	01 0e 50 00                                         ..P.

0000a512 <rm13_guide>:
    a512:	01 0e 22 00                                         ..".

0000a516 <tm48_guide>:
    a516:	01 00 01 0c 00                                      .....

0000a51b <tm25_guide>:
    a51b:	01 00 01 15 00                                      .....

0000a520 <tm72_guide>:
    a520:	01 00 01 55 00                                      ...U.

0000a525 <rm71_guide>:
    a525:	01 0e e3 00 00 00 00                                .......

0000a52c <default_tl_0x40>:
    a52c:	00 00 00 00                                         ....

0000a530 <default_tl_0x41>:
    a530:	00 00 00 00                                         ....

0000a534 <default_tl_0x42>:
    a534:	01 00 00 00 1c 00 00 00                             ........

0000a53c <TriggerMacroList>:
    a53c:	2c a0 00 00 00 00 00 00 c9 a9 00 00 01 00 00 00     ,...............
    a54c:	18 9f 00 00 02 00 00 00 a1 a9 00 00 03 00 00 00     ................
    a55c:	1e a2 00 00 04 00 00 00 34 9f 00 00 05 00 00 00     ........4.......
    a56c:	ee a8 00 00 06 00 00 00 5d 9f 00 00 07 00 00 00     ........].......
    a57c:	00 a9 00 00 08 00 00 00 23 a2 00 00 09 00 00 00     ........#.......
    a58c:	39 9d 00 00 0a 00 00 00 f6 94 00 00 0b 00 00 00     9...............
    a59c:	91 9d 00 00 0c 00 00 00 2d 94 00 00 0d 00 00 00     ........-.......
    a5ac:	1d 9f 00 00 0e 00 00 00 0a 9c 00 00 0f 00 00 00     ................
    a5bc:	88 a3 00 00 10 00 00 00 18 9c 00 00 11 00 00 00     ................
    a5cc:	e3 a3 00 00 12 00 00 00 af 9c 00 00 13 00 00 00     ................
    a5dc:	64 a1 00 00 14 00 00 00 3a a0 00 00 15 00 00 00     d.......:.......
    a5ec:	39 9f 00 00 16 00 00 00 1c 9d 00 00 17 00 00 00     9...............
    a5fc:	05 a8 00 00 18 00 00 00 1b a5 00 00 19 00 00 00     ................
    a60c:	42 9f 00 00 1a 00 00 00 cc 94 00 00 1b 00 00 00     B...............
    a61c:	66 9f 00 00 1c 00 00 00 0d a9 00 00 1d 00 00 00     f...............
    a62c:	b0 a4 00 00 1e 00 00 00 27 9f 00 00 1f 00 00 00     ........'.......
    a63c:	43 a9 00 00 20 00 00 00 5b a1 00 00 21 00 00 00     C... ...[...!...
    a64c:	36 94 00 00 22 00 00 00 90 a1 00 00 23 00 00 00     6...".......#...
    a65c:	c2 94 00 00 24 00 00 00 f4 a1 00 00 25 00 00 00     ....$.......%...
    a66c:	e8 94 00 00 26 00 00 00 28 a2 00 00 27 00 00 00     ....&...(...'...
    a67c:	61 a3 00 00 28 00 00 00 22 9c 00 00 29 00 00 00     a...(..."...)...
    a68c:	c0 a1 00 00 2a 00 00 00 b9 9c 00 00 2b 00 00 00     ....*.......+...
    a69c:	60 a4 00 00 2c 00 00 00 0f 9d 00 00 2d 00 00 00     `...,.......-...
    a6ac:	7a a4 00 00 2e 00 00 00 34 9d 00 00 2f 00 00 00     z.......4.../...
    a6bc:	16 a5 00 00 30 00 00 00 8c 9d 00 00 31 00 00 00     ....0.......1...
    a6cc:	4c 9f 00 00 32 00 00 00 e9 a8 00 00 33 00 00 00     L...2.......3...
    a6dc:	70 9f 00 00 34 00 00 00 12 a9 00 00 35 00 00 00     p...4.......5...
    a6ec:	c4 9f 00 00 36 00 00 00 68 a9 00 00 37 00 00 00     ....6...h...7...
    a6fc:	05 a0 00 00 38 00 00 00 bc a3 00 00 39 00 00 00     ....8.......9...
    a70c:	35 a0 00 00 3a 00 00 00 d8 a9 00 00 3b 00 00 00     5...:.......;...
    a71c:	c7 94 00 00 3c 00 00 00 00 a2 00 00 3d 00 00 00     ....<.......=...
    a72c:	ed 94 00 00 3e 00 00 00 2d a2 00 00 3f 00 00 00     ....>...-...?...
    a73c:	ff 94 00 00 40 00 00 00 6a a3 00 00 41 00 00 00     ....@...j...A...
    a74c:	90 95 00 00 42 00 00 00 8d a3 00 00 43 00 00 00     ....B.......C...
    a75c:	1d 9c 00 00 44 00 00 00 e8 a3 00 00 45 00 00 00     ....D.......E...
    a76c:	7f a4 00 00 46 00 00 00 3e 9d 00 00 47 00 00 00     ....F...>...G...
    a77c:	20 a5 00 00 48 00 00 00 96 9d 00 00 49 00 00 00      ...H.......I...
    a78c:	fc a7 00 00 4a 00 00 00 22 9f 00 00 4b 00 00 00     ....J..."...K...
    a79c:	48 a8 00 00 4c 00 00 00 47 9f 00 00 4d 00 00 00     H...L...G...M...
    a7ac:	e4 a8 00 00 4e 00 00 00 6b 9f 00 00 4f 00 00 00     ....N...k...O...
    a7bc:	0a a0 00 00 50 00 00 00 bc a9 00 00 51 00 00 00     ....P.......Q...
    a7cc:	3f a0 00 00 52 00 00 00                             ?...R...

0000a7d4 <default_tl_0x44>:
    a7d4:	01 00 00 00 0a 00 00 00                             ........

0000a7dc <default_tl_0x45>:
    a7dc:	01 00 00 00 3e 00 00 00                             ....>...

0000a7e4 <default_tl_0x46>:
    a7e4:	01 00 00 00 03 00 00 00                             ........

0000a7ec <default_tl_0x47>:
    a7ec:	01 00 00 00 07 00 00 00                             ........

0000a7f4 <default_tl_0x48>:
    a7f4:	01 00 00 00 3b 00 00 00                             ....;...

0000a7fc <tm74_guide>:
    a7fc:	01 00 01 19 00                                      .....

0000a801 <rm28_guide>:
    a801:	01 0e 0b 00                                         ....

0000a805 <tm24_guide>:
    a805:	01 00 01 3e 00 00 00                                ...>...

0000a80c <default_tl_0x4A>:
    a80c:	01 00 00 00 46 00 00 00                             ....F...

0000a814 <default_tl_0x4B>:
    a814:	01 00 00 00 2f 00 00 00                             ..../...

0000a81c <default_tl_0x4C>:
    a81c:	01 00 00 00 35 00 00 00                             ....5...

0000a824 <default_tl_0x4D>:
    a824:	01 00 00 00 1e 00 00 00                             ........

0000a82c <default_tl_0x4E>:
    a82c:	01 00 00 00 2d 00 00 00                             ....-...

0000a834 <default_tl_0x4F>:
    a834:	01 00 00 00 31 00 00 00                             ....1...

0000a83c <layer1_tl_0x46>:
    a83c:	01 00 00 00 4c 00 00 00                             ....L...

0000a844 <layer1_tl_0x47>:
    a844:	00 00 00 00                                         ....

0000a848 <tm76_guide>:
    a848:	01 00 01 46 00                                      ...F.

0000a84d <capSelectCLIDict_DescEntry>:
    a84d:	54 72 69 67 67 65 72 73 20 74 68 65 20 73 70 65     Triggers the spe
    a85d:	63 69 66 69 65 64 20 63 61 70 61 62 69 6c 69 74     cified capabilit
    a86d:	69 65 73 2e 20 46 69 72 73 74 20 74 77 6f 20 61     ies. First two a
    a87d:	72 67 73 20 61 72 65 20 73 74 61 74 65 20 61 6e     rgs are state an
    a88d:	64 20 73 74 61 74 65 54 79 70 65 2e 0d 0a 09 09     d stateType.....
    a89d:	1b 5b 33 35 6d 4b 31 31 1b 5b 30 6d 20 4b 65 79     .[35mK11.[0m Key
    a8ad:	62 6f 61 72 64 20 43 61 70 61 62 69 6c 69 74 79     board Capability
    a8bd:	20 30 78 30 42 00                                    0x0B.

0000a8c3 <rm76_guide>:
    a8c3:	01 08 e9 00 00                                      .....

0000a8c8 <layer1_tl_0x4A>:
    a8c8:	00 00 00 00                                         ....

0000a8cc <layer1_tl_0x4B>:
    a8cc:	00 00 00 00                                         ....

0000a8d0 <layer1_tl_0x4C>:
    a8d0:	00 00 00 00                                         ....

0000a8d4 <layer1_tl_0x4D>:
    a8d4:	00 00 00 00                                         ....

0000a8d8 <layer1_tl_0x4E>:
    a8d8:	00 00 00 00                                         ....

0000a8dc <layer1_tl_0x4F>:
    a8dc:	01 00 00 00 51 00 00 00                             ....Q...

0000a8e4 <tm78_guide>:
    a8e4:	01 00 01 44 00                                      ...D.

0000a8e9 <tm51_guide>:
    a8e9:	01 00 01 23 00                                      ...#.

0000a8ee <tm6_guide>:
    a8ee:	01 00 01 02 00                                      .....

0000a8f3 <rm63_guide>:
    a8f3:	01 0e 06 00 00                                      .....

0000a8f8 <default_tl_0x49>:
    a8f8:	01 00 00 00 41 00 00 00                             ....A...

0000a900 <tm8_guide>:
    a900:	01 00 01 29 00                                      ...).

0000a905 <rm53_guide>:
    a905:	01 0e 10 00                                         ....

0000a909 <rm29_guide>:
    a909:	01 0e 4a 00                                         ..J.

0000a90d <tm29_guide>:
    a90d:	01 00 01 24 00                                      ...$.

0000a912 <tm53_guide>:
    a912:	01 00 01 4c 00                                      ...L.

0000a917 <macroListCLIDict_DescEntry>:
    a917:	4c 69 73 74 20 74 68 65 20 64 65 66 69 6e 65 64     List the defined
    a927:	20 74 72 69 67 67 65 72 20 61 6e 64 20 72 65 73      trigger and res
    a937:	75 6c 74 20 6d 61 63 72 6f 73 2e 00                 ult macros..

0000a943 <tm32_guide>:
    a943:	01 00 01 0e 00                                      .....

0000a948 <default_tl_0x50>:
    a948:	01 00 00 00 1b 00 00 00                             ........

0000a950 <default_tl_0x51>:
    a950:	01 00 00 00 21 00 00 00                             ....!...

0000a958 <default_tl_0x52>:
    a958:	01 00 00 00 26 00 00 00                             ....&...

0000a960 <default_tl_0x53>:
    a960:	01 00 00 00 0f 00 00 00                             ........

0000a968 <tm55_guide>:
    a968:	01 00 01 0d 00 00 00 00                             ........

0000a970 <default_tl_0x55>:
    a970:	01 00 00 00 48 00 00 00                             ....H...

0000a978 <default_tl_0x56>:
    a978:	01 00 00 00 0c 00 00 00                             ........

0000a980 <default_tl_0x57>:
    a980:	01 00 00 00 11 00 00 00                             ........

0000a988 <default_tl_0x58>:
    a988:	01 00 00 00 44 00 00 00                             ....D...

0000a990 <default_tl_0x59>:
    a990:	01 00 00 00 4b 00 00 00                             ....K...

0000a998 <rm68_guide>:
    a998:	01 0e 4f 00                                         ..O.

0000a99c <rm57_guide>:
    a99c:	01 06 01 00 00                                      .....

0000a9a1 <tm3_guide>:
    a9a1:	01 00 01 46 00 00 00                                ...F...

0000a9a8 <layer1_tl_0x50>:
    a9a8:	00 00 00 00                                         ....

0000a9ac <layer1_tl_0x51>:
    a9ac:	00 00 00 00                                         ....

0000a9b0 <layer1_tl_0x52>:
    a9b0:	00 00 00 00                                         ....

0000a9b4 <layer1_tl_0x53>:
    a9b4:	01 00 00 00 4f 00 00 00                             ....O...

0000a9bc <tm81_guide>:
    a9bc:	01 00 01 4f 00                                      ...O.

0000a9c1 <rm21_guide>:
    a9c1:	01 0e 2c 00                                         ..,.

0000a9c5 <rm59_guide>:
    a9c5:	01 0e e6 00                                         ....

0000a9c9 <tm1_guide>:
    a9c9:	01 00 01 2f 00                                      .../.

0000a9ce <rm44_guide>:
    a9ce:	01 0e 05 00                                         ....

0000a9d2 <rm1_guide>:
    a9d2:	02 06 06 00 01 00                                   ......

0000a9d8 <tm59_guide>:
    a9d8:	01 00 01 48 00 00 00 00                             ...H....

0000a9e0 <default_tl_0x43>:
    a9e0:	01 00 00 00 05 00 00 00                             ........

0000a9e8 <CSWTCH.65>:
    a9e8:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    a9f8:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    aa08:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................

0000aa18 <kbdProtocolCLIDict_DescEntry>:
    aa18:	4b 65 79 62 6f 61 72 64 20 50 72 6f 74 6f 63 6f     Keyboard Protoco
    aa28:	6c 20 4d 6f 64 65 3a 20 30 20 2d 20 42 6f 6f 74     l Mode: 0 - Boot
    aa38:	2c 20 31 20 2d 20 4f 53 2f 4e 4b 52 4f 20 4d 6f     , 1 - OS/NKRO Mo
    aa48:	64 65 00                                            de.

0000aa4b <setKeysCLIDict_DescEntry>:
    aa4b:	50 72 65 70 61 72 65 20 61 20 73 70 61 63 65 20     Prepare a space 
    aa5b:	73 65 70 61 72 61 74 65 64 20 6c 69 73 74 20 6f     separated list o
    aa6b:	66 20 55 53 42 20 63 6f 64 65 73 20 28 64 65 63     f USB codes (dec
    aa7b:	69 6d 61 6c 29 2e 20 57 61 69 74 73 20 75 6e 74     imal). Waits unt
    aa8b:	69 6c 20 1b 5b 33 35 6d 73 65 6e 64 4b 65 79 73     il .[35msendKeys
    aa9b:	1b 5b 30 6d 2e 00                                   .[0m..

0000aaa1 <outputCLIDictName>:
    aaa1:	55 53 42 20 4d 6f 64 75 6c 65 20 43 6f 6d 6d 61     USB Module Comma
    aab1:	6e 64 73 00                                         nds.

0000aab5 <CSWTCH.59>:
    aab5:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 02     ................
    aac5:	02 02 02 02 02 02 02 03 03 03 03 03 03 03 03 04     ................
    aad5:	04 04 04 04 04 04 04 05 05 05 05 05 05 05 05        ...............

0000aae4 <CSWTCH.64>:
    aae4:	15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16     ................
    aaf4:	17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18     ................
    ab04:	19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 1a 1a 1a     ................

0000ab14 <outputCLIDict>:
    ab14:	84 ae 00 00 18 aa 00 00 55 5d 00 00 90 ae 00 00     ........U]......
    ab24:	bd ae 00 00 d9 5d 00 00 9c ae 00 00 d7 ae 00 00     .....]..........
    ab34:	7d 5d 00 00 a5 ae 00 00 68 ab 00 00 31 5d 00 00     }]......h...1]..
    ab44:	ae ae 00 00 4b aa 00 00 a5 5d 00 00 b6 ae 00 00     ....K....]......
    ab54:	9f ab 00 00 fd 5d 00 00 00 00 00 00 00 00 00 00     .....]..........
    ab64:	00 00 00 00                                         ....

0000ab68 <sendKeysCLIDict_DescEntry>:
    ab68:	53 65 6e 64 20 74 68 65 20 70 72 65 70 61 72 65     Send the prepare
    ab78:	64 20 6c 69 73 74 20 6f 66 20 55 53 42 20 63 6f     d list of USB co
    ab88:	64 65 73 20 61 6e 64 20 6d 6f 64 69 66 69 65 72     des and modifier
    ab98:	20 62 79 74 65 2e 00                                 byte..

0000ab9f <setModCLIDict_DescEntry>:
    ab9f:	53 65 74 20 74 68 65 20 6d 6f 64 66 69 65 72 20     Set the modfier 
    abaf:	62 79 74 65 3a 0d 0a 09 09 31 20 4c 43 74 72 6c     byte:....1 LCtrl
    abbf:	2c 20 32 20 4c 53 68 66 74 2c 20 34 20 4c 41 6c     , 2 LShft, 4 LAl
    abcf:	74 2c 20 38 20 4c 47 55 49 2c 20 31 36 20 52 43     t, 8 LGUI, 16 RC
    abdf:	74 72 6c 2c 20 33 32 20 52 53 68 66 74 2c 20 36     trl, 32 RShft, 6
    abef:	34 20 52 41 6c 74 2c 20 31 32 38 20 52 47 55 49     4 RAlt, 128 RGUI
    abff:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    ac0f:	20 2d 20 4b 65 79 62 6f 61 72 64 20 50 72 6f 74      - Keyboard Prot
    ac1f:	6f 63 6f 6c 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e     ocol: ..[1;32mIN
    ac2f:	46 4f 1b 5b 30 6d 20 2d 20 4c 45 44 20 53 74 61     FO.[0m - LED Sta
    ac3f:	74 65 3a 20 00 4f 75 74 70 75 74 5f 63 6f 6e 73     te: .Output_cons
    ac4f:	43 74 72 6c 53 65 6e 64 28 63 6f 6e 73 43 6f 64     CtrlSend(consCod
    ac5f:	65 29 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e     e)..[1;33mWARNIN
    ac6f:	47 1b 5b 30 6d 20 2d 20 43 6f 6e 73 75 6d 65 72     G.[0m - Consumer
    ac7f:	20 43 6f 6e 74 72 6f 6c 20 69 73 20 6e 6f 74 20      Control is not 
    ac8f:	69 6d 70 6c 65 6d 65 6e 74 65 64 20 66 6f 72 20     implemented for 
    ac9f:	42 6f 6f 74 20 4d 6f 64 65 0d 0a 00 4f 75 74 70     Boot Mode...Outp
    acaf:	75 74 5f 6e 6f 6e 65 53 65 6e 64 28 29 00 4f 75     ut_noneSend().Ou
    acbf:	74 70 75 74 5f 73 79 73 43 74 72 6c 53 65 6e 64     tput_sysCtrlSend
    accf:	28 73 79 73 43 6f 64 65 29 00 1b 5b 31 3b 33 33     (sysCode)..[1;33
    acdf:	6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 53     mWARNING.[0m - S
    acef:	79 73 74 65 6d 20 43 6f 6e 74 72 6f 6c 20 69 73     ystem Control is
    acff:	20 6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64      not implemented
    ad0f:	20 66 6f 72 20 42 6f 6f 74 20 4d 6f 64 65 0d 0a      for Boot Mode..
    ad1f:	00 4f 75 74 70 75 74 5f 66 6c 61 73 68 4d 6f 64     .Output_flashMod
    ad2f:	65 28 29 00 4f 75 74 70 75 74 5f 6b 62 64 50 72     e().Output_kbdPr
    ad3f:	6f 74 6f 63 6f 6c 42 6f 6f 74 28 29 00 4f 75 74     otocolBoot().Out
    ad4f:	70 75 74 5f 6b 62 64 50 72 6f 74 6f 63 6f 6c 4e     put_kbdProtocolN
    ad5f:	4b 52 4f 28 29 00 4f 75 74 70 75 74 5f 75 73 62     KRO().Output_usb
    ad6f:	43 6f 64 65 53 65 6e 64 28 75 73 62 43 6f 64 65     CodeSend(usbCode
    ad7f:	29 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47     )..[1;33mWARNING
    ad8f:	1b 5b 30 6d 20 2d 20 55 53 42 20 4b 65 79 20 6c     .[0m - USB Key l
    ad9f:	69 6d 69 74 20 72 65 61 63 68 65 64 0d 0a 00 1b     imit reached....
    adaf:	5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47 1b 5b 30     [1;33mWARNING.[0
    adbf:	6d 20 2d 20 55 53 42 20 43 6f 64 65 20 61 62 6f     m - USB Code abo
    adcf:	76 65 20 31 30 34 2f 30 78 36 38 20 69 6e 20 42     ve 104/0x68 in B
    addf:	6f 6f 74 20 4d 6f 64 65 3a 20 00 1b 5b 31 3b 33     oot Mode: ..[1;3
    adef:	33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20     3mWARNING.[0m - 
    adff:	55 53 42 20 43 6f 64 65 20 6e 6f 74 20 77 69 74     USB Code not wit
    ae0f:	68 69 6e 20 34 2d 34 39 20 28 30 78 34 2d 30 78     hin 4-49 (0x4-0x
    ae1f:	33 31 29 2c 20 35 31 2d 31 35 35 20 28 30 78 33     31), 51-155 (0x3
    ae2f:	33 2d 30 78 39 42 29 2c 20 31 35 37 2d 31 36 34     3-0x9B), 157-164
    ae3f:	20 28 30 78 39 44 2d 30 78 41 34 29 2c 20 31 37      (0x9D-0xA4), 17
    ae4f:	36 2d 32 32 31 20 28 30 78 42 30 2d 30 78 44 44     6-221 (0xB0-0xDD
    ae5f:	29 20 6f 72 20 32 32 34 2d 32 33 31 20 28 30 78     ) or 224-231 (0x
    ae6f:	45 30 2d 30 78 45 37 29 20 4e 4b 52 4f 20 4d 6f     E0-0xE7) NKRO Mo
    ae7f:	64 65 3a 20 00 6b 62 64 50 72 6f 74 6f 63 6f 6c     de: .kbdProtocol
    ae8f:	00 6f 75 74 70 75 74 44 65 62 75 67 00 72 65 61     .outputDebug.rea
    ae9f:	64 4c 45 44 73 00 73 65 6e 64 4b 65 79 73 00 73     dLEDs.sendKeys.s
    aeaf:	65 74 4b 65 79 73 00 73 65 74 4d 6f 64 00           etKeys.setMod.

0000aebd <outputDebugCLIDict_DescEntry>:
    aebd:	54 6f 67 67 6c 65 20 4f 75 74 70 75 74 20 44 65     Toggle Output De
    aecd:	62 75 67 20 6d 6f 64 65 2e 00                       bug mode..

0000aed7 <readLEDsCLIDict_DescEntry>:
    aed7:	52 65 61 64 20 4c 45 44 20 62 79 74 65 3a 0d 0a     Read LED byte:..
    aee7:	09 09 31 20 4e 75 6d 4c 63 6b 2c 20 32 20 43 61     ..1 NumLck, 2 Ca
    aef7:	70 73 4c 63 6b 2c 20 34 20 53 63 72 6c 4c 63 6b     psLck, 4 ScrlLck
    af07:	2c 20 31 36 20 4b 61 6e 61 2c 20 65 74 63 2e 00     , 16 Kana, etc..

0000af17 <CSWTCH.60>:
    af17:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07 00     ................
    af27:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07 00     ................
    af37:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07        ...............

0000af46 <CSWTCH.61>:
    af46:	06 06 06 06 06 06 06 06 07 07 07 07 07 07 07 07     ................
    af56:	08 08 08 08 08 08 08 08 09 09 09 09 09 09 09 09     ................
    af66:	0a 0a 0a 0a 0a 0a 0a 0a 0b 0b 0b 0b 0b 0b 0b 0b     ................
    af76:	0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d 0d 0d 0d 0d 0d     ................
    af86:	0e 0e 0e 0e 0e 0e 0e 0e 0f 0f 0f 0f 0f 0f 0f 0f     ................
    af96:	10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11     ................
    afa6:	12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13     ................

0000afb6 <CSWTCH.62>:
    afb6:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    afc6:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    afd6:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    afe6:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    aff6:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b006:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b016:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................

0000b026 <CSWTCH.63>:
    b026:	00 01 02 03 04 05 06 07                             ........

0000b02e <usb_endpoint_config_table>:
    b02e:	15 15 15 19 15 15 15 15 00 00                       ..........

0000b038 <usb_descriptor_list>:
    b038:	00 01 00 00 82 8e ff 1f 12 00 00 00 00 02 00 00     ................
    b048:	f0 8c ff 1f c8 00 00 00 00 06 00 00 7f 91 ff 1f     ................
    b058:	01 00 00 00 00 0a 00 00 7e 91 ff 1f 01 00 00 00     ........~.......
    b068:	00 22 00 00 3a 8f ff 1f 3f 00 00 00 00 21 00 00     ."..:...?....!..
    b078:	02 8d ff 1f 09 00 00 00 00 22 01 00 8e 8b ff 1f     ........."......
    b088:	7d 00 00 00 00 21 01 00 1b 8d ff 1f 09 00 00 00     }....!..........
    b098:	00 22 04 00 b8 8d ff 1f 76 00 00 00 00 21 04 00     ."......v....!..
    b0a8:	76 8d ff 1f 09 00 00 00 00 22 05 00 0b 8c ff 1f     v........"......
    b0b8:	55 00 00 00 00 21 05 00 8f 8d ff 1f 09 00 00 00     U....!..........
    b0c8:	00 22 06 00 2e 8e ff 1f 35 00 00 00 00 21 06 00     ."......5....!..
    b0d8:	a8 8d ff 1f 09 00 00 00 00 03 00 00 7a 8f ff 1f     ............z...
    b0e8:	00 00 00 00 01 03 09 04 d0 8e ff 1f 00 00 00 00     ................
    b0f8:	02 03 09 04 e2 8e ff 1f 00 00 00 00 03 03 09 04     ................
    b108:	7e 8f ff 1f 00 00 00 00 04 03 09 04 64 8e ff 1f     ~...........d...
    b118:	00 00 00 00 05 03 09 04 d2 8c ff 1f 00 00 00 00     ................
    b128:	06 03 09 04 94 8e ff 1f 00 00 00 00 07 03 09 04     ................
    b138:	60 8c ff 1f 00 00 00 00 08 03 09 04 ac 8c ff 1f     `...............
    b148:	00 00 00 00 09 03 09 04 98 8c ff 1f 00 00 00 00     ................
    b158:	0a 03 09 04 ba 8c ff 1f 00 00 00 00 00 00 00 00     ................
    b168:	00 00 00 00 00 00 00 00 1b 5b 31 3b 33 33 6d 57     .........[1;33mW
    b178:	41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 43 4c 45     ARNING.[0m - CLE
    b188:	41 52 5f 46 45 41 54 55 52 45 20 2d 20 44 65 76     AR_FEATURE - Dev
    b198:	69 63 65 2f 49 6e 74 65 72 66 61 63 65 0d 0a 00     ice/Interface...
    b1a8:	1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47 1b 5b     .[1;33mWARNING.[
    b1b8:	30 6d 20 2d 20 53 45 54 5f 46 45 41 54 55 52 45     0m - SET_FEATURE
    b1c8:	20 2d 20 44 65 76 69 63 65 2f 49 6e 74 65 72 66      - Device/Interf
    b1d8:	61 63 65 0d 0a 00 1b 5b 31 3b 33 33 6d 57 41 52     ace....[1;33mWAR
    b1e8:	4e 49 4e 47 1b 5b 30 6d 20 2d 20 55 6e 6b 6e 6f     NING.[0m - Unkno
    b1f8:	77 6e 20 69 6e 74 65 72 66 61 63 65 20 2d 20 00     wn interface - .
    b208:	1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b     .[1;5;31mERROR.[
    b218:	30 6d 20 2d 20 55 53 42 20 6e 6f 74 20 63 6f 6e     0m - USB not con
    b228:	66 69 67 75 72 65 64 2e 2e 2e 0d 0a 00 1b 5b 31     figured.......[1
    b238:	3b 33 33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20     ;33mWARNING.[0m 
    b248:	2d 20 55 53 42 20 54 72 61 6e 73 6d 69 74 20 54     - USB Transmit T
    b258:	69 6d 65 6f 75 74 2e 2e 2e 0d 0a 00 53 79 73 43     imeout......SysC
    b268:	74 72 6c 5b 00 5d 20 0d 0a 00 43 6f 6e 73 43 74     trl[.] ...ConsCt
    b278:	72 6c 5b 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47     rl[..[1;35mDEBUG
    b288:	1b 5b 30 6d 20 2d 20 42 6f 6f 74 20 55 53 42 3a     .[0m - Boot USB:
    b298:	20 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47 1b 5b      ..[1;35mDEBUG.[
    b2a8:	30 6d 20 2d 20 4e 4b 52 4f 20 55 53 42 3a 20 00     0m - NKRO USB: .
    b2b8:	00 00 00 00                                         ....

0000b2bc <helpCLIDict_DescEntry>:
    b2bc:	59 6f 75 27 72 65 20 6c 6f 6f 6b 69 6e 67 20 61     You're looking a
    b2cc:	74 20 69 74 20 3a 50 00                             t it :P.

0000b2d4 <restartCLIDict_DescEntry>:
    b2d4:	53 65 6e 64 73 20 61 20 73 6f 66 74 77 61 72 65     Sends a software
    b2e4:	20 72 65 73 74 61 72 74 2c 20 73 68 6f 75 6c 64      restart, should
    b2f4:	20 62 65 20 73 69 6d 69 6c 61 72 20 74 6f 20 70      be similar to p
    b304:	6f 77 65 72 69 6e 67 20 6f 6e 20 74 68 65 20 64     owering on the d
    b314:	65 76 69 63 65 2e 00                                evice..

0000b31b <clearCLIDict_DescEntry>:
    b31b:	43 6c 65 61 72 20 74 68 65 20 73 63 72 65 65 6e     Clear the screen
    b32b:	2e 00                                               ..

0000b32d <reloadCLIDict_DescEntry>:
    b32d:	53 69 67 6e 61 6c 73 20 6d 69 63 72 6f 63 6f 6e     Signals microcon
    b33d:	74 72 6f 6c 6c 65 72 20 74 6f 20 72 65 66 6c 61     troller to refla
    b34d:	73 68 2f 72 65 6c 6f 61 64 2e 00                    sh/reload..

0000b358 <versionCLIDict_DescEntry>:
    b358:	56 65 72 73 69 6f 6e 20 69 6e 66 6f 72 6d 61 74     Version informat
    b368:	69 6f 6e 20 61 62 6f 75 74 20 74 68 69 73 20 66     ion about this f
    b378:	69 72 6d 77 61 72 65 2e 00 1b 5b 32 4a 1b 5b 48     irmware...[2J.[H
    b388:	0d 00 1b 63 00 0d 0a 1b 5b 31 3b 33 32 6d 00 1b     ...c....[1;32m..
    b398:	5b 30 6d 0d 0a 00 20 1b 5b 33 35 6d 00 20 1b 5b     [0m... .[35m. .[
    b3a8:	31 6d 52 65 76 69 73 69 6f 6e 3a 1b 5b 30 6d 20     1mRevision:.[0m 
    b3b8:	20 20 20 20 20 32 36 31 36 34 66 65 37 65 34 37          26164fe7e47
    b3c8:	64 38 31 37 32 37 33 63 39 66 39 31 31 37 62 64     d817273c9f9117bd
    b3d8:	36 37 30 35 65 33 33 38 32 35 62 64 62 0d 0a 00     6705e33825bdb...
    b3e8:	20 1b 5b 31 6d 42 72 61 6e 63 68 3a 1b 5b 30 6d      .[1mBranch:.[0m
    b3f8:	20 20 20 20 20 20 20 20 6d 61 73 74 65 72 0d 0a             master..
    b408:	00 20 1b 5b 31 6d 54 72 65 65 20 53 74 61 74 75     . .[1mTree Statu
    b418:	73 3a 1b 5b 30 6d 20 20 20 44 69 72 74 79 0d 0a     s:.[0m   Dirty..
    b428:	09 4b 65 79 62 6f 61 72 64 73 2f 6a 66 72 79 6d     .Keyboards/jfrym
    b438:	61 6e 2e 62 61 73 68 0d 0a 09 6b 6c 6c 0d 0a 00     an.bash...kll...
    b448:	20 1b 5b 31 6d 52 65 70 6f 20 4f 72 69 67 69 6e      .[1mRepo Origin
    b458:	3a 1b 5b 30 6d 20 20 20 67 69 74 40 67 69 74 68     :.[0m   git@gith
    b468:	75 62 2e 63 6f 6d 3a 4d 61 72 63 75 73 46 75 6c     ub.com:MarcusFul
    b478:	62 72 69 67 68 74 2f 65 72 67 6f 64 6f 78 2d 66     bright/ergodox-f
    b488:	69 72 6d 77 61 72 65 2e 67 69 74 0d 0a 00 20 1b     irmware.git... .
    b498:	5b 31 6d 43 6f 6d 6d 69 74 20 44 61 74 65 3a 1b     [1mCommit Date:.
    b4a8:	5b 30 6d 20 20 20 32 30 31 36 2d 30 31 2d 31 39     [0m   2016-01-19
    b4b8:	20 31 36 3a 30 38 3a 34 34 20 2d 30 36 30 30 0d      16:08:44 -0600.
    b4c8:	0a 00 20 1b 5b 31 6d 43 6f 6d 6d 69 74 20 41 75     .. .[1mCommit Au
    b4d8:	74 68 6f 72 3a 1b 5b 30 6d 20 4d 61 72 63 75 73     thor:.[0m Marcus
    b4e8:	20 46 75 6c 62 72 69 67 68 74 20 3c 66 75 6c 62      Fulbright <fulb
    b4f8:	72 69 67 68 74 2e 6d 61 72 63 75 73 40 67 6d 61     right.marcus@gma
    b508:	69 6c 2e 63 6f 6d 3e 0d 0a 00 20 1b 5b 31 6d 42     il.com>... .[1mB
    b518:	75 69 6c 64 20 44 61 74 65 3a 1b 5b 30 6d 20 20     uild Date:.[0m  
    b528:	20 20 32 30 31 36 2d 30 31 2d 32 30 20 31 32 3a       2016-01-20 12:
    b538:	34 35 3a 31 34 20 2d 30 36 30 30 0d 0a 00 20 1b     45:14 -0600... .
    b548:	5b 31 6d 42 75 69 6c 64 20 4f 53 3a 1b 5b 30 6d     [1mBuild OS:.[0m
    b558:	20 20 20 20 20 20 4c 69 6e 75 78 2d 33 2e 31 39           Linux-3.19
    b568:	2e 30 2d 32 38 2d 67 65 6e 65 72 69 63 0d 0a 00     .0-28-generic...
    b578:	20 1b 5b 31 6d 41 72 63 68 69 74 65 63 74 75 72      .[1mArchitectur
    b588:	65 3a 1b 5b 30 6d 20 20 61 72 6d 0d 0a 00 20 1b     e:.[0m  arm... .
    b598:	5b 31 6d 43 68 69 70 3a 1b 5b 30 6d 20 20 20 20     [1mChip:.[0m    
    b5a8:	20 20 20 20 20 20 6d 6b 32 30 64 78 32 35 36 76           mk20dx256v
    b5b8:	6c 68 37 0d 0a 00 20 1b 5b 31 6d 43 50 55 3a 1b     lh7... .[1mCPU:.
    b5c8:	5b 30 6d 20 20 20 20 20 20 20 20 20 20 20 63 6f     [0m           co
    b5d8:	72 74 65 78 2d 6d 34 0d 0a 00 20 1b 5b 31 6d 44     rtex-m4... .[1mD
    b5e8:	65 76 69 63 65 3a 1b 5b 30 6d 20 20 20 20 20 20     evice:.[0m      
    b5f8:	20 20 4b 65 79 62 6f 61 72 64 0d 0a 00 20 1b 5b       Keyboard... .[
    b608:	31 6d 4d 6f 64 75 6c 65 73 3a 1b 5b 30 6d 20 20     1mModules:.[0m  
    b618:	20 20 20 20 20 53 63 61 6e 28 4d 44 45 72 67 6f          Scan(MDErgo
    b628:	31 29 20 4d 61 63 72 6f 28 50 61 72 74 69 61 6c     1) Macro(Partial
    b638:	4d 61 70 29 20 4f 75 74 70 75 74 28 70 6a 72 63     Map) Output(pjrc
    b648:	55 53 42 29 20 44 65 62 75 67 28 66 75 6c 6c 29     USB) Debug(full)
    b658:	0d 0a 00 20 1b 5b 31 6d 55 6e 69 71 75 65 20 49     ... .[1mUnique I
    b668:	64 3a 1b 5b 30 6d 20 20 20 20 20 00 1b 5b 31 3b     d:.[0m     ..[1;
    b678:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 48 65     32mINFO.[0m - He
    b688:	78 20 64 65 62 75 67 20 6d 6f 64 65 20 64 69 73     x debug mode dis
    b698:	61 62 6c 65 64 2e 2e 2e 0d 0a 00 1b 5b 31 3b 33     abled.......[1;3
    b6a8:	32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 48 65 78     2mINFO.[0m - Hex
    b6b8:	20 64 65 62 75 67 20 6d 6f 64 65 20 65 6e 61 62      debug mode enab
    b6c8:	6c 65 64 2e 2e 2e 0d 0a 00 1b 5b 00 31 3b 35 3b     led.......[.1;5;
    b6d8:	33 31 00 45 52 52 4f 52 00 22 00 22 20 69 73 20     31.ERROR."." is 
    b6e8:	6e 6f 74 20 61 20 76 61 6c 69 64 20 63 6f 6d 6d     not a valid comm
    b6f8:	61 6e 64 2e 2e 2e 74 79 70 65 20 1b 5b 33 35 6d     and...type .[35m
    b708:	68 65 6c 70 1b 5b 30 6d 00 1b 5b 31 3b 35 3b 33     help.[0m..[1;5;3
    b718:	31 6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 4d 61     1mERROR.[0m - Ma
    b728:	78 20 6e 75 6d 62 65 72 20 6f 66 20 64 69 63 74     x number of dict
    b738:	69 6f 6e 61 72 69 65 73 20 64 65 66 69 6e 65 64     ionaries defined
    b748:	20 61 6c 72 65 61 64 79 2e 2e 2e 0d 0a 00 1b 5b      already.......[
    b758:	32 4b 0d 00 1b 5b 31 3b 33 34 6d 3a 1b 5b 30 6d     2K...[1;34m:.[0m
    b768:	20 00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52      ..[1;5;31mERROR
    b778:	1b 5b 30 6d 20 2d 20 53 65 72 69 61 6c 20 6c 69     .[0m - Serial li
    b788:	6e 65 20 62 75 66 66 65 72 20 69 73 20 66 75 6c     ne buffer is ful
    b798:	6c 2c 20 64 72 6f 70 70 69 6e 67 20 63 68 61 72     l, dropping char
    b7a8:	61 63 74 65 72 20 61 6e 64 20 72 65 73 65 74 74     acter and resett
    b7b8:	69 6e 67 2e 2e 2e 0d 0a 00 1b 5b 73 0d 0a 00 1b     ing.......[s....
    b7c8:	5b 32 4b 00 1b 5b 75 00 08 20 08 00 63 6c 65 61     [2K..[u.. ..clea
    b7d8:	72 00 63 6c 69 44 65 62 75 67 00 68 65 6c 70 00     r.cliDebug.help.
    b7e8:	6c 65 64 00 72 65 6c 6f 61 64 00 72 65 73 65 74     led.reload.reset
    b7f8:	00 72 65 73 74 61 72 74 00 76 65 72 73 69 6f 6e     .restart.version
    b808:	00                                                  .

0000b809 <resetCLIDict_DescEntry>:
    b809:	52 65 73 65 74 73 20 74 68 65 20 74 65 72 6d 69     Resets the termi
    b819:	6e 61 6c 20 62 61 63 6b 20 74 6f 20 69 6e 69 74     nal back to init
    b829:	69 61 6c 20 73 65 74 74 69 6e 67 73 2e 00 00        ial settings...

0000b838 <basicCLIDict>:
    b838:	d4 b7 00 00 1b b3 00 00 6d 70 00 00 da b7 00 00     ........mp......
    b848:	4b b9 00 00 2d 72 00 00 e3 b7 00 00 bc b2 00 00     K...-r..........
    b858:	85 70 00 00 e8 b7 00 00 a4 b8 00 00 3d 71 00 00     .p..........=q..
    b868:	ec b7 00 00 2d b3 00 00 51 71 00 00 f3 b7 00 00     ....-...Qq......
    b878:	09 b8 00 00 79 70 00 00 f9 b7 00 00 d4 b2 00 00     ....yp..........
    b888:	55 71 00 00 01 b8 00 00 58 b3 00 00 59 71 00 00     Uq......X...Yq..
    b898:	00 00 00 00 00 00 00 00 00 00 00 00                 ............

0000b8a4 <ledCLIDict_DescEntry>:
    b8a4:	45 6e 61 62 6c 65 73 2f 44 69 73 61 62 6c 65 73     Enables/Disables
    b8b4:	20 69 6e 64 69 63 61 74 6f 72 20 4c 45 44 2e 20      indicator LED. 
    b8c4:	54 72 79 20 61 20 63 6f 75 70 6c 65 20 74 69 6d     Try a couple tim
    b8d4:	65 73 20 6a 75 73 74 20 69 6e 20 63 61 73 65 20     es just in case 
    b8e4:	74 68 65 20 4c 45 44 20 69 73 20 69 6e 20 61 6e     the LED is in an
    b8f4:	20 6f 64 64 20 73 74 61 74 65 2e 0d 0a 09 09 1b      odd state......
    b904:	5b 33 33 6d 57 61 72 6e 69 6e 67 1b 5b 30 6d 3a     [33mWarning.[0m:
    b914:	20 4d 61 79 20 61 64 76 65 72 73 65 6c 79 20 61      May adversely a
    b924:	66 66 65 63 74 20 73 6f 6d 65 20 6d 6f 64 75 6c     ffect some modul
    b934:	65 73 2e 2e 2e 00                                   es....

0000b93a <basicCLIDictName>:
    b93a:	47 65 6e 65 72 61 6c 20 43 6f 6d 6d 61 6e 64 73     General Commands
    b94a:	00                                                  .

0000b94b <cliDebugCLIDict_DescEntry>:
    b94b:	45 6e 61 62 6c 65 73 2f 44 69 73 61 62 6c 65 73     Enables/Disables
    b95b:	20 68 65 78 20 6f 75 74 70 75 74 20 6f 66 20 74      hex output of t
    b96b:	68 65 20 6d 6f 73 74 20 72 65 63 65 6e 74 20 63     he most recent c
    b97b:	6c 69 20 69 6e 70 75 74 2e 00 00 00 00              li input.....
