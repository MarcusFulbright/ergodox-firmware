
kiibohd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009834  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .usbdescriptortable 00000120  1fff8000  1fff8000  00018000  2**2
                  ALLOC
  2 .dmabuffers   00000000  1fff8120  1fff8120  00010f9c  2**0
                  CONTENTS
  3 .usbbuffers   00000870  1fff8120  1fff8120  00018000  2**0
                  ALLOC
  4 .data         0000060c  1fff8990  0000b834  00010990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000011dc  1fff8f9c  0000be40  00010f9c  2**2
                  ALLOC
  6 .debug_info   0000f41b  00000000  00000000  00010f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000291d  00000000  00000000  000203b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000007f0  00000000  00000000  00022cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000ba0  00000000  00000000  000234c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000097e9  00000000  00000000  00024064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006700  00000000  00000000  0002d84d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00023374  00000000  00000000  00033f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  000572c1  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000033  00000000  00000000  00057331  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000016e0  00000000  00000000  00057364  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00006a19  00000000  00000000  00058a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <gVectors>:
    2000:	00 80 00 20 bd 21 00 00 81 24 00 00 8d 24 00 00     ... .!...$...$..
    2010:	c1 24 00 00 01 25 00 00 41 25 00 00 3d 24 00 00     .$...%..A%..=$..
    2020:	3d 24 00 00 3d 24 00 00 3d 24 00 00 79 24 00 00     =$..=$..=$..y$..
    2030:	79 24 00 00 3d 24 00 00 79 24 00 00 2d 24 00 00     y$..=$..y$..-$..
    2040:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2050:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2060:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2070:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2080:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2090:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20a0:	19 27 00 00 79 24 00 00 79 24 00 00 79 24 00 00     .'..y$..y$..y$..
    20b0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20c0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20d0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20e0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20f0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2100:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2110:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2120:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2130:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2140:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2150:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2160:	79 24 00 00 31 64 00 00 79 24 00 00 79 24 00 00     y$..1d..y$..y$..
    2170:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2180:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2190:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    21a0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    21b0:	79 24 00 00 79 24 00 00 79 24 00 00                 y$..y$..y$..

000021bc <ResetHandler>:

// ----- Chip Entry Point -----

__attribute__ ((section(".startup")))
void ResetHandler()
{
    21bc:	b508      	push	{r3, lr}
		SCB_VTOR = addr; // relocate vector table
		jump_to_app( addr );
	}
#endif
	// Disable Watchdog
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
    21be:	4b3e      	ldr	r3, [pc, #248]	; (22b8 <ResetHandler+0xfc>)
    21c0:	f24c 5220 	movw	r2, #50464	; 0xc520
    21c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    21c6:	f64d 1228 	movw	r2, #55592	; 0xd928
    21ca:	801a      	strh	r2, [r3, #0]
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    21cc:	2210      	movs	r2, #16
    21ce:	f823 2c0e 	strh.w	r2, [r3, #-14]

	uint32_t *src = (uint32_t*)&_etext;
	uint32_t *dest = (uint32_t*)&_sdata;

	// Enable clocks to always-used peripherals
	SIM_SCGC5 = 0x00043F82; // Clocks active to all GPIO
    21d2:	f5a3 431f 	sub.w	r3, r3, #40704	; 0x9f00
    21d6:	3bd6      	subs	r3, #214	; 0xd6
    21d8:	4a38      	ldr	r2, [pc, #224]	; (22bc <ResetHandler+0x100>)
    21da:	601a      	str	r2, [r3, #0]
	SIM_SCGC6 = SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
    21dc:	4a38      	ldr	r2, [pc, #224]	; (22c0 <ResetHandler+0x104>)
    21de:	605a      	str	r2, [r3, #4]
#if defined(_mk20dx128_)
	SIM_SCGC6 |= SIM_SCGC6_RTC;
#elif defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
    21e0:	4a38      	ldr	r2, [pc, #224]	; (22c4 <ResetHandler+0x108>)
    21e2:	f04f 6110 	mov.w	r1, #150994944	; 0x9000000
    21e6:	6011      	str	r1, [r2, #0]
	SIM_SCGC6 |= SIM_SCGC6_RTC;
    21e8:	685a      	ldr	r2, [r3, #4]
    21ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    21ee:	605a      	str	r2, [r3, #4]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// release I/O pins hold, if we woke up from VLLS mode
	if ( PMC_REGSC & PMC_REGSC_ACKISO )
    21f0:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
    21f4:	f203 33ca 	addw	r3, r3, #970	; 0x3ca
    21f8:	781a      	ldrb	r2, [r3, #0]
    21fa:	0711      	lsls	r1, r2, #28
	{
		PMC_REGSC |= PMC_REGSC_ACKISO;
    21fc:	bf42      	ittt	mi
    21fe:	781a      	ldrbmi	r2, [r3, #0]
    2200:	f042 0208 	orrmi.w	r2, r2, #8
    2204:	701a      	strbmi	r2, [r3, #0]
    2206:	4a30      	ldr	r2, [pc, #192]	; (22c8 <ResetHandler+0x10c>)
    2208:	4b30      	ldr	r3, [pc, #192]	; (22cc <ResetHandler+0x110>)
	}

	// Prepare RAM
	while ( dest < (uint32_t*)&_edata ) *dest++ = *src++;
    220a:	4931      	ldr	r1, [pc, #196]	; (22d0 <ResetHandler+0x114>)
    220c:	428b      	cmp	r3, r1
    220e:	d204      	bcs.n	221a <ResetHandler+0x5e>
    2210:	f852 1f04 	ldr.w	r1, [r2, #4]!
    2214:	f843 1b04 	str.w	r1, [r3], #4
    2218:	e7f7      	b.n	220a <ResetHandler+0x4e>
    221a:	4b2e      	ldr	r3, [pc, #184]	; (22d4 <ResetHandler+0x118>)
	dest = (uint32_t*)&_sbss;
	while ( dest < (uint32_t*)&_ebss ) *dest++ = 0;
    221c:	4a2e      	ldr	r2, [pc, #184]	; (22d8 <ResetHandler+0x11c>)
    221e:	4293      	cmp	r3, r2
    2220:	d203      	bcs.n	222a <ResetHandler+0x6e>
    2222:	2200      	movs	r2, #0
    2224:	f843 2b04 	str.w	r2, [r3], #4
    2228:	e7f8      	b.n	221c <ResetHandler+0x60>
    222a:	4b2c      	ldr	r3, [pc, #176]	; (22dc <ResetHandler+0x120>)
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
	{
		NVIC_SET_PRIORITY( i, 128 );
    222c:	2280      	movs	r2, #128	; 0x80
    222e:	f803 2b01 	strb.w	r2, [r3], #1
	// use vector table in flash
	SCB_VTOR = 0;
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
    2232:	4a2b      	ldr	r2, [pc, #172]	; (22e0 <ResetHandler+0x124>)
    2234:	4293      	cmp	r3, r2
    2236:	d1f9      	bne.n	222c <ResetHandler+0x70>
		NVIC_SET_PRIORITY( i, 128 );
	}

	// start in FEI mode
	// enable capacitors for crystal
	OSC0_CR = OSC_SC8P | OSC_SC2P;
    2238:	4b2a      	ldr	r3, [pc, #168]	; (22e4 <ResetHandler+0x128>)
    223a:	220a      	movs	r2, #10
    223c:	701a      	strb	r2, [r3, #0]

	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0( 2 ) | MCG_C2_EREFS;
    223e:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
    2242:	2224      	movs	r2, #36	; 0x24
    2244:	701a      	strb	r2, [r3, #0]

	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS( 2 ) | MCG_C1_FRDIV( 4 );
    2246:	22a0      	movs	r2, #160	; 0xa0
    2248:	f803 2c01 	strb.w	r2, [r3, #-1]

	// wait for crystal oscillator to begin
	while ( (MCG_S & MCG_S_OSCINIT0) == 0 );
    224c:	4b26      	ldr	r3, [pc, #152]	; (22e8 <ResetHandler+0x12c>)
    224e:	781a      	ldrb	r2, [r3, #0]
    2250:	0792      	lsls	r2, r2, #30
    2252:	d5fb      	bpl.n	224c <ResetHandler+0x90>

	// wait for FLL to use oscillator
	while ( (MCG_S & MCG_S_IREFST) != 0 );
    2254:	781a      	ldrb	r2, [r3, #0]
    2256:	06d0      	lsls	r0, r2, #27
    2258:	d4fc      	bmi.n	2254 <ResetHandler+0x98>

	// wait for MCGOUT to use oscillator
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 2 ) );
    225a:	781a      	ldrb	r2, [r3, #0]
    225c:	f002 020c 	and.w	r2, r2, #12
    2260:	2a08      	cmp	r2, #8
    2262:	d1fa      	bne.n	225a <ResetHandler+0x9e>

	// now we're in FBE mode
#if F_CPU == 72000000
	// config PLL input for 16 MHz Crystal / 8 = 2 MHz
	MCG_C5 = MCG_C5_PRDIV0( 7 );
    2264:	4b21      	ldr	r3, [pc, #132]	; (22ec <ResetHandler+0x130>)
    2266:	2207      	movs	r2, #7
    2268:	701a      	strb	r2, [r3, #0]
	MCG_C5 = MCG_C5_PRDIV0( 3 );
#endif

#if F_CPU == 72000000
	// config PLL for 72 MHz output (36 * 2 MHz Ext PLL)
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 12 );
    226a:	224c      	movs	r2, #76	; 0x4c
    226c:	705a      	strb	r2, [r3, #1]
	// config PLL for 96 MHz output
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 0 );
#endif

	// wait for PLL to start using xtal as its input
	while ( !(MCG_S & MCG_S_PLLST) );
    226e:	4b1e      	ldr	r3, [pc, #120]	; (22e8 <ResetHandler+0x12c>)
    2270:	781a      	ldrb	r2, [r3, #0]
    2272:	0691      	lsls	r1, r2, #26
    2274:	d5fb      	bpl.n	226e <ResetHandler+0xb2>

	// wait for PLL to lock
	while ( !(MCG_S & MCG_S_LOCK0) );
    2276:	781a      	ldrb	r2, [r3, #0]
    2278:	0652      	lsls	r2, r2, #25
    227a:	d5fc      	bpl.n	2276 <ResetHandler+0xba>
#if F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 2 );
    227c:	4b1c      	ldr	r3, [pc, #112]	; (22f0 <ResetHandler+0x134>)
    227e:	f04f 7281 	mov.w	r2, #16908288	; 0x1020000
    2282:	601a      	str	r2, [r3, #0]
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 3 ) | SIM_CLKDIV1_OUTDIV2( 3 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#else
#error "Error, F_CPU must be 96000000, 72000000, 48000000, or 24000000"
#endif
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS( 0 ) | MCG_C1_FRDIV( 4 );
    2284:	4b1b      	ldr	r3, [pc, #108]	; (22f4 <ResetHandler+0x138>)
    2286:	2220      	movs	r2, #32
    2288:	701a      	strb	r2, [r3, #0]

	// wait for PLL clock to be used
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 3 ) );
    228a:	4b17      	ldr	r3, [pc, #92]	; (22e8 <ResetHandler+0x12c>)
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	f003 030c 	and.w	r3, r3, #12
    2292:	2b0c      	cmp	r3, #12
    2294:	d1f9      	bne.n	228a <ResetHandler+0xce>

	// now we're in PEE mode
#if F_CPU == 72000000
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 2 ) | SIM_CLKDIV2_USBFRAC; // USB = 72 MHz PLL / 1.5
    2296:	4b18      	ldr	r3, [pc, #96]	; (22f8 <ResetHandler+0x13c>)
    2298:	2205      	movs	r2, #5
    229a:	601a      	str	r2, [r3, #0]
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 1 ); // USB = 96 MHz PLL / 2
#endif

	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL( 6 );
    229c:	4a17      	ldr	r2, [pc, #92]	; (22fc <ResetHandler+0x140>)
    229e:	f843 2c44 	str.w	r2, [r3, #-68]

#endif

#if !defined(_bootloader_)
	// Initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
    22a2:	4b17      	ldr	r3, [pc, #92]	; (2300 <ResetHandler+0x144>)
    22a4:	4a17      	ldr	r2, [pc, #92]	; (2304 <ResetHandler+0x148>)
    22a6:	601a      	str	r2, [r3, #0]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
    22a8:	2207      	movs	r2, #7
    22aa:	f843 2c04 	str.w	r2, [r3, #-4]

	__enable_irq();
    22ae:	b662      	cpsie	i
#else
	// Disable Watchdog for bootloader
	WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN;
#endif

	main();
    22b0:	f000 f8a6 	bl	2400 <main>
	while ( 1 ); // Shouldn't get here...
    22b4:	e7fe      	b.n	22b4 <ResetHandler+0xf8>
    22b6:	bf00      	nop
    22b8:	4005200e 	.word	0x4005200e
    22bc:	00043f82 	.word	0x00043f82
    22c0:	0b000001 	.word	0x0b000001
    22c4:	40048030 	.word	0x40048030
    22c8:	0000b830 	.word	0x0000b830
    22cc:	1fff8990 	.word	0x1fff8990
    22d0:	1fff8f9c 	.word	0x1fff8f9c
    22d4:	1fff8f9c 	.word	0x1fff8f9c
    22d8:	1fffa178 	.word	0x1fffa178
    22dc:	e000e400 	.word	0xe000e400
    22e0:	e000e45f 	.word	0xe000e45f
    22e4:	40065000 	.word	0x40065000
    22e8:	40064006 	.word	0x40064006
    22ec:	40064004 	.word	0x40064004
    22f0:	40048044 	.word	0x40048044
    22f4:	40064000 	.word	0x40064000
    22f8:	40048048 	.word	0x40048048
    22fc:	000510c0 	.word	0x000510c0
    2300:	e000e014 	.word	0xe000e014
    2304:	0001193f 	.word	0x0001193f
    2308:	00000000 	.word	0x00000000
    230c:	00000000 	.word	0x00000000
    2310:	00000000 	.word	0x00000000
    2314:	00000000 	.word	0x00000000
    2318:	00000000 	.word	0x00000000
    231c:	00000000 	.word	0x00000000
    2320:	00000000 	.word	0x00000000
    2324:	00000000 	.word	0x00000000
    2328:	00000000 	.word	0x00000000
    232c:	00000000 	.word	0x00000000
    2330:	00000000 	.word	0x00000000
    2334:	00000000 	.word	0x00000000
    2338:	00000000 	.word	0x00000000
    233c:	00000000 	.word	0x00000000
    2340:	00000000 	.word	0x00000000
    2344:	00000000 	.word	0x00000000
    2348:	00000000 	.word	0x00000000
    234c:	00000000 	.word	0x00000000
    2350:	00000000 	.word	0x00000000
    2354:	00000000 	.word	0x00000000
    2358:	00000000 	.word	0x00000000
    235c:	00000000 	.word	0x00000000
    2360:	00000000 	.word	0x00000000
    2364:	00000000 	.word	0x00000000
    2368:	00000000 	.word	0x00000000
    236c:	00000000 	.word	0x00000000
    2370:	00000000 	.word	0x00000000
    2374:	00000000 	.word	0x00000000
    2378:	00000000 	.word	0x00000000
    237c:	00000000 	.word	0x00000000
    2380:	00000000 	.word	0x00000000
    2384:	00000000 	.word	0x00000000
    2388:	00000000 	.word	0x00000000
    238c:	00000000 	.word	0x00000000
    2390:	00000000 	.word	0x00000000
    2394:	00000000 	.word	0x00000000
    2398:	00000000 	.word	0x00000000
    239c:	00000000 	.word	0x00000000
    23a0:	00000000 	.word	0x00000000
    23a4:	00000000 	.word	0x00000000
    23a8:	00000000 	.word	0x00000000
    23ac:	00000000 	.word	0x00000000
    23b0:	00000000 	.word	0x00000000
    23b4:	00000000 	.word	0x00000000
    23b8:	00000000 	.word	0x00000000
    23bc:	00000000 	.word	0x00000000
    23c0:	00000000 	.word	0x00000000
    23c4:	00000000 	.word	0x00000000
    23c8:	00000000 	.word	0x00000000
    23cc:	00000000 	.word	0x00000000
    23d0:	00000000 	.word	0x00000000
    23d4:	00000000 	.word	0x00000000
    23d8:	00000000 	.word	0x00000000
    23dc:	00000000 	.word	0x00000000
    23e0:	00000000 	.word	0x00000000
    23e4:	00000000 	.word	0x00000000
    23e8:	00000000 	.word	0x00000000
    23ec:	00000000 	.word	0x00000000
    23f0:	00000000 	.word	0x00000000
    23f4:	00000000 	.word	0x00000000
    23f8:	00000000 	.word	0x00000000
    23fc:	00000000 	.word	0x00000000

00002400 <main>:


// ----- Functions -----

int main()
{
    2400:	b508      	push	{r3, lr}
	CLKPR = 0x80;
	CLKPR = 0x00;
#endif

	// Enable CLI
	CLI_init();
    2402:	f004 ffdf 	bl	73c4 <CLI_init>

	// Setup Modules
	Output_setup();
    2406:	f003 fed9 	bl	61bc <Output_setup>
	Macro_setup();
    240a:	f003 fb2d 	bl	5a68 <Macro_setup>
	Scan_setup();
    240e:	f002 fb63 	bl	4ad8 <Scan_setup>

	// Main Detection Loop
	while ( 1 )
	{
		// Process CLI
		CLI_process();
    2412:	f005 f8c7 	bl	75a4 <CLI_process>

		// Acquire Key Indices
		// Loop continuously until scan_loop returns 0
		cli();
    2416:	b672      	cpsid	i
		while ( Scan_loop() );
    2418:	f002 fb72 	bl	4b00 <Scan_loop>
    241c:	2800      	cmp	r0, #0
    241e:	d1fb      	bne.n	2418 <main+0x18>
		sei();
    2420:	b662      	cpsie	i

		// Run Macros over Key Indices and convert to USB Keys
		Macro_process();
    2422:	f003 f949 	bl	56b8 <Macro_process>

		// Sends USB data only if changed
		Output_send();
    2426:	f003 fed9 	bl	61dc <Output_send>
	}
    242a:	e7f2      	b.n	2412 <main+0x12>

0000242c <systick_default_isr>:

// NVIC - SysTick ISR
extern volatile uint32_t systick_millis_count;
void systick_default_isr()
{
	systick_millis_count++;
    242c:	4a02      	ldr	r2, [pc, #8]	; (2438 <systick_default_isr+0xc>)
    242e:	6813      	ldr	r3, [r2, #0]
    2430:	3301      	adds	r3, #1
    2432:	6013      	str	r3, [r2, #0]
    2434:	4770      	bx	lr
    2436:	bf00      	nop
    2438:	1fff8f9c 	.word	0x1fff8f9c

0000243c <fault_isr>:

// ----- Interrupts -----

// NVIC - Default ISR
void fault_isr()
{
    243c:	b508      	push	{r3, lr}
	print("Fault!" NL );
    243e:	480c      	ldr	r0, [pc, #48]	; (2470 <fault_isr+0x34>)
    2440:	f005 f9f0 	bl	7824 <_print>
	while ( 1 )
	{
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if ( SIM_SCGC4 & SIM_SCGC4_USBOTG ) usb_isr();
    2444:	4c0b      	ldr	r4, [pc, #44]	; (2474 <fault_isr+0x38>)
    2446:	6823      	ldr	r3, [r4, #0]
    2448:	0358      	lsls	r0, r3, #13
    244a:	d501      	bpl.n	2450 <fault_isr+0x14>
    244c:	f003 fff0 	bl	6430 <usb_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART0 )  uart0_status_isr();
    2450:	6823      	ldr	r3, [r4, #0]
    2452:	0559      	lsls	r1, r3, #21
    2454:	d501      	bpl.n	245a <fault_isr+0x1e>
    2456:	f000 f80f 	bl	2478 <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART1 )  uart1_status_isr();
    245a:	6823      	ldr	r3, [r4, #0]
    245c:	051a      	lsls	r2, r3, #20
    245e:	d501      	bpl.n	2464 <fault_isr+0x28>
    2460:	f000 f80a 	bl	2478 <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART2 )  uart2_status_isr();
    2464:	6823      	ldr	r3, [r4, #0]
    2466:	04db      	lsls	r3, r3, #19
    2468:	d5ec      	bpl.n	2444 <fault_isr+0x8>
    246a:	f000 f805 	bl	2478 <unused_isr>
    246e:	e7e9      	b.n	2444 <fault_isr+0x8>
    2470:	00008d90 	.word	0x00008d90
    2474:	40048034 	.word	0x40048034

00002478 <unused_isr>:
	}
}

void unused_isr()
{
    2478:	b508      	push	{r3, lr}
	fault_isr();
    247a:	f7ff ffdf 	bl	243c <fault_isr>
    247e:	0000      	movs	r0, r0

00002480 <nmi_default_isr>:


// NVIC - Non-Maskable Interrupt ISR
void nmi_default_isr()
{
	print("NMI!" NL );
    2480:	4801      	ldr	r0, [pc, #4]	; (2488 <nmi_default_isr+0x8>)
    2482:	f005 b9cf 	b.w	7824 <_print>
    2486:	bf00      	nop
    2488:	00007a5e 	.word	0x00007a5e

0000248c <hard_fault_default_isr>:
}


// NVIC - Hard Fault ISR
void hard_fault_default_isr()
{
    248c:	b508      	push	{r3, lr}
	print("Hard Fault! SCB_HFSR: ");
    248e:	4807      	ldr	r0, [pc, #28]	; (24ac <hard_fault_default_isr+0x20>)
    2490:	f005 f9c8 	bl	7824 <_print>
	printHex32( SCB_HFSR );
    2494:	4b06      	ldr	r3, [pc, #24]	; (24b0 <hard_fault_default_isr+0x24>)
    2496:	2101      	movs	r1, #1
    2498:	6818      	ldr	r0, [r3, #0]
    249a:	f005 fa7e 	bl	799a <printHex32_op>
	print( NL );
    249e:	4805      	ldr	r0, [pc, #20]	; (24b4 <hard_fault_default_isr+0x28>)
    24a0:	f005 f9c0 	bl	7824 <_print>
	SOFTWARE_RESET();
    24a4:	4b04      	ldr	r3, [pc, #16]	; (24b8 <hard_fault_default_isr+0x2c>)
    24a6:	4a05      	ldr	r2, [pc, #20]	; (24bc <hard_fault_default_isr+0x30>)
    24a8:	601a      	str	r2, [r3, #0]
    24aa:	bd08      	pop	{r3, pc}
    24ac:	00007a65 	.word	0x00007a65
    24b0:	e000ed2c 	.word	0xe000ed2c
    24b4:	0000b143 	.word	0x0000b143
    24b8:	e000ed0c 	.word	0xe000ed0c
    24bc:	05fa0004 	.word	0x05fa0004

000024c0 <memmanage_fault_default_isr>:
}


// NVIC - Memory Manager Fault ISR
void memmanage_fault_default_isr()
{
    24c0:	b508      	push	{r3, lr}
	print("Memory Manager Fault! SCB_CFSR: ");
    24c2:	480a      	ldr	r0, [pc, #40]	; (24ec <memmanage_fault_default_isr+0x2c>)
    24c4:	f005 f9ae 	bl	7824 <_print>
	printHex32( SCB_CFSR );
    24c8:	4b09      	ldr	r3, [pc, #36]	; (24f0 <memmanage_fault_default_isr+0x30>)
    24ca:	2101      	movs	r1, #1
    24cc:	6818      	ldr	r0, [r3, #0]
    24ce:	f005 fa64 	bl	799a <printHex32_op>
	print(" SCB_MMAR: ");
    24d2:	4808      	ldr	r0, [pc, #32]	; (24f4 <memmanage_fault_default_isr+0x34>)
    24d4:	f005 f9a6 	bl	7824 <_print>
	printHex32( SCB_MMAR );
    24d8:	4b07      	ldr	r3, [pc, #28]	; (24f8 <memmanage_fault_default_isr+0x38>)
    24da:	2101      	movs	r1, #1
    24dc:	6818      	ldr	r0, [r3, #0]
    24de:	f005 fa5c 	bl	799a <printHex32_op>
	print( NL );
    24e2:	4806      	ldr	r0, [pc, #24]	; (24fc <memmanage_fault_default_isr+0x3c>)
}
    24e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Memory Manager Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_MMAR: ");
	printHex32( SCB_MMAR );
	print( NL );
    24e8:	f005 b99c 	b.w	7824 <_print>
    24ec:	00007a7c 	.word	0x00007a7c
    24f0:	e000ed28 	.word	0xe000ed28
    24f4:	00007a9d 	.word	0x00007a9d
    24f8:	e000ed34 	.word	0xe000ed34
    24fc:	0000b143 	.word	0x0000b143

00002500 <bus_fault_default_isr>:
}


// NVIC - Bus Fault ISR
void bus_fault_default_isr()
{
    2500:	b508      	push	{r3, lr}
	print("Bus Fault! SCB_CFSR: ");
    2502:	480a      	ldr	r0, [pc, #40]	; (252c <bus_fault_default_isr+0x2c>)
    2504:	f005 f98e 	bl	7824 <_print>
	printHex32( SCB_CFSR );
    2508:	4b09      	ldr	r3, [pc, #36]	; (2530 <bus_fault_default_isr+0x30>)
    250a:	2101      	movs	r1, #1
    250c:	6818      	ldr	r0, [r3, #0]
    250e:	f005 fa44 	bl	799a <printHex32_op>
	print(" SCB_BFAR: ");
    2512:	4808      	ldr	r0, [pc, #32]	; (2534 <bus_fault_default_isr+0x34>)
    2514:	f005 f986 	bl	7824 <_print>
	printHex32( SCB_BFAR );
    2518:	4b07      	ldr	r3, [pc, #28]	; (2538 <bus_fault_default_isr+0x38>)
    251a:	2101      	movs	r1, #1
    251c:	6818      	ldr	r0, [r3, #0]
    251e:	f005 fa3c 	bl	799a <printHex32_op>
	print( NL );
    2522:	4806      	ldr	r0, [pc, #24]	; (253c <bus_fault_default_isr+0x3c>)
}
    2524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Bus Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_BFAR: ");
	printHex32( SCB_BFAR );
	print( NL );
    2528:	f005 b97c 	b.w	7824 <_print>
    252c:	00007aa9 	.word	0x00007aa9
    2530:	e000ed28 	.word	0xe000ed28
    2534:	00007abf 	.word	0x00007abf
    2538:	e000ed38 	.word	0xe000ed38
    253c:	0000b143 	.word	0x0000b143

00002540 <usage_fault_default_isr>:
}


// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
    2540:	b508      	push	{r3, lr}
	print("Usage Fault! SCB_CFSR: ");
    2542:	4806      	ldr	r0, [pc, #24]	; (255c <usage_fault_default_isr+0x1c>)
    2544:	f005 f96e 	bl	7824 <_print>
	printHex32( SCB_CFSR );
    2548:	4b05      	ldr	r3, [pc, #20]	; (2560 <usage_fault_default_isr+0x20>)
    254a:	2101      	movs	r1, #1
    254c:	6818      	ldr	r0, [r3, #0]
    254e:	f005 fa24 	bl	799a <printHex32_op>
	print( NL );
    2552:	4804      	ldr	r0, [pc, #16]	; (2564 <usage_fault_default_isr+0x24>)
}
    2554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
	print("Usage Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print( NL );
    2558:	f005 b964 	b.w	7824 <_print>
    255c:	00007acb 	.word	0x00007acb
    2560:	e000ed28 	.word	0xe000ed28
    2564:	0000b143 	.word	0x0000b143

00002568 <memset>:
	__builtin_unreachable();
}
#endif

void *memset( void *addr, int val, unsigned int len )
{
    2568:	4402      	add	r2, r0
	char *buf = addr;
    256a:	4603      	mov	r3, r0

	for (; len > 0; --len, ++buf)
    256c:	4293      	cmp	r3, r2
    256e:	d002      	beq.n	2576 <memset+0xe>
		*buf = val;
    2570:	f803 1b01 	strb.w	r1, [r3], #1
    2574:	e7fa      	b.n	256c <memset+0x4>
	return (addr);
}
    2576:	4770      	bx	lr

00002578 <memcpy>:
		/* NOTHING */;
	return (val);
}

void *memcpy( void *dst, const void *src, unsigned int len )
{
    2578:	b510      	push	{r4, lr}
    257a:	3901      	subs	r1, #1
    257c:	4402      	add	r2, r0
	char *dstbuf = dst;
    257e:	4603      	mov	r3, r0
	const char *srcbuf = src;

	for (; len > 0; --len, ++dstbuf, ++srcbuf)
    2580:	4293      	cmp	r3, r2
    2582:	d004      	beq.n	258e <memcpy+0x16>
		*dstbuf = *srcbuf;
    2584:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    2588:	f803 4b01 	strb.w	r4, [r3], #1
    258c:	e7f8      	b.n	2580 <memcpy+0x8>
	return (dst);
}
    258e:	bd10      	pop	{r4, pc}

00002590 <yield>:



// ----- Functions -----

void yield(void) {};
    2590:	4770      	bx	lr
    2592:	0000      	movs	r0, r0

00002594 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2594:	b672      	cpsid	i
	current = SYST_CVR;
    2596:	4b0c      	ldr	r3, [pc, #48]	; (25c8 <micros+0x34>)
	count = systick_millis_count;
    2598:	4a0c      	ldr	r2, [pc, #48]	; (25cc <micros+0x38>)
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    259a:	490d      	ldr	r1, [pc, #52]	; (25d0 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    259c:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    259e:	6812      	ldr	r2, [r2, #0]
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    25a0:	6809      	ldr	r1, [r1, #0]
	__enable_irq();
    25a2:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
    25a4:	0149      	lsls	r1, r1, #5
    25a6:	d503      	bpl.n	25b0 <micros+0x1c>
    25a8:	490a      	ldr	r1, [pc, #40]	; (25d4 <micros+0x40>)
    25aa:	428b      	cmp	r3, r1
    25ac:	bf88      	it	hi
    25ae:	3201      	addhi	r2, #1
	current = ((F_CPU / 1000) - 1) - current;
    25b0:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
	return count * 1000 + current / (F_CPU / 1000000);
    25b4:	2048      	movs	r0, #72	; 0x48
	current = SYST_CVR;
	count = systick_millis_count;
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
	__enable_irq();
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
	current = ((F_CPU / 1000) - 1) - current;
    25b6:	f203 133f 	addw	r3, r3, #319	; 0x13f
	return count * 1000 + current / (F_CPU / 1000000);
    25ba:	fbb3 f3f0 	udiv	r3, r3, r0
}
    25be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    25c2:	fb00 3002 	mla	r0, r0, r2, r3
    25c6:	4770      	bx	lr
    25c8:	e000e018 	.word	0xe000e018
    25cc:	1fff8f9c 	.word	0x1fff8f9c
    25d0:	e000ed04 	.word	0xe000ed04
    25d4:	0001190e 	.word	0x0001190e

000025d8 <delay>:

void delay(uint32_t ms)
{
    25d8:	b538      	push	{r3, r4, r5, lr}
    25da:	4605      	mov	r5, r0
	uint32_t start = micros();
    25dc:	f7ff ffda 	bl	2594 <micros>
    25e0:	4604      	mov	r4, r0

	while (1) {
		if ((micros() - start) >= 1000) {
    25e2:	f7ff ffd7 	bl	2594 <micros>
    25e6:	1b00      	subs	r0, r0, r4
    25e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    25ec:	d303      	bcc.n	25f6 <delay+0x1e>
			ms--;
			if (ms == 0) break;
    25ee:	3d01      	subs	r5, #1
    25f0:	d004      	beq.n	25fc <delay+0x24>
			start += 1000;
    25f2:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
		}
		yield();
    25f6:	f7ff ffcb 	bl	2590 <yield>
	}
    25fa:	e7f2      	b.n	25e2 <delay+0xa>
    25fc:	bd38      	pop	{r3, r4, r5, pc}

000025fe <I2C_BufferLen>:


inline uint16_t I2C_BufferLen( I2C_Buffer *buffer )
{
	// Tail >= Head
	if ( buffer->tail >= buffer->head )
    25fe:	8803      	ldrh	r3, [r0, #0]
    2600:	8841      	ldrh	r1, [r0, #2]
    2602:	4299      	cmp	r1, r3
		return buffer->head + buffer->size - buffer->tail;
    2604:	bf23      	ittte	cs
    2606:	88c2      	ldrhcs	r2, [r0, #6]
    2608:	18d2      	addcs	r2, r2, r3
    260a:	1a50      	subcs	r0, r2, r1

	// Head > Tail
	return buffer->head - buffer->tail;
    260c:	1a58      	subcc	r0, r3, r1
    260e:	b280      	uxth	r0, r0
}
    2610:	4770      	bx	lr
    2612:	0000      	movs	r0, r0

00002614 <I2C_BufferPush>:


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	4605      	mov	r5, r0
    2618:	460c      	mov	r4, r1
	dbug_msg("DATA: ");
    261a:	4813      	ldr	r0, [pc, #76]	; (2668 <I2C_BufferPush+0x54>)
	printHex( byte );
    261c:	b2ae      	uxth	r6, r5
}


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
	dbug_msg("DATA: ");
    261e:	f005 f901 	bl	7824 <_print>
	printHex( byte );
    2622:	2101      	movs	r1, #1
    2624:	4630      	mov	r0, r6
    2626:	f005 f980 	bl	792a <printHex_op>

	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
    262a:	8861      	ldrh	r1, [r4, #2]
    262c:	8822      	ldrh	r2, [r4, #0]
    262e:	1c4b      	adds	r3, r1, #1
    2630:	4293      	cmp	r3, r2
    2632:	d005      	beq.n	2640 <I2C_BufferPush+0x2c>
    2634:	428a      	cmp	r2, r1
    2636:	88e1      	ldrh	r1, [r4, #6]
    2638:	d90e      	bls.n	2658 <I2C_BufferPush+0x44>
    263a:	1a58      	subs	r0, r3, r1
    263c:	4290      	cmp	r0, r2
    263e:	d10b      	bne.n	2658 <I2C_BufferPush+0x44>
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
    2640:	480a      	ldr	r0, [pc, #40]	; (266c <I2C_BufferPush+0x58>)
    2642:	f005 f8ef 	bl	7824 <_print>
		printHex( byte );
    2646:	4630      	mov	r0, r6
    2648:	2101      	movs	r1, #1
    264a:	f005 f96e 	bl	792a <printHex_op>
		print( NL );
    264e:	4808      	ldr	r0, [pc, #32]	; (2670 <I2C_BufferPush+0x5c>)
		buffer->tail++;
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
}
    2650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
		printHex( byte );
		print( NL );
    2654:	f005 b8e6 	b.w	7824 <_print>
		return;
	}

	// Check for wrap-around case
	if ( buffer->tail + 1 >= buffer->size )
    2658:	428b      	cmp	r3, r1
	{
		buffer->tail = 0;
    265a:	bfa8      	it	ge
    265c:	2300      	movge	r3, #0
	}
	// Normal case
	else
	{
		buffer->tail++;
    265e:	8063      	strh	r3, [r4, #2]
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
    2660:	8863      	ldrh	r3, [r4, #2]
    2662:	68a2      	ldr	r2, [r4, #8]
    2664:	54d5      	strb	r5, [r2, r3]
    2666:	bd70      	pop	{r4, r5, r6, pc}
    2668:	00007c05 	.word	0x00007c05
    266c:	00007c1f 	.word	0x00007c1f
    2670:	0000b143 	.word	0x0000b143

00002674 <I2C_TxBufferPop>:
}


uint8_t I2C_TxBufferPop()
{
    2674:	b538      	push	{r3, r4, r5, lr}
	// Return 0xFF if no buffer left (do not rely on this)
	if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) >= I2C_TxBuffer.size )
    2676:	4d23      	ldr	r5, [pc, #140]	; (2704 <I2C_TxBufferPop+0x90>)
    2678:	4628      	mov	r0, r5
    267a:	f7ff ffc0 	bl	25fe <I2C_BufferLen>
    267e:	88eb      	ldrh	r3, [r5, #6]
    2680:	b29b      	uxth	r3, r3
    2682:	4298      	cmp	r0, r3
    2684:	462c      	mov	r4, r5
    2686:	d31b      	bcc.n	26c0 <I2C_TxBufferPop+0x4c>
	{
		erro_msg("No buffer to pop an entry from... ");
    2688:	481f      	ldr	r0, [pc, #124]	; (2708 <I2C_TxBufferPop+0x94>)
    268a:	f005 f8cb 	bl	7824 <_print>
		printHex( I2C_TxBuffer.head );
    268e:	8828      	ldrh	r0, [r5, #0]
    2690:	2101      	movs	r1, #1
    2692:	b280      	uxth	r0, r0
    2694:	f005 f949 	bl	792a <printHex_op>
		print(" ");
    2698:	481c      	ldr	r0, [pc, #112]	; (270c <I2C_TxBufferPop+0x98>)
    269a:	f005 f8c3 	bl	7824 <_print>
		printHex( I2C_TxBuffer.tail );
    269e:	8868      	ldrh	r0, [r5, #2]
    26a0:	2101      	movs	r1, #1
    26a2:	b280      	uxth	r0, r0
    26a4:	f005 f941 	bl	792a <printHex_op>
		print(" ");
    26a8:	4818      	ldr	r0, [pc, #96]	; (270c <I2C_TxBufferPop+0x98>)
    26aa:	f005 f8bb 	bl	7824 <_print>
		printHex( I2C_TxBuffer.sequencePos );
    26ae:	7928      	ldrb	r0, [r5, #4]
    26b0:	2101      	movs	r1, #1
    26b2:	f005 f93a 	bl	792a <printHex_op>
		print(NL);
    26b6:	4816      	ldr	r0, [pc, #88]	; (2710 <I2C_TxBufferPop+0x9c>)
    26b8:	f005 f8b4 	bl	7824 <_print>
    26bc:	20ff      	movs	r0, #255	; 0xff
    26be:	bd38      	pop	{r3, r4, r5, pc}
		return 0xFF;
	}

	// If there is currently no sequence being sent, the first entry in the RingBuffer is the length
	if ( I2C_TxBuffer.sequencePos == 0 )
    26c0:	792b      	ldrb	r3, [r5, #4]
    26c2:	b943      	cbnz	r3, 26d6 <I2C_TxBufferPop+0x62>
	{
		I2C_TxBuffer.sequencePos = 0xFF; // So this doesn't become an infinite loop
    26c4:	23ff      	movs	r3, #255	; 0xff
    26c6:	712b      	strb	r3, [r5, #4]
		I2C_RxBuffer.sequencePos = I2C_TxBufferPop();
    26c8:	f7ff ffd4 	bl	2674 <I2C_TxBufferPop>
    26cc:	4b11      	ldr	r3, [pc, #68]	; (2714 <I2C_TxBufferPop+0xa0>)
    26ce:	7118      	strb	r0, [r3, #4]
		I2C_TxBuffer.sequencePos = I2C_TxBufferPop();
    26d0:	f7ff ffd0 	bl	2674 <I2C_TxBufferPop>
    26d4:	7128      	strb	r0, [r5, #4]
	}

	uint8_t data = I2C_TxBuffer.buffer[ I2C_TxBuffer.head ];
    26d6:	68a2      	ldr	r2, [r4, #8]
    26d8:	8823      	ldrh	r3, [r4, #0]
    26da:	b29b      	uxth	r3, r3
    26dc:	5cd0      	ldrb	r0, [r2, r3]

	// Prune head
	I2C_TxBuffer.head++;
    26de:	8823      	ldrh	r3, [r4, #0]
    26e0:	3301      	adds	r3, #1
    26e2:	b29b      	uxth	r3, r3
    26e4:	8023      	strh	r3, [r4, #0]

	// Wrap-around case
	if ( I2C_TxBuffer.head >= I2C_TxBuffer.size )
    26e6:	8822      	ldrh	r2, [r4, #0]
    26e8:	88e3      	ldrh	r3, [r4, #6]
    26ea:	b292      	uxth	r2, r2
    26ec:	b29b      	uxth	r3, r3
    26ee:	429a      	cmp	r2, r3
		I2C_TxBuffer.head = 0;
    26f0:	bf22      	ittt	cs
    26f2:	4b04      	ldrcs	r3, [pc, #16]	; (2704 <I2C_TxBufferPop+0x90>)
    26f4:	2200      	movcs	r2, #0
    26f6:	801a      	strhcs	r2, [r3, #0]

	// Decrement buffer sequence (until next stop will be sent)
	I2C_TxBuffer.sequencePos--;
    26f8:	7923      	ldrb	r3, [r4, #4]
    26fa:	3b01      	subs	r3, #1
    26fc:	b2db      	uxtb	r3, r3
    26fe:	7123      	strb	r3, [r4, #4]
	print(" ");
	printHex( I2C_TxBuffer.sequencePos );
	print(NL);
	*/
	return data;
}
    2700:	bd38      	pop	{r3, r4, r5, pc}
    2702:	bf00      	nop
    2704:	1fff899c 	.word	0x1fff899c
    2708:	00007c59 	.word	0x00007c59
    270c:	0000816a 	.word	0x0000816a
    2710:	0000b143 	.word	0x0000b143
    2714:	1fff8990 	.word	0x1fff8990

00002718 <i2c0_isr>:


// ----- Interrupt Functions -----

void i2c0_isr()
{
    2718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cli(); // Disable Interrupts
    271c:	b672      	cpsid	i

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    271e:	4e3a      	ldr	r6, [pc, #232]	; (2808 <L_396_delayMicroseconds+0x1e>)

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    2720:	4c3a      	ldr	r4, [pc, #232]	; (280c <L_396_delayMicroseconds+0x22>)
    2722:	4d3b      	ldr	r5, [pc, #236]	; (2810 <L_396_delayMicroseconds+0x26>)
    2724:	f894 8000 	ldrb.w	r8, [r4]

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    2728:	7833      	ldrb	r3, [r6, #0]
    272a:	f013 0f10 	tst.w	r3, #16

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    272e:	fa5f f888 	uxtb.w	r8, r8
    2732:	4637      	mov	r7, r6
	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    2734:	792b      	ldrb	r3, [r5, #4]
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    2736:	d04e      	beq.n	27d6 <L_339_delayMicroseconds+0x2a>
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    2738:	b163      	cbz	r3, 2754 <i2c0_isr+0x3c>
		{
			// Make sure slave sent an ACK
			if ( status & I2C_S_RXAK )
    273a:	f018 0f01 	tst.w	r8, #1
    273e:	d045      	beq.n	27cc <L_339_delayMicroseconds+0x20>
			{
				// NACK Detected, disable interrupt
				erro_print("I2C NAK detected...");
    2740:	4834      	ldr	r0, [pc, #208]	; (2814 <L_396_delayMicroseconds+0x2a>)
    2742:	f005 f86f 	bl	7824 <_print>
				I2C0_C1 = I2C_C1_IICEN;
    2746:	2380      	movs	r3, #128	; 0x80
    2748:	7033      	strb	r3, [r6, #0]

				// Abort Tx Buffer
				I2C_TxBuffer.head = 0;
    274a:	2300      	movs	r3, #0
    274c:	802b      	strh	r3, [r5, #0]
				I2C_TxBuffer.tail = 0;
    274e:	806b      	strh	r3, [r5, #2]
				I2C_TxBuffer.sequencePos = 0;
    2750:	712b      	strb	r3, [r5, #4]
    2752:	e053      	b.n	27fc <L_396_delayMicroseconds+0x12>
				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
			}
		}
		// Receiving data
		else if ( I2C_RxBuffer.sequencePos > 0 )
    2754:	4e30      	ldr	r6, [pc, #192]	; (2818 <L_396_delayMicroseconds+0x2e>)
    2756:	7933      	ldrb	r3, [r6, #4]
    2758:	b313      	cbz	r3, 27a0 <i2c0_isr+0x88>
		{
			// Master Receive, addr sent
			if ( status & I2C_S_ARBL )
    275a:	f018 0f10 	tst.w	r8, #16
    275e:	d006      	beq.n	276e <i2c0_isr+0x56>
			{
				// Arbitration Lost
				erro_print("Arbitration lost...");
    2760:	482e      	ldr	r0, [pc, #184]	; (281c <L_396_delayMicroseconds+0x32>)
    2762:	f005 f85f 	bl	7824 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    2766:	2380      	movs	r3, #128	; 0x80
    2768:	703b      	strb	r3, [r7, #0]
				I2C0_S = I2C_S_ARBL | I2C_S_IICIF; // Clear ARBL flag and interrupt
    276a:	2312      	movs	r3, #18
    276c:	7023      	strb	r3, [r4, #0]
			}
			if ( status & I2C_S_RXAK )
    276e:	f018 0f01 	tst.w	r8, #1
    2772:	d004      	beq.n	277e <i2c0_isr+0x66>
			{
				// Slave Address NACK Detected, disable interrupt
				erro_print("Slave Address I2C NAK detected...");
    2774:	482a      	ldr	r0, [pc, #168]	; (2820 <L_396_delayMicroseconds+0x36>)
    2776:	f005 f855 	bl	7824 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    277a:	2380      	movs	r3, #128	; 0x80
    277c:	e00e      	b.n	279c <i2c0_isr+0x84>
			}
			else
			{
				dbug_msg("Attempting to read byte - ");
    277e:	4829      	ldr	r0, [pc, #164]	; (2824 <L_396_delayMicroseconds+0x3a>)
    2780:	f005 f850 	bl	7824 <_print>
				printHex( I2C_RxBuffer.sequencePos );
    2784:	7930      	ldrb	r0, [r6, #4]
    2786:	2101      	movs	r1, #1
    2788:	f005 f8cf 	bl	792a <printHex_op>
				print( NL );
    278c:	4826      	ldr	r0, [pc, #152]	; (2828 <L_396_delayMicroseconds+0x3e>)
    278e:	f005 f849 	bl	7824 <_print>
				I2C0_C1 = I2C_RxBuffer.sequencePos == 1
    2792:	7933      	ldrb	r3, [r6, #4]
    2794:	2b01      	cmp	r3, #1
    2796:	bf0c      	ite	eq
    2798:	23e8      	moveq	r3, #232	; 0xe8
    279a:	23e0      	movne	r3, #224	; 0xe0
    279c:	703b      	strb	r3, [r7, #0]
    279e:	e02d      	b.n	27fc <L_396_delayMicroseconds+0x12>
#elif F_CPU == 48000000
	uint32_t n = usec << 4;
#elif F_CPU == 24000000
	uint32_t n = usec << 3;
#endif
	asm volatile(
    27a0:	2320      	movs	r3, #32

000027a2 <L_327_delayMicroseconds>:
    27a2:	3b01      	subs	r3, #1
    27a4:	d1fd      	bne.n	27a2 <L_327_delayMicroseconds>
			print(NL);
			*/

			// Delay around STOP to make sure it actually happens...
			delayMicroseconds( 1 );
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27a6:	2380      	movs	r3, #128	; 0x80
    27a8:	703b      	strb	r3, [r7, #0]
    27aa:	23e0      	movs	r3, #224	; 0xe0

000027ac <L_339_delayMicroseconds>:
    27ac:	3b01      	subs	r3, #1
    27ae:	d1fd      	bne.n	27ac <L_339_delayMicroseconds>
			delayMicroseconds( 7 );

			// If there is another sequence, start sending
			if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) < I2C_TxBuffer.size )
    27b0:	4628      	mov	r0, r5
    27b2:	f7ff ff24 	bl	25fe <I2C_BufferLen>
    27b6:	88eb      	ldrh	r3, [r5, #6]
    27b8:	b29b      	uxth	r3, r3
    27ba:	4298      	cmp	r0, r3
    27bc:	d21e      	bcs.n	27fc <L_396_delayMicroseconds+0x12>
			{
				// Clear status flags
				I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    27be:	2312      	movs	r3, #18
    27c0:	7023      	strb	r3, [r4, #0]

				// Wait...till the master dies
				while ( I2C0_S & I2C_S_BUSY );
    27c2:	7823      	ldrb	r3, [r4, #0]
    27c4:	069b      	lsls	r3, r3, #26
    27c6:	d4fc      	bmi.n	27c2 <L_339_delayMicroseconds+0x16>

				// Enable I2C interrupt
				I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    27c8:	23f0      	movs	r3, #240	; 0xf0
    27ca:	703b      	strb	r3, [r7, #0]

				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
    27cc:	f7ff ff52 	bl	2674 <I2C_TxBufferPop>
    27d0:	4b16      	ldr	r3, [pc, #88]	; (282c <L_396_delayMicroseconds+0x42>)
    27d2:	7018      	strb	r0, [r3, #0]
    27d4:	e012      	b.n	27fc <L_396_delayMicroseconds+0x12>
	{
		// XXX Do we need to handle 2nd last byte?
		//I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // No STOP, Rx, NAK on recv

		// Last byte
		if ( I2C_TxBuffer.sequencePos <= 1 )
    27d6:	2b01      	cmp	r3, #1
    27d8:	4b14      	ldr	r3, [pc, #80]	; (282c <L_396_delayMicroseconds+0x42>)
    27da:	d80b      	bhi.n	27f4 <L_396_delayMicroseconds+0xa>
		{
			// Change to Tx mode
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    27dc:	22b0      	movs	r2, #176	; 0xb0
    27de:	7032      	strb	r2, [r6, #0]

			// Grab last byte
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27e0:	7818      	ldrb	r0, [r3, #0]
    27e2:	490d      	ldr	r1, [pc, #52]	; (2818 <L_396_delayMicroseconds+0x2e>)
    27e4:	f7ff ff16 	bl	2614 <I2C_BufferPush>
    27e8:	2320      	movs	r3, #32

000027ea <L_396_delayMicroseconds>:
    27ea:	3b01      	subs	r3, #1
    27ec:	d1fd      	bne.n	27ea <L_396_delayMicroseconds>

			delayMicroseconds( 1 ); // Should be enough time before issuing the stop
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27ee:	2380      	movs	r3, #128	; 0x80
    27f0:	7033      	strb	r3, [r6, #0]
    27f2:	e003      	b.n	27fc <L_396_delayMicroseconds+0x12>
		}
		else
		{
			// Retrieve data
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27f4:	7818      	ldrb	r0, [r3, #0]
    27f6:	4908      	ldr	r1, [pc, #32]	; (2818 <L_396_delayMicroseconds+0x2e>)
    27f8:	f7ff ff0c 	bl	2614 <I2C_BufferPush>
		}
	}

	I2C0_S = I2C_S_IICIF; // Clear interrupt
    27fc:	2302      	movs	r3, #2
    27fe:	7023      	strb	r3, [r4, #0]

	sei(); // Re-enable Interrupts
    2800:	b662      	cpsie	i
    2802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2806:	bf00      	nop
    2808:	40066002 	.word	0x40066002
    280c:	40066003 	.word	0x40066003
    2810:	1fff899c 	.word	0x1fff899c
    2814:	00007c91 	.word	0x00007c91
    2818:	1fff8990 	.word	0x1fff8990
    281c:	00007cbc 	.word	0x00007cbc
    2820:	00007ce7 	.word	0x00007ce7
    2824:	00007d20 	.word	0x00007d20
    2828:	0000b143 	.word	0x0000b143
    282c:	40066004 	.word	0x40066004

00002830 <I2C_Send>:
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2834:	4c32      	ldr	r4, [pc, #200]	; (2900 <I2C_Send+0xd0>)
    2836:	88e3      	ldrh	r3, [r4, #6]
    2838:	fa1f f981 	uxth.w	r9, r1
    283c:	b29b      	uxth	r3, r3
    283e:	454b      	cmp	r3, r9
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2840:	4680      	mov	r8, r0
    2842:	460f      	mov	r7, r1
    2844:	4692      	mov	sl, r2
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2846:	d354      	bcc.n	28f2 <I2C_Send+0xc2>
	// The second element in the new buffer is the length of the buffer sequence (+1)
	uint16_t newTail = buffer->tail + sendLen + 2;
	if ( newTail >= buffer->size )
		newTail -= buffer->size;

	if ( I2C_BufferLen( buffer ) < sendLen + 2 )
    2848:	4620      	mov	r0, r4
    284a:	f7ff fed8 	bl	25fe <I2C_BufferLen>
    284e:	1c7b      	adds	r3, r7, #1
    2850:	4283      	cmp	r3, r0
    2852:	da4e      	bge.n	28f2 <I2C_Send+0xc2>
	printHex( newTail );
	print("@");
*/

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;
    2854:	8825      	ldrh	r5, [r4, #0]
    2856:	8863      	ldrh	r3, [r4, #2]
    2858:	b2ad      	uxth	r5, r5
    285a:	b29b      	uxth	r3, r3
    285c:	429d      	cmp	r5, r3
    285e:	bf0c      	ite	eq
    2860:	2501      	moveq	r5, #1
    2862:	2502      	movne	r5, #2

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    2864:	2300      	movs	r3, #0

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
    2866:	461e      	mov	r6, r3
	for ( uint16_t c = 0; c < sendLen; c++ )
    2868:	454b      	cmp	r3, r9
    286a:	d229      	bcs.n	28c0 <I2C_Send+0x90>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
    286c:	b14e      	cbz	r6, 2882 <I2C_Send+0x52>
    286e:	2e01      	cmp	r6, #1
    2870:	d110      	bne.n	2894 <I2C_Send+0x64>
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    2872:	8862      	ldrh	r2, [r4, #2]
    2874:	68a1      	ldr	r1, [r4, #8]
    2876:	b292      	uxth	r2, r2
			bufferHeaderPos++;
			c--;
    2878:	3b01      	subs	r3, #1
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    287a:	548f      	strb	r7, [r1, r2]
			bufferHeaderPos++;
			c--;
    287c:	b29b      	uxth	r3, r3
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
			bufferHeaderPos++;
    287e:	2602      	movs	r6, #2
    2880:	e00e      	b.n	28a0 <I2C_Send+0x70>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    2882:	8862      	ldrh	r2, [r4, #2]
    2884:	68a1      	ldr	r1, [r4, #8]
    2886:	b292      	uxth	r2, r2
			bufferHeaderPos++;
			c--;
    2888:	3b01      	subs	r3, #1
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    288a:	f801 a002 	strb.w	sl, [r1, r2]
			bufferHeaderPos++;
			c--;
    288e:	b29b      	uxth	r3, r3
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
			bufferHeaderPos++;
    2890:	2601      	movs	r6, #1
    2892:	e005      	b.n	28a0 <I2C_Send+0x70>
			bufferHeaderPos++;
			c--;
			break;

		default:
			buffer->buffer[ buffer->tail ] = data[ c ];
    2894:	8862      	ldrh	r2, [r4, #2]
    2896:	68a1      	ldr	r1, [r4, #8]
    2898:	f818 0003 	ldrb.w	r0, [r8, r3]
    289c:	b292      	uxth	r2, r2
    289e:	5488      	strb	r0, [r1, r2]
			break;
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
    28a0:	8860      	ldrh	r0, [r4, #2]
    28a2:	88e1      	ldrh	r1, [r4, #6]
    28a4:	4a16      	ldr	r2, [pc, #88]	; (2900 <I2C_Send+0xd0>)
    28a6:	b280      	uxth	r0, r0
    28a8:	b289      	uxth	r1, r1
    28aa:	3001      	adds	r0, #1
    28ac:	4288      	cmp	r0, r1
		{
			buffer->tail = 0;
    28ae:	bfa8      	it	ge
    28b0:	2100      	movge	r1, #0
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28b2:	f103 0301 	add.w	r3, r3, #1
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
		{
			buffer->tail = 0;
    28b6:	bfac      	ite	ge
    28b8:	8051      	strhge	r1, [r2, #2]
		}
		// Normal case
		else
		{
			buffer->tail++;
    28ba:	8050      	strhlt	r0, [r2, #2]
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28bc:	b29b      	uxth	r3, r3
    28be:	e7d3      	b.n	2868 <I2C_Send+0x38>
{
	// Check head and tail pointers
	// If full, return 0
	// If empty, start up I2C Master Tx
	// If buffer is non-empty and non-full, just append to the buffer
	switch ( I2C_BufferCopy( data, sendLen, recvLen, (I2C_Buffer*)&I2C_TxBuffer ) )
    28c0:	2d01      	cmp	r5, #1
    28c2:	d119      	bne.n	28f8 <I2C_Send+0xc8>
		return 0;

	// Empty buffer, initialize I2C
	case 1:
		// Clear status flags
		I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    28c4:	4a0f      	ldr	r2, [pc, #60]	; (2904 <I2C_Send+0xd4>)
    28c6:	2312      	movs	r3, #18
    28c8:	7013      	strb	r3, [r2, #0]

		// Check to see if we already have control of the bus
		if ( I2C0_C1 & I2C_C1_MST )
    28ca:	4b0f      	ldr	r3, [pc, #60]	; (2908 <I2C_Send+0xd8>)
    28cc:	7819      	ldrb	r1, [r3, #0]
    28ce:	0688      	lsls	r0, r1, #26
    28d0:	d501      	bpl.n	28d6 <I2C_Send+0xa6>
		{
			// Already the master (ah yeah), send a repeated start
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    28d2:	22b4      	movs	r2, #180	; 0xb4
    28d4:	e003      	b.n	28de <I2C_Send+0xae>
		}
		// Otherwise, seize control
		else
		{
			// Wait...till the master dies
			while ( I2C0_S & I2C_S_BUSY );
    28d6:	7811      	ldrb	r1, [r2, #0]
    28d8:	0689      	lsls	r1, r1, #26
    28da:	d4fc      	bmi.n	28d6 <I2C_Send+0xa6>

			// Now we're the master (ah yisss), get ready to send stuffs
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    28dc:	22b0      	movs	r2, #176	; 0xb0
    28de:	701a      	strb	r2, [r3, #0]
		}

		// Enable I2C interrupt
		I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    28e0:	22f0      	movs	r2, #240	; 0xf0
    28e2:	701a      	strb	r2, [r3, #0]

		// Depending on what type of transfer, the first byte is configured for R or W
		I2C0_D = I2C_TxBufferPop();
    28e4:	f7ff fec6 	bl	2674 <I2C_TxBufferPop>
    28e8:	4b08      	ldr	r3, [pc, #32]	; (290c <I2C_Send+0xdc>)
    28ea:	7018      	strb	r0, [r3, #0]

		return 1;
    28ec:	2001      	movs	r0, #1
    28ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printHex( sendLen );
		print("|");
		printHex( I2C_TxBuffer.size );
		print( NL );
		*/
		return 0;
    28f2:	2000      	movs	r0, #0
    28f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		return 1;
	}

	// Dirty buffer, I2C already initialized
	return 2;
    28f8:	2002      	movs	r0, #2
}
    28fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    28fe:	bf00      	nop
    2900:	1fff899c 	.word	0x1fff899c
    2904:	40066003 	.word	0x40066003
    2908:	40066002 	.word	0x40066002
    290c:	40066004 	.word	0x40066004

00002910 <LED_zeroPages>:
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2914:	4698      	mov	r8, r3
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    2916:	4b1a      	ldr	r3, [pc, #104]	; (2980 <LED_zeroPages+0x70>)
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2918:	b0b0      	sub	sp, #192	; 0xc0
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    291a:	881b      	ldrh	r3, [r3, #0]
    291c:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2920:	4605      	mov	r5, r0
    2922:	4616      	mov	r6, r2
    2924:	460f      	mov	r7, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };

	// Max length of a page + chip id + reg start
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
    2926:	a802      	add	r0, sp, #8
    2928:	2100      	movs	r1, #0
    292a:	22b6      	movs	r2, #182	; 0xb6
    292c:	f7ff fe1c 	bl	2568 <memset>
	fullPage[0] = 0xE8;     // Set chip id
    2930:	23e8      	movs	r3, #232	; 0xe8
    2932:	f88d 3008 	strb.w	r3, [sp, #8]
	fullPage[1] = startReg; // Set start reg
    2936:	f88d 6009 	strb.w	r6, [sp, #9]

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    293a:	462c      	mov	r4, r5
    293c:	19eb      	adds	r3, r5, r7
    293e:	429c      	cmp	r4, r3
    2940:	da1b      	bge.n	297a <LED_zeroPages+0x6a>
	{
		// Set page
		pageSetup[2] = page;
    2942:	f88d 4006 	strb.w	r4, [sp, #6]

		// Setup page
		while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2946:	a801      	add	r0, sp, #4
    2948:	2103      	movs	r1, #3
    294a:	2200      	movs	r2, #0
    294c:	f7ff ff70 	bl	2830 <I2C_Send>
    2950:	b918      	cbnz	r0, 295a <LED_zeroPages+0x4a>
			delay(1);
    2952:	2001      	movs	r0, #1
    2954:	f7ff fe40 	bl	25d8 <delay>
    2958:	e7f5      	b.n	2946 <LED_zeroPages+0x36>
    295a:	f108 0102 	add.w	r1, r8, #2

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
    295e:	1b89      	subs	r1, r1, r6
    2960:	a802      	add	r0, sp, #8
    2962:	b2c9      	uxtb	r1, r1
    2964:	2200      	movs	r2, #0
    2966:	f7ff ff63 	bl	2830 <I2C_Send>
    296a:	b918      	cbnz	r0, 2974 <LED_zeroPages+0x64>
			delay(1);
    296c:	2001      	movs	r0, #1
    296e:	f7ff fe33 	bl	25d8 <delay>
    2972:	e7f2      	b.n	295a <LED_zeroPages+0x4a>
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
	fullPage[0] = 0xE8;     // Set chip id
	fullPage[1] = startReg; // Set start reg

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    2974:	3401      	adds	r4, #1
    2976:	b2e4      	uxtb	r4, r4
    2978:	e7e0      	b.n	293c <LED_zeroPages+0x2c>

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
			delay(1);
	}
}
    297a:	b030      	add	sp, #192	; 0xc0
    297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2980:	00007af9 	.word	0x00007af9

00002984 <cliFunc_ledZero>:
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
}

void cliFunc_ledZero( char* args )
{
    2984:	b510      	push	{r4, lr}
	print( NL ); // No \r\n by default after the command is entered
    2986:	4805      	ldr	r0, [pc, #20]	; (299c <cliFunc_ledZero+0x18>)
    2988:	f004 ff4c 	bl	7824 <_print>
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    298c:	2000      	movs	r0, #0
    298e:	2108      	movs	r1, #8
    2990:	2224      	movs	r2, #36	; 0x24
    2992:	23b4      	movs	r3, #180	; 0xb4
}
    2994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void cliFunc_ledZero( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    2998:	f7ff bfba 	b.w	2910 <LED_zeroPages>
    299c:	0000b143 	.word	0x0000b143

000029a0 <LED_sendPage>:
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    29a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29a2:	23e8      	movs	r3, #232	; 0xe8
    29a4:	f88d 3004 	strb.w	r3, [sp, #4]
    29a8:	23fd      	movs	r3, #253	; 0xfd
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    29aa:	4605      	mov	r5, r0
    29ac:	460c      	mov	r4, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29ae:	f88d 3005 	strb.w	r3, [sp, #5]
    29b2:	f88d 2006 	strb.w	r2, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    29b6:	a801      	add	r0, sp, #4
    29b8:	2103      	movs	r1, #3
    29ba:	2200      	movs	r2, #0
    29bc:	f7ff ff38 	bl	2830 <I2C_Send>
    29c0:	b918      	cbnz	r0, 29ca <LED_sendPage+0x2a>
		delay(1);
    29c2:	2001      	movs	r0, #1
    29c4:	f7ff fe08 	bl	25d8 <delay>
    29c8:	e7f5      	b.n	29b6 <LED_sendPage+0x16>

	// Write page to I2C Tx Buffer
	while ( I2C_Send( buffer, len, 0 ) == 0 )
    29ca:	4628      	mov	r0, r5
    29cc:	4621      	mov	r1, r4
    29ce:	2200      	movs	r2, #0
    29d0:	f7ff ff2e 	bl	2830 <I2C_Send>
    29d4:	b918      	cbnz	r0, 29de <LED_sendPage+0x3e>
		delay(1);
    29d6:	2001      	movs	r0, #1
    29d8:	f7ff fdfe 	bl	25d8 <delay>
    29dc:	e7f5      	b.n	29ca <LED_sendPage+0x2a>

}
    29de:	b003      	add	sp, #12
    29e0:	bd30      	pop	{r4, r5, pc}
    29e2:	0000      	movs	r0, r0

000029e4 <cliFunc_ledTest>:
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );

}

void cliFunc_ledTest( char* args )
{
    29e4:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    29e6:	4805      	ldr	r0, [pc, #20]	; (29fc <cliFunc_ledTest+0x18>)
    29e8:	f004 ff1c 	bl	7824 <_print>
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29ec:	4804      	ldr	r0, [pc, #16]	; (2a00 <cliFunc_ledTest+0x1c>)
    29ee:	2192      	movs	r1, #146	; 0x92
    29f0:	2200      	movs	r2, #0
}
    29f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void cliFunc_ledTest( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29f6:	f7ff bfd3 	b.w	29a0 <LED_sendPage>
    29fa:	bf00      	nop
    29fc:	0000b143 	.word	0x0000b143
    2a00:	00007e27 	.word	0x00007e27

00002a04 <LED_writeReg>:
		delay(1);

}

void LED_writeReg( uint8_t reg, uint8_t val, uint8_t page )
{
    2a04:	b513      	push	{r0, r1, r4, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2a06:	23e8      	movs	r3, #232	; 0xe8
    2a08:	24fd      	movs	r4, #253	; 0xfd
    2a0a:	f88d 3000 	strb.w	r3, [sp]
    2a0e:	f88d 4001 	strb.w	r4, [sp, #1]
    2a12:	f88d 2002 	strb.w	r2, [sp, #2]

	// Reg Write Setup
	uint8_t writeData[] = { 0xE8, reg, val };
    2a16:	f88d 3004 	strb.w	r3, [sp, #4]
    2a1a:	f88d 0005 	strb.w	r0, [sp, #5]
    2a1e:	f88d 1006 	strb.w	r1, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2a22:	4668      	mov	r0, sp
    2a24:	2103      	movs	r1, #3
    2a26:	2200      	movs	r2, #0
    2a28:	f7ff ff02 	bl	2830 <I2C_Send>
    2a2c:	b918      	cbnz	r0, 2a36 <LED_writeReg+0x32>
		delay(1);
    2a2e:	2001      	movs	r0, #1
    2a30:	f7ff fdd2 	bl	25d8 <delay>
    2a34:	e7f5      	b.n	2a22 <LED_writeReg+0x1e>

	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
    2a36:	a801      	add	r0, sp, #4
    2a38:	2103      	movs	r1, #3
    2a3a:	2200      	movs	r2, #0
    2a3c:	f7ff fef8 	bl	2830 <I2C_Send>
    2a40:	b918      	cbnz	r0, 2a4a <LED_writeReg+0x46>
		delay(1);
    2a42:	2001      	movs	r0, #1
    2a44:	f7ff fdc8 	bl	25d8 <delay>
    2a48:	e7f5      	b.n	2a36 <LED_writeReg+0x32>
}
    2a4a:	b002      	add	sp, #8
    2a4c:	bd10      	pop	{r4, pc}
    2a4e:	0000      	movs	r0, r0

00002a50 <LED_setup>:
	LED_writeReg( 0x0A, 0x01, 0x0B );
}

// Setup
inline void LED_setup()
{
    2a50:	b508      	push	{r3, lr}
	// Register Scan CLI dictionary
	CLI_registerDictionary( ledCLIDict, ledCLIDictName );
    2a52:	4823      	ldr	r0, [pc, #140]	; (2ae0 <LED_setup+0x90>)
    2a54:	4923      	ldr	r1, [pc, #140]	; (2ae4 <LED_setup+0x94>)
    2a56:	f004 fc99 	bl	738c <CLI_registerDictionary>
// ----- Functions -----

inline void I2C_setup()
{
	// Enable I2C internal clock
	SIM_SCGC4 |= SIM_SCGC4_I2C0; // Bus 0
    2a5a:	4a23      	ldr	r2, [pc, #140]	; (2ae8 <LED_setup+0x98>)
    2a5c:	6813      	ldr	r3, [r2, #0]
    2a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a62:	6013      	str	r3, [r2, #0]

	// External pull-up resistor
	PORTB_PCR0 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a64:	4a21      	ldr	r2, [pc, #132]	; (2aec <LED_setup+0x9c>)
    2a66:	f44f 7319 	mov.w	r3, #612	; 0x264
    2a6a:	6013      	str	r3, [r2, #0]
	PORTB_PCR1 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a6c:	6053      	str	r3, [r2, #4]

	// SCL Frequency Divider
	// 400kHz -> 120 (0x85) @ 48 MHz F_BUS
	I2C0_F = 0x85;
    2a6e:	4b20      	ldr	r3, [pc, #128]	; (2af0 <LED_setup+0xa0>)
    2a70:	2285      	movs	r2, #133	; 0x85
    2a72:	701a      	strb	r2, [r3, #0]
	I2C0_FLT = 4;
    2a74:	2204      	movs	r2, #4
    2a76:	715a      	strb	r2, [r3, #5]
	I2C0_C1 = I2C_C1_IICEN;
    2a78:	2280      	movs	r2, #128	; 0x80
    2a7a:	705a      	strb	r2, [r3, #1]
	I2C0_C2 = I2C_C2_HDRS; // High drive select
    2a7c:	2220      	movs	r2, #32
    2a7e:	711a      	strb	r2, [r3, #4]

	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
    2a80:	4b1c      	ldr	r3, [pc, #112]	; (2af4 <LED_setup+0xa4>)
    2a82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2a86:	601a      	str	r2, [r3, #0]
	// Initialize I2C
	I2C_setup();

	// Zero out Frame Registers
	// This needs to be done before disabling the hardware shutdown (or the leds will do undefined things)
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2a88:	200b      	movs	r0, #11
    2a8a:	2101      	movs	r1, #1
    2a8c:	2200      	movs	r2, #0
    2a8e:	230c      	movs	r3, #12
    2a90:	f7ff ff3e 	bl	2910 <LED_zeroPages>

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
    2a94:	4a18      	ldr	r2, [pc, #96]	; (2af8 <LED_setup+0xa8>)
    2a96:	6813      	ldr	r3, [r2, #0]
    2a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2a9c:	6013      	str	r3, [r2, #0]
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2a9e:	4b17      	ldr	r3, [pc, #92]	; (2afc <LED_setup+0xac>)
    2aa0:	f44f 72a2 	mov.w	r2, #324	; 0x144
    2aa4:	601a      	str	r2, [r3, #0]
	GPIOB_PSOR |= (1<<16);
    2aa6:	4a16      	ldr	r2, [pc, #88]	; (2b00 <LED_setup+0xb0>)
    2aa8:	6813      	ldr	r3, [r2, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2aaa:	2000      	movs	r0, #0
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
	GPIOB_PSOR |= (1<<16);
    2aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2ab0:	6013      	str	r3, [r2, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2ab2:	2108      	movs	r1, #8
    2ab4:	23b4      	movs	r3, #180	; 0xb4
    2ab6:	4602      	mov	r2, r0
    2ab8:	f7ff ff2a 	bl	2910 <LED_zeroPages>

	// Enable LEDs based upon mask
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2abc:	4811      	ldr	r0, [pc, #68]	; (2b04 <LED_setup+0xb4>)
    2abe:	2114      	movs	r1, #20
    2ac0:	2200      	movs	r2, #0
    2ac2:	f7ff ff6d 	bl	29a0 <LED_sendPage>

	// Set default brightness
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    2ac6:	4810      	ldr	r0, [pc, #64]	; (2b08 <LED_setup+0xb8>)
    2ac8:	2192      	movs	r1, #146	; 0x92
    2aca:	2200      	movs	r2, #0
    2acc:	f7ff ff68 	bl	29a0 <LED_sendPage>

	// Disable Software shutdown of ISSI chip
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2ad0:	200a      	movs	r0, #10
    2ad2:	2101      	movs	r1, #1
    2ad4:	220b      	movs	r2, #11
}
    2ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Set default brightness
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );

	// Disable Software shutdown of ISSI chip
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2ada:	f7ff bf93 	b.w	2a04 <LED_writeReg>
    2ade:	bf00      	nop
    2ae0:	00007b60 	.word	0x00007b60
    2ae4:	00007fbb 	.word	0x00007fbb
    2ae8:	40048034 	.word	0x40048034
    2aec:	4004a000 	.word	0x4004a000
    2af0:	40066001 	.word	0x40066001
    2af4:	e000e100 	.word	0xe000e100
    2af8:	400ff054 	.word	0x400ff054
    2afc:	4004a040 	.word	0x4004a040
    2b00:	400ff044 	.word	0x400ff044
    2b04:	00007fa7 	.word	0x00007fa7
    2b08:	00007e27 	.word	0x00007e27

00002b0c <cliFunc_ledStart>:
		data[1]++;
	}
}

void cliFunc_ledStart( char* args )
{
    2b0c:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    2b0e:	480a      	ldr	r0, [pc, #40]	; (2b38 <cliFunc_ledStart+0x2c>)
    2b10:	f004 fe88 	bl	7824 <_print>
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2b14:	230c      	movs	r3, #12
    2b16:	200b      	movs	r0, #11
    2b18:	2101      	movs	r1, #1
    2b1a:	2200      	movs	r2, #0
    2b1c:	f7ff fef8 	bl	2910 <LED_zeroPages>
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2b20:	200a      	movs	r0, #10
    2b22:	2101      	movs	r1, #1
    2b24:	220b      	movs	r2, #11
    2b26:	f7ff ff6d 	bl	2a04 <LED_writeReg>
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b2a:	4804      	ldr	r0, [pc, #16]	; (2b3c <cliFunc_ledStart+0x30>)
    2b2c:	2114      	movs	r1, #20
    2b2e:	2200      	movs	r2, #0

}
    2b30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b34:	f7ff bf34 	b.w	29a0 <LED_sendPage>
    2b38:	0000b143 	.word	0x0000b143
    2b3c:	00007fa7 	.word	0x00007fa7

00002b40 <LED_readPage>:
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b40:	b530      	push	{r4, r5, lr}
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b42:	220b      	movs	r2, #11
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b44:	b085      	sub	sp, #20
    2b46:	460c      	mov	r4, r1
    2b48:	4605      	mov	r5, r0
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b4a:	2100      	movs	r1, #0
    2b4c:	200a      	movs	r0, #10
    2b4e:	f7ff ff59 	bl	2a04 <LED_writeReg>

	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2b52:	23e8      	movs	r3, #232	; 0xe8
    2b54:	f88d 300c 	strb.w	r3, [sp, #12]
    2b58:	23fd      	movs	r3, #253	; 0xfd
    2b5a:	f88d 300d 	strb.w	r3, [sp, #13]
    2b5e:	f88d 400e 	strb.w	r4, [sp, #14]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2b62:	a803      	add	r0, sp, #12
    2b64:	2103      	movs	r1, #3
    2b66:	2200      	movs	r2, #0
    2b68:	f7ff fe62 	bl	2830 <I2C_Send>
    2b6c:	b918      	cbnz	r0, 2b76 <LED_readPage+0x36>
		delay(1);
    2b6e:	2001      	movs	r0, #1
    2b70:	f7ff fd32 	bl	25d8 <delay>
    2b74:	e7f5      	b.n	2b62 <LED_readPage+0x22>

	// Register Setup
	uint8_t regSetup[] = { 0xE8, 0x00 };
    2b76:	23e8      	movs	r3, #232	; 0xe8
    2b78:	2400      	movs	r4, #0
    2b7a:	f88d 3008 	strb.w	r3, [sp, #8]
    2b7e:	f88d 4009 	strb.w	r4, [sp, #9]

	// Read each register in the page
	for ( uint8_t reg = 0; reg < len; reg++ )
    2b82:	42ac      	cmp	r4, r5
    2b84:	b2e3      	uxtb	r3, r4
    2b86:	d01d      	beq.n	2bc4 <LED_readPage+0x84>
	{
		// Update register to read
		regSetup[1] = reg;
    2b88:	f88d 3009 	strb.w	r3, [sp, #9]

		// Configure register
		while ( I2C_Send( regSetup, sizeof( regSetup ), 0 ) == 0 )
    2b8c:	a802      	add	r0, sp, #8
    2b8e:	2102      	movs	r1, #2
    2b90:	2200      	movs	r2, #0
    2b92:	f7ff fe4d 	bl	2830 <I2C_Send>
    2b96:	b918      	cbnz	r0, 2ba0 <LED_readPage+0x60>
			delay(1);
    2b98:	2001      	movs	r0, #1
    2b9a:	f7ff fd1d 	bl	25d8 <delay>
    2b9e:	e7f5      	b.n	2b8c <LED_readPage+0x4c>

		// Register Read Command
		uint8_t regReadCmd[] = { 0xE9 };
    2ba0:	23e9      	movs	r3, #233	; 0xe9
    2ba2:	f88d 3004 	strb.w	r3, [sp, #4]

		// Request single register byte
		while ( I2C_Send( regReadCmd, sizeof( regReadCmd ), 1 ) == 0 )
    2ba6:	2101      	movs	r1, #1
    2ba8:	a801      	add	r0, sp, #4
    2baa:	460a      	mov	r2, r1
    2bac:	f7ff fe40 	bl	2830 <I2C_Send>
    2bb0:	b918      	cbnz	r0, 2bba <LED_readPage+0x7a>
			delay(1);
    2bb2:	2001      	movs	r0, #1
    2bb4:	f7ff fd10 	bl	25d8 <delay>
    2bb8:	e7f5      	b.n	2ba6 <LED_readPage+0x66>
		dbug_print("NEXT");
    2bba:	4806      	ldr	r0, [pc, #24]	; (2bd4 <LED_readPage+0x94>)
    2bbc:	f004 fe32 	bl	7824 <_print>
    2bc0:	3401      	adds	r4, #1
    2bc2:	e7de      	b.n	2b82 <LED_readPage+0x42>
	}

	// Disable software shutdown
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2bc4:	200a      	movs	r0, #10
    2bc6:	2101      	movs	r1, #1
    2bc8:	220b      	movs	r2, #11
    2bca:	f7ff ff1b 	bl	2a04 <LED_writeReg>
}
    2bce:	b005      	add	sp, #20
    2bd0:	bd30      	pop	{r4, r5, pc}
    2bd2:	bf00      	nop
    2bd4:	00007d4e 	.word	0x00007d4e

00002bd8 <cliFunc_ledRPage>:
	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
}

// TODO Currently not working correctly
void cliFunc_ledRPage( char* args )
{
    2bd8:	b513      	push	{r0, r1, r4, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2bda:	4669      	mov	r1, sp
    2bdc:	aa01      	add	r2, sp, #4
    2bde:	f004 fb61 	bl	72a4 <CLI_argumentIsolation>

	// Default to 0 if no argument is given
	uint8_t page = 0;

	if ( arg1Ptr[0] != '\0' )
    2be2:	9800      	ldr	r0, [sp, #0]
    2be4:	7804      	ldrb	r4, [r0, #0]
    2be6:	b114      	cbz	r4, 2bee <cliFunc_ledRPage+0x16>
	{
		page = (uint8_t)numToInt( arg1Ptr );
    2be8:	f004 fef7 	bl	79da <numToInt>
    2bec:	b2c4      	uxtb	r4, r0
	}

	// No \r\n by default after the command is entered
	print( NL );
    2bee:	4804      	ldr	r0, [pc, #16]	; (2c00 <cliFunc_ledRPage+0x28>)
    2bf0:	f004 fe18 	bl	7824 <_print>

	LED_readPage( 0x1, page );
    2bf4:	2001      	movs	r0, #1
    2bf6:	4621      	mov	r1, r4
    2bf8:	f7ff ffa2 	bl	2b40 <LED_readPage>
	//LED_readPage( 0xB4, page );
}
    2bfc:	b002      	add	sp, #8
    2bfe:	bd10      	pop	{r4, pc}
    2c00:	0000b143 	.word	0x0000b143

00002c04 <cliFunc_i2cSend>:

// ----- CLI Command Functions -----

// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
    2c04:	b530      	push	{r4, r5, lr}
    2c06:	b085      	sub	sp, #20

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2c08:	2500      	movs	r5, #0
// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c0a:	9001      	str	r0, [sp, #4]
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2c0c:	481b      	ldr	r0, [pc, #108]	; (2c7c <cliFunc_i2cSend+0x78>)
    2c0e:	f004 fe09 	bl	7824 <_print>
	info_msg("Sending: ");
    2c12:	481b      	ldr	r0, [pc, #108]	; (2c80 <cliFunc_i2cSend+0x7c>)
    2c14:	f004 fe06 	bl	7824 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2c18:	9801      	ldr	r0, [sp, #4]
    2c1a:	4669      	mov	r1, sp
    2c1c:	aa01      	add	r2, sp, #4
    2c1e:	f004 fb41 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2c22:	9800      	ldr	r0, [sp, #0]
    2c24:	7803      	ldrb	r3, [r0, #0]
    2c26:	b1eb      	cbz	r3, 2c64 <cliFunc_i2cSend+0x60>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2c28:	2b7c      	cmp	r3, #124	; 0x7c
    2c2a:	d10a      	bne.n	2c42 <cliFunc_i2cSend+0x3e>
		{
			print("| ");
    2c2c:	4815      	ldr	r0, [pc, #84]	; (2c84 <cliFunc_i2cSend+0x80>)
    2c2e:	f004 fdf9 	bl	7824 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2c32:	a802      	add	r0, sp, #8
    2c34:	4629      	mov	r1, r5
    2c36:	2200      	movs	r2, #0
    2c38:	f7ff fdfa 	bl	2830 <I2C_Send>
			bufferLen = 0;
    2c3c:	2400      	movs	r4, #0
    2c3e:	4625      	mov	r5, r4
    2c40:	e7ea      	b.n	2c18 <cliFunc_i2cSend+0x14>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2c42:	f004 feca 	bl	79da <numToInt>
    2c46:	ab04      	add	r3, sp, #16
    2c48:	1c6c      	adds	r4, r5, #1
    2c4a:	441d      	add	r5, r3
    2c4c:	b2e4      	uxtb	r4, r4
    2c4e:	f805 0c08 	strb.w	r0, [r5, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2c52:	9800      	ldr	r0, [sp, #0]
    2c54:	f003 faf8 	bl	6248 <Output_putstr>
		print(" ");
    2c58:	480b      	ldr	r0, [pc, #44]	; (2c88 <cliFunc_i2cSend+0x84>)
    2c5a:	f004 fde3 	bl	7824 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2c5e:	2c07      	cmp	r4, #7
    2c60:	d9ed      	bls.n	2c3e <cliFunc_i2cSend+0x3a>
    2c62:	e000      	b.n	2c66 <cliFunc_i2cSend+0x62>
    2c64:	462c      	mov	r4, r5
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2c66:	4805      	ldr	r0, [pc, #20]	; (2c7c <cliFunc_i2cSend+0x78>)
    2c68:	f004 fddc 	bl	7824 <_print>

	I2C_Send( buffer, bufferLen, 0 );
    2c6c:	a802      	add	r0, sp, #8
    2c6e:	4621      	mov	r1, r4
    2c70:	2200      	movs	r2, #0
    2c72:	f7ff fddd 	bl	2830 <I2C_Send>
}
    2c76:	b005      	add	sp, #20
    2c78:	bd30      	pop	{r4, r5, pc}
    2c7a:	bf00      	nop
    2c7c:	0000b143 	.word	0x0000b143
    2c80:	00007d68 	.word	0x00007d68
    2c84:	00007d84 	.word	0x00007d84
    2c88:	0000816a 	.word	0x0000816a

00002c8c <cliFunc_i2cRecv>:

void cliFunc_i2cRecv( char* args )
{
    2c8c:	b530      	push	{r4, r5, lr}
    2c8e:	b085      	sub	sp, #20

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2c90:	2500      	movs	r5, #0

void cliFunc_i2cRecv( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c92:	9001      	str	r0, [sp, #4]
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2c94:	481b      	ldr	r0, [pc, #108]	; (2d04 <cliFunc_i2cRecv+0x78>)
    2c96:	f004 fdc5 	bl	7824 <_print>
	info_msg("Sending: ");
    2c9a:	481b      	ldr	r0, [pc, #108]	; (2d08 <cliFunc_i2cRecv+0x7c>)
    2c9c:	f004 fdc2 	bl	7824 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2ca0:	9801      	ldr	r0, [sp, #4]
    2ca2:	4669      	mov	r1, sp
    2ca4:	aa01      	add	r2, sp, #4
    2ca6:	f004 fafd 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2caa:	9800      	ldr	r0, [sp, #0]
    2cac:	7803      	ldrb	r3, [r0, #0]
    2cae:	b1eb      	cbz	r3, 2cec <cliFunc_i2cRecv+0x60>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2cb0:	2b7c      	cmp	r3, #124	; 0x7c
    2cb2:	d10a      	bne.n	2cca <cliFunc_i2cRecv+0x3e>
		{
			print("| ");
    2cb4:	4815      	ldr	r0, [pc, #84]	; (2d0c <cliFunc_i2cRecv+0x80>)
    2cb6:	f004 fdb5 	bl	7824 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2cba:	a802      	add	r0, sp, #8
    2cbc:	4629      	mov	r1, r5
    2cbe:	2200      	movs	r2, #0
    2cc0:	f7ff fdb6 	bl	2830 <I2C_Send>
			bufferLen = 0;
    2cc4:	2400      	movs	r4, #0
    2cc6:	4625      	mov	r5, r4
    2cc8:	e7ea      	b.n	2ca0 <cliFunc_i2cRecv+0x14>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2cca:	f004 fe86 	bl	79da <numToInt>
    2cce:	ab04      	add	r3, sp, #16
    2cd0:	1c6c      	adds	r4, r5, #1
    2cd2:	441d      	add	r5, r3
    2cd4:	b2e4      	uxtb	r4, r4
    2cd6:	f805 0c08 	strb.w	r0, [r5, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2cda:	9800      	ldr	r0, [sp, #0]
    2cdc:	f003 fab4 	bl	6248 <Output_putstr>
		print(" ");
    2ce0:	480b      	ldr	r0, [pc, #44]	; (2d10 <cliFunc_i2cRecv+0x84>)
    2ce2:	f004 fd9f 	bl	7824 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2ce6:	2c07      	cmp	r4, #7
    2ce8:	d9ed      	bls.n	2cc6 <cliFunc_i2cRecv+0x3a>
    2cea:	e000      	b.n	2cee <cliFunc_i2cRecv+0x62>
    2cec:	462c      	mov	r4, r5
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2cee:	4805      	ldr	r0, [pc, #20]	; (2d04 <cliFunc_i2cRecv+0x78>)
    2cf0:	f004 fd98 	bl	7824 <_print>

	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
    2cf4:	a802      	add	r0, sp, #8
    2cf6:	4621      	mov	r1, r4
    2cf8:	2201      	movs	r2, #1
    2cfa:	f7ff fd99 	bl	2830 <I2C_Send>
}
    2cfe:	b005      	add	sp, #20
    2d00:	bd30      	pop	{r4, r5, pc}
    2d02:	bf00      	nop
    2d04:	0000b143 	.word	0x0000b143
    2d08:	00007d68 	.word	0x00007d68
    2d0c:	00007d84 	.word	0x00007d84
    2d10:	0000816a 	.word	0x0000816a

00002d14 <cliFunc_ledWPage>:
	LED_readPage( 0x1, page );
	//LED_readPage( 0xB4, page );
}

void cliFunc_ledWPage( char* args )
{
    2d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr = args;

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d16:	a902      	add	r1, sp, #8
    2d18:	aa03      	add	r2, sp, #12

void cliFunc_ledWPage( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2d1a:	9003      	str	r0, [sp, #12]

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d1c:	f004 fac2 	bl	72a4 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d20:	9802      	ldr	r0, [sp, #8]
    2d22:	7803      	ldrb	r3, [r0, #0]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d040      	beq.n	2daa <cliFunc_ledWPage+0x96>
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d28:	23fd      	movs	r3, #253	; 0xfd
    2d2a:	24e8      	movs	r4, #232	; 0xe8
    2d2c:	f88d 3001 	strb.w	r3, [sp, #1]
    2d30:	f88d 4000 	strb.w	r4, [sp]
    2d34:	f004 fe51 	bl	79da <numToInt>

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d38:	a902      	add	r1, sp, #8
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d3a:	f88d 0002 	strb.w	r0, [sp, #2]

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d3e:	aa03      	add	r2, sp, #12
    2d40:	9803      	ldr	r0, [sp, #12]
    2d42:	f004 faaf 	bl	72a4 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d46:	9802      	ldr	r0, [sp, #8]
    2d48:	7803      	ldrb	r3, [r0, #0]
    2d4a:	b373      	cbz	r3, 2daa <cliFunc_ledWPage+0x96>
		return;
	uint8_t data[] = { 0xE8, numToInt( arg1Ptr ), 0 };
    2d4c:	f88d 4004 	strb.w	r4, [sp, #4]
    2d50:	f004 fe43 	bl	79da <numToInt>
    2d54:	2300      	movs	r3, #0
    2d56:	f88d 0005 	strb.w	r0, [sp, #5]
    2d5a:	f88d 3006 	strb.w	r3, [sp, #6]

	// Set the register page
	while ( I2C_Send( page, sizeof( page ), 0 ) == 0 )
    2d5e:	4668      	mov	r0, sp
    2d60:	2103      	movs	r1, #3
    2d62:	2200      	movs	r2, #0
    2d64:	f7ff fd64 	bl	2830 <I2C_Send>
    2d68:	b940      	cbnz	r0, 2d7c <cliFunc_ledWPage+0x68>
		delay(1);
    2d6a:	2001      	movs	r0, #1
    2d6c:	f7ff fc34 	bl	25d8 <delay>
    2d70:	e7f5      	b.n	2d5e <cliFunc_ledWPage+0x4a>
		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
			delay(1);

		// Increment address
		data[1]++;
    2d72:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2d76:	3301      	adds	r3, #1
    2d78:	f88d 3005 	strb.w	r3, [sp, #5]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d7c:	9803      	ldr	r0, [sp, #12]
    2d7e:	a902      	add	r1, sp, #8
    2d80:	aa03      	add	r2, sp, #12
    2d82:	f004 fa8f 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2d86:	9802      	ldr	r0, [sp, #8]
    2d88:	7803      	ldrb	r3, [r0, #0]
    2d8a:	b173      	cbz	r3, 2daa <cliFunc_ledWPage+0x96>
			break;

		data[2] = numToInt( arg1Ptr );
    2d8c:	f004 fe25 	bl	79da <numToInt>
    2d90:	f88d 0006 	strb.w	r0, [sp, #6]

		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
    2d94:	a801      	add	r0, sp, #4
    2d96:	2103      	movs	r1, #3
    2d98:	2200      	movs	r2, #0
    2d9a:	f7ff fd49 	bl	2830 <I2C_Send>
    2d9e:	2800      	cmp	r0, #0
    2da0:	d1e7      	bne.n	2d72 <cliFunc_ledWPage+0x5e>
			delay(1);
    2da2:	2001      	movs	r0, #1
    2da4:	f7ff fc18 	bl	25d8 <delay>
    2da8:	e7f4      	b.n	2d94 <cliFunc_ledWPage+0x80>

		// Increment address
		data[1]++;
	}
}
    2daa:	b004      	add	sp, #16
    2dac:	bd10      	pop	{r4, pc}

00002dae <LED_scan>:
	// I2C Busy
	// S & I2C_S_BUSY
	//I2C_S_BUSY

	return 0;
}
    2dae:	2000      	movs	r0, #0
    2db0:	4770      	bx	lr
    2db2:	0000      	movs	r0, r0

00002db4 <LED_control>:
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2db4:	7803      	ldrb	r3, [r0, #0]
	uint8_t        amount;
	uint16_t       index;
} LedControl;

void LED_control( LedControl *control )
{
    2db6:	b510      	push	{r4, lr}
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2db8:	2b05      	cmp	r3, #5
    2dba:	d837      	bhi.n	2e2c <LED_control+0x78>
    2dbc:	e8df f003 	tbb	[pc, r3]
    2dc0:	17120a03 	.word	0x17120a03
    2dc4:	2e23      	.short	0x2e23
	{
	case LedControlMode_brightness_decrease:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] -= control->amount;
    2dc6:	4a1f      	ldr	r2, [pc, #124]	; (2e44 <LED_control+0x90>)
    2dc8:	8843      	ldrh	r3, [r0, #2]
    2dca:	7841      	ldrb	r1, [r0, #1]
    2dcc:	4413      	add	r3, r2
    2dce:	789a      	ldrb	r2, [r3, #2]
    2dd0:	1a52      	subs	r2, r2, r1
    2dd2:	e005      	b.n	2de0 <LED_control+0x2c>
		break;

	case LedControlMode_brightness_increase:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] += control->amount;
    2dd4:	4a1b      	ldr	r2, [pc, #108]	; (2e44 <LED_control+0x90>)
    2dd6:	8843      	ldrh	r3, [r0, #2]
    2dd8:	4413      	add	r3, r2
    2dda:	7842      	ldrb	r2, [r0, #1]
    2ddc:	7899      	ldrb	r1, [r3, #2]
    2dde:	440a      	add	r2, r1
    2de0:	709a      	strb	r2, [r3, #2]
		break;
    2de2:	e023      	b.n	2e2c <LED_control+0x78>

	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
    2de4:	8843      	ldrh	r3, [r0, #2]
    2de6:	4917      	ldr	r1, [pc, #92]	; (2e44 <LED_control+0x90>)
    2de8:	7842      	ldrb	r2, [r0, #1]
    2dea:	440b      	add	r3, r1
    2dec:	e7f8      	b.n	2de0 <LED_control+0x2c>
    2dee:	4b16      	ldr	r3, [pc, #88]	; (2e48 <LED_control+0x94>)
    2df0:	f103 0190 	add.w	r1, r3, #144	; 0x90

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2df4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    2df8:	7844      	ldrb	r4, [r0, #1]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2dfa:	428b      	cmp	r3, r1
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2dfc:	eba2 0204 	sub.w	r2, r2, r4
    2e00:	701a      	strb	r2, [r3, #0]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e02:	d1f7      	bne.n	2df4 <LED_control+0x40>
    2e04:	e012      	b.n	2e2c <LED_control+0x78>
    2e06:	4b10      	ldr	r3, [pc, #64]	; (2e48 <LED_control+0x94>)
    2e08:	f103 0190 	add.w	r1, r3, #144	; 0x90

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e0c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    2e10:	7842      	ldrb	r2, [r0, #1]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e12:	428b      	cmp	r3, r1
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e14:	4422      	add	r2, r4
    2e16:	701a      	strb	r2, [r3, #0]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e18:	d1f8      	bne.n	2e0c <LED_control+0x58>
    2e1a:	e007      	b.n	2e2c <LED_control+0x78>
    2e1c:	4b0a      	ldr	r3, [pc, #40]	; (2e48 <LED_control+0x94>)
    2e1e:	f103 0290 	add.w	r2, r3, #144	; 0x90
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			LED_pageBuffer.buffer[ channel ] = control->amount;
    2e22:	7841      	ldrb	r1, [r0, #1]
    2e24:	f803 1f01 	strb.w	r1, [r3, #1]!
			LED_pageBuffer.buffer[ channel ] += control->amount;
		}
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e28:	4293      	cmp	r3, r2
    2e2a:	d1fa      	bne.n	2e22 <LED_control+0x6e>
		break;
	}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
    2e2c:	4805      	ldr	r0, [pc, #20]	; (2e44 <LED_control+0x90>)
    2e2e:	23e8      	movs	r3, #232	; 0xe8
    2e30:	7003      	strb	r3, [r0, #0]
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
    2e32:	2324      	movs	r3, #36	; 0x24
    2e34:	7043      	strb	r3, [r0, #1]
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e36:	2192      	movs	r1, #146	; 0x92
    2e38:	2200      	movs	r2, #0
}
    2e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e3e:	f7ff bdaf 	b.w	29a0 <LED_sendPage>
    2e42:	bf00      	nop
    2e44:	1fff9821 	.word	0x1fff9821
    2e48:	1fff9822 	.word	0x1fff9822

00002e4c <cliFunc_ledCtrl>:
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
}

void cliFunc_ledCtrl( char* args )
{
    2e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* arg2Ptr = args;
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e4e:	a901      	add	r1, sp, #4
    2e50:	aa02      	add	r2, sp, #8

void cliFunc_ledCtrl( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2e52:	9002      	str	r0, [sp, #8]
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e54:	f004 fa26 	bl	72a4 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2e58:	9801      	ldr	r0, [sp, #4]
    2e5a:	7803      	ldrb	r3, [r0, #0]
    2e5c:	b30b      	cbz	r3, 2ea2 <cliFunc_ledCtrl+0x56>
		return;
	control.mode = numToInt( arg1Ptr );
    2e5e:	f004 fdbc 	bl	79da <numToInt>


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e62:	a901      	add	r1, sp, #4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.mode = numToInt( arg1Ptr );
    2e64:	f88d 000c 	strb.w	r0, [sp, #12]


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e68:	aa02      	add	r2, sp, #8
    2e6a:	9802      	ldr	r0, [sp, #8]
    2e6c:	f004 fa1a 	bl	72a4 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2e70:	9801      	ldr	r0, [sp, #4]
    2e72:	7803      	ldrb	r3, [r0, #0]
    2e74:	b1ab      	cbz	r3, 2ea2 <cliFunc_ledCtrl+0x56>
		return;
	control.amount = numToInt( arg1Ptr );
    2e76:	f004 fdb0 	bl	79da <numToInt>


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e7a:	a901      	add	r1, sp, #4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.amount = numToInt( arg1Ptr );
    2e7c:	f88d 000d 	strb.w	r0, [sp, #13]


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e80:	aa02      	add	r2, sp, #8
    2e82:	9802      	ldr	r0, [sp, #8]
    2e84:	f004 fa0e 	bl	72a4 <CLI_argumentIsolation>
	control.index = *arg1Ptr == '\0' ? 0 : numToInt( arg1Ptr );
    2e88:	9801      	ldr	r0, [sp, #4]
    2e8a:	7803      	ldrb	r3, [r0, #0]
    2e8c:	b11b      	cbz	r3, 2e96 <cliFunc_ledCtrl+0x4a>
    2e8e:	f004 fda4 	bl	79da <numToInt>
    2e92:	b280      	uxth	r0, r0
    2e94:	e000      	b.n	2e98 <cliFunc_ledCtrl+0x4c>
    2e96:	4618      	mov	r0, r3
    2e98:	f8ad 000e 	strh.w	r0, [sp, #14]

	// Process request
	LED_control( &control );
    2e9c:	a803      	add	r0, sp, #12
    2e9e:	f7ff ff89 	bl	2db4 <LED_control>
}
    2ea2:	b005      	add	sp, #20
    2ea4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ea8 <LED_control_capability>:

uint8_t LED_control_timer = 0;
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2ea8:	29ff      	cmp	r1, #255	; 0xff
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
}

uint8_t LED_control_timer = 0;
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    2eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2eac:	460b      	mov	r3, r1
    2eae:	4605      	mov	r5, r0
    2eb0:	4614      	mov	r4, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2eb2:	d107      	bne.n	2ec4 <LED_control_capability+0x1c>
    2eb4:	28ff      	cmp	r0, #255	; 0xff
    2eb6:	d108      	bne.n	2eca <LED_control_capability+0x22>
	{
		print("LED_control_capability(mode,amount,index)");
    2eb8:	481c      	ldr	r0, [pc, #112]	; (2f2c <LED_control_capability+0x84>)
		return;
#endif

	// Modify led state of this node
	LED_control( control );
}
    2eba:	b002      	add	sp, #8
    2ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("LED_control_capability(mode,amount,index)");
    2ec0:	f004 bcb0 	b.w	7824 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state == 0x03 ) // Not on release
    2ec4:	b909      	cbnz	r1, 2eca <LED_control_capability+0x22>
    2ec6:	2803      	cmp	r0, #3
    2ec8:	d02d      	beq.n	2f26 <LED_control_capability+0x7e>
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2eca:	4a19      	ldr	r2, [pc, #100]	; (2f30 <LED_control_capability+0x88>)
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2ecc:	4819      	ldr	r0, [pc, #100]	; (2f34 <LED_control_capability+0x8c>)
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2ece:	6811      	ldr	r1, [r2, #0]
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2ed0:	7802      	ldrb	r2, [r0, #0]
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2ed2:	b2c9      	uxtb	r1, r1
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2ed4:	1a8a      	subs	r2, r1, r2
	if ( compare < 30 )
    2ed6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    2eda:	2a1d      	cmp	r2, #29
    2edc:	dd23      	ble.n	2f26 <LED_control_capability+0x7e>
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;

	// By default send to the *next* node, which will determine where to go next
	extern uint8_t Connect_id; // connect_scan.c
	uint8_t addr = Connect_id + 1;
    2ede:	4a16      	ldr	r2, [pc, #88]	; (2f38 <LED_control_capability+0x90>)
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
	if ( compare < 30 )
	{
		return;
	}
	LED_control_timer = currentTime;
    2ee0:	7001      	strb	r1, [r0, #0]
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;

	// By default send to the *next* node, which will determine where to go next
	extern uint8_t Connect_id; // connect_scan.c
	uint8_t addr = Connect_id + 1;
    2ee2:	7810      	ldrb	r0, [r2, #0]

	switch ( control->mode )
    2ee4:	7822      	ldrb	r2, [r4, #0]
    2ee6:	2a05      	cmp	r2, #5
    2ee8:	d817      	bhi.n	2f1a <LED_control_capability+0x72>
    2eea:	e8df f002 	tbb	[pc, r2]
    2eee:	0303      	.short	0x0303
    2ef0:	0a0a0a03 	.word	0x0a0a0a03
	// Otherwise, ignore
	case LedControlMode_brightness_decrease:
	case LedControlMode_brightness_increase:
	case LedControlMode_brightness_set:
		// Ignore if led is on this node
		if ( control->index < LED_TotalChannels )
    2ef4:	8862      	ldrh	r2, [r4, #2]
    2ef6:	2a8f      	cmp	r2, #143	; 0x8f
    2ef8:	d90f      	bls.n	2f1a <LED_control_capability+0x72>
			break;

		// Calculate new led index
		control->index -= LED_TotalChannels;
    2efa:	3a90      	subs	r2, #144	; 0x90
    2efc:	8062      	strh	r2, [r4, #2]

		ignore_node = 1;
    2efe:	2601      	movs	r6, #1
		send_packet = 1;
		break;
    2f00:	e000      	b.n	2f04 <LED_control_capability+0x5c>
	LedControl *control = (LedControl*)args;

	// Interconnect broadcasting
#if defined(ConnectEnabled_define)
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;
    2f02:	2600      	movs	r6, #0
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    2f04:	4a0d      	ldr	r2, [pc, #52]	; (2f3c <LED_control_capability+0x94>)
    2f06:	7d12      	ldrb	r2, [r2, #20]
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;

	// By default send to the *next* node, which will determine where to go next
	extern uint8_t Connect_id; // connect_scan.c
	uint8_t addr = Connect_id + 1;
    2f08:	3001      	adds	r0, #1
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    2f0a:	e88d 0014 	stmia.w	sp, {r2, r4}
    2f0e:	b2c0      	uxtb	r0, r0
    2f10:	2102      	movs	r1, #2
    2f12:	462a      	mov	r2, r5
    2f14:	f001 fa4e 	bl	43b4 <Connect_send_RemoteCapability>
			args
		);
	}

	// If there is nothing to do on this node, ignore
	if ( ignore_node )
    2f18:	b92e      	cbnz	r6, 2f26 <LED_control_capability+0x7e>
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f1a:	4620      	mov	r0, r4
}
    2f1c:	b002      	add	sp, #8
    2f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if ( ignore_node )
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f22:	f7ff bf47 	b.w	2db4 <LED_control>
}
    2f26:	b002      	add	sp, #8
    2f28:	bd70      	pop	{r4, r5, r6, pc}
    2f2a:	bf00      	nop
    2f2c:	00007d87 	.word	0x00007d87
    2f30:	1fff8f9c 	.word	0x1fff8f9c
    2f34:	1fff8fa0 	.word	0x1fff8fa0
    2f38:	1fff89c5 	.word	0x1fff89c5
    2f3c:	00009454 	.word	0x00009454

00002f40 <cliFunc_matrixState>:
	info_msg("Matrix Debug Mode: ");
	printInt8( matrixDebugMode );
}

void cliFunc_matrixState ( char* args )
{
    2f40:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f42:	4c07      	ldr	r4, [pc, #28]	; (2f60 <cliFunc_matrixState+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2f44:	4669      	mov	r1, sp
    2f46:	aa01      	add	r2, sp, #4
    2f48:	f004 f9ac 	bl	72a4 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f4c:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    2f4e:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f50:	8023      	strh	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    2f52:	7803      	ldrb	r3, [r0, #0]
    2f54:	b113      	cbz	r3, 2f5c <cliFunc_matrixState+0x1c>
	{
		matrixDebugStateCounter = (uint16_t)numToInt( arg1Ptr );
    2f56:	f004 fd40 	bl	79da <numToInt>
    2f5a:	8020      	strh	r0, [r4, #0]
	}
}
    2f5c:	b002      	add	sp, #8
    2f5e:	bd10      	pop	{r4, pc}
    2f60:	1fff8faa 	.word	0x1fff8faa

00002f64 <cliFunc_matrixDebug>:


// ----- CLI Command Functions -----

void cliFunc_matrixDebug ( char* args )
{
    2f64:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2f66:	4669      	mov	r1, sp
    2f68:	aa01      	add	r2, sp, #4
    2f6a:	f004 f99b 	bl	72a4 <CLI_argumentIsolation>

	// Set the matrix debug flag depending on the argument
	// If no argument, set to scan code only
	// If set to T, set to state transition
	switch ( arg1Ptr[0] )
    2f6e:	9b00      	ldr	r3, [sp, #0]
    2f70:	781b      	ldrb	r3, [r3, #0]
    2f72:	2b54      	cmp	r3, #84	; 0x54
    2f74:	d00a      	beq.n	2f8c <cliFunc_matrixDebug+0x28>
    2f76:	2b74      	cmp	r3, #116	; 0x74
    2f78:	d008      	beq.n	2f8c <cliFunc_matrixDebug+0x28>
    2f7a:	b9c3      	cbnz	r3, 2fae <cliFunc_matrixDebug+0x4a>
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
		break;

	// No argument
	case '\0':
		matrixDebugMode = matrixDebugMode != 1 ? 1 : 0;
    2f7c:	4a0d      	ldr	r2, [pc, #52]	; (2fb4 <cliFunc_matrixDebug+0x50>)
    2f7e:	7813      	ldrb	r3, [r2, #0]
    2f80:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    2f84:	bf18      	it	ne
    2f86:	2301      	movne	r3, #1
    2f88:	7013      	strb	r3, [r2, #0]
		break;
    2f8a:	e006      	b.n	2f9a <cliFunc_matrixDebug+0x36>
	switch ( arg1Ptr[0] )
	{
	// T as argument
	case 'T':
	case 't':
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
    2f8c:	4b09      	ldr	r3, [pc, #36]	; (2fb4 <cliFunc_matrixDebug+0x50>)
    2f8e:	781a      	ldrb	r2, [r3, #0]
    2f90:	2a02      	cmp	r2, #2
    2f92:	bf14      	ite	ne
    2f94:	2202      	movne	r2, #2
    2f96:	2200      	moveq	r2, #0
    2f98:	701a      	strb	r2, [r3, #0]
	// Invalid argument
	default:
		return;
	}

	print( NL );
    2f9a:	4807      	ldr	r0, [pc, #28]	; (2fb8 <cliFunc_matrixDebug+0x54>)
    2f9c:	f004 fc42 	bl	7824 <_print>
	info_msg("Matrix Debug Mode: ");
    2fa0:	4806      	ldr	r0, [pc, #24]	; (2fbc <cliFunc_matrixDebug+0x58>)
    2fa2:	f004 fc3f 	bl	7824 <_print>
	printInt8( matrixDebugMode );
    2fa6:	4b03      	ldr	r3, [pc, #12]	; (2fb4 <cliFunc_matrixDebug+0x50>)
    2fa8:	7818      	ldrb	r0, [r3, #0]
    2faa:	f004 fc6a 	bl	7882 <printInt8>
}
    2fae:	b003      	add	sp, #12
    2fb0:	f85d fb04 	ldr.w	pc, [sp], #4
    2fb4:	1fff8fa8 	.word	0x1fff8fa8
    2fb8:	0000b143 	.word	0x0000b143
    2fbc:	0000805a 	.word	0x0000805a

00002fc0 <Matrix_pin>:

// Pin action (Strobe, Sense, Strobe Setup, Sense Setup)
// NOTE: This function is highly dependent upon the organization of the register map
//       Only guaranteed to work with Freescale MK20 series uCs
uint8_t Matrix_pin( GPIO_Pin gpio, Type type )
{
    2fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2fc2:	b2c3      	uxtb	r3, r0
    2fc4:	f8ad 0004 	strh.w	r0, [sp, #4]
    2fc8:	f3c0 2007 	ubfx	r0, r0, #8, #8
	// Register width is defined as size of a pointer
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
    2fcc:	011a      	lsls	r2, r3, #4
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;
    2fce:	eb00 2383 	add.w	r3, r0, r3, lsl #10
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    2fd2:	009b      	lsls	r3, r3, #2
    2fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
    2fd8:	4c26      	ldr	r4, [pc, #152]	; (3074 <Matrix_pin+0xb4>)
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    2fda:	f503 2392 	add.w	r3, r3, #299008	; 0x49000

	// Operation depends on Type
	switch ( type )
    2fde:	2904      	cmp	r1, #4
    2fe0:	d845      	bhi.n	306e <Matrix_pin+0xae>
    2fe2:	e8df f001 	tbb	[pc, r1]
    2fe6:	0503      	.short	0x0503
    2fe8:	200e      	.short	0x200e
    2fea:	2a          	.byte	0x2a
    2feb:	00          	.byte	0x00
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
    2fec:	4922      	ldr	r1, [pc, #136]	; (3078 <Matrix_pin+0xb8>)
    2fee:	e000      	b.n	2ff2 <Matrix_pin+0x32>
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
    2ff0:	4922      	ldr	r1, [pc, #136]	; (307c <Matrix_pin+0xbc>)
	case Type_StrobeOn:
		*GPIO_PSOR |= (1 << gpio.pin);
		break;

	case Type_StrobeOff:
		*GPIO_PCOR |= (1 << gpio.pin);
    2ff2:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    2ff6:	2301      	movs	r3, #1
    2ff8:	4083      	lsls	r3, r0
    2ffa:	4323      	orrs	r3, r4
    2ffc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    3000:	e035      	b.n	306e <Matrix_pin+0xae>
		break;

	case Type_StrobeSetup:
		// Set as output pin
		*GPIO_PDDR |= (1 << gpio.pin);
    3002:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    3006:	2101      	movs	r1, #1
    3008:	4081      	lsls	r1, r0
    300a:	4329      	orrs	r1, r5
    300c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]

		// Configure pin with slow slew, high drive strength and GPIO mux
		*PORT_PCR = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3010:	f44f 72a2 	mov.w	r2, #324	; 0x144
    3014:	601a      	str	r2, [r3, #0]

		// Enabling open-drain if specified
		switch ( Matrix_type )
    3016:	4a1a      	ldr	r2, [pc, #104]	; (3080 <Matrix_pin+0xc0>)
    3018:	7812      	ldrb	r2, [r2, #0]
    301a:	2a02      	cmp	r2, #2
    301c:	d127      	bne.n	306e <Matrix_pin+0xae>
		{
		case Config_Opendrain:
			*PORT_PCR |= PORT_PCR_ODE;
    301e:	681a      	ldr	r2, [r3, #0]
    3020:	f042 0220 	orr.w	r2, r2, #32
    3024:	e022      	b.n	306c <Matrix_pin+0xac>
	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
    3026:	4b17      	ldr	r3, [pc, #92]	; (3084 <Matrix_pin+0xc4>)
			break;
		}
		break;

	case Type_Sense:
		return *GPIO_PDIR & (1 << gpio.pin) ? 1 : 0;
    3028:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    302c:	2301      	movs	r3, #1
    302e:	4083      	lsls	r3, r0
    3030:	421a      	tst	r2, r3
    3032:	bf14      	ite	ne
    3034:	2001      	movne	r0, #1
    3036:	2000      	moveq	r0, #0
    3038:	e01a      	b.n	3070 <Matrix_pin+0xb0>

	case Type_SenseSetup:
		// Set as input pin
		*GPIO_PDDR &= ~(1 << gpio.pin);
    303a:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    303e:	2101      	movs	r1, #1
    3040:	4081      	lsls	r1, r0
    3042:	ea25 0101 	bic.w	r1, r5, r1
    3046:	f844 1022 	str.w	r1, [r4, r2, lsl #2]

		// Configure pin with passive filter and GPIO mux
		*PORT_PCR = PORT_PCR_PFE | PORT_PCR_MUX(1);
    304a:	f44f 7288 	mov.w	r2, #272	; 0x110
    304e:	601a      	str	r2, [r3, #0]

		// Pull resistor config
		switch ( Matrix_type )
    3050:	4a0b      	ldr	r2, [pc, #44]	; (3080 <Matrix_pin+0xc0>)
    3052:	7810      	ldrb	r0, [r2, #0]
    3054:	b128      	cbz	r0, 3062 <Matrix_pin+0xa2>
    3056:	2801      	cmp	r0, #1
    3058:	d109      	bne.n	306e <Matrix_pin+0xae>
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
			break;

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    305a:	681a      	ldr	r2, [r3, #0]
    305c:	f042 0202 	orr.w	r2, r2, #2
    3060:	e004      	b.n	306c <Matrix_pin+0xac>

		// Pull resistor config
		switch ( Matrix_type )
		{
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
    3062:	681a      	ldr	r2, [r3, #0]
    3064:	f042 0203 	orr.w	r2, r2, #3
    3068:	601a      	str	r2, [r3, #0]
			break;
    306a:	e001      	b.n	3070 <Matrix_pin+0xb0>

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    306c:	601a      	str	r2, [r3, #0]
			break;
		}
		break;
	}

	return 0;
    306e:	2000      	movs	r0, #0
}
    3070:	b003      	add	sp, #12
    3072:	bd30      	pop	{r4, r5, pc}
    3074:	400ff014 	.word	0x400ff014
    3078:	400ff004 	.word	0x400ff004
    307c:	400ff008 	.word	0x400ff008
    3080:	1fff89c4 	.word	0x1fff89c4
    3084:	400ff010 	.word	0x400ff010

00003088 <Matrix_setup>:

// Setup GPIO pins for matrix scanning
void Matrix_setup()
{
    3088:	b538      	push	{r3, r4, r5, lr}
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );
    308a:	492d      	ldr	r1, [pc, #180]	; (3140 <Matrix_setup+0xb8>)
    308c:	482d      	ldr	r0, [pc, #180]	; (3144 <Matrix_setup+0xbc>)
    308e:	f004 f97d 	bl	738c <CLI_registerDictionary>

	info_msg("Columns:  ");
    3092:	482d      	ldr	r0, [pc, #180]	; (3148 <Matrix_setup+0xc0>)
    3094:	f004 fbc6 	bl	7824 <_print>
	printHex( Matrix_colsNum );
    3098:	2009      	movs	r0, #9
    309a:	2101      	movs	r1, #1
    309c:	f004 fc45 	bl	792a <printHex_op>
    30a0:	2400      	movs	r4, #0

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
	{
		Matrix_pin( Matrix_cols[ pin ], Type_StrobeSetup );
    30a2:	4b2a      	ldr	r3, [pc, #168]	; (314c <Matrix_setup+0xc4>)
    30a4:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
    30a8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    30ac:	2102      	movs	r1, #2
    30ae:	7858      	ldrb	r0, [r3, #1]
    30b0:	3401      	adds	r4, #1
    30b2:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    30b6:	f7ff ff83 	bl	2fc0 <Matrix_pin>

	info_msg("Columns:  ");
	printHex( Matrix_colsNum );

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
    30ba:	2c09      	cmp	r4, #9
    30bc:	d1f1      	bne.n	30a2 <Matrix_setup+0x1a>
	{
		Matrix_pin( Matrix_cols[ pin ], Type_StrobeSetup );
	}

	print( NL );
    30be:	4824      	ldr	r0, [pc, #144]	; (3150 <Matrix_setup+0xc8>)
    30c0:	f004 fbb0 	bl	7824 <_print>
	info_msg("Rows:     ");
    30c4:	4823      	ldr	r0, [pc, #140]	; (3154 <Matrix_setup+0xcc>)
    30c6:	f004 fbad 	bl	7824 <_print>
	printHex( Matrix_rowsNum );
    30ca:	2005      	movs	r0, #5
    30cc:	2101      	movs	r1, #1
    30ce:	f004 fc2c 	bl	792a <printHex_op>
    30d2:	2400      	movs	r4, #0

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
	{
		Matrix_pin( Matrix_rows[ pin ], Type_SenseSetup );
    30d4:	4b20      	ldr	r3, [pc, #128]	; (3158 <Matrix_setup+0xd0>)
    30d6:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
    30da:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    30de:	2104      	movs	r1, #4
    30e0:	7858      	ldrb	r0, [r3, #1]
    30e2:	3401      	adds	r4, #1
    30e4:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    30e8:	f7ff ff6a 	bl	2fc0 <Matrix_pin>
	print( NL );
	info_msg("Rows:     ");
	printHex( Matrix_rowsNum );

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
    30ec:	2c05      	cmp	r4, #5
    30ee:	d1f1      	bne.n	30d4 <Matrix_setup+0x4c>
	{
		Matrix_pin( Matrix_rows[ pin ], Type_SenseSetup );
	}

	print( NL );
    30f0:	4817      	ldr	r0, [pc, #92]	; (3150 <Matrix_setup+0xc8>)
    30f2:	f004 fb97 	bl	7824 <_print>
	info_msg("Max Keys: ");
    30f6:	4819      	ldr	r0, [pc, #100]	; (315c <Matrix_setup+0xd4>)
    30f8:	f004 fb94 	bl	7824 <_print>
	printHex( Matrix_maxKeys );
    30fc:	2101      	movs	r1, #1
    30fe:	202d      	movs	r0, #45	; 0x2d
    3100:	f004 fc13 	bl	792a <printHex_op>
	print( NL );
    3104:	4812      	ldr	r0, [pc, #72]	; (3150 <Matrix_setup+0xc8>)
    3106:	f004 fb8d 	bl	7824 <_print>
    310a:	4a15      	ldr	r2, [pc, #84]	; (3160 <Matrix_setup+0xd8>)
    310c:	2100      	movs	r1, #0
    310e:	4615      	mov	r5, r2
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3110:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
	print( NL );

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    3114:	2300      	movs	r3, #0
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3116:	1928      	adds	r0, r5, r4
    3118:	3101      	adds	r1, #1
	print( NL );

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    311a:	7113      	strb	r3, [r2, #4]
		Matrix_scanArray[ item ].curState         = KeyState_Off;
    311c:	7153      	strb	r3, [r2, #5]
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
	print( NL );

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    311e:	292d      	cmp	r1, #45	; 0x2d
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3120:	552b      	strb	r3, [r5, r4]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3122:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3126:	7043      	strb	r3, [r0, #1]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3128:	7084      	strb	r4, [r0, #2]
    312a:	70c4      	strb	r4, [r0, #3]
    312c:	f102 0207 	add.w	r2, r2, #7
		Matrix_scanArray[ item ].prevDecisionTime = 0;
    3130:	f802 3c01 	strb.w	r3, [r2, #-1]
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
	print( NL );

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    3134:	d1ec      	bne.n	3110 <Matrix_setup+0x88>
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
		Matrix_scanArray[ item ].prevDecisionTime = 0;
	}

	// Clear scan stats counters
	matrixMaxScans  = 0;
    3136:	4a0b      	ldr	r2, [pc, #44]	; (3164 <Matrix_setup+0xdc>)
    3138:	8013      	strh	r3, [r2, #0]
	matrixPrevScans = 0;
    313a:	4a0b      	ldr	r2, [pc, #44]	; (3168 <Matrix_setup+0xe0>)
    313c:	8013      	strh	r3, [r2, #0]
    313e:	bd38      	pop	{r3, r4, r5, pc}
    3140:	000082b7 	.word	0x000082b7
    3144:	000082d0 	.word	0x000082d0
    3148:	00008080 	.word	0x00008080
    314c:	1fff89a8 	.word	0x1fff89a8
    3150:	0000b143 	.word	0x0000b143
    3154:	0000809d 	.word	0x0000809d
    3158:	1fff89ba 	.word	0x1fff89ba
    315c:	000080ba 	.word	0x000080ba
    3160:	1fff99df 	.word	0x1fff99df
    3164:	1fff8fa6 	.word	0x1fff8fa6
    3168:	1fff8fa4 	.word	0x1fff8fa4

0000316c <Matrix_keyPositionDebug>:
}

void Matrix_keyPositionDebug( KeyPosition pos )
{
	// Depending on the state, use a different flag + color
	switch ( pos )
    316c:	2803      	cmp	r0, #3
    316e:	d80b      	bhi.n	3188 <Matrix_keyPositionDebug+0x1c>
    3170:	e8df f000 	tbb	[pc, r0]
    3174:	08060402 	.word	0x08060402
	{
	case KeyState_Off:
		print("\033[1mO\033[0m");
    3178:	4805      	ldr	r0, [pc, #20]	; (3190 <Matrix_keyPositionDebug+0x24>)
    317a:	e006      	b.n	318a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Press:
		print("\033[1;33mP\033[0m");
    317c:	4805      	ldr	r0, [pc, #20]	; (3194 <Matrix_keyPositionDebug+0x28>)
    317e:	e004      	b.n	318a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Hold:
		print("\033[1;32mH\033[0m");
    3180:	4805      	ldr	r0, [pc, #20]	; (3198 <Matrix_keyPositionDebug+0x2c>)
    3182:	e002      	b.n	318a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Release:
		print("\033[1;35mR\033[0m");
    3184:	4805      	ldr	r0, [pc, #20]	; (319c <Matrix_keyPositionDebug+0x30>)
    3186:	e000      	b.n	318a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Invalid:
	default:
		print("\033[1;31mI\033[0m");
    3188:	4805      	ldr	r0, [pc, #20]	; (31a0 <Matrix_keyPositionDebug+0x34>)
    318a:	f004 bb4b 	b.w	7824 <_print>
    318e:	bf00      	nop
    3190:	000080d7 	.word	0x000080d7
    3194:	000080e1 	.word	0x000080e1
    3198:	000080ee 	.word	0x000080ee
    319c:	000080fb 	.word	0x000080fb
    31a0:	00008108 	.word	0x00008108

000031a4 <Matrix_scan>:


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    31a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( !( Matrix_divCounter++ & (1 << ( DebounceThrottleDiv_define - 1 )) ) )
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
    31a8:	4b9d      	ldr	r3, [pc, #628]	; (3420 <Matrix_scan+0x27c>)
    31aa:	9301      	str	r3, [sp, #4]
    31ac:	881a      	ldrh	r2, [r3, #0]
    31ae:	4282      	cmp	r2, r0
    31b0:	bf38      	it	cc
    31b2:	8018      	strhcc	r0, [r3, #0]


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    31b4:	4607      	mov	r7, r0
    31b6:	4b9b      	ldr	r3, [pc, #620]	; (3424 <Matrix_scan+0x280>)
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
	if ( scanNum == 0 )
    31b8:	b920      	cbnz	r0, 31c4 <Matrix_scan+0x20>
	{
		matrixPrevScans = matrixCurScans;
    31ba:	4a9b      	ldr	r2, [pc, #620]	; (3428 <Matrix_scan+0x284>)
    31bc:	8819      	ldrh	r1, [r3, #0]
    31be:	8011      	strh	r1, [r2, #0]
		matrixCurScans = 0;
    31c0:	8018      	strh	r0, [r3, #0]
    31c2:	e002      	b.n	31ca <Matrix_scan+0x26>
	}
	else
	{
		matrixCurScans++;
    31c4:	881a      	ldrh	r2, [r3, #0]
    31c6:	3201      	adds	r2, #1
    31c8:	801a      	strh	r2, [r3, #0]
	}

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;
    31ca:	4b98      	ldr	r3, [pc, #608]	; (342c <Matrix_scan+0x288>)
    31cc:	681b      	ldr	r3, [r3, #0]
    31ce:	2600      	movs	r6, #0
    31d0:	fa5f fb83 	uxtb.w	fp, r3

	// For each strobe, scan each of the sense pins
	for ( uint8_t strobe = 0; strobe < Matrix_colsNum; strobe++ )
	{
		// Strobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOn );
    31d4:	f8df a26c 	ldr.w	sl, [pc, #620]	; 3444 <Matrix_scan+0x2a0>
    31d8:	0072      	lsls	r2, r6, #1
    31da:	9200      	str	r2, [sp, #0]
    31dc:	4452      	add	r2, sl
    31de:	f81a 3016 	ldrb.w	r3, [sl, r6, lsl #1]
    31e2:	7850      	ldrb	r0, [r2, #1]
    31e4:	2100      	movs	r1, #0
    31e6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    31ea:	f7ff fee9 	bl	2fc0 <Matrix_pin>
    31ee:	b2f4      	uxtb	r4, r6
    31f0:	f04f 0800 	mov.w	r8, #0
    31f4:	4d8e      	ldr	r5, [pc, #568]	; (3430 <Matrix_scan+0x28c>)
    31f6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
			// Key position
			uint8_t key = Matrix_colsNum * sense + strobe;
			KeyState *state = &Matrix_scanArray[ key ];

			// If first scan, reset state
			if ( scanNum == 0 )
    31fa:	b937      	cbnz	r7, 320a <Matrix_scan+0x66>
			{
				// Set previous state, and reset current state
				state->prevState = state->curState;
    31fc:	ebc4 0209 	rsb	r2, r4, r9
    3200:	442a      	add	r2, r5
    3202:	7951      	ldrb	r1, [r2, #5]
    3204:	7111      	strb	r1, [r2, #4]
				state->curState  = KeyState_Invalid;
    3206:	2104      	movs	r1, #4
    3208:	7151      	strb	r1, [r2, #5]
			// This means there is a maximum of scan 13 cycles on a perfect off to on transition
			//  (coming from a steady state 0xFFFF off scans)
			// Somewhat longer with switch bounciness
			// The advantage of this is that the count is ongoing and never needs to be reset
			// State still needs to be kept track of to deal with what to send to the Macro module
			if ( Matrix_pin( Matrix_rows[ sense ], Type_Sense ) )
    320a:	4a8a      	ldr	r2, [pc, #552]	; (3434 <Matrix_scan+0x290>)
    320c:	f812 1018 	ldrb.w	r1, [r2, r8, lsl #1]
    3210:	eb02 0248 	add.w	r2, r2, r8, lsl #1
    3214:	7850      	ldrb	r0, [r2, #1]
    3216:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    321a:	2103      	movs	r1, #3
    321c:	f7ff fed0 	bl	2fc0 <Matrix_pin>
    3220:	b178      	cbz	r0, 3242 <Matrix_scan+0x9e>
			{
				// Only update if not going to wrap around
				if ( state->activeCount < DebounceDivThreshold_define ) state->activeCount += 1;
    3222:	ebc4 0109 	rsb	r1, r4, r9
    3226:	f64f 70ff 	movw	r0, #65535	; 0xffff
    322a:	5a6a      	ldrh	r2, [r5, r1]
    322c:	4282      	cmp	r2, r0
    322e:	bf1c      	itt	ne
    3230:	3201      	addne	r2, #1
    3232:	526a      	strhne	r2, [r5, r1]
				state->inactiveCount >>= 1;
    3234:	ebc4 0209 	rsb	r2, r4, r9
    3238:	442a      	add	r2, r5
    323a:	8851      	ldrh	r1, [r2, #2]
    323c:	0849      	lsrs	r1, r1, #1
    323e:	8051      	strh	r1, [r2, #2]
    3240:	e00e      	b.n	3260 <Matrix_scan+0xbc>
			}
			// Signal Not Detected
			else
			{
				// Only update if not going to wrap around
				if ( state->inactiveCount < DebounceDivThreshold_define ) state->inactiveCount += 1;
    3242:	ebc4 0209 	rsb	r2, r4, r9
    3246:	442a      	add	r2, r5
    3248:	f64f 70ff 	movw	r0, #65535	; 0xffff
    324c:	8851      	ldrh	r1, [r2, #2]
    324e:	4281      	cmp	r1, r0
    3250:	bf1c      	itt	ne
    3252:	3101      	addne	r1, #1
    3254:	8051      	strhne	r1, [r2, #2]
				state->activeCount >>= 1;
    3256:	ebc4 0109 	rsb	r1, r4, r9
    325a:	5a6a      	ldrh	r2, [r5, r1]
    325c:	0852      	lsrs	r2, r2, #1
    325e:	526a      	strh	r2, [r5, r1]
			// Check for state change if it hasn't been set
			// But only if enough time has passed since last state change
			// Only check if the minimum number of scans has been met
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
    3260:	ebc4 0209 	rsb	r2, r4, r9
    3264:	442a      	add	r2, r5
    3266:	7951      	ldrb	r1, [r2, #5]
    3268:	2904      	cmp	r1, #4
    326a:	d157      	bne.n	331c <Matrix_scan+0x178>
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    326c:	7991      	ldrb	r1, [r2, #6]

				// Attempt state transition
				switch ( state->prevState )
    326e:	7910      	ldrb	r0, [r2, #4]
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    3270:	ebc1 010b 	rsb	r1, r1, fp
    3274:	b2c9      	uxtb	r1, r1

				// Attempt state transition
				switch ( state->prevState )
    3276:	2803      	cmp	r0, #3
    3278:	d824      	bhi.n	32c4 <Matrix_scan+0x120>
    327a:	e8df f000 	tbb	[pc, r0]
    327e:	0211      	.short	0x0211
    3280:	1102      	.short	0x1102
				{
				case KeyState_Press:
				case KeyState_Hold:
					if ( state->activeCount > state->inactiveCount )
    3282:	ebc4 0209 	rsb	r2, r4, r9
    3286:	442a      	add	r2, r5
    3288:	f8b2 c000 	ldrh.w	ip, [r2]
    328c:	f8b2 e002 	ldrh.w	lr, [r2, #2]
    3290:	45f4      	cmp	ip, lr
    3292:	d901      	bls.n	3298 <Matrix_scan+0xf4>
					{
						state->curState = KeyState_Hold;
    3294:	2102      	movs	r1, #2
    3296:	e011      	b.n	32bc <Matrix_scan+0x118>
					}
					else
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    3298:	2904      	cmp	r1, #4
    329a:	d90c      	bls.n	32b6 <Matrix_scan+0x112>
							//warn_print("FAST Release stopped");
							state->curState = state->prevState;
							continue;
						}

						state->curState = KeyState_Release;
    329c:	2103      	movs	r1, #3
    329e:	e00d      	b.n	32bc <Matrix_scan+0x118>
					}
					break;

				case KeyState_Release:
				case KeyState_Off:
					if ( state->activeCount > state->inactiveCount )
    32a0:	ebc4 0209 	rsb	r2, r4, r9
    32a4:	442a      	add	r2, r5
    32a6:	f8b2 c000 	ldrh.w	ip, [r2]
    32aa:	f8b2 e002 	ldrh.w	lr, [r2, #2]
    32ae:	45f4      	cmp	ip, lr
    32b0:	d906      	bls.n	32c0 <Matrix_scan+0x11c>
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    32b2:	2904      	cmp	r1, #4
    32b4:	d801      	bhi.n	32ba <Matrix_scan+0x116>
						{
							//warn_print("FAST Press stopped");
							state->curState = state->prevState;
    32b6:	7150      	strb	r0, [r2, #5]
							continue;
    32b8:	e030      	b.n	331c <Matrix_scan+0x178>
						}

						state->curState = KeyState_Press;
    32ba:	2101      	movs	r1, #1
    32bc:	7151      	strb	r1, [r2, #5]
    32be:	e004      	b.n	32ca <Matrix_scan+0x126>
					}
					else
					{
						state->curState = KeyState_Off;
    32c0:	2100      	movs	r1, #0
    32c2:	e7fb      	b.n	32bc <Matrix_scan+0x118>
					}
					break;

				case KeyState_Invalid:
				default:
					erro_print("Matrix scan bug!! Report me!");
    32c4:	485c      	ldr	r0, [pc, #368]	; (3438 <Matrix_scan+0x294>)
    32c6:	f004 faad 	bl	7824 <_print>
					break;
				}

				// Update decision time
				state->prevDecisionTime = currentTime;
    32ca:	ebc4 0309 	rsb	r3, r4, r9
    32ce:	eb05 0903 	add.w	r9, r5, r3

				// Send keystate to macro module
				Macro_keyState( key, state->curState );
    32d2:	4620      	mov	r0, r4
					erro_print("Matrix scan bug!! Report me!");
					break;
				}

				// Update decision time
				state->prevDecisionTime = currentTime;
    32d4:	f889 b006 	strb.w	fp, [r9, #6]

				// Send keystate to macro module
				Macro_keyState( key, state->curState );
    32d8:	f899 1005 	ldrb.w	r1, [r9, #5]
    32dc:	f002 f846 	bl	536c <Macro_keyState>

				// Matrix Debug, only if there is a state change
				if ( matrixDebugMode && state->curState != state->prevState )
    32e0:	4a56      	ldr	r2, [pc, #344]	; (343c <Matrix_scan+0x298>)
    32e2:	7812      	ldrb	r2, [r2, #0]
    32e4:	b1d2      	cbz	r2, 331c <Matrix_scan+0x178>
    32e6:	f899 1005 	ldrb.w	r1, [r9, #5]
    32ea:	f899 0004 	ldrb.w	r0, [r9, #4]
    32ee:	4288      	cmp	r0, r1
    32f0:	d014      	beq.n	331c <Matrix_scan+0x178>
				{
					// Basic debug output
					if ( matrixDebugMode == 1 && state->curState == KeyState_Press )
    32f2:	2a01      	cmp	r2, #1
    32f4:	d105      	bne.n	3302 <Matrix_scan+0x15e>
    32f6:	2901      	cmp	r1, #1
    32f8:	d110      	bne.n	331c <Matrix_scan+0x178>
					{
						printHex( key );
    32fa:	4620      	mov	r0, r4
    32fc:	f004 fb15 	bl	792a <printHex_op>
    3300:	e009      	b.n	3316 <Matrix_scan+0x172>
						print(" ");
					}
					// State transition debug output
					else if ( matrixDebugMode == 2 )
    3302:	2a02      	cmp	r2, #2
    3304:	d10a      	bne.n	331c <Matrix_scan+0x178>
					{
						printHex( key );
    3306:	4620      	mov	r0, r4
    3308:	2101      	movs	r1, #1
    330a:	f004 fb0e 	bl	792a <printHex_op>
						Matrix_keyPositionDebug( state->curState );
    330e:	f899 0005 	ldrb.w	r0, [r9, #5]
    3312:	f7ff ff2b 	bl	316c <Matrix_keyPositionDebug>
						print(" ");
    3316:	484a      	ldr	r0, [pc, #296]	; (3440 <Matrix_scan+0x29c>)
    3318:	f004 fa84 	bl	7824 <_print>
    331c:	f108 0801 	add.w	r8, r8, #1
    3320:	3409      	adds	r4, #9
	{
		// Strobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOn );

		// Scan each of the sense pins
		for ( uint8_t sense = 0; sense < Matrix_rowsNum; sense++ )
    3322:	f1b8 0f05 	cmp.w	r8, #5
    3326:	b2e4      	uxtb	r4, r4
    3328:	f47f af64 	bne.w	31f4 <Matrix_scan+0x50>
				}
			}
		}

		// Unstrobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOff );
    332c:	9a00      	ldr	r2, [sp, #0]
    332e:	f81a 3016 	ldrb.w	r3, [sl, r6, lsl #1]
    3332:	4691      	mov	r9, r2
    3334:	4a43      	ldr	r2, [pc, #268]	; (3444 <Matrix_scan+0x2a0>)
    3336:	4491      	add	r9, r2
    3338:	2101      	movs	r1, #1
    333a:	f899 0001 	ldrb.w	r0, [r9, #1]
    333e:	3601      	adds	r6, #1
    3340:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3344:	f7ff fe3c 	bl	2fc0 <Matrix_pin>

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;

	// For each strobe, scan each of the sense pins
	for ( uint8_t strobe = 0; strobe < Matrix_colsNum; strobe++ )
    3348:	2e09      	cmp	r6, #9
    334a:	f47f af43 	bne.w	31d4 <Matrix_scan+0x30>
		// Unstrobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOff );
	}

	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
    334e:	4a3e      	ldr	r2, [pc, #248]	; (3448 <Matrix_scan+0x2a4>)
    3350:	8813      	ldrh	r3, [r2, #0]
    3352:	2b00      	cmp	r3, #0
    3354:	d060      	beq.n	3418 <Matrix_scan+0x274>
	{
		// Decrement counter
		matrixDebugStateCounter--;
    3356:	3b01      	subs	r3, #1

		// Output stats on number of scans being done per USB send
		print( NL );
    3358:	483c      	ldr	r0, [pc, #240]	; (344c <Matrix_scan+0x2a8>)

	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
	{
		// Decrement counter
		matrixDebugStateCounter--;
    335a:	8013      	strh	r3, [r2, #0]

		// Output stats on number of scans being done per USB send
		print( NL );
    335c:	f004 fa62 	bl	7824 <_print>
		info_msg("Max scans:      ");
    3360:	483b      	ldr	r0, [pc, #236]	; (3450 <Matrix_scan+0x2ac>)
    3362:	4e33      	ldr	r6, [pc, #204]	; (3430 <Matrix_scan+0x28c>)
    3364:	f004 fa5e 	bl	7824 <_print>
		printHex( matrixMaxScans );
    3368:	9b01      	ldr	r3, [sp, #4]
    336a:	2101      	movs	r1, #1
    336c:	8818      	ldrh	r0, [r3, #0]
    336e:	f004 fadc 	bl	792a <printHex_op>
		print( NL );
    3372:	4836      	ldr	r0, [pc, #216]	; (344c <Matrix_scan+0x2a8>)
    3374:	f004 fa56 	bl	7824 <_print>
		info_msg("Previous scans: ");
    3378:	4836      	ldr	r0, [pc, #216]	; (3454 <Matrix_scan+0x2b0>)
    337a:	f004 fa53 	bl	7824 <_print>
		printHex( matrixPrevScans );
    337e:	4b2a      	ldr	r3, [pc, #168]	; (3428 <Matrix_scan+0x284>)
    3380:	2101      	movs	r1, #1
    3382:	8818      	ldrh	r0, [r3, #0]
    3384:	f004 fad1 	bl	792a <printHex_op>
		print( NL );
    3388:	4830      	ldr	r0, [pc, #192]	; (344c <Matrix_scan+0x2a8>)
    338a:	f004 fa4b 	bl	7824 <_print>

		// Output current scan number
		info_msg("Scan Number:    ");
    338e:	4832      	ldr	r0, [pc, #200]	; (3458 <Matrix_scan+0x2b4>)
    3390:	f004 fa48 	bl	7824 <_print>
		printHex( scanNum );
    3394:	2101      	movs	r1, #1
    3396:	4638      	mov	r0, r7
    3398:	f004 fac7 	bl	792a <printHex_op>
		print( NL );
    339c:	482b      	ldr	r0, [pc, #172]	; (344c <Matrix_scan+0x2a8>)
    339e:	f004 fa41 	bl	7824 <_print>

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
    33a2:	482e      	ldr	r0, [pc, #184]	; (345c <Matrix_scan+0x2b8>)
    33a4:	f004 fa3e 	bl	7824 <_print>
    33a8:	2400      	movs	r4, #0
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
		{
			// Every 4 keys, put a newline
			if ( key % 4 == 0 )
    33aa:	07a3      	lsls	r3, r4, #30
    33ac:	d102      	bne.n	33b4 <Matrix_scan+0x210>
				print( NL );
    33ae:	4827      	ldr	r0, [pc, #156]	; (344c <Matrix_scan+0x2a8>)
    33b0:	f004 fa38 	bl	7824 <_print>

			print("\033[1m0x");
    33b4:	482a      	ldr	r0, [pc, #168]	; (3460 <Matrix_scan+0x2bc>)
    33b6:	f004 fa35 	bl	7824 <_print>
			printHex_op( key, 2 );
    33ba:	2102      	movs	r1, #2
    33bc:	b2a0      	uxth	r0, r4
    33be:	f004 fab4 	bl	792a <printHex_op>
			print("\033[0m");
    33c2:	4828      	ldr	r0, [pc, #160]	; (3464 <Matrix_scan+0x2c0>)
    33c4:	f004 fa2e 	bl	7824 <_print>
			print(":");
    33c8:	4827      	ldr	r0, [pc, #156]	; (3468 <Matrix_scan+0x2c4>)
    33ca:	f004 fa2b 	bl	7824 <_print>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    33ce:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3

			print("\033[1m0x");
			printHex_op( key, 2 );
			print("\033[0m");
			print(":");
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
    33d2:	7930      	ldrb	r0, [r6, #4]
    33d4:	f7ff feca 	bl	316c <Matrix_keyPositionDebug>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    33d8:	442f      	add	r7, r5
			print("\033[1m0x");
			printHex_op( key, 2 );
			print("\033[0m");
			print(":");
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
    33da:	7970      	ldrb	r0, [r6, #5]
    33dc:	f7ff fec6 	bl	316c <Matrix_keyPositionDebug>
			print(" 0x");
    33e0:	4822      	ldr	r0, [pc, #136]	; (346c <Matrix_scan+0x2c8>)
    33e2:	f004 fa1f 	bl	7824 <_print>
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    33e6:	2104      	movs	r1, #4
    33e8:	8838      	ldrh	r0, [r7, #0]
    33ea:	f004 fa9e 	bl	792a <printHex_op>
			print(" 0x");
    33ee:	481f      	ldr	r0, [pc, #124]	; (346c <Matrix_scan+0x2c8>)
    33f0:	f004 fa18 	bl	7824 <_print>
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
    33f4:	8878      	ldrh	r0, [r7, #2]
    33f6:	2104      	movs	r1, #4
    33f8:	f004 fa97 	bl	792a <printHex_op>
    33fc:	3401      	adds	r4, #1
			print(" ");
    33fe:	4810      	ldr	r0, [pc, #64]	; (3440 <Matrix_scan+0x29c>)
    3400:	f004 fa10 	bl	7824 <_print>
		printHex( scanNum );
		print( NL );

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
    3404:	2c2d      	cmp	r4, #45	; 0x2d
    3406:	f106 0607 	add.w	r6, r6, #7
    340a:	d1ce      	bne.n	33aa <Matrix_scan+0x206>
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    340c:	480f      	ldr	r0, [pc, #60]	; (344c <Matrix_scan+0x2a8>)
	}
}
    340e:	b003      	add	sp, #12
    3410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    3414:	f004 ba06 	b.w	7824 <_print>
	}
}
    3418:	b003      	add	sp, #12
    341a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    341e:	bf00      	nop
    3420:	1fff8fa6 	.word	0x1fff8fa6
    3424:	1fff8fa2 	.word	0x1fff8fa2
    3428:	1fff8fa4 	.word	0x1fff8fa4
    342c:	1fff8f9c 	.word	0x1fff8f9c
    3430:	1fff99df 	.word	0x1fff99df
    3434:	1fff89ba 	.word	0x1fff89ba
    3438:	00008115 	.word	0x00008115
    343c:	1fff8fa8 	.word	0x1fff8fa8
    3440:	0000816a 	.word	0x0000816a
    3444:	1fff89a8 	.word	0x1fff89a8
    3448:	1fff8faa 	.word	0x1fff8faa
    344c:	0000b143 	.word	0x0000b143
    3450:	00008149 	.word	0x00008149
    3454:	0000816c 	.word	0x0000816c
    3458:	0000818f 	.word	0x0000818f
    345c:	000081b2 	.word	0x000081b2
    3460:	000081f8 	.word	0x000081f8
    3464:	000096be 	.word	0x000096be
    3468:	000081ff 	.word	0x000081ff
    346c:	00008201 	.word	0x00008201

00003470 <cliFunc_lcdColor>:
	print( NL );
	LCD_writeControlReg( cmd );
}

void cliFunc_lcdColor( char* args )
{
    3470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3472:	2400      	movs	r4, #0
    3474:	9001      	str	r0, [sp, #4]

	// Parse integers from 3 arguments
	for ( uint8_t color = 0; color < 3; color++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3476:	9801      	ldr	r0, [sp, #4]
    3478:	4669      	mov	r1, sp
    347a:	aa01      	add	r2, sp, #4
    347c:	f003 ff12 	bl	72a4 <CLI_argumentIsolation>

		// Give up if not enough args given
		if ( *arg1Ptr == '\0' )
    3480:	9800      	ldr	r0, [sp, #0]
    3482:	7803      	ldrb	r3, [r0, #0]
    3484:	b18b      	cbz	r3, 34aa <cliFunc_lcdColor+0x3a>
			return;

		// Convert argument to integer
		rgb[ color ] = numToInt( arg1Ptr );
    3486:	f004 faa8 	bl	79da <numToInt>
    348a:	ab02      	add	r3, sp, #8
    348c:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    3490:	3401      	adds	r4, #1

	// Colors
	uint16_t rgb[3]; // Red, Green, Blue

	// Parse integers from 3 arguments
	for ( uint8_t color = 0; color < 3; color++ )
    3492:	2c03      	cmp	r4, #3
    3494:	d1ef      	bne.n	3476 <cliFunc_lcdColor+0x6>
		// Convert argument to integer
		rgb[ color ] = numToInt( arg1Ptr );
	}

	// Set PWM channels
	FTM0_C0V = rgb[0];
    3496:	4b06      	ldr	r3, [pc, #24]	; (34b0 <cliFunc_lcdColor+0x40>)
    3498:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    349c:	601a      	str	r2, [r3, #0]
	FTM0_C1V = rgb[1];
    349e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    34a2:	609a      	str	r2, [r3, #8]
	FTM0_C2V = rgb[2];
    34a4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    34a8:	611a      	str	r2, [r3, #16]
}
    34aa:	b004      	add	sp, #16
    34ac:	bd10      	pop	{r4, pc}
    34ae:	bf00      	nop
    34b0:	40038010 	.word	0x40038010

000034b4 <SPI_write>:
		| SPI_CTAR_PBR(0) | SPI_CTAR_BR(7);
}

// Write buffer to SPI FIFO
void SPI_write( uint8_t *buffer, uint8_t len )
{
    34b4:	b530      	push	{r4, r5, lr}

	for ( uint8_t byte = 0; byte < len; byte++ )
    34b6:	4602      	mov	r2, r0
    34b8:	1a13      	subs	r3, r2, r0
    34ba:	b2db      	uxtb	r3, r3
    34bc:	428b      	cmp	r3, r1
    34be:	d217      	bcs.n	34f0 <L_107_delayMicroseconds+0x24>
	{
		// Wait for SPI TxFIFO to have 4 or fewer entries
		while ( !( SPI0_SR & SPI_SR_TFFF ) )
    34c0:	4b0c      	ldr	r3, [pc, #48]	; (34f4 <L_107_delayMicroseconds+0x28>)
    34c2:	681c      	ldr	r4, [r3, #0]
    34c4:	01a4      	lsls	r4, r4, #6
    34c6:	d404      	bmi.n	34d2 <L_107_delayMicroseconds+0x6>
    34c8:	f44f 73a0 	mov.w	r3, #320	; 0x140

000034cc <L_107_delayMicroseconds>:
    34cc:	3b01      	subs	r3, #1
    34ce:	d1fd      	bne.n	34cc <L_107_delayMicroseconds>
    34d0:	e7f6      	b.n	34c0 <SPI_write+0xc>
			delayMicroseconds(10);

		// Write byte to TxFIFO
		// CS0, CTAR0
		SPI0_PUSHR = ( buffer[ byte ] & 0xff ) | SPI_PUSHR_PCS(1);
    34d2:	f812 4b01 	ldrb.w	r4, [r2], #1
    34d6:	4d08      	ldr	r5, [pc, #32]	; (34f8 <L_107_delayMicroseconds+0x2c>)
    34d8:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
    34dc:	602c      	str	r4, [r5, #0]

		// Indicate transfer has completed
		while ( !( SPI0_SR & SPI_SR_TCF ) );
    34de:	681d      	ldr	r5, [r3, #0]
    34e0:	4c04      	ldr	r4, [pc, #16]	; (34f4 <L_107_delayMicroseconds+0x28>)
    34e2:	2d00      	cmp	r5, #0
    34e4:	dafb      	bge.n	34de <L_107_delayMicroseconds+0x12>
		SPI0_SR |= SPI_SR_TCF;
    34e6:	6823      	ldr	r3, [r4, #0]
    34e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    34ec:	6023      	str	r3, [r4, #0]
    34ee:	e7e3      	b.n	34b8 <SPI_write+0x4>
	}
}
    34f0:	bd30      	pop	{r4, r5, pc}
    34f2:	bf00      	nop
    34f4:	4002c02c 	.word	0x4002c02c
    34f8:	4002c034 	.word	0x4002c034

000034fc <LCD_writeControlReg>:

// Write to a control register
void LCD_writeControlReg( uint8_t byte )
{
    34fc:	b513      	push	{r0, r1, r4, lr}
    34fe:	f88d 0007 	strb.w	r0, [sp, #7]
	// Wait for TxFIFO to be empt
	while ( SPI0_TxFIFO_CNT != 0 );
    3502:	4b0f      	ldr	r3, [pc, #60]	; (3540 <L_195_delayMicroseconds+0x12>)
    3504:	681a      	ldr	r2, [r3, #0]
    3506:	f412 4f70 	tst.w	r2, #61440	; 0xf000
    350a:	461c      	mov	r4, r3
    350c:	d1f9      	bne.n	3502 <LCD_writeControlReg+0x6>

	// Set A0 low to enter control register mode
	GPIOC_PCOR |= (1<<7);
    350e:	4a0d      	ldr	r2, [pc, #52]	; (3544 <L_195_delayMicroseconds+0x16>)
    3510:	6813      	ldr	r3, [r2, #0]
    3512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3516:	6013      	str	r3, [r2, #0]

	// Write byte to SPI FIFO
	SPI_write( &byte, 1 );
    3518:	f10d 0007 	add.w	r0, sp, #7
    351c:	2101      	movs	r1, #1
    351e:	f7ff ffc9 	bl	34b4 <SPI_write>

	// Wait for TxFIFO to be empty
	while ( SPI0_TxFIFO_CNT != 0 );
    3522:	6823      	ldr	r3, [r4, #0]
    3524:	f413 4f70 	tst.w	r3, #61440	; 0xf000
    3528:	d1fb      	bne.n	3522 <LCD_writeControlReg+0x26>
    352a:	f44f 73a0 	mov.w	r3, #320	; 0x140

0000352e <L_195_delayMicroseconds>:
    352e:	3b01      	subs	r3, #1
    3530:	d1fd      	bne.n	352e <L_195_delayMicroseconds>

	// Make sure data has transferred
	delayMicroseconds(10); // XXX Adjust if SPI speed changes

	// Set A0 high to go back to display register mode
	GPIOC_PSOR |= (1<<7);
    3532:	4a05      	ldr	r2, [pc, #20]	; (3548 <L_195_delayMicroseconds+0x1a>)
    3534:	6813      	ldr	r3, [r2, #0]
    3536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    353a:	6013      	str	r3, [r2, #0]
}
    353c:	b002      	add	sp, #8
    353e:	bd10      	pop	{r4, pc}
    3540:	4002c02c 	.word	0x4002c02c
    3544:	400ff088 	.word	0x400ff088
    3548:	400ff084 	.word	0x400ff084

0000354c <cliFunc_lcdCmd>:
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
}

void cliFunc_lcdCmd( char* args )
{
    354c:	b513      	push	{r0, r1, r4, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    354e:	9001      	str	r0, [sp, #4]

	print( NL ); // No \r\n by default after the command is entered
    3550:	4810      	ldr	r0, [pc, #64]	; (3594 <cliFunc_lcdCmd+0x48>)
    3552:	f004 f967 	bl	7824 <_print>

	curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3556:	9801      	ldr	r0, [sp, #4]
    3558:	4669      	mov	r1, sp
    355a:	aa01      	add	r2, sp, #4
    355c:	f003 fea2 	bl	72a4 <CLI_argumentIsolation>

	// No args
	if ( *arg1Ptr == '\0' )
    3560:	9800      	ldr	r0, [sp, #0]
    3562:	7803      	ldrb	r3, [r0, #0]
    3564:	b1a3      	cbz	r3, 3590 <cliFunc_lcdCmd+0x44>
		return;

	// SPI Command
	uint8_t cmd = (uint8_t)numToInt( arg1Ptr );
    3566:	f004 fa38 	bl	79da <numToInt>

	curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    356a:	aa01      	add	r2, sp, #4
	// No args
	if ( *arg1Ptr == '\0' )
		return;

	// SPI Command
	uint8_t cmd = (uint8_t)numToInt( arg1Ptr );
    356c:	b2c4      	uxtb	r4, r0

	curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    356e:	4669      	mov	r1, sp
    3570:	9801      	ldr	r0, [sp, #4]
    3572:	f003 fe97 	bl	72a4 <CLI_argumentIsolation>
	if ( *arg1Ptr == '\0' )
		goto cmd;

	// TODO Deal with a0
cmd:
	info_msg("Sending - ");
    3576:	4808      	ldr	r0, [pc, #32]	; (3598 <cliFunc_lcdCmd+0x4c>)
    3578:	f004 f954 	bl	7824 <_print>
	printHex( cmd );
    357c:	4620      	mov	r0, r4
    357e:	2101      	movs	r1, #1
    3580:	f004 f9d3 	bl	792a <printHex_op>
	print( NL );
    3584:	4803      	ldr	r0, [pc, #12]	; (3594 <cliFunc_lcdCmd+0x48>)
    3586:	f004 f94d 	bl	7824 <_print>
	LCD_writeControlReg( cmd );
    358a:	4620      	mov	r0, r4
    358c:	f7ff ffb6 	bl	34fc <LCD_writeControlReg>
}
    3590:	b002      	add	sp, #8
    3592:	bd10      	pop	{r4, pc}
    3594:	0000b143 	.word	0x0000b143
    3598:	000088ac 	.word	0x000088ac

0000359c <cliFunc_lcdDisp>:
	FTM0_C1V = rgb[1];
	FTM0_C2V = rgb[2];
}

void cliFunc_lcdDisp( char* args )
{
    359c:	b530      	push	{r4, r5, lr}
    359e:	b085      	sub	sp, #20
	char* arg1Ptr;
	char* arg2Ptr = args;

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35a0:	a902      	add	r1, sp, #8
    35a2:	aa03      	add	r2, sp, #12

void cliFunc_lcdDisp( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    35a4:	9003      	str	r0, [sp, #12]

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35a6:	f003 fe7d 	bl	72a4 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    35aa:	9802      	ldr	r0, [sp, #8]
    35ac:	7803      	ldrb	r3, [r0, #0]
    35ae:	b373      	cbz	r3, 360e <cliFunc_lcdDisp+0x72>
		return;
	uint8_t page = numToInt( arg1Ptr );
    35b0:	f004 fa13 	bl	79da <numToInt>

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35b4:	a902      	add	r1, sp, #8
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	uint8_t page = numToInt( arg1Ptr );
    35b6:	4604      	mov	r4, r0

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35b8:	aa03      	add	r2, sp, #12
    35ba:	9803      	ldr	r0, [sp, #12]
    35bc:	f003 fe72 	bl	72a4 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    35c0:	9802      	ldr	r0, [sp, #8]
    35c2:	7803      	ldrb	r3, [r0, #0]
    35c4:	b31b      	cbz	r3, 360e <cliFunc_lcdDisp+0x72>
		return;
	uint8_t address = numToInt( arg1Ptr );
    35c6:	f004 fa08 	bl	79da <numToInt>
    35ca:	b2c5      	uxtb	r5, r0

	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    35cc:	f004 000f 	and.w	r0, r4, #15
    35d0:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
    35d4:	f7ff ff92 	bl	34fc <LCD_writeControlReg>

	// Set starting address
	LCD_writeControlReg( 0x10 | ( ( 0xF0 & address ) >> 4 ) );
    35d8:	0928      	lsrs	r0, r5, #4
    35da:	f040 0010 	orr.w	r0, r0, #16
    35de:	f7ff ff8d 	bl	34fc <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 | ( 0x0F & address ));
    35e2:	f005 000f 	and.w	r0, r5, #15
    35e6:	f7ff ff89 	bl	34fc <LCD_writeControlReg>

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35ea:	9803      	ldr	r0, [sp, #12]
    35ec:	a902      	add	r1, sp, #8
    35ee:	aa03      	add	r2, sp, #12
    35f0:	f003 fe58 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    35f4:	9802      	ldr	r0, [sp, #8]
    35f6:	7803      	ldrb	r3, [r0, #0]
    35f8:	b14b      	cbz	r3, 360e <cliFunc_lcdDisp+0x72>
			break;

		uint8_t value = numToInt( arg1Ptr );
    35fa:	f004 f9ee 	bl	79da <numToInt>
    35fe:	ab04      	add	r3, sp, #16

		// Write buffer to SPI
		SPI_write( &value, 1 );
    3600:	2101      	movs	r1, #1

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
			break;

		uint8_t value = numToInt( arg1Ptr );
    3602:	f803 0d09 	strb.w	r0, [r3, #-9]!

		// Write buffer to SPI
		SPI_write( &value, 1 );
    3606:	4618      	mov	r0, r3
    3608:	f7ff ff54 	bl	34b4 <SPI_write>
	}
    360c:	e7ed      	b.n	35ea <cliFunc_lcdDisp+0x4e>
}
    360e:	b005      	add	sp, #20
    3610:	bd30      	pop	{r4, r5, pc}

00003612 <LCD_writeDisplayReg>:

// Write to display register
// Pages 0-7 normal display
// Page  8   icon buffer
void LCD_writeDisplayReg( uint8_t page, uint8_t *buffer, uint8_t len )
{
    3612:	b538      	push	{r3, r4, r5, lr}
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    3614:	f000 000f 	and.w	r0, r0, #15
    3618:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0

// Write to display register
// Pages 0-7 normal display
// Page  8   icon buffer
void LCD_writeDisplayReg( uint8_t page, uint8_t *buffer, uint8_t len )
{
    361c:	460d      	mov	r5, r1
    361e:	4614      	mov	r4, r2
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    3620:	f7ff ff6c 	bl	34fc <LCD_writeControlReg>

	// Set display start line
	LCD_writeControlReg( 0x40 );
    3624:	2040      	movs	r0, #64	; 0x40
    3626:	f7ff ff69 	bl	34fc <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    362a:	2010      	movs	r0, #16
    362c:	f7ff ff66 	bl	34fc <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    3630:	2000      	movs	r0, #0
    3632:	f7ff ff63 	bl	34fc <LCD_writeControlReg>

	// Write buffer to SPI
	SPI_write( buffer, len );
    3636:	4628      	mov	r0, r5
    3638:	4621      	mov	r1, r4
}
    363a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// Reset Column Address
	LCD_writeControlReg( 0x10 );
	LCD_writeControlReg( 0x00 );

	// Write buffer to SPI
	SPI_write( buffer, len );
    363e:	f7ff bf39 	b.w	34b4 <SPI_write>
    3642:	0000      	movs	r0, r0

00003644 <cliFunc_lcdTest>:
{
	LCD_initialize();
}

void cliFunc_lcdTest( char* args )
{
    3644:	b510      	push	{r4, lr}
    3646:	2400      	movs	r4, #0
	// Write default image
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    3648:	4905      	ldr	r1, [pc, #20]	; (3660 <cliFunc_lcdTest+0x1c>)
    364a:	b2e0      	uxtb	r0, r4
    364c:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    3650:	2280      	movs	r2, #128	; 0x80
    3652:	3401      	adds	r4, #1
    3654:	f7ff ffdd 	bl	3612 <LCD_writeDisplayReg>
}

void cliFunc_lcdTest( char* args )
{
	// Write default image
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3658:	2c04      	cmp	r4, #4
    365a:	d1f5      	bne.n	3648 <cliFunc_lcdTest+0x4>
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
}
    365c:	bd10      	pop	{r4, pc}
    365e:	bf00      	nop
    3660:	00008991 	.word	0x00008991

00003664 <LCD_clear>:
	while ( SPI0_TxFIFO_CNT != 0 );
}

// Clear Display
void LCD_clear()
{
    3664:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3666:	2500      	movs	r5, #0
}

inline void LCD_clearPage( uint8_t page )
{
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    3668:	f065 004f 	orn	r0, r5, #79	; 0x4f
    366c:	b2c0      	uxtb	r0, r0
    366e:	f7ff ff45 	bl	34fc <LCD_writeControlReg>

	// Set display start line
	LCD_writeControlReg( 0x40 );
    3672:	2040      	movs	r0, #64	; 0x40
    3674:	f7ff ff42 	bl	34fc <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    3678:	2010      	movs	r0, #16
    367a:	f7ff ff3f 	bl	34fc <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    367e:	2000      	movs	r0, #0
    3680:	f7ff ff3c 	bl	34fc <LCD_writeControlReg>
    3684:	2481      	movs	r4, #129	; 0x81

	for ( uint8_t page_reg = 0; page_reg < LCD_PAGE_LEN; page_reg++ )
    3686:	3c01      	subs	r4, #1
    3688:	d007      	beq.n	369a <LCD_clear+0x36>
	{
		uint8_t byte = 0;
    368a:	a802      	add	r0, sp, #8
    368c:	2300      	movs	r3, #0
    368e:	f800 3d01 	strb.w	r3, [r0, #-1]!

		// Write buffer to SPI
		SPI_write( &byte, 1 );
    3692:	2101      	movs	r1, #1
    3694:	f7ff ff0e 	bl	34b4 <SPI_write>
    3698:	e7f5      	b.n	3686 <LCD_clear+0x22>
	}

	// Wait for TxFIFO to be empty
	while ( SPI0_TxFIFO_CNT != 0 );
    369a:	4b0b      	ldr	r3, [pc, #44]	; (36c8 <LCD_clear+0x64>)
    369c:	681c      	ldr	r4, [r3, #0]
    369e:	f3c4 3403 	ubfx	r4, r4, #12, #4
    36a2:	2c00      	cmp	r4, #0
    36a4:	d1f9      	bne.n	369a <LCD_clear+0x36>
    36a6:	3501      	adds	r5, #1

// Clear Display
void LCD_clear()
{
	// Setup each page
	for ( uint8_t page = 0; page < LCD_TOTAL_PAGES; page++ )
    36a8:	2d09      	cmp	r5, #9
    36aa:	d1dd      	bne.n	3668 <LCD_clear+0x4>
		LCD_clearPage( page );
	}

	// Reset Page, Start Line, and Column Address
	// Page
	LCD_writeControlReg( 0xB0 );
    36ac:	20b0      	movs	r0, #176	; 0xb0
    36ae:	f7ff ff25 	bl	34fc <LCD_writeControlReg>

	// Start Line
	LCD_writeControlReg( 0x40 );
    36b2:	2040      	movs	r0, #64	; 0x40
    36b4:	f7ff ff22 	bl	34fc <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    36b8:	2010      	movs	r0, #16
    36ba:	f7ff ff1f 	bl	34fc <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    36be:	4620      	mov	r0, r4
    36c0:	f7ff ff1c 	bl	34fc <LCD_writeControlReg>
}
    36c4:	b003      	add	sp, #12
    36c6:	bd30      	pop	{r4, r5, pc}
    36c8:	4002c02c 	.word	0x4002c02c

000036cc <LCD_initialize>:

// Intialize display
void LCD_initialize()
{
    36cc:	b508      	push	{r3, lr}
	// ADC Select (Normal)
	LCD_writeControlReg( 0xA0 );
    36ce:	20a0      	movs	r0, #160	; 0xa0
    36d0:	f7ff ff14 	bl	34fc <LCD_writeControlReg>

	// LCD Off
	LCD_writeControlReg( 0xAE );
    36d4:	20ae      	movs	r0, #174	; 0xae
    36d6:	f7ff ff11 	bl	34fc <LCD_writeControlReg>

	// COM Scan Output Direction
	LCD_writeControlReg( 0xC0 );
    36da:	20c0      	movs	r0, #192	; 0xc0
    36dc:	f7ff ff0e 	bl	34fc <LCD_writeControlReg>

	// LCD Bias (1/6 bias)
	LCD_writeControlReg( 0xA2 );
    36e0:	20a2      	movs	r0, #162	; 0xa2
    36e2:	f7ff ff0b 	bl	34fc <LCD_writeControlReg>

	// Power Supply Operating Mode (Internal Only)
	LCD_writeControlReg( 0x2F );
    36e6:	202f      	movs	r0, #47	; 0x2f
    36e8:	f7ff ff08 	bl	34fc <LCD_writeControlReg>

	// Internal Rb/Ra Ratio
	LCD_writeControlReg( 0x26 );
    36ec:	2026      	movs	r0, #38	; 0x26
    36ee:	f7ff ff05 	bl	34fc <LCD_writeControlReg>

	// Reset
	LCD_writeControlReg( 0xE2 );
    36f2:	20e2      	movs	r0, #226	; 0xe2
    36f4:	f7ff ff02 	bl	34fc <LCD_writeControlReg>

	// Electric volume mode set, and value
	LCD_writeControlReg( 0x81 );
    36f8:	2081      	movs	r0, #129	; 0x81
    36fa:	f7ff feff 	bl	34fc <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    36fe:	2000      	movs	r0, #0
    3700:	f7ff fefc 	bl	34fc <LCD_writeControlReg>

	// LCD On
	LCD_writeControlReg( 0xAF );
    3704:	20af      	movs	r0, #175	; 0xaf
    3706:	f7ff fef9 	bl	34fc <LCD_writeControlReg>

	// Clear Display RAM
	LCD_clear();
}
    370a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// LCD On
	LCD_writeControlReg( 0xAF );

	// Clear Display RAM
	LCD_clear();
    370e:	f7ff bfa9 	b.w	3664 <LCD_clear>

00003712 <cliFunc_lcdInit>:

// ----- CLI Command Functions -----

void cliFunc_lcdInit( char* args )
{
	LCD_initialize();
    3712:	f7ff bfdb 	b.w	36cc <LCD_initialize>
    3716:	0000      	movs	r0, r0

00003718 <LCD_setup>:
	LCD_clear();
}

// Setup
inline void LCD_setup()
{
    3718:	b538      	push	{r3, r4, r5, lr}
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    371a:	4c35      	ldr	r4, [pc, #212]	; (37f0 <LCD_setup+0xd8>)

// Setup
inline void LCD_setup()
{
	// Register Scan CLI dictionary
	CLI_registerDictionary( lcdCLIDict, lcdCLIDictName );
    371c:	4835      	ldr	r0, [pc, #212]	; (37f4 <LCD_setup+0xdc>)
    371e:	4936      	ldr	r1, [pc, #216]	; (37f8 <LCD_setup+0xe0>)
    3720:	f003 fe34 	bl	738c <CLI_registerDictionary>
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    3724:	6823      	ldr	r3, [r4, #0]

	// Setup MOSI (SOUT) and SCLK (SCK)
	PORTC_PCR6 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    3726:	4a35      	ldr	r2, [pc, #212]	; (37fc <LCD_setup+0xe4>)
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    3728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    372c:	6023      	str	r3, [r4, #0]

	// Setup MOSI (SOUT) and SCLK (SCK)
	PORTC_PCR6 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    372e:	f44f 7310 	mov.w	r3, #576	; 0x240
    3732:	6013      	str	r3, [r2, #0]
	PORTC_PCR5 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    3734:	f842 3c04 	str.w	r3, [r2, #-4]

	// Setup SS (PCS)
	PORTC_PCR4 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    3738:	f842 3c08 	str.w	r3, [r2, #-8]

	// Master Mode, CS0
	SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(1);
    373c:	4b30      	ldr	r3, [pc, #192]	; (3800 <LCD_setup+0xe8>)
    373e:	4a31      	ldr	r2, [pc, #196]	; (3804 <LCD_setup+0xec>)
    3740:	601a      	str	r2, [r3, #0]

	// DSPI Clock and Transfer Attributes
	// Frame Size: 8 bits
	// MSB First
	// CLK Low by default
	SPI0_CTAR0 = SPI_CTAR_FMSZ(7)
    3742:	4a31      	ldr	r2, [pc, #196]	; (3808 <LCD_setup+0xf0>)
    3744:	60da      	str	r2, [r3, #12]
	// Initialize SPI
	SPI_setup();

	// Setup Register Control Signal (A0)
	// Start in display register mode (1)
	GPIOC_PDDR |= (1<<7);
    3746:	4a31      	ldr	r2, [pc, #196]	; (380c <LCD_setup+0xf4>)
    3748:	6813      	ldr	r3, [r2, #0]
    374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    374e:	6013      	str	r3, [r2, #0]
	PORTC_PCR7 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3750:	4b2f      	ldr	r3, [pc, #188]	; (3810 <LCD_setup+0xf8>)
    3752:	f44f 70a2 	mov.w	r0, #324	; 0x144
    3756:	6018      	str	r0, [r3, #0]
	GPIOC_PSOR |= (1<<7);
    3758:	f503 2334 	add.w	r3, r3, #737280	; 0xb4000
    375c:	3368      	adds	r3, #104	; 0x68
    375e:	6819      	ldr	r1, [r3, #0]
    3760:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    3764:	6019      	str	r1, [r3, #0]

	// Setup LCD Reset pin (RST)
	// 0 - Reset, 1 - Normal Operation
	// Start in normal mode (1)
	GPIOC_PDDR |= (1<<8);
    3766:	6811      	ldr	r1, [r2, #0]
    3768:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    376c:	6011      	str	r1, [r2, #0]
	PORTC_PCR8 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    376e:	f5a2 2234 	sub.w	r2, r2, #737280	; 0xb4000
    3772:	3a74      	subs	r2, #116	; 0x74
    3774:	6010      	str	r0, [r2, #0]
	GPIOC_PSOR |= (1<<8);
    3776:	681a      	ldr	r2, [r3, #0]
    3778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    377c:	601a      	str	r2, [r3, #0]

	// Run LCD intialization sequence
	LCD_initialize();
    377e:	f7ff ffa5 	bl	36cc <LCD_initialize>
    3782:	2500      	movs	r5, #0

	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    3784:	4923      	ldr	r1, [pc, #140]	; (3814 <LCD_setup+0xfc>)
    3786:	b2e8      	uxtb	r0, r5
    3788:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
    378c:	2280      	movs	r2, #128	; 0x80
    378e:	3501      	adds	r5, #1
    3790:	f7ff ff3f 	bl	3612 <LCD_writeDisplayReg>

	// Run LCD intialization sequence
	LCD_initialize();

	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3794:	2d04      	cmp	r5, #4
    3796:	d1f5      	bne.n	3784 <LCD_setup+0x6c>
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );

	// Setup Backlight
	SIM_SCGC6 |= SIM_SCGC6_FTM0;
    3798:	6823      	ldr	r3, [r4, #0]
	// System clock, /w prescalar setting
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS( STLcdBacklightPrescalar_define );

	// Red
	FTM0_C0V = STLcdBacklightRed_define;
	PORTC_PCR1 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    379a:	491f      	ldr	r1, [pc, #124]	; (3818 <LCD_setup+0x100>)
	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );

	// Setup Backlight
	SIM_SCGC6 |= SIM_SCGC6_FTM0;
    379c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    37a0:	6023      	str	r3, [r4, #0]
	FTM0_CNT = 0; // Reset counter
    37a2:	4b1e      	ldr	r3, [pc, #120]	; (381c <LCD_setup+0x104>)
    37a4:	2200      	movs	r2, #0
    37a6:	601a      	str	r2, [r3, #0]

	// PWM Period
	// 16-bit maximum
	FTM0_MOD = 0xFFFF;
    37a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    37ac:	605a      	str	r2, [r3, #4]

	// Set FTM to PWM output - Edge Aligned, Low-true pulses
	FTM0_C0SC = 0x24; // MSnB:MSnA = 10, ELSnB:ELSnA = 01
    37ae:	4a1c      	ldr	r2, [pc, #112]	; (3820 <LCD_setup+0x108>)
    37b0:	2324      	movs	r3, #36	; 0x24
    37b2:	6013      	str	r3, [r2, #0]
	FTM0_C1SC = 0x24;
    37b4:	6093      	str	r3, [r2, #8]
	FTM0_C2SC = 0x24;
    37b6:	6113      	str	r3, [r2, #16]
	// 7 - 562 500  Hz ->   4 Hz
	// Using a higher pre-scalar without flicker is possible but FTM0_MOD will need to be reduced
	// Which will reduce the brightness range

	// System clock, /w prescalar setting
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS( STLcdBacklightPrescalar_define );
    37b8:	4b1a      	ldr	r3, [pc, #104]	; (3824 <LCD_setup+0x10c>)
    37ba:	2208      	movs	r2, #8
    37bc:	601a      	str	r2, [r3, #0]

	// Red
	FTM0_C0V = STLcdBacklightRed_define;
    37be:	f640 72ff 	movw	r2, #4095	; 0xfff
    37c2:	611a      	str	r2, [r3, #16]
	PORTC_PCR1 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    37c4:	f240 4344 	movw	r3, #1092	; 0x444
    37c8:	600b      	str	r3, [r1, #0]

	// Green
	FTM0_C1V = STLcdBacklightGreen_define;
    37ca:	f5a1 3197 	sub.w	r1, r1, #77312	; 0x12e00
    37ce:	f5a1 71f6 	sub.w	r1, r1, #492	; 0x1ec
    37d2:	600a      	str	r2, [r1, #0]
	PORTC_PCR2 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    37d4:	f501 3197 	add.w	r1, r1, #77312	; 0x12e00
    37d8:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
    37dc:	600b      	str	r3, [r1, #0]

	// Blue
	FTM0_C2V = STLcdBacklightBlue_define;
    37de:	f5a1 3197 	sub.w	r1, r1, #77312	; 0x12e00
    37e2:	f5a1 71f4 	sub.w	r1, r1, #488	; 0x1e8
    37e6:	600a      	str	r2, [r1, #0]
	PORTC_PCR3 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    37e8:	4a0f      	ldr	r2, [pc, #60]	; (3828 <LCD_setup+0x110>)
    37ea:	6013      	str	r3, [r2, #0]
    37ec:	bd38      	pop	{r3, r4, r5, pc}
    37ee:	bf00      	nop
    37f0:	4004803c 	.word	0x4004803c
    37f4:	00008864 	.word	0x00008864
    37f8:	0000884a 	.word	0x0000884a
    37fc:	4004b018 	.word	0x4004b018
    3800:	4002c000 	.word	0x4002c000
    3804:	80010000 	.word	0x80010000
    3808:	38007777 	.word	0x38007777
    380c:	400ff094 	.word	0x400ff094
    3810:	4004b01c 	.word	0x4004b01c
    3814:	00008991 	.word	0x00008991
    3818:	4004b004 	.word	0x4004b004
    381c:	40038004 	.word	0x40038004
    3820:	4003800c 	.word	0x4003800c
    3824:	40038000 	.word	0x40038000
    3828:	4004b00c 	.word	0x4004b00c

0000382c <LCD_scan>:

// LCD State processing loop
inline uint8_t LCD_scan()
{
	return 0;
}
    382c:	2000      	movs	r0, #0
    382e:	4770      	bx	lr

00003830 <LCD_layerStackExact_capability>:
typedef struct LCD_layerStackExact_args {
	uint8_t numArgs;
	uint16_t layers[4];
} LCD_layerStackExact_args;
void LCD_layerStackExact_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    3830:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3832:	29ff      	cmp	r1, #255	; 0xff
typedef struct LCD_layerStackExact_args {
	uint8_t numArgs;
	uint16_t layers[4];
} LCD_layerStackExact_args;
void LCD_layerStackExact_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    3834:	f2ad 5d44 	subw	sp, sp, #1348	; 0x544
    3838:	4616      	mov	r6, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    383a:	d105      	bne.n	3848 <LCD_layerStackExact_capability+0x18>
    383c:	28ff      	cmp	r0, #255	; 0xff
    383e:	d103      	bne.n	3848 <LCD_layerStackExact_capability+0x18>
	{
		print("LCD_layerStackExact_capability(num,layer1,layer2,layer3,layer4)");
    3840:	483a      	ldr	r0, [pc, #232]	; (392c <LCD_layerStackExact_capability+0xfc>)
    3842:	f003 ffef 	bl	7824 <_print>
    3846:	e06d      	b.n	3924 <LCD_layerStackExact_capability+0xf4>

	// Read arguments
	LCD_layerStackExact_args *stack_args = (LCD_layerStackExact_args*)args;

	// Number data for LCD
	const uint8_t numbers[10][128] = {
    3848:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    384c:	a810      	add	r0, sp, #64	; 0x40
    384e:	4938      	ldr	r1, [pc, #224]	; (3930 <LCD_layerStackExact_capability+0x100>)
    3850:	f7fe fe92 	bl	2578 <memcpy>
		{ STLcdNumber8_define },
		{ STLcdNumber9_define },
	};

	// Color data for numbers
	const uint16_t colors[10][3] = {
    3854:	4b37      	ldr	r3, [pc, #220]	; (3934 <LCD_layerStackExact_capability+0x104>)
    3856:	ad01      	add	r5, sp, #4
    3858:	462a      	mov	r2, r5
    385a:	f103 0738 	add.w	r7, r3, #56	; 0x38
    385e:	6818      	ldr	r0, [r3, #0]
    3860:	6859      	ldr	r1, [r3, #4]
    3862:	4614      	mov	r4, r2
    3864:	c403      	stmia	r4!, {r0, r1}
    3866:	3308      	adds	r3, #8
    3868:	42bb      	cmp	r3, r7
    386a:	4622      	mov	r2, r4
    386c:	d1f7      	bne.n	385e <LCD_layerStackExact_capability+0x2e>
    386e:	6818      	ldr	r0, [r3, #0]
    3870:	6020      	str	r0, [r4, #0]
		{ STLcdNumber8Color_define },
		{ STLcdNumber9Color_define },
	};

	// Only display if there are layers active
	if ( stack_args->numArgs > 0 )
    3872:	7834      	ldrb	r4, [r6, #0]
    3874:	4830      	ldr	r0, [pc, #192]	; (3938 <LCD_layerStackExact_capability+0x108>)
    3876:	4931      	ldr	r1, [pc, #196]	; (393c <LCD_layerStackExact_capability+0x10c>)
    3878:	4a31      	ldr	r2, [pc, #196]	; (3940 <LCD_layerStackExact_capability+0x110>)
    387a:	2c00      	cmp	r4, #0
    387c:	d043      	beq.n	3906 <LCD_layerStackExact_capability+0xd6>
	{
		// Set the color according to the "top-of-stack" layer
		uint16_t layerIndex = stack_args->layers[0];
		FTM0_C0V = colors[ layerIndex ][0];
    387e:	8874      	ldrh	r4, [r6, #2]
    3880:	2306      	movs	r3, #6
    3882:	4363      	muls	r3, r4
    3884:	18ec      	adds	r4, r5, r3
    3886:	5aeb      	ldrh	r3, [r5, r3]
    3888:	6003      	str	r3, [r0, #0]
		FTM0_C1V = colors[ layerIndex ][1];
    388a:	8863      	ldrh	r3, [r4, #2]
    388c:	600b      	str	r3, [r1, #0]
		FTM0_C2V = colors[ layerIndex ][2];
    388e:	88a3      	ldrh	r3, [r4, #4]
    3890:	6013      	str	r3, [r2, #0]
    3892:	2500      	movs	r5, #0
		// XXX Many of the values here are hard-coded
		//     Eventually a proper font rendering engine should take care of things like this... -HaaTa
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		{
			// Set the register page
			LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    3894:	f065 004f 	orn	r0, r5, #79	; 0x4f
    3898:	b2c0      	uxtb	r0, r0
    389a:	f7ff fe2f 	bl	34fc <LCD_writeControlReg>

			// Set starting address
			LCD_writeControlReg( 0x10 );
    389e:	2010      	movs	r0, #16
    38a0:	f7ff fe2c 	bl	34fc <LCD_writeControlReg>
			LCD_writeControlReg( 0x00 );
    38a4:	2000      	movs	r0, #0
    38a6:	f7ff fe29 	bl	34fc <LCD_writeControlReg>
    38aa:	016f      	lsls	r7, r5, #5

			// Write data
			for ( uint16_t layer = 0; layer < stack_args->numArgs; layer++ )
    38ac:	2400      	movs	r4, #0
    38ae:	7832      	ldrb	r2, [r6, #0]
    38b0:	b2a3      	uxth	r3, r4
    38b2:	429a      	cmp	r2, r3
    38b4:	d90e      	bls.n	38d4 <LCD_layerStackExact_capability+0xa4>
			{
				layerIndex = stack_args->layers[ layer ];
    38b6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
				{
					layerIndex = 0;
				}

				// Write page of number to display
				SPI_write( (uint8_t*)&numbers[ layerIndex ][ page * 32 ], 32 );
    38ba:	2120      	movs	r1, #32
			LCD_writeControlReg( 0x00 );

			// Write data
			for ( uint16_t layer = 0; layer < stack_args->numArgs; layer++ )
			{
				layerIndex = stack_args->layers[ layer ];
    38bc:	8858      	ldrh	r0, [r3, #2]

				// Default to 0, if over 9
				if ( layerIndex > 9 )
				{
					layerIndex = 0;
    38be:	280a      	cmp	r0, #10
    38c0:	bf28      	it	cs
    38c2:	2000      	movcs	r0, #0
				}

				// Write page of number to display
				SPI_write( (uint8_t*)&numbers[ layerIndex ][ page * 32 ], 32 );
    38c4:	ab10      	add	r3, sp, #64	; 0x40
    38c6:	eb07 10c0 	add.w	r0, r7, r0, lsl #7
    38ca:	4418      	add	r0, r3
    38cc:	f7ff fdf2 	bl	34b4 <SPI_write>
    38d0:	3401      	adds	r4, #1
    38d2:	e7ec      	b.n	38ae <LCD_layerStackExact_capability+0x7e>
			}

			// Blank out rest of display
			uint8_t data = 0;
    38d4:	2400      	movs	r4, #0
    38d6:	f88d 4003 	strb.w	r4, [sp, #3]
			for ( uint8_t c = 0; c < 4 - stack_args->numArgs; c++ )
    38da:	7833      	ldrb	r3, [r6, #0]
    38dc:	b2e2      	uxtb	r2, r4
    38de:	f1c3 0304 	rsb	r3, r3, #4
    38e2:	429a      	cmp	r2, r3
    38e4:	da0b      	bge.n	38fe <LCD_layerStackExact_capability+0xce>
    38e6:	2720      	movs	r7, #32
			{
				for ( uint8_t byte = 0; byte < 32; byte++ )
				{
					SPI_write( &data, 1 );
    38e8:	f10d 0003 	add.w	r0, sp, #3
    38ec:	2101      	movs	r1, #1
    38ee:	3f01      	subs	r7, #1
    38f0:	f7ff fde0 	bl	34b4 <SPI_write>

			// Blank out rest of display
			uint8_t data = 0;
			for ( uint8_t c = 0; c < 4 - stack_args->numArgs; c++ )
			{
				for ( uint8_t byte = 0; byte < 32; byte++ )
    38f4:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    38f8:	d1f6      	bne.n	38e8 <LCD_layerStackExact_capability+0xb8>
    38fa:	3401      	adds	r4, #1
    38fc:	e7ed      	b.n	38da <LCD_layerStackExact_capability+0xaa>
    38fe:	3501      	adds	r5, #1
		FTM0_C2V = colors[ layerIndex ][2];

		// Iterate through each of the pages
		// XXX Many of the values here are hard-coded
		//     Eventually a proper font rendering engine should take care of things like this... -HaaTa
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3900:	2d04      	cmp	r5, #4
    3902:	d1c7      	bne.n	3894 <LCD_layerStackExact_capability+0x64>
    3904:	e00e      	b.n	3924 <LCD_layerStackExact_capability+0xf4>
		}
	}
	else
	{
		// Set default backlight
		FTM0_C0V = STLcdBacklightRed_define;
    3906:	f640 73ff 	movw	r3, #4095	; 0xfff
    390a:	6003      	str	r3, [r0, #0]
		FTM0_C1V = STLcdBacklightGreen_define;
    390c:	600b      	str	r3, [r1, #0]
		FTM0_C2V = STLcdBacklightBlue_define;
    390e:	6013      	str	r3, [r2, #0]

		// Write default image
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
			LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    3910:	490c      	ldr	r1, [pc, #48]	; (3944 <LCD_layerStackExact_capability+0x114>)
    3912:	b2e0      	uxtb	r0, r4
    3914:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    3918:	2280      	movs	r2, #128	; 0x80
    391a:	3401      	adds	r4, #1
    391c:	f7ff fe79 	bl	3612 <LCD_writeDisplayReg>
		FTM0_C0V = STLcdBacklightRed_define;
		FTM0_C1V = STLcdBacklightGreen_define;
		FTM0_C2V = STLcdBacklightBlue_define;

		// Write default image
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3920:	2c04      	cmp	r4, #4
    3922:	d1f5      	bne.n	3910 <LCD_layerStackExact_capability+0xe0>
			LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
	}
}
    3924:	f20d 5d44 	addw	sp, sp, #1348	; 0x544
    3928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    392a:	bf00      	nop
    392c:	000088c9 	.word	0x000088c9
    3930:	000082f4 	.word	0x000082f4
    3934:	000087f4 	.word	0x000087f4
    3938:	40038010 	.word	0x40038010
    393c:	40038018 	.word	0x40038018
    3940:	40038020 	.word	0x40038020
    3944:	00008991 	.word	0x00008991

00003948 <LCD_layerStack_capability>:
// Determines the current layer stack, and sets the LCD output accordingly
// Will only work on a master node when using the interconnect (use LCD_layerStackExact_capability instead)
uint16_t LCD_layerStack_prevSize = 0;
uint16_t LCD_layerStack_prevTop  = 0;
void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    3948:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    394a:	29ff      	cmp	r1, #255	; 0xff
// Determines the current layer stack, and sets the LCD output accordingly
// Will only work on a master node when using the interconnect (use LCD_layerStackExact_capability instead)
uint16_t LCD_layerStack_prevSize = 0;
uint16_t LCD_layerStack_prevTop  = 0;
void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    394c:	b087      	sub	sp, #28
    394e:	4605      	mov	r5, r0
    3950:	460c      	mov	r4, r1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3952:	d105      	bne.n	3960 <LCD_layerStack_capability+0x18>
    3954:	28ff      	cmp	r0, #255	; 0xff
    3956:	d103      	bne.n	3960 <LCD_layerStack_capability+0x18>
	{
		print("LCD_layerStack_capability()");
    3958:	4822      	ldr	r0, [pc, #136]	; (39e4 <LCD_layerStack_capability+0x9c>)
    395a:	f003 ff63 	bl	7824 <_print>
		return;
    395e:	e03e      	b.n	39de <LCD_layerStack_capability+0x96>
	// Parse the layer stack, top to bottom
	extern uint16_t macroLayerIndexStack[];
	extern uint16_t macroLayerIndexStackSize;

	// Ignore if the stack size hasn't changed and the top of the stack is the same
	if ( macroLayerIndexStackSize == LCD_layerStack_prevSize
    3960:	4921      	ldr	r1, [pc, #132]	; (39e8 <LCD_layerStack_capability+0xa0>)
    3962:	4b22      	ldr	r3, [pc, #136]	; (39ec <LCD_layerStack_capability+0xa4>)
    3964:	880a      	ldrh	r2, [r1, #0]
    3966:	8818      	ldrh	r0, [r3, #0]
    3968:	4e21      	ldr	r6, [pc, #132]	; (39f0 <LCD_layerStack_capability+0xa8>)
    396a:	4290      	cmp	r0, r2
    396c:	460f      	mov	r7, r1
    396e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
    3972:	4920      	ldr	r1, [pc, #128]	; (39f4 <LCD_layerStack_capability+0xac>)
    3974:	d105      	bne.n	3982 <LCD_layerStack_capability+0x3a>
		&& macroLayerIndexStack[macroLayerIndexStackSize - 1] == LCD_layerStack_prevTop )
    3976:	f836 c010 	ldrh.w	ip, [r6, r0, lsl #1]
    397a:	f8b1 e000 	ldrh.w	lr, [r1]
    397e:	45f4      	cmp	ip, lr
    3980:	d02d      	beq.n	39de <LCD_layerStack_capability+0x96>
	{
		return;
	}
	LCD_layerStack_prevSize = macroLayerIndexStackSize;
    3982:	801a      	strh	r2, [r3, #0]
	LCD_layerStack_prevTop  = macroLayerIndexStack[macroLayerIndexStackSize - 1];
    3984:	f836 3010 	ldrh.w	r3, [r6, r0, lsl #1]
    3988:	800b      	strh	r3, [r1, #0]

	LCD_layerStackExact_args stack_args;
	memset( stack_args.layers, 0, sizeof( stack_args.layers ) );
    398a:	2208      	movs	r2, #8
    398c:	f10d 000e 	add.w	r0, sp, #14
    3990:	2100      	movs	r1, #0
    3992:	f7fe fde9 	bl	2568 <memset>

	// Use the LCD_layerStackExact_capability to set the LCD using the determined stack
	// Construct argument set for capability
	stack_args.numArgs = macroLayerIndexStackSize;
    3996:	883a      	ldrh	r2, [r7, #0]
    3998:	f88d 200c 	strb.w	r2, [sp, #12]
	for ( uint16_t layer = 1; layer <= macroLayerIndexStackSize; layer++ )
    399c:	2301      	movs	r3, #1
    399e:	4293      	cmp	r3, r2
    39a0:	d80a      	bhi.n	39b8 <LCD_layerStack_capability+0x70>
	{
		stack_args.layers[ layer - 1 ] = macroLayerIndexStack[ macroLayerIndexStackSize - layer ];
    39a2:	1ad0      	subs	r0, r2, r3
    39a4:	a906      	add	r1, sp, #24
    39a6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    39aa:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
    39ae:	f821 0c0c 	strh.w	r0, [r1, #-12]
	memset( stack_args.layers, 0, sizeof( stack_args.layers ) );

	// Use the LCD_layerStackExact_capability to set the LCD using the determined stack
	// Construct argument set for capability
	stack_args.numArgs = macroLayerIndexStackSize;
	for ( uint16_t layer = 1; layer <= macroLayerIndexStackSize; layer++ )
    39b2:	3301      	adds	r3, #1
    39b4:	b29b      	uxth	r3, r3
    39b6:	e7f2      	b.n	399e <LCD_layerStack_capability+0x56>
		stack_args.layers[ layer - 1 ] = macroLayerIndexStack[ macroLayerIndexStackSize - layer ];
	}

	// Only deal with the interconnect if it has been compiled in
#if defined(ConnectEnabled_define)
	if ( Connect_master )
    39b8:	4b0f      	ldr	r3, [pc, #60]	; (39f8 <LCD_layerStack_capability+0xb0>)
    39ba:	781b      	ldrb	r3, [r3, #0]
    39bc:	ae03      	add	r6, sp, #12
    39be:	b14b      	cbz	r3, 39d4 <LCD_layerStack_capability+0x8c>
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    39c0:	4b0e      	ldr	r3, [pc, #56]	; (39fc <LCD_layerStack_capability+0xb4>)
    39c2:	791b      	ldrb	r3, [r3, #4]
    39c4:	20ff      	movs	r0, #255	; 0xff
    39c6:	e88d 0048 	stmia.w	sp, {r3, r6}
    39ca:	2100      	movs	r1, #0
    39cc:	462a      	mov	r2, r5
    39ce:	4623      	mov	r3, r4
    39d0:	f000 fcf0 	bl	43b4 <Connect_send_RemoteCapability>
			(uint8_t*)&stack_args
		);
	}
#endif
	// Call LCD_layerStackExact directly
	LCD_layerStackExact_capability( state, stateType, (uint8_t*)&stack_args );
    39d4:	4628      	mov	r0, r5
    39d6:	4621      	mov	r1, r4
    39d8:	4632      	mov	r2, r6
    39da:	f7ff ff29 	bl	3830 <LCD_layerStackExact_capability>
}
    39de:	b007      	add	sp, #28
    39e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39e2:	bf00      	nop
    39e4:	00008909 	.word	0x00008909
    39e8:	1fff90fc 	.word	0x1fff90fc
    39ec:	1fff8fac 	.word	0x1fff8fac
    39f0:	1fff90fe 	.word	0x1fff90fe
    39f4:	1fff8fae 	.word	0x1fff8fae
    39f8:	1fff8fce 	.word	0x1fff8fce
    39fc:	00009454 	.word	0x00009454

00003a00 <Connect_receive_Animation>:
	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_Animation( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3a00:	b508      	push	{r3, lr}
	dbug_print("Animation");
    3a02:	4802      	ldr	r0, [pc, #8]	; (3a0c <Connect_receive_Animation+0xc>)
    3a04:	f003 ff0e 	bl	7824 <_print>
	return 1;
}
    3a08:	2001      	movs	r0, #1
    3a0a:	bd08      	pop	{r3, pc}
    3a0c:	00008d07 	.word	0x00008d07

00003a10 <cliFunc_connectDbg>:
		break;
	}
}

void cliFunc_connectDbg( char* args )
{
    3a10:	b508      	push	{r3, lr}
	print( NL );
    3a12:	4806      	ldr	r0, [pc, #24]	; (3a2c <cliFunc_connectDbg+0x1c>)
    3a14:	f003 ff06 	bl	7824 <_print>
	info_msg("Connect Debug Mode Toggle");
    3a18:	4805      	ldr	r0, [pc, #20]	; (3a30 <cliFunc_connectDbg+0x20>)
    3a1a:	f003 ff03 	bl	7824 <_print>
	Connect_debug = !Connect_debug;
    3a1e:	4a05      	ldr	r2, [pc, #20]	; (3a34 <cliFunc_connectDbg+0x24>)
    3a20:	7813      	ldrb	r3, [r2, #0]
    3a22:	fab3 f383 	clz	r3, r3
    3a26:	095b      	lsrs	r3, r3, #5
    3a28:	7013      	strb	r3, [r2, #0]
    3a2a:	bd08      	pop	{r3, pc}
    3a2c:	0000b143 	.word	0x0000b143
    3a30:	00008d26 	.word	0x00008d26
    3a34:	1fff8fc5 	.word	0x1fff8fc5

00003a38 <Connect_receive_CableCheck>:
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    3a3a:	880b      	ldrh	r3, [r1, #0]
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3a3c:	4616      	mov	r6, r2
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    3a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3a42:	4293      	cmp	r3, r2
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3a44:	4605      	mov	r5, r0
    3a46:	460c      	mov	r4, r1
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    3a48:	d117      	bne.n	3a7a <Connect_receive_CableCheck+0x42>
	{
		*pending_bytes = byte;
    3a4a:	b287      	uxth	r7, r0

		if ( Connect_debug )
    3a4c:	4b30      	ldr	r3, [pc, #192]	; (3b10 <Connect_receive_CableCheck+0xd8>)
uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
	{
		*pending_bytes = byte;
    3a4e:	800f      	strh	r7, [r1, #0]

		if ( Connect_debug )
    3a50:	781b      	ldrb	r3, [r3, #0]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d03b      	beq.n	3ace <Connect_receive_CableCheck+0x96>
		{
			dbug_msg("PENDING SET -> ");
    3a56:	482f      	ldr	r0, [pc, #188]	; (3b14 <Connect_receive_CableCheck+0xdc>)
    3a58:	f003 fee4 	bl	7824 <_print>
			printHex( byte );
    3a5c:	4638      	mov	r0, r7
    3a5e:	2101      	movs	r1, #1
    3a60:	f003 ff63 	bl	792a <printHex_op>
			print(" ");
    3a64:	482c      	ldr	r0, [pc, #176]	; (3b18 <Connect_receive_CableCheck+0xe0>)
    3a66:	f003 fedd 	bl	7824 <_print>
			printHex( *pending_bytes );
    3a6a:	8820      	ldrh	r0, [r4, #0]
    3a6c:	2101      	movs	r1, #1
    3a6e:	f003 ff5c 	bl	792a <printHex_op>
			print( NL );
    3a72:	482a      	ldr	r0, [pc, #168]	; (3b1c <Connect_receive_CableCheck+0xe4>)
    3a74:	f003 fed6 	bl	7824 <_print>
    3a78:	e029      	b.n	3ace <Connect_receive_CableCheck+0x96>
		}
	}
	// Verify byte
	else
	{
		(*pending_bytes)--;
    3a7a:	3b01      	subs	r3, #1

		// The argument bytes are always 0xD2 (11010010)
		if ( byte != 0xD2 )
    3a7c:	28d2      	cmp	r0, #210	; 0xd2
		}
	}
	// Verify byte
	else
	{
		(*pending_bytes)--;
    3a7e:	800b      	strh	r3, [r1, #0]

		// The argument bytes are always 0xD2 (11010010)
		if ( byte != 0xD2 )
    3a80:	d01e      	beq.n	3ac0 <Connect_receive_CableCheck+0x88>
		{
			warn_print("Cable Fault!");
    3a82:	4827      	ldr	r0, [pc, #156]	; (3b20 <Connect_receive_CableCheck+0xe8>)
    3a84:	f003 fece 	bl	7824 <_print>

			// Check which side of the chain
			if ( uart_num == UART_Slave )
    3a88:	b93e      	cbnz	r6, 3a9a <Connect_receive_CableCheck+0x62>
			{
				Connect_cableFaultsSlave++;
    3a8a:	4a26      	ldr	r2, [pc, #152]	; (3b24 <Connect_receive_CableCheck+0xec>)
				Connect_cableOkSlave = 0;
				print(" Slave ");
    3a8c:	4826      	ldr	r0, [pc, #152]	; (3b28 <Connect_receive_CableCheck+0xf0>)
			warn_print("Cable Fault!");

			// Check which side of the chain
			if ( uart_num == UART_Slave )
			{
				Connect_cableFaultsSlave++;
    3a8e:	6813      	ldr	r3, [r2, #0]
    3a90:	3301      	adds	r3, #1
    3a92:	6013      	str	r3, [r2, #0]
				Connect_cableOkSlave = 0;
    3a94:	4b25      	ldr	r3, [pc, #148]	; (3b2c <Connect_receive_CableCheck+0xf4>)
    3a96:	701e      	strb	r6, [r3, #0]
    3a98:	e007      	b.n	3aaa <Connect_receive_CableCheck+0x72>
				print(" Slave ");
			}
			else
			{
				Connect_cableFaultsMaster++;
    3a9a:	4a25      	ldr	r2, [pc, #148]	; (3b30 <Connect_receive_CableCheck+0xf8>)
				Connect_cableOkMaster = 0;
				print(" Master ");
    3a9c:	4825      	ldr	r0, [pc, #148]	; (3b34 <Connect_receive_CableCheck+0xfc>)
				Connect_cableOkSlave = 0;
				print(" Slave ");
			}
			else
			{
				Connect_cableFaultsMaster++;
    3a9e:	6813      	ldr	r3, [r2, #0]
    3aa0:	3301      	adds	r3, #1
    3aa2:	6013      	str	r3, [r2, #0]
				Connect_cableOkMaster = 0;
    3aa4:	4b24      	ldr	r3, [pc, #144]	; (3b38 <Connect_receive_CableCheck+0x100>)
    3aa6:	2200      	movs	r2, #0
    3aa8:	701a      	strb	r2, [r3, #0]
				print(" Master ");
    3aaa:	f003 febb 	bl	7824 <_print>
			}
			printHex( byte );
    3aae:	4628      	mov	r0, r5
    3ab0:	2101      	movs	r1, #1
    3ab2:	f003 ff3a 	bl	792a <printHex_op>
			print( NL );
    3ab6:	4819      	ldr	r0, [pc, #100]	; (3b1c <Connect_receive_CableCheck+0xe4>)
    3ab8:	f003 feb4 	bl	7824 <_print>

			// Signal that the command should wait for a SYN again
			return 1;
    3abc:	2001      	movs	r0, #1
    3abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else
		{
			// Check which side of the chain
			if ( uart_num == UART_Slave )
    3ac0:	b90e      	cbnz	r6, 3ac6 <Connect_receive_CableCheck+0x8e>
			{
				Connect_cableChecksSlave++;
    3ac2:	4a1e      	ldr	r2, [pc, #120]	; (3b3c <Connect_receive_CableCheck+0x104>)
    3ac4:	e000      	b.n	3ac8 <Connect_receive_CableCheck+0x90>
			}
			else
			{
				Connect_cableChecksMaster++;
    3ac6:	4a1e      	ldr	r2, [pc, #120]	; (3b40 <Connect_receive_CableCheck+0x108>)
    3ac8:	6813      	ldr	r3, [r2, #0]
    3aca:	3301      	adds	r3, #1
    3acc:	6013      	str	r3, [r2, #0]
			}
		}
	}

	// If cable check was successful, set cable ok
	if ( *pending_bytes == 0 )
    3ace:	8823      	ldrh	r3, [r4, #0]
    3ad0:	b92b      	cbnz	r3, 3ade <Connect_receive_CableCheck+0xa6>
    3ad2:	2301      	movs	r3, #1
	{
		if ( uart_num == UART_Slave )
    3ad4:	b90e      	cbnz	r6, 3ada <Connect_receive_CableCheck+0xa2>
		{
			Connect_cableOkSlave = 1;
    3ad6:	4a15      	ldr	r2, [pc, #84]	; (3b2c <Connect_receive_CableCheck+0xf4>)
    3ad8:	e000      	b.n	3adc <Connect_receive_CableCheck+0xa4>
		}
		else
		{
			Connect_cableOkMaster = 1;
    3ada:	4a17      	ldr	r2, [pc, #92]	; (3b38 <Connect_receive_CableCheck+0x100>)
    3adc:	7013      	strb	r3, [r2, #0]
		}
	}

	if ( Connect_debug )
    3ade:	4b0c      	ldr	r3, [pc, #48]	; (3b10 <Connect_receive_CableCheck+0xd8>)
    3ae0:	781b      	ldrb	r3, [r3, #0]
    3ae2:	b183      	cbz	r3, 3b06 <Connect_receive_CableCheck+0xce>
	{
		dbug_msg("CABLECHECK RECEIVE - ");
    3ae4:	4817      	ldr	r0, [pc, #92]	; (3b44 <Connect_receive_CableCheck+0x10c>)
    3ae6:	f003 fe9d 	bl	7824 <_print>
		printHex( byte );
    3aea:	2101      	movs	r1, #1
    3aec:	4628      	mov	r0, r5
    3aee:	f003 ff1c 	bl	792a <printHex_op>
		print(" ");
    3af2:	4809      	ldr	r0, [pc, #36]	; (3b18 <Connect_receive_CableCheck+0xe0>)
    3af4:	f003 fe96 	bl	7824 <_print>
		printHex( *pending_bytes );
    3af8:	8820      	ldrh	r0, [r4, #0]
    3afa:	2101      	movs	r1, #1
    3afc:	f003 ff15 	bl	792a <printHex_op>
		print( NL );
    3b00:	4806      	ldr	r0, [pc, #24]	; (3b1c <Connect_receive_CableCheck+0xe4>)
    3b02:	f003 fe8f 	bl	7824 <_print>
	}

	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
    3b06:	8820      	ldrh	r0, [r4, #0]
    3b08:	fab0 f080 	clz	r0, r0
    3b0c:	0940      	lsrs	r0, r0, #5
}
    3b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b10:	1fff8fc5 	.word	0x1fff8fc5
    3b14:	00008d52 	.word	0x00008d52
    3b18:	0000816a 	.word	0x0000816a
    3b1c:	0000b143 	.word	0x0000b143
    3b20:	00008d75 	.word	0x00008d75
    3b24:	1fff8fb8 	.word	0x1fff8fb8
    3b28:	00008d99 	.word	0x00008d99
    3b2c:	1fff8fcc 	.word	0x1fff8fcc
    3b30:	1fff8fc0 	.word	0x1fff8fc0
    3b34:	00008da1 	.word	0x00008da1
    3b38:	1fff8fb4 	.word	0x1fff8fb4
    3b3c:	1fff8fc8 	.word	0x1fff8fc8
    3b40:	1fff8fbc 	.word	0x1fff8fbc
    3b44:	00008daa 	.word	0x00008daa

00003b48 <cliFunc_connectLst>:

	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
    3b48:	b530      	push	{r4, r5, lr}
	const char *Command_strs[] = {
    3b4a:	4d11      	ldr	r5, [pc, #68]	; (3b90 <cliFunc_connectLst+0x48>)
    3b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
    3b4e:	b08b      	sub	sp, #44	; 0x2c
	const char *Command_strs[] = {
    3b50:	ac01      	add	r4, sp, #4
    3b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3b58:	682b      	ldr	r3, [r5, #0]
		"RemoteCapability",
		"RemoteOutput",
		"RemoteInput",
	};

	print( NL );
    3b5a:	480e      	ldr	r0, [pc, #56]	; (3b94 <cliFunc_connectLst+0x4c>)
	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
	const char *Command_strs[] = {
    3b5c:	6023      	str	r3, [r4, #0]
		"RemoteCapability",
		"RemoteOutput",
		"RemoteInput",
	};

	print( NL );
    3b5e:	f003 fe61 	bl	7824 <_print>
	info_msg("List of UARTConnect commands");
    3b62:	480d      	ldr	r0, [pc, #52]	; (3b98 <cliFunc_connectLst+0x50>)
    3b64:	f003 fe5e 	bl	7824 <_print>
    3b68:	2400      	movs	r4, #0
    3b6a:	ad01      	add	r5, sp, #4
	for ( uint8_t cmd = 0; cmd < Command_TOP; cmd++ )
	{
		print( NL );
    3b6c:	4809      	ldr	r0, [pc, #36]	; (3b94 <cliFunc_connectLst+0x4c>)
    3b6e:	f003 fe59 	bl	7824 <_print>
		printInt8( cmd );
    3b72:	b2e0      	uxtb	r0, r4
    3b74:	f003 fe85 	bl	7882 <printInt8>
		print(" - ");
    3b78:	4808      	ldr	r0, [pc, #32]	; (3b9c <cliFunc_connectLst+0x54>)
    3b7a:	f003 fe53 	bl	7824 <_print>
		dPrint( (char*)Command_strs[ cmd ] );
    3b7e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3b82:	3401      	adds	r4, #1
    3b84:	f002 fb60 	bl	6248 <Output_putstr>
		"RemoteInput",
	};

	print( NL );
	info_msg("List of UARTConnect commands");
	for ( uint8_t cmd = 0; cmd < Command_TOP; cmd++ )
    3b88:	2c09      	cmp	r4, #9
    3b8a:	d1ef      	bne.n	3b6c <cliFunc_connectLst+0x24>
		print( NL );
		printInt8( cmd );
		print(" - ");
		dPrint( (char*)Command_strs[ cmd ] );
	}
}
    3b8c:	b00b      	add	sp, #44	; 0x2c
    3b8e:	bd30      	pop	{r4, r5, pc}
    3b90:	00008c44 	.word	0x00008c44
    3b94:	0000b143 	.word	0x0000b143
    3b98:	00008dd3 	.word	0x00008dd3
    3b9c:	000091e7 	.word	0x000091e7

00003ba0 <cliFunc_connectSts>:
	// Reset node id
	Connect_id = 0xFF;
}

void cliFunc_connectSts( char* args )
{
    3ba0:	b538      	push	{r3, r4, r5, lr}
	print( NL );
    3ba2:	4839      	ldr	r0, [pc, #228]	; (3c88 <cliFunc_connectSts+0xe8>)
	print( NL "\tFaults:\t");
	printHex32( Connect_cableFaultsMaster );
	print("/");
	printHex32( Connect_cableChecksMaster );
	print( NL "\tRx:\t");
	printHex( uart_rx_status[UART_Master].status );
    3ba4:	4d39      	ldr	r5, [pc, #228]	; (3c8c <cliFunc_connectSts+0xec>)
	print( NL "\tTx:\t");
	printHex( uart_tx_status[UART_Master].status );
    3ba6:	4c3a      	ldr	r4, [pc, #232]	; (3c90 <cliFunc_connectSts+0xf0>)
	Connect_id = 0xFF;
}

void cliFunc_connectSts( char* args )
{
	print( NL );
    3ba8:	f003 fe3c 	bl	7824 <_print>
	info_msg("UARTConnect Status");
    3bac:	4839      	ldr	r0, [pc, #228]	; (3c94 <cliFunc_connectSts+0xf4>)
    3bae:	f003 fe39 	bl	7824 <_print>
	print( NL "Device Type:\t" );
    3bb2:	4839      	ldr	r0, [pc, #228]	; (3c98 <cliFunc_connectSts+0xf8>)
    3bb4:	f003 fe36 	bl	7824 <_print>
	print( Connect_master ? "Master" : "Slave" );
    3bb8:	4b38      	ldr	r3, [pc, #224]	; (3c9c <cliFunc_connectSts+0xfc>)
    3bba:	4a39      	ldr	r2, [pc, #228]	; (3ca0 <cliFunc_connectSts+0x100>)
    3bbc:	7818      	ldrb	r0, [r3, #0]
    3bbe:	4b39      	ldr	r3, [pc, #228]	; (3ca4 <cliFunc_connectSts+0x104>)
    3bc0:	2800      	cmp	r0, #0
    3bc2:	bf14      	ite	ne
    3bc4:	4610      	movne	r0, r2
    3bc6:	4618      	moveq	r0, r3
    3bc8:	f003 fe2c 	bl	7824 <_print>
	print( NL "Device Id:\t" );
    3bcc:	4836      	ldr	r0, [pc, #216]	; (3ca8 <cliFunc_connectSts+0x108>)
    3bce:	f003 fe29 	bl	7824 <_print>
	printHex( Connect_id );
    3bd2:	4b36      	ldr	r3, [pc, #216]	; (3cac <cliFunc_connectSts+0x10c>)
    3bd4:	2101      	movs	r1, #1
    3bd6:	7818      	ldrb	r0, [r3, #0]
    3bd8:	f003 fea7 	bl	792a <printHex_op>
	print( NL "Max Id:\t" );
    3bdc:	4834      	ldr	r0, [pc, #208]	; (3cb0 <cliFunc_connectSts+0x110>)
    3bde:	f003 fe21 	bl	7824 <_print>
	printHex( Connect_maxId );
    3be2:	4b34      	ldr	r3, [pc, #208]	; (3cb4 <cliFunc_connectSts+0x114>)
    3be4:	2101      	movs	r1, #1
    3be6:	7818      	ldrb	r0, [r3, #0]
    3be8:	f003 fe9f 	bl	792a <printHex_op>
	print( NL "Master <=" NL "\tStatus:\t");
    3bec:	4832      	ldr	r0, [pc, #200]	; (3cb8 <cliFunc_connectSts+0x118>)
    3bee:	f003 fe19 	bl	7824 <_print>
	printHex( Connect_cableOkMaster );
    3bf2:	4b32      	ldr	r3, [pc, #200]	; (3cbc <cliFunc_connectSts+0x11c>)
    3bf4:	2101      	movs	r1, #1
    3bf6:	7818      	ldrb	r0, [r3, #0]
    3bf8:	f003 fe97 	bl	792a <printHex_op>
	print( NL "\tFaults:\t");
    3bfc:	4830      	ldr	r0, [pc, #192]	; (3cc0 <cliFunc_connectSts+0x120>)
    3bfe:	f003 fe11 	bl	7824 <_print>
	printHex32( Connect_cableFaultsMaster );
    3c02:	4b30      	ldr	r3, [pc, #192]	; (3cc4 <cliFunc_connectSts+0x124>)
    3c04:	2101      	movs	r1, #1
    3c06:	6818      	ldr	r0, [r3, #0]
    3c08:	f003 fec7 	bl	799a <printHex32_op>
	print("/");
    3c0c:	482e      	ldr	r0, [pc, #184]	; (3cc8 <cliFunc_connectSts+0x128>)
    3c0e:	f003 fe09 	bl	7824 <_print>
	printHex32( Connect_cableChecksMaster );
    3c12:	4b2e      	ldr	r3, [pc, #184]	; (3ccc <cliFunc_connectSts+0x12c>)
    3c14:	2101      	movs	r1, #1
    3c16:	6818      	ldr	r0, [r3, #0]
    3c18:	f003 febf 	bl	799a <printHex32_op>
	print( NL "\tRx:\t");
    3c1c:	482c      	ldr	r0, [pc, #176]	; (3cd0 <cliFunc_connectSts+0x130>)
    3c1e:	f003 fe01 	bl	7824 <_print>
	printHex( uart_rx_status[UART_Master].status );
    3c22:	7928      	ldrb	r0, [r5, #4]
    3c24:	2101      	movs	r1, #1
    3c26:	f003 fe80 	bl	792a <printHex_op>
	print( NL "\tTx:\t");
    3c2a:	482a      	ldr	r0, [pc, #168]	; (3cd4 <cliFunc_connectSts+0x134>)
    3c2c:	f003 fdfa 	bl	7824 <_print>
	printHex( uart_tx_status[UART_Master].status );
    3c30:	78a0      	ldrb	r0, [r4, #2]
    3c32:	2101      	movs	r1, #1
    3c34:	f003 fe79 	bl	792a <printHex_op>
	print( NL "Slave <=" NL "\tStatus:\t");
    3c38:	4827      	ldr	r0, [pc, #156]	; (3cd8 <cliFunc_connectSts+0x138>)
    3c3a:	f003 fdf3 	bl	7824 <_print>
	printHex( Connect_cableOkSlave );
    3c3e:	4b27      	ldr	r3, [pc, #156]	; (3cdc <cliFunc_connectSts+0x13c>)
    3c40:	2101      	movs	r1, #1
    3c42:	7818      	ldrb	r0, [r3, #0]
    3c44:	f003 fe71 	bl	792a <printHex_op>
	print( NL "\tFaults:\t");
    3c48:	481d      	ldr	r0, [pc, #116]	; (3cc0 <cliFunc_connectSts+0x120>)
    3c4a:	f003 fdeb 	bl	7824 <_print>
	printHex32( Connect_cableFaultsSlave );
    3c4e:	4b24      	ldr	r3, [pc, #144]	; (3ce0 <cliFunc_connectSts+0x140>)
    3c50:	2101      	movs	r1, #1
    3c52:	6818      	ldr	r0, [r3, #0]
    3c54:	f003 fea1 	bl	799a <printHex32_op>
	print("/");
    3c58:	481b      	ldr	r0, [pc, #108]	; (3cc8 <cliFunc_connectSts+0x128>)
    3c5a:	f003 fde3 	bl	7824 <_print>
	printHex32( Connect_cableChecksSlave );
    3c5e:	4b21      	ldr	r3, [pc, #132]	; (3ce4 <cliFunc_connectSts+0x144>)
    3c60:	2101      	movs	r1, #1
    3c62:	6818      	ldr	r0, [r3, #0]
    3c64:	f003 fe99 	bl	799a <printHex32_op>
	print( NL "\tRx:\t");
    3c68:	4819      	ldr	r0, [pc, #100]	; (3cd0 <cliFunc_connectSts+0x130>)
    3c6a:	f003 fddb 	bl	7824 <_print>
	printHex( uart_rx_status[UART_Slave].status );
    3c6e:	7828      	ldrb	r0, [r5, #0]
    3c70:	2101      	movs	r1, #1
    3c72:	f003 fe5a 	bl	792a <printHex_op>
	print( NL "\tTx:\t");
    3c76:	4817      	ldr	r0, [pc, #92]	; (3cd4 <cliFunc_connectSts+0x134>)
    3c78:	f003 fdd4 	bl	7824 <_print>
	printHex( uart_tx_status[UART_Slave].status );
    3c7c:	7820      	ldrb	r0, [r4, #0]
    3c7e:	2101      	movs	r1, #1
}
    3c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	print("/");
	printHex32( Connect_cableChecksSlave );
	print( NL "\tRx:\t");
	printHex( uart_rx_status[UART_Slave].status );
	print( NL "\tTx:\t");
	printHex( uart_tx_status[UART_Slave].status );
    3c84:	f003 be51 	b.w	792a <printHex_op>
    3c88:	0000b143 	.word	0x0000b143
    3c8c:	1fff9c44 	.word	0x1fff9c44
    3c90:	1fff9c26 	.word	0x1fff9c26
    3c94:	00008e0f 	.word	0x00008e0f
    3c98:	00008e34 	.word	0x00008e34
    3c9c:	1fff8fce 	.word	0x1fff8fce
    3ca0:	00008e02 	.word	0x00008e02
    3ca4:	00008e09 	.word	0x00008e09
    3ca8:	00008e44 	.word	0x00008e44
    3cac:	1fff89c5 	.word	0x1fff89c5
    3cb0:	00008e52 	.word	0x00008e52
    3cb4:	1fff8fc4 	.word	0x1fff8fc4
    3cb8:	00008e5d 	.word	0x00008e5d
    3cbc:	1fff8fb4 	.word	0x1fff8fb4
    3cc0:	00008e74 	.word	0x00008e74
    3cc4:	1fff8fc0 	.word	0x1fff8fc0
    3cc8:	00008e80 	.word	0x00008e80
    3ccc:	1fff8fbc 	.word	0x1fff8fbc
    3cd0:	00008e82 	.word	0x00008e82
    3cd4:	00008e8a 	.word	0x00008e8a
    3cd8:	00008e92 	.word	0x00008e92
    3cdc:	1fff8fcc 	.word	0x1fff8fcc
    3ce0:	1fff8fb8 	.word	0x1fff8fb8
    3ce4:	1fff8fc8 	.word	0x1fff8fc8

00003ce8 <cliFunc_connectMst>:
		dPrint( (char*)Command_strs[ cmd ] );
	}
}

void cliFunc_connectMst( char* args )
{
    3ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    3cea:	aa01      	add	r2, sp, #4
    3cec:	4669      	mov	r1, sp
    3cee:	f003 fad9 	bl	72a4 <CLI_argumentIsolation>

	print( NL );
    3cf2:	4813      	ldr	r0, [pc, #76]	; (3d40 <cliFunc_connectMst+0x58>)
    3cf4:	4d13      	ldr	r5, [pc, #76]	; (3d44 <cliFunc_connectMst+0x5c>)
    3cf6:	4c14      	ldr	r4, [pc, #80]	; (3d48 <cliFunc_connectMst+0x60>)
    3cf8:	f003 fd94 	bl	7824 <_print>

	// Set override
	Connect_override = 1;
    3cfc:	4b13      	ldr	r3, [pc, #76]	; (3d4c <cliFunc_connectMst+0x64>)
    3cfe:	2201      	movs	r2, #1
    3d00:	701a      	strb	r2, [r3, #0]

	switch ( arg1Ptr[0] )
    3d02:	9a00      	ldr	r2, [sp, #0]
    3d04:	7812      	ldrb	r2, [r2, #0]
    3d06:	2a53      	cmp	r2, #83	; 0x53
    3d08:	d00a      	beq.n	3d20 <cliFunc_connectMst+0x38>
    3d0a:	d802      	bhi.n	3d12 <cliFunc_connectMst+0x2a>
    3d0c:	2a44      	cmp	r2, #68	; 0x44
    3d0e:	d005      	beq.n	3d1c <cliFunc_connectMst+0x34>
    3d10:	e00d      	b.n	3d2e <cliFunc_connectMst+0x46>
    3d12:	2a64      	cmp	r2, #100	; 0x64
    3d14:	d002      	beq.n	3d1c <cliFunc_connectMst+0x34>
    3d16:	2a73      	cmp	r2, #115	; 0x73
    3d18:	d002      	beq.n	3d20 <cliFunc_connectMst+0x38>
    3d1a:	e008      	b.n	3d2e <cliFunc_connectMst+0x46>
	{
	// Disable override
	case 'd':
	case 'D':
		Connect_override = 0;
    3d1c:	2200      	movs	r2, #0
    3d1e:	701a      	strb	r2, [r3, #0]
	case 's':
	case 'S':
		info_msg("Setting device as slave.");
    3d20:	480b      	ldr	r0, [pc, #44]	; (3d50 <cliFunc_connectMst+0x68>)
    3d22:	f003 fd7f 	bl	7824 <_print>
		Connect_master = 0;
    3d26:	2300      	movs	r3, #0
    3d28:	702b      	strb	r3, [r5, #0]
		Connect_id = 0xFF;
    3d2a:	23ff      	movs	r3, #255	; 0xff
    3d2c:	e005      	b.n	3d3a <cliFunc_connectMst+0x52>
		break;

	case 'm':
	case 'M':
	default:
		info_msg("Setting device as master.");
    3d2e:	4809      	ldr	r0, [pc, #36]	; (3d54 <cliFunc_connectMst+0x6c>)
    3d30:	f003 fd78 	bl	7824 <_print>
		Connect_master = 1;
    3d34:	2301      	movs	r3, #1
    3d36:	702b      	strb	r3, [r5, #0]
		Connect_id = 0;
    3d38:	2300      	movs	r3, #0
    3d3a:	7023      	strb	r3, [r4, #0]
		break;
	}
}
    3d3c:	b003      	add	sp, #12
    3d3e:	bd30      	pop	{r4, r5, pc}
    3d40:	0000b143 	.word	0x0000b143
    3d44:	1fff8fce 	.word	0x1fff8fce
    3d48:	1fff89c5 	.word	0x1fff89c5
    3d4c:	1fff8fcd 	.word	0x1fff8fcd
    3d50:	00008ea8 	.word	0x00008ea8
    3d54:	00008ed3 	.word	0x00008ed3

00003d58 <Connect_addBytes.part.1>:
UARTStatusTx uart_tx_status[UART_Num_Interfaces];


// -- Ring Buffer Convenience Functions --

void Connect_addBytes( uint8_t *buffer, uint8_t count, uint8_t uart )
    3d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d5a:	4605      	mov	r5, r0
    3d5c:	460f      	mov	r7, r1
    3d5e:	4616      	mov	r6, r2
		erro_print("Invalid UART to send from...");
		return;
	}

	// Delay UART copy until there's some space left
	while ( uart_tx_buf[ uart ].items + count > UART_Buffer_Size )
    3d60:	4c27      	ldr	r4, [pc, #156]	; (3e00 <Connect_addBytes.part.1+0xa8>)
    3d62:	2383      	movs	r3, #131	; 0x83
    3d64:	fb03 4306 	mla	r3, r3, r6, r4
    3d68:	789b      	ldrb	r3, [r3, #2]
    3d6a:	443b      	add	r3, r7
    3d6c:	2b80      	cmp	r3, #128	; 0x80
    3d6e:	dd0c      	ble.n	3d8a <Connect_addBytes.part.1+0x32>
	{
		warn_msg("Too much data to send on UART");
    3d70:	4824      	ldr	r0, [pc, #144]	; (3e04 <Connect_addBytes.part.1+0xac>)
    3d72:	f003 fd57 	bl	7824 <_print>
		printInt8( uart );
    3d76:	4630      	mov	r0, r6
    3d78:	f003 fd83 	bl	7882 <printInt8>
		print( ", waiting..." NL );
    3d7c:	4822      	ldr	r0, [pc, #136]	; (3e08 <Connect_addBytes.part.1+0xb0>)
    3d7e:	f003 fd51 	bl	7824 <_print>
		delay( 1 );
    3d82:	2001      	movs	r0, #1
    3d84:	f7fe fc28 	bl	25d8 <delay>
    3d88:	e7ea      	b.n	3d60 <Connect_addBytes.part.1+0x8>
    3d8a:	442f      	add	r7, r5
	}

	// Append data to ring buffer
	for ( uint8_t c = 0; c < count; c++ )
    3d8c:	42bd      	cmp	r5, r7
    3d8e:	d035      	beq.n	3dfc <Connect_addBytes.part.1+0xa4>
	{
		if ( Connect_debug )
    3d90:	4b1e      	ldr	r3, [pc, #120]	; (3e0c <Connect_addBytes.part.1+0xb4>)
    3d92:	781b      	ldrb	r3, [r3, #0]
    3d94:	b163      	cbz	r3, 3db0 <Connect_addBytes.part.1+0x58>
		{
			printHex( buffer[ c ] );
    3d96:	2101      	movs	r1, #1
    3d98:	7828      	ldrb	r0, [r5, #0]
    3d9a:	f003 fdc6 	bl	792a <printHex_op>
			print(" +");
    3d9e:	481c      	ldr	r0, [pc, #112]	; (3e10 <Connect_addBytes.part.1+0xb8>)
    3da0:	f003 fd40 	bl	7824 <_print>
			printInt8( uart );
    3da4:	4630      	mov	r0, r6
    3da6:	f003 fd6c 	bl	7882 <printInt8>
			print( NL );
    3daa:	481a      	ldr	r0, [pc, #104]	; (3e14 <Connect_addBytes.part.1+0xbc>)
    3dac:	f003 fd3a 	bl	7824 <_print>
		}

		uart_tx_buf[ uart ].buffer[ uart_tx_buf[ uart ].tail++ ] = buffer[ c ];
    3db0:	2383      	movs	r3, #131	; 0x83
    3db2:	fb03 fe06 	mul.w	lr, r3, r6
    3db6:	eb04 000e 	add.w	r0, r4, lr
		uart_tx_buf[ uart ].items++;
		if ( uart_tx_buf[ uart ].tail >= UART_Buffer_Size )
			uart_tx_buf[ uart ].tail = 0;
		if ( uart_tx_buf[ uart ].head == uart_tx_buf[ uart ].tail )
    3dba:	4373      	muls	r3, r6
			print(" +");
			printInt8( uart );
			print( NL );
		}

		uart_tx_buf[ uart ].buffer[ uart_tx_buf[ uart ].tail++ ] = buffer[ c ];
    3dbc:	7842      	ldrb	r2, [r0, #1]
    3dbe:	1c51      	adds	r1, r2, #1
    3dc0:	b2c9      	uxtb	r1, r1
    3dc2:	4472      	add	r2, lr
    3dc4:	7041      	strb	r1, [r0, #1]
    3dc6:	4422      	add	r2, r4
    3dc8:	f815 cb01 	ldrb.w	ip, [r5], #1
    3dcc:	f882 c003 	strb.w	ip, [r2, #3]
		uart_tx_buf[ uart ].items++;
    3dd0:	7882      	ldrb	r2, [r0, #2]
    3dd2:	3201      	adds	r2, #1
    3dd4:	7082      	strb	r2, [r0, #2]
		if ( uart_tx_buf[ uart ].tail >= UART_Buffer_Size )
    3dd6:	060a      	lsls	r2, r1, #24
			uart_tx_buf[ uart ].tail = 0;
    3dd8:	bf44      	itt	mi
    3dda:	2200      	movmi	r2, #0
    3ddc:	7042      	strbmi	r2, [r0, #1]
		if ( uart_tx_buf[ uart ].head == uart_tx_buf[ uart ].tail )
    3dde:	18e2      	adds	r2, r4, r3
    3de0:	5ce1      	ldrb	r1, [r4, r3]
    3de2:	7852      	ldrb	r2, [r2, #1]
    3de4:	428a      	cmp	r2, r1
			uart_tx_buf[ uart ].head++;
    3de6:	bf04      	itt	eq
    3de8:	3201      	addeq	r2, #1
    3dea:	54e2      	strbeq	r2, [r4, r3]
		if ( uart_tx_buf[ uart ].head >= UART_Buffer_Size )
    3dec:	2383      	movs	r3, #131	; 0x83
    3dee:	4373      	muls	r3, r6
    3df0:	56e2      	ldrsb	r2, [r4, r3]
    3df2:	2a00      	cmp	r2, #0
			uart_tx_buf[ uart ].head = 0;
    3df4:	bfbc      	itt	lt
    3df6:	2200      	movlt	r2, #0
    3df8:	54e2      	strblt	r2, [r4, r3]
    3dfa:	e7c7      	b.n	3d8c <Connect_addBytes.part.1+0x34>
	}
}
    3dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dfe:	bf00      	nop
    3e00:	1fff9b1a 	.word	0x1fff9b1a
    3e04:	00008eff 	.word	0x00008eff
    3e08:	00008f32 	.word	0x00008f32
    3e0c:	1fff8fc5 	.word	0x1fff8fc5
    3e10:	00008f41 	.word	0x00008f41
    3e14:	0000b143 	.word	0x0000b143

00003e18 <Connect_receive_ScanCode>:
TriggerGuide Connect_receive_ScanCodeBuffer;
uint8_t Connect_receive_ScanCodeBufferPos;
uint8_t Connect_receive_ScanCodeDeviceId;

uint8_t Connect_receive_ScanCode( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3e18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	// Check the directionality
	if ( uart_num == UART_Master )
    3e1a:	2a01      	cmp	r2, #1
TriggerGuide Connect_receive_ScanCodeBuffer;
uint8_t Connect_receive_ScanCodeBufferPos;
uint8_t Connect_receive_ScanCodeDeviceId;

uint8_t Connect_receive_ScanCode( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3e1c:	460d      	mov	r5, r1
    3e1e:	f88d 0007 	strb.w	r0, [sp, #7]
	// Check the directionality
	if ( uart_num == UART_Master )
    3e22:	d102      	bne.n	3e2a <Connect_receive_ScanCode+0x12>
	{
		erro_print("Invalid ScanCode direction...");
    3e24:	484e      	ldr	r0, [pc, #312]	; (3f60 <Connect_receive_ScanCode+0x148>)
    3e26:	f003 fcfd 	bl	7824 <_print>
	}

	// Master node, trigger scan codes
	if ( Connect_master ) switch ( (*pending_bytes)-- )
    3e2a:	4b4e      	ldr	r3, [pc, #312]	; (3f64 <Connect_receive_ScanCode+0x14c>)
    3e2c:	781a      	ldrb	r2, [r3, #0]
    3e2e:	882b      	ldrh	r3, [r5, #0]
    3e30:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    3e34:	2a00      	cmp	r2, #0
    3e36:	d051      	beq.n	3edc <Connect_receive_ScanCode+0xc4>
    3e38:	1e5a      	subs	r2, r3, #1
    3e3a:	428b      	cmp	r3, r1
    3e3c:	802a      	strh	r2, [r5, #0]
    3e3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3e42:	d005      	beq.n	3e50 <Connect_receive_ScanCode+0x38>
    3e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3e48:	428b      	cmp	r3, r1
    3e4a:	d108      	bne.n	3e5e <Connect_receive_ScanCode+0x46>
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
		Connect_receive_ScanCodeDeviceId = byte;
    3e4c:	4b46      	ldr	r3, [pc, #280]	; (3f68 <Connect_receive_ScanCode+0x150>)
    3e4e:	e004      	b.n	3e5a <Connect_receive_ScanCode+0x42>
		break;

	case 0xFFFE: // Number of TriggerGuides in bytes (byte * 3)
		*pending_bytes = byte * sizeof( TriggerGuide );
    3e50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		Connect_receive_ScanCodeBufferPos = 0;
    3e54:	4b45      	ldr	r3, [pc, #276]	; (3f6c <Connect_receive_ScanCode+0x154>)
	case 0xFFFF: // Device Id
		Connect_receive_ScanCodeDeviceId = byte;
		break;

	case 0xFFFE: // Number of TriggerGuides in bytes (byte * 3)
		*pending_bytes = byte * sizeof( TriggerGuide );
    3e56:	802a      	strh	r2, [r5, #0]
		Connect_receive_ScanCodeBufferPos = 0;
    3e58:	2200      	movs	r2, #0
    3e5a:	701a      	strb	r2, [r3, #0]
		break;
    3e5c:	e07a      	b.n	3f54 <Connect_receive_ScanCode+0x13c>

	default:
		// Set the specific TriggerGuide entry
		((uint8_t*)&Connect_receive_ScanCodeBuffer)[ Connect_receive_ScanCodeBufferPos++ ] = byte;
    3e5e:	4943      	ldr	r1, [pc, #268]	; (3f6c <Connect_receive_ScanCode+0x154>)
    3e60:	4c43      	ldr	r4, [pc, #268]	; (3f70 <Connect_receive_ScanCode+0x158>)
    3e62:	7808      	ldrb	r0, [r1, #0]
    3e64:	1c43      	adds	r3, r0, #1
    3e66:	b2db      	uxtb	r3, r3

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
    3e68:	2b02      	cmp	r3, #2
		Connect_receive_ScanCodeBufferPos = 0;
		break;

	default:
		// Set the specific TriggerGuide entry
		((uint8_t*)&Connect_receive_ScanCodeBuffer)[ Connect_receive_ScanCodeBufferPos++ ] = byte;
    3e6a:	700b      	strb	r3, [r1, #0]
    3e6c:	5502      	strb	r2, [r0, r4]

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
    3e6e:	d971      	bls.n	3f54 <Connect_receive_ScanCode+0x13c>
		{
			Connect_receive_ScanCodeBufferPos = 0;

			// Adjust ScanCode offset
			if ( Connect_receive_ScanCodeDeviceId > 0 )
    3e70:	4e3d      	ldr	r6, [pc, #244]	; (3f68 <Connect_receive_ScanCode+0x150>)

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
		{
			Connect_receive_ScanCodeBufferPos = 0;
    3e72:	2300      	movs	r3, #0
    3e74:	700b      	strb	r3, [r1, #0]

			// Adjust ScanCode offset
			if ( Connect_receive_ScanCodeDeviceId > 0 )
    3e76:	7833      	ldrb	r3, [r6, #0]
    3e78:	b18b      	cbz	r3, 3e9e <Connect_receive_ScanCode+0x86>
			{
				// Check if this node is too large
				if ( Connect_receive_ScanCodeDeviceId >= InterconnectNodeMax )
    3e7a:	2b01      	cmp	r3, #1
    3e7c:	d90a      	bls.n	3e94 <Connect_receive_ScanCode+0x7c>
				{
					warn_msg("Not enough interconnect layout nodes configured: ");
    3e7e:	483d      	ldr	r0, [pc, #244]	; (3f74 <Connect_receive_ScanCode+0x15c>)
    3e80:	f003 fcd0 	bl	7824 <_print>
					printHex( Connect_receive_ScanCodeDeviceId );
    3e84:	7830      	ldrb	r0, [r6, #0]
    3e86:	2101      	movs	r1, #1
    3e88:	f003 fd4f 	bl	792a <printHex_op>
					print( NL );
    3e8c:	483a      	ldr	r0, [pc, #232]	; (3f78 <Connect_receive_ScanCode+0x160>)
    3e8e:	f003 fcc9 	bl	7824 <_print>
					break;
    3e92:	e05f      	b.n	3f54 <Connect_receive_ScanCode+0x13c>
				}

				// This variable is in generatedKeymaps.h
				extern uint8_t InterconnectOffsetList[];
				Connect_receive_ScanCodeBuffer.scanCode = Connect_receive_ScanCodeBuffer.scanCode + InterconnectOffsetList[ Connect_receive_ScanCodeDeviceId - 1 ];
    3e94:	4b39      	ldr	r3, [pc, #228]	; (3f7c <Connect_receive_ScanCode+0x164>)
    3e96:	781a      	ldrb	r2, [r3, #0]
    3e98:	78a3      	ldrb	r3, [r4, #2]
    3e9a:	4413      	add	r3, r2
    3e9c:	70a3      	strb	r3, [r4, #2]
			}

			// ScanCode receive debug
			if ( Connect_debug )
    3e9e:	4b38      	ldr	r3, [pc, #224]	; (3f80 <Connect_receive_ScanCode+0x168>)
    3ea0:	781b      	ldrb	r3, [r3, #0]
    3ea2:	b1bb      	cbz	r3, 3ed4 <Connect_receive_ScanCode+0xbc>
			{
				dbug_msg("");
    3ea4:	4837      	ldr	r0, [pc, #220]	; (3f84 <Connect_receive_ScanCode+0x16c>)
    3ea6:	f003 fcbd 	bl	7824 <_print>
				printHex( Connect_receive_ScanCodeBuffer.type );
    3eaa:	2101      	movs	r1, #1
    3eac:	7820      	ldrb	r0, [r4, #0]
    3eae:	f003 fd3c 	bl	792a <printHex_op>
				print(" ");
    3eb2:	4835      	ldr	r0, [pc, #212]	; (3f88 <Connect_receive_ScanCode+0x170>)
    3eb4:	f003 fcb6 	bl	7824 <_print>
				printHex( Connect_receive_ScanCodeBuffer.state );
    3eb8:	2101      	movs	r1, #1
    3eba:	7860      	ldrb	r0, [r4, #1]
    3ebc:	f003 fd35 	bl	792a <printHex_op>
				print(" ");
    3ec0:	4831      	ldr	r0, [pc, #196]	; (3f88 <Connect_receive_ScanCode+0x170>)
    3ec2:	f003 fcaf 	bl	7824 <_print>
				printHex( Connect_receive_ScanCodeBuffer.scanCode );
    3ec6:	78a0      	ldrb	r0, [r4, #2]
    3ec8:	2101      	movs	r1, #1
    3eca:	f003 fd2e 	bl	792a <printHex_op>
				print( NL );
    3ece:	482a      	ldr	r0, [pc, #168]	; (3f78 <Connect_receive_ScanCode+0x160>)
    3ed0:	f003 fca8 	bl	7824 <_print>
			}

			// Send ScanCode to macro module
			Macro_interconnectAdd( &Connect_receive_ScanCodeBuffer );
    3ed4:	4826      	ldr	r0, [pc, #152]	; (3f70 <Connect_receive_ScanCode+0x158>)
    3ed6:	f001 f9ed 	bl	52b4 <Macro_interconnectAdd>
    3eda:	e03b      	b.n	3f54 <Connect_receive_ScanCode+0x13c>
		break;
	}
	// Propagate ScanCode packet
	// XXX It would be safer to buffer the scancodes first, before transmitting the packet -Jacob
	//     The current method is the more efficient/aggressive, but could cause issues if there were errors during transmission
	else switch ( (*pending_bytes)-- )
    3edc:	1e58      	subs	r0, r3, #1
    3ede:	428b      	cmp	r3, r1
    3ee0:	8028      	strh	r0, [r5, #0]
    3ee2:	d01e      	beq.n	3f22 <Connect_receive_ScanCode+0x10a>
    3ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3ee8:	4293      	cmp	r3, r2
    3eea:	d127      	bne.n	3f3c <Connect_receive_ScanCode+0x124>
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
	{
		Connect_receive_ScanCodeDeviceId = byte;
    3eec:	4b1e      	ldr	r3, [pc, #120]	; (3f68 <Connect_receive_ScanCode+0x150>)
    3eee:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3ef2:	7018      	strb	r0, [r3, #0]

		// Lock the master Tx buffer
		uart_lockTx( UART_Master );
    3ef4:	4b25      	ldr	r3, [pc, #148]	; (3f8c <Connect_receive_ScanCode+0x174>)
    3ef6:	78da      	ldrb	r2, [r3, #3]
    3ef8:	2a00      	cmp	r2, #0
    3efa:	d1fd      	bne.n	3ef8 <Connect_receive_ScanCode+0xe0>
    3efc:	2201      	movs	r2, #1
    3efe:	7899      	ldrb	r1, [r3, #2]
    3f00:	70da      	strb	r2, [r3, #3]
    3f02:	2904      	cmp	r1, #4
    3f04:	d1fd      	bne.n	3f02 <Connect_receive_ScanCode+0xea>
    3f06:	2200      	movs	r2, #0
    3f08:	709a      	strb	r2, [r3, #2]

		// Send header + Id byte
		uint8_t header[] = { 0x16, 0x01, ScanCode, byte };
    3f0a:	2316      	movs	r3, #22
    3f0c:	2201      	movs	r2, #1
    3f0e:	f88d 000f 	strb.w	r0, [sp, #15]
    3f12:	f88d 300c 	strb.w	r3, [sp, #12]
    3f16:	f88d 200d 	strb.w	r2, [sp, #13]
    3f1a:	f88d 100e 	strb.w	r1, [sp, #14]
    3f1e:	a803      	add	r0, sp, #12
    3f20:	e009      	b.n	3f36 <Connect_receive_ScanCode+0x11e>
		Connect_addBytes( header, sizeof( header ), UART_Master );
		break;
	}
	case 0xFFFE: // Number of TriggerGuides in bytes
		*pending_bytes = byte * sizeof( TriggerGuide );
    3f22:	a804      	add	r0, sp, #16
    3f24:	2101      	movs	r1, #1
    3f26:	f810 3d09 	ldrb.w	r3, [r0, #-9]!
    3f2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f2e:	802b      	strh	r3, [r5, #0]
		Connect_receive_ScanCodeBufferPos = 0;
    3f30:	4b0e      	ldr	r3, [pc, #56]	; (3f6c <Connect_receive_ScanCode+0x154>)
    3f32:	701a      	strb	r2, [r3, #0]
    3f34:	460a      	mov	r2, r1
    3f36:	f7ff ff0f 	bl	3d58 <Connect_addBytes.part.1>
    3f3a:	e00b      	b.n	3f54 <Connect_receive_ScanCode+0x13c>
    3f3c:	2101      	movs	r1, #1
    3f3e:	460a      	mov	r2, r1
    3f40:	f10d 0007 	add.w	r0, sp, #7
    3f44:	f7ff ff08 	bl	3d58 <Connect_addBytes.part.1>
	default:
		// Pass through byte
		Connect_addBytes( &byte, 1, UART_Master );

		// Unlock Tx Buffer after sending last byte
		if ( *pending_bytes == 0 )
    3f48:	882a      	ldrh	r2, [r5, #0]
    3f4a:	b91a      	cbnz	r2, 3f54 <Connect_receive_ScanCode+0x13c>
			uart_unlockTx( UART_Master );
    3f4c:	4b0f      	ldr	r3, [pc, #60]	; (3f8c <Connect_receive_ScanCode+0x174>)
    3f4e:	2104      	movs	r1, #4
    3f50:	7099      	strb	r1, [r3, #2]
    3f52:	70da      	strb	r2, [r3, #3]
		break;
	}

	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
    3f54:	8828      	ldrh	r0, [r5, #0]
}
    3f56:	fab0 f080 	clz	r0, r0
    3f5a:	0940      	lsrs	r0, r0, #5
    3f5c:	b004      	add	sp, #16
    3f5e:	bd70      	pop	{r4, r5, r6, pc}
    3f60:	00008f44 	.word	0x00008f44
    3f64:	1fff8fce 	.word	0x1fff8fce
    3f68:	1fff9c43 	.word	0x1fff9c43
    3f6c:	1fff9d53 	.word	0x1fff9d53
    3f70:	1fff9d50 	.word	0x1fff9d50
    3f74:	00008f79 	.word	0x00008f79
    3f78:	0000b143 	.word	0x0000b143
    3f7c:	00009e3c 	.word	0x00009e3c
    3f80:	1fff8fc5 	.word	0x1fff8fc5
    3f84:	00008fc0 	.word	0x00008fc0
    3f88:	0000816a 	.word	0x0000816a
    3f8c:	1fff9c26 	.word	0x1fff9c26

00003f90 <Connect_addBytes>:
// -- Ring Buffer Convenience Functions --

void Connect_addBytes( uint8_t *buffer, uint8_t count, uint8_t uart )
{
	// Too big to fit into buffer
	if ( count > UART_Buffer_Size )
    3f90:	2980      	cmp	r1, #128	; 0x80
    3f92:	d901      	bls.n	3f98 <Connect_addBytes+0x8>
	{
		erro_msg("Too big of a command to fit into the buffer...");
    3f94:	4804      	ldr	r0, [pc, #16]	; (3fa8 <Connect_addBytes+0x18>)
    3f96:	e004      	b.n	3fa2 <Connect_addBytes+0x12>
		return;
	}

	// Invalid UART
	if ( uart >= UART_Num_Interfaces )
    3f98:	2a01      	cmp	r2, #1
    3f9a:	d801      	bhi.n	3fa0 <Connect_addBytes+0x10>
    3f9c:	f7ff bedc 	b.w	3d58 <Connect_addBytes.part.1>
	{
		erro_print("Invalid UART to send from...");
    3fa0:	4802      	ldr	r0, [pc, #8]	; (3fac <Connect_addBytes+0x1c>)
    3fa2:	f003 bc3f 	b.w	7824 <_print>
    3fa6:	bf00      	nop
    3fa8:	00008fd4 	.word	0x00008fd4
    3fac:	00009018 	.word	0x00009018

00003fb0 <Connect_receive_RemoteCapability>:
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    3fb0:	880b      	ldrh	r3, [r1, #0]
#define Connect_receive_RemoteCapabilityMaxArgs 25 // XXX Calculate the max using kll
RemoteCapabilityCommand Connect_receive_RemoteCapabilityBuffer;
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3fb4:	460f      	mov	r7, r1
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    3fb6:	1e59      	subs	r1, r3, #1
    3fb8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    3fbc:	b289      	uxth	r1, r1
    3fbe:	3bfb      	subs	r3, #251	; 0xfb
#define Connect_receive_RemoteCapabilityMaxArgs 25 // XXX Calculate the max using kll
RemoteCapabilityCommand Connect_receive_RemoteCapabilityBuffer;
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3fc0:	4616      	mov	r6, r2
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    3fc2:	8039      	strh	r1, [r7, #0]
    3fc4:	4d38      	ldr	r5, [pc, #224]	; (40a8 <Connect_receive_RemoteCapability+0xf8>)
    3fc6:	2b04      	cmp	r3, #4
    3fc8:	d80f      	bhi.n	3fea <Connect_receive_RemoteCapability+0x3a>
    3fca:	e8df f003 	tbb	[pc, r3]
    3fce:	090b      	.short	0x090b
    3fd0:	0507      	.short	0x0507
    3fd2:	03          	.byte	0x03
    3fd3:	00          	.byte	0x00
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
		Connect_receive_RemoteCapabilityBuffer.id = byte;
    3fd4:	7068      	strb	r0, [r5, #1]
		break;
    3fd6:	e060      	b.n	409a <Connect_receive_RemoteCapability+0xea>

	case 0xFFFE: // Capability Index
		Connect_receive_RemoteCapabilityBuffer.capabilityIndex = byte;
    3fd8:	70a8      	strb	r0, [r5, #2]
		break;
    3fda:	e05e      	b.n	409a <Connect_receive_RemoteCapability+0xea>

	case 0xFFFD: // State
		Connect_receive_RemoteCapabilityBuffer.state = byte;
    3fdc:	70e8      	strb	r0, [r5, #3]
		break;
    3fde:	e05c      	b.n	409a <Connect_receive_RemoteCapability+0xea>

	case 0xFFFC: // StateType
		Connect_receive_RemoteCapabilityBuffer.stateType = byte;
    3fe0:	7128      	strb	r0, [r5, #4]
		break;
    3fe2:	e05a      	b.n	409a <Connect_receive_RemoteCapability+0xea>

	case 0xFFFB: // Number of args
		Connect_receive_RemoteCapabilityBuffer.numArgs = byte;
    3fe4:	7168      	strb	r0, [r5, #5]
		*pending_bytes = byte;
    3fe6:	8038      	strh	r0, [r7, #0]
		break;
    3fe8:	e057      	b.n	409a <Connect_receive_RemoteCapability+0xea>

	default:     // Args (# defined by previous byte)
		Connect_receive_RemoteCapabilityArgs[
			Connect_receive_RemoteCapabilityBuffer.numArgs - *pending_bytes + 1
    3fea:	796a      	ldrb	r2, [r5, #5]
    3fec:	1a53      	subs	r3, r2, r1
		] = byte;
    3fee:	4a2f      	ldr	r2, [pc, #188]	; (40ac <Connect_receive_RemoteCapability+0xfc>)
    3ff0:	4413      	add	r3, r2
    3ff2:	7058      	strb	r0, [r3, #1]

		// If entire packet has been fully received
		if ( *pending_bytes == 0 )
    3ff4:	883b      	ldrh	r3, [r7, #0]
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d14f      	bne.n	409a <Connect_receive_RemoteCapability+0xea>
		{
			// Determine if this is the node to run the capability on
			// Conditions: Matches or broadcast (0xFF)
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
    3ffa:	4b2b      	ldr	r3, [pc, #172]	; (40a8 <Connect_receive_RemoteCapability+0xf8>)
    3ffc:	785b      	ldrb	r3, [r3, #1]
    3ffe:	2bff      	cmp	r3, #255	; 0xff
    4000:	d003      	beq.n	400a <Connect_receive_RemoteCapability+0x5a>
				|| Connect_receive_RemoteCapabilityBuffer.id == Connect_id )
    4002:	4a2b      	ldr	r2, [pc, #172]	; (40b0 <Connect_receive_RemoteCapability+0x100>)
    4004:	7812      	ldrb	r2, [r2, #0]
    4006:	429a      	cmp	r2, r3
    4008:	d107      	bne.n	401a <Connect_receive_RemoteCapability+0x6a>
			{
				extern const Capability CapabilitiesList[]; // See generatedKeymap.h
				void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(
					CapabilitiesList[ Connect_receive_RemoteCapabilityBuffer.capabilityIndex ].func
    400a:	78aa      	ldrb	r2, [r5, #2]
				);
				capability(
    400c:	4b29      	ldr	r3, [pc, #164]	; (40b4 <Connect_receive_RemoteCapability+0x104>)
    400e:	78e8      	ldrb	r0, [r5, #3]
    4010:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4014:	7929      	ldrb	r1, [r5, #4]
    4016:	4a28      	ldr	r2, [pc, #160]	; (40b8 <Connect_receive_RemoteCapability+0x108>)
    4018:	4798      	blx	r3
				);
			}

			// If this is not the correct node, keep sending it in the same direction (doesn't matter if more nodes exist)
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
    401a:	786b      	ldrb	r3, [r5, #1]
    401c:	2bff      	cmp	r3, #255	; 0xff
    401e:	d003      	beq.n	4028 <Connect_receive_RemoteCapability+0x78>
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
    4020:	4a23      	ldr	r2, [pc, #140]	; (40b0 <Connect_receive_RemoteCapability+0x100>)
    4022:	7812      	ldrb	r2, [r2, #0]
    4024:	429a      	cmp	r2, r3
    4026:	d038      	beq.n	409a <Connect_receive_RemoteCapability+0xea>
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;
    4028:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;
    402c:	f04f 0306 	mov.w	r3, #6

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;
    4030:	bf18      	it	ne
    4032:	2601      	movne	r6, #1
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;
    4034:	702b      	strb	r3, [r5, #0]
    4036:	4c21      	ldr	r4, [pc, #132]	; (40bc <Connect_receive_RemoteCapability+0x10c>)

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;

				// Lock Tx UART
				switch ( uart_direction )
    4038:	b156      	cbz	r6, 4050 <Connect_receive_RemoteCapability+0xa0>
				{
				case UART_Master: uart_lockTx( UART_Master ); break;
    403a:	78e3      	ldrb	r3, [r4, #3]
    403c:	2b00      	cmp	r3, #0
    403e:	d1fd      	bne.n	403c <Connect_receive_RemoteCapability+0x8c>
    4040:	2301      	movs	r3, #1
    4042:	70e3      	strb	r3, [r4, #3]
    4044:	78a3      	ldrb	r3, [r4, #2]
    4046:	2b04      	cmp	r3, #4
    4048:	d1fd      	bne.n	4046 <Connect_receive_RemoteCapability+0x96>
    404a:	2300      	movs	r3, #0
    404c:	70a3      	strb	r3, [r4, #2]
    404e:	e009      	b.n	4064 <Connect_receive_RemoteCapability+0xb4>
				case UART_Slave:  uart_lockTx( UART_Slave );  break;
    4050:	7863      	ldrb	r3, [r4, #1]
    4052:	2b00      	cmp	r3, #0
    4054:	d1fd      	bne.n	4052 <Connect_receive_RemoteCapability+0xa2>
    4056:	2301      	movs	r3, #1
    4058:	7063      	strb	r3, [r4, #1]
    405a:	7823      	ldrb	r3, [r4, #0]
    405c:	2b04      	cmp	r3, #4
    405e:	d1fd      	bne.n	405c <Connect_receive_RemoteCapability+0xac>
    4060:	2300      	movs	r3, #0
    4062:	7023      	strb	r3, [r4, #0]
				}

				// Send header
				uint8_t header[] = { 0x16, 0x01 };
    4064:	4b16      	ldr	r3, [pc, #88]	; (40c0 <Connect_receive_RemoteCapability+0x110>)
				Connect_addBytes( header, sizeof( header ), uart_direction );
    4066:	a801      	add	r0, sp, #4
				case UART_Master: uart_lockTx( UART_Master ); break;
				case UART_Slave:  uart_lockTx( UART_Slave );  break;
				}

				// Send header
				uint8_t header[] = { 0x16, 0x01 };
    4068:	881b      	ldrh	r3, [r3, #0]
    406a:	f8ad 3004 	strh.w	r3, [sp, #4]
				Connect_addBytes( header, sizeof( header ), uart_direction );
    406e:	2102      	movs	r1, #2
    4070:	4632      	mov	r2, r6
    4072:	f7ff ff8d 	bl	3f90 <Connect_addBytes>

				// Send Remote Capability and arguments
				Connect_addBytes( (uint8_t*)&Connect_receive_RemoteCapabilityBuffer, sizeof( RemoteCapabilityCommand ), uart_direction );
    4076:	480c      	ldr	r0, [pc, #48]	; (40a8 <Connect_receive_RemoteCapability+0xf8>)
    4078:	2106      	movs	r1, #6
    407a:	4632      	mov	r2, r6
    407c:	f7ff ff88 	bl	3f90 <Connect_addBytes>
				Connect_addBytes( Connect_receive_RemoteCapabilityArgs, Connect_receive_RemoteCapabilityBuffer.numArgs, uart_direction );
    4080:	4632      	mov	r2, r6
    4082:	480a      	ldr	r0, [pc, #40]	; (40ac <Connect_receive_RemoteCapability+0xfc>)
    4084:	7969      	ldrb	r1, [r5, #5]
    4086:	f7ff ff83 	bl	3f90 <Connect_addBytes>
    408a:	2300      	movs	r3, #0
    408c:	2204      	movs	r2, #4

				// Unlock Tx UART
				switch ( uart_direction )
    408e:	b116      	cbz	r6, 4096 <Connect_receive_RemoteCapability+0xe6>
				{
				case UART_Master: uart_unlockTx( UART_Master ); break;
    4090:	70a2      	strb	r2, [r4, #2]
    4092:	70e3      	strb	r3, [r4, #3]
    4094:	e001      	b.n	409a <Connect_receive_RemoteCapability+0xea>
				case UART_Slave:  uart_unlockTx( UART_Slave );  break;
    4096:	7022      	strb	r2, [r4, #0]
    4098:	7063      	strb	r3, [r4, #1]
		}
		break;
	}

	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
    409a:	8838      	ldrh	r0, [r7, #0]
}
    409c:	fab0 f080 	clz	r0, r0
    40a0:	0940      	lsrs	r0, r0, #5
    40a2:	b003      	add	sp, #12
    40a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40a6:	bf00      	nop
    40a8:	1fff9c20 	.word	0x1fff9c20
    40ac:	1fff9c2a 	.word	0x1fff9c2a
    40b0:	1fff89c5 	.word	0x1fff89c5
    40b4:	00009454 	.word	0x00009454
    40b8:	1fff9c2c 	.word	0x1fff9c2c
    40bc:	1fff9c26 	.word	0x1fff9c26
    40c0:	00008c68 	.word	0x00008c68

000040c4 <Connect_send_CableCheck>:

// -- Connect send functions --

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
    40c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    40c6:	4c21      	ldr	r4, [pc, #132]	; (414c <Connect_send_CableCheck+0x88>)
    40c8:	78e2      	ldrb	r2, [r4, #3]
    40ca:	7863      	ldrb	r3, [r4, #1]

// -- Connect send functions --

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
    40cc:	4607      	mov	r7, r0
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    40ce:	2a00      	cmp	r2, #0
    40d0:	d1fd      	bne.n	40ce <Connect_send_CableCheck+0xa>
    40d2:	2b00      	cmp	r3, #0
    40d4:	d1fd      	bne.n	40d2 <Connect_send_CableCheck+0xe>
    40d6:	2301      	movs	r3, #1
    40d8:	70e3      	strb	r3, [r4, #3]
    40da:	7063      	strb	r3, [r4, #1]
    40dc:	7826      	ldrb	r6, [r4, #0]
    40de:	78a3      	ldrb	r3, [r4, #2]
    40e0:	2b04      	cmp	r3, #4
    40e2:	d1fd      	bne.n	40e0 <Connect_send_CableCheck+0x1c>
    40e4:	2e04      	cmp	r6, #4
    40e6:	d1fd      	bne.n	40e4 <Connect_send_CableCheck+0x20>
    40e8:	2500      	movs	r5, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, CableCheck, patternLen };
    40ea:	2316      	movs	r3, #22
    40ec:	2201      	movs	r2, #1
    40ee:	a801      	add	r0, sp, #4
    40f0:	4631      	mov	r1, r6
    40f2:	f88d 3004 	strb.w	r3, [sp, #4]
    40f6:	f88d 2005 	strb.w	r2, [sp, #5]

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    40fa:	70a5      	strb	r5, [r4, #2]
    40fc:	7025      	strb	r5, [r4, #0]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, CableCheck, patternLen };
    40fe:	f88d 5006 	strb.w	r5, [sp, #6]
    4102:	f88d 7007 	strb.w	r7, [sp, #7]
    4106:	f7ff fe27 	bl	3d58 <Connect_addBytes.part.1>
    410a:	a801      	add	r0, sp, #4
    410c:	4631      	mov	r1, r6
    410e:	462a      	mov	r2, r5
    4110:	f7ff fe22 	bl	3d58 <Connect_addBytes.part.1>
	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );
	Connect_addBytes( header, sizeof( header ), UART_Slave );

	// Send 0xD2 (11010010) for each argument
	uint8_t value = 0xD2;
    4114:	23d2      	movs	r3, #210	; 0xd2
    4116:	f88d 3003 	strb.w	r3, [sp, #3]
	for ( uint8_t c = 0; c < patternLen; c++ )
    411a:	42bd      	cmp	r5, r7
    411c:	d00d      	beq.n	413a <Connect_send_CableCheck+0x76>
    411e:	2101      	movs	r1, #1
    4120:	460a      	mov	r2, r1
    4122:	f10d 0003 	add.w	r0, sp, #3
    4126:	f7ff fe17 	bl	3d58 <Connect_addBytes.part.1>
    412a:	f10d 0003 	add.w	r0, sp, #3
    412e:	2101      	movs	r1, #1
    4130:	2200      	movs	r2, #0
    4132:	f7ff fe11 	bl	3d58 <Connect_addBytes.part.1>
    4136:	3501      	adds	r5, #1
    4138:	e7ef      	b.n	411a <Connect_send_CableCheck+0x56>
		Connect_addBytes( &value, 1, UART_Master );
		Connect_addBytes( &value, 1, UART_Slave );
	}

	// Release Tx buffers
	uart_unlockTx( UART_Master );
    413a:	2204      	movs	r2, #4
    413c:	2300      	movs	r3, #0
    413e:	70a2      	strb	r2, [r4, #2]
    4140:	70e3      	strb	r3, [r4, #3]
	uart_unlockTx( UART_Slave );
    4142:	7022      	strb	r2, [r4, #0]
    4144:	7063      	strb	r3, [r4, #1]
}
    4146:	b003      	add	sp, #12
    4148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    414a:	bf00      	nop
    414c:	1fff9c26 	.word	0x1fff9c26

00004150 <Connect_send_IdRequest>:

void Connect_send_IdRequest()
{
    4150:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    4152:	4c0d      	ldr	r4, [pc, #52]	; (4188 <Connect_send_IdRequest+0x38>)
    4154:	78e3      	ldrb	r3, [r4, #3]
    4156:	2b00      	cmp	r3, #0
    4158:	d1fd      	bne.n	4156 <Connect_send_IdRequest+0x6>
    415a:	2301      	movs	r3, #1
    415c:	78a6      	ldrb	r6, [r4, #2]
    415e:	70e3      	strb	r3, [r4, #3]
    4160:	2e04      	cmp	r6, #4
    4162:	d1fd      	bne.n	4160 <Connect_send_IdRequest+0x10>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    4164:	4b09      	ldr	r3, [pc, #36]	; (418c <Connect_send_IdRequest+0x3c>)
    4166:	881a      	ldrh	r2, [r3, #0]
    4168:	f8ad 2004 	strh.w	r2, [sp, #4]
}

void Connect_send_IdRequest()
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    416c:	2500      	movs	r5, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    416e:	789b      	ldrb	r3, [r3, #2]
}

void Connect_send_IdRequest()
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    4170:	70a5      	strb	r5, [r4, #2]
    4172:	a801      	add	r0, sp, #4
    4174:	2103      	movs	r1, #3
    4176:	2201      	movs	r2, #1

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    4178:	f88d 3006 	strb.w	r3, [sp, #6]
    417c:	f7ff fdec 	bl	3d58 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Unlock Tx
	uart_unlockTx( UART_Master );
    4180:	70a6      	strb	r6, [r4, #2]
    4182:	70e5      	strb	r5, [r4, #3]
}
    4184:	b002      	add	sp, #8
    4186:	bd70      	pop	{r4, r5, r6, pc}
    4188:	1fff9c26 	.word	0x1fff9c26
    418c:	00008c6a 	.word	0x00008c6a

00004190 <Connect_send_IdEnumeration>:

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
    4190:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    4192:	4c0f      	ldr	r4, [pc, #60]	; (41d0 <Connect_send_IdEnumeration+0x40>)
    4194:	7863      	ldrb	r3, [r4, #1]
    4196:	2b00      	cmp	r3, #0
    4198:	d1fd      	bne.n	4196 <Connect_send_IdEnumeration+0x6>
    419a:	2301      	movs	r3, #1
    419c:	7826      	ldrb	r6, [r4, #0]
    419e:	7063      	strb	r3, [r4, #1]
    41a0:	2e04      	cmp	r6, #4
    41a2:	d1fd      	bne.n	41a0 <Connect_send_IdEnumeration+0x10>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    41a4:	2316      	movs	r3, #22

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    41a6:	2500      	movs	r5, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    41a8:	f88d 3004 	strb.w	r3, [sp, #4]
    41ac:	2301      	movs	r3, #1
    41ae:	f88d 3005 	strb.w	r3, [sp, #5]
    41b2:	f88d 0007 	strb.w	r0, [sp, #7]
    41b6:	2302      	movs	r3, #2
    41b8:	a801      	add	r0, sp, #4
    41ba:	4631      	mov	r1, r6
    41bc:	462a      	mov	r2, r5

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    41be:	7025      	strb	r5, [r4, #0]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    41c0:	f88d 3006 	strb.w	r3, [sp, #6]
    41c4:	f7ff fdc8 	bl	3d58 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Slave );

	// Unlock Tx
	uart_unlockTx( UART_Slave );
    41c8:	7026      	strb	r6, [r4, #0]
    41ca:	7065      	strb	r5, [r4, #1]
}
    41cc:	b002      	add	sp, #8
    41ce:	bd70      	pop	{r4, r5, r6, pc}
    41d0:	1fff9c26 	.word	0x1fff9c26

000041d4 <Connect_receive_IdRequest>:
	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_IdRequest( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    41d4:	b510      	push	{r4, lr}
	dbug_print("IdRequest");
    41d6:	480a      	ldr	r0, [pc, #40]	; (4200 <Connect_receive_IdRequest+0x2c>)
	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_IdRequest( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    41d8:	4614      	mov	r4, r2
	dbug_print("IdRequest");
    41da:	f003 fb23 	bl	7824 <_print>
	// Check the directionality
	if ( uart_num == UART_Master )
    41de:	2c01      	cmp	r4, #1
    41e0:	d102      	bne.n	41e8 <Connect_receive_IdRequest+0x14>
	{
		erro_print("Invalid IdRequest direction...");
    41e2:	4808      	ldr	r0, [pc, #32]	; (4204 <Connect_receive_IdRequest+0x30>)
    41e4:	f003 fb1e 	bl	7824 <_print>
	}

	// Check if master, begin IdEnumeration
	if ( Connect_master )
    41e8:	4b07      	ldr	r3, [pc, #28]	; (4208 <Connect_receive_IdRequest+0x34>)
    41ea:	781b      	ldrb	r3, [r3, #0]
    41ec:	b11b      	cbz	r3, 41f6 <Connect_receive_IdRequest+0x22>
	{
		// The first device is always id 1
		// Id 0 is reserved for the master
		Connect_send_IdEnumeration( 1 );
    41ee:	2001      	movs	r0, #1
    41f0:	f7ff ffce 	bl	4190 <Connect_send_IdEnumeration>
    41f4:	e001      	b.n	41fa <Connect_receive_IdRequest+0x26>
	}
	// Propagate IdRequest
	else
	{
		Connect_send_IdRequest();
    41f6:	f7ff ffab 	bl	4150 <Connect_send_IdRequest>
	}

	return 1;
}
    41fa:	2001      	movs	r0, #1
    41fc:	bd10      	pop	{r4, pc}
    41fe:	bf00      	nop
    4200:	0000904c 	.word	0x0000904c
    4204:	0000906b 	.word	0x0000906b
    4208:	1fff8fce 	.word	0x1fff8fce

0000420c <Connect_send_IdReport>:
	uart_unlockTx( UART_Slave );
}

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
    420c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    420e:	4c0f      	ldr	r4, [pc, #60]	; (424c <Connect_send_IdReport+0x40>)
    4210:	78e3      	ldrb	r3, [r4, #3]
    4212:	2b00      	cmp	r3, #0
    4214:	d1fd      	bne.n	4212 <Connect_send_IdReport+0x6>
    4216:	2301      	movs	r3, #1
    4218:	78a5      	ldrb	r5, [r4, #2]
    421a:	70e3      	strb	r3, [r4, #3]
    421c:	2d04      	cmp	r5, #4
    421e:	d1fd      	bne.n	421c <Connect_send_IdReport+0x10>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    4220:	2316      	movs	r3, #22

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    4222:	2600      	movs	r6, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    4224:	f88d 3004 	strb.w	r3, [sp, #4]
    4228:	2201      	movs	r2, #1
    422a:	2303      	movs	r3, #3
    422c:	f88d 0007 	strb.w	r0, [sp, #7]
    4230:	4629      	mov	r1, r5
    4232:	a801      	add	r0, sp, #4

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    4234:	70a6      	strb	r6, [r4, #2]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    4236:	f88d 2005 	strb.w	r2, [sp, #5]
    423a:	f88d 3006 	strb.w	r3, [sp, #6]
    423e:	f7ff fd8b 	bl	3d58 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Unlock Tx
	uart_unlockTx( UART_Master );
    4242:	70a5      	strb	r5, [r4, #2]
    4244:	70e6      	strb	r6, [r4, #3]
}
    4246:	b002      	add	sp, #8
    4248:	bd70      	pop	{r4, r5, r6, pc}
    424a:	bf00      	nop
    424c:	1fff9c26 	.word	0x1fff9c26

00004250 <Connect_receive_IdEnumeration>:

	return 1;
}

uint8_t Connect_receive_IdEnumeration( uint8_t id, uint16_t *pending_bytes, uint8_t uart_num )
{
    4250:	b538      	push	{r3, r4, r5, lr}
    4252:	4604      	mov	r4, r0
    4254:	4615      	mov	r5, r2
	dbug_print("IdEnumeration");
    4256:	480a      	ldr	r0, [pc, #40]	; (4280 <Connect_receive_IdEnumeration+0x30>)
    4258:	f003 fae4 	bl	7824 <_print>
	// Check the directionality
	if ( uart_num == UART_Slave )
    425c:	b915      	cbnz	r5, 4264 <Connect_receive_IdEnumeration+0x14>
	{
		erro_print("Invalid IdEnumeration direction...");
    425e:	4809      	ldr	r0, [pc, #36]	; (4284 <Connect_receive_IdEnumeration+0x34>)
    4260:	f003 fae0 	bl	7824 <_print>
	}

	// Set the device id
	Connect_id = id;
    4264:	4b08      	ldr	r3, [pc, #32]	; (4288 <Connect_receive_IdEnumeration+0x38>)

	// Send reponse back to master
	Connect_send_IdReport( id );
    4266:	4620      	mov	r0, r4
	{
		erro_print("Invalid IdEnumeration direction...");
	}

	// Set the device id
	Connect_id = id;
    4268:	701c      	strb	r4, [r3, #0]

	// Send reponse back to master
	Connect_send_IdReport( id );
    426a:	f7ff ffcf 	bl	420c <Connect_send_IdReport>

	// Propogate next Id if the connection is ok
	if ( Connect_cableOkSlave )
    426e:	4b07      	ldr	r3, [pc, #28]	; (428c <Connect_receive_IdEnumeration+0x3c>)
    4270:	781b      	ldrb	r3, [r3, #0]
    4272:	b11b      	cbz	r3, 427c <Connect_receive_IdEnumeration+0x2c>
	{
		Connect_send_IdEnumeration( id + 1 );
    4274:	1c60      	adds	r0, r4, #1
    4276:	b2c0      	uxtb	r0, r0
    4278:	f7ff ff8a 	bl	4190 <Connect_send_IdEnumeration>
	}

	return 1;
}
    427c:	2001      	movs	r0, #1
    427e:	bd38      	pop	{r3, r4, r5, pc}
    4280:	000090a1 	.word	0x000090a1
    4284:	000090c4 	.word	0x000090c4
    4288:	1fff89c5 	.word	0x1fff89c5
    428c:	1fff8fcc 	.word	0x1fff8fcc

00004290 <Connect_receive_IdReport>:

uint8_t Connect_receive_IdReport( uint8_t id, uint16_t *pending_bytes, uint8_t uart_num )
{
    4290:	b538      	push	{r3, r4, r5, lr}
    4292:	4615      	mov	r5, r2
    4294:	4604      	mov	r4, r0
	dbug_print("IdReport");
    4296:	4810      	ldr	r0, [pc, #64]	; (42d8 <Connect_receive_IdReport+0x48>)
    4298:	f003 fac4 	bl	7824 <_print>
	// Check the directionality
	if ( uart_num == UART_Master )
    429c:	2d01      	cmp	r5, #1
    429e:	d102      	bne.n	42a6 <Connect_receive_IdReport+0x16>
	{
		erro_print("Invalid IdRequest direction...");
    42a0:	480e      	ldr	r0, [pc, #56]	; (42dc <Connect_receive_IdReport+0x4c>)
    42a2:	f003 fabf 	bl	7824 <_print>
	}

	// Track Id response if master
	if ( Connect_master )
    42a6:	4b0e      	ldr	r3, [pc, #56]	; (42e0 <Connect_receive_IdReport+0x50>)
    42a8:	781b      	ldrb	r3, [r3, #0]
    42aa:	b17b      	cbz	r3, 42cc <Connect_receive_IdReport+0x3c>
	{
		info_msg("Id Reported: ");
    42ac:	480d      	ldr	r0, [pc, #52]	; (42e4 <Connect_receive_IdReport+0x54>)
    42ae:	f003 fab9 	bl	7824 <_print>
		printHex( id );
    42b2:	4620      	mov	r0, r4
    42b4:	2101      	movs	r1, #1
    42b6:	f003 fb38 	bl	792a <printHex_op>
		print( NL );
    42ba:	480b      	ldr	r0, [pc, #44]	; (42e8 <Connect_receive_IdReport+0x58>)
    42bc:	f003 fab2 	bl	7824 <_print>

		// Check if this is the highest ID
		if ( id > Connect_maxId )
    42c0:	4b0a      	ldr	r3, [pc, #40]	; (42ec <Connect_receive_IdReport+0x5c>)
    42c2:	781a      	ldrb	r2, [r3, #0]
    42c4:	42a2      	cmp	r2, r4
    42c6:	d204      	bcs.n	42d2 <Connect_receive_IdReport+0x42>
			Connect_maxId = id;
    42c8:	701c      	strb	r4, [r3, #0]
    42ca:	e002      	b.n	42d2 <Connect_receive_IdReport+0x42>
		return 1;
	}
	// Propagate id if yet another slave
	else
	{
		Connect_send_IdReport( id );
    42cc:	4620      	mov	r0, r4
    42ce:	f7ff ff9d 	bl	420c <Connect_send_IdReport>
	}

	return 1;
}
    42d2:	2001      	movs	r0, #1
    42d4:	bd38      	pop	{r3, r4, r5, pc}
    42d6:	bf00      	nop
    42d8:	000090fe 	.word	0x000090fe
    42dc:	0000906b 	.word	0x0000906b
    42e0:	1fff8fce 	.word	0x1fff8fce
    42e4:	0000911c 	.word	0x0000911c
    42e8:	0000b143 	.word	0x0000b143
    42ec:	1fff8fc4 	.word	0x1fff8fc4

000042f0 <Connect_send_ScanCode>:

// id is the currently assigned id to the slave
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
    42f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    42f4:	4c14      	ldr	r4, [pc, #80]	; (4348 <Connect_send_ScanCode+0x58>)
    42f6:	78e3      	ldrb	r3, [r4, #3]

// id is the currently assigned id to the slave
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
    42f8:	4689      	mov	r9, r1
    42fa:	4690      	mov	r8, r2
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    42fc:	2b00      	cmp	r3, #0
    42fe:	d1fd      	bne.n	42fc <Connect_send_ScanCode+0xc>
    4300:	2301      	movs	r3, #1
    4302:	78a5      	ldrb	r5, [r4, #2]
    4304:	70e3      	strb	r3, [r4, #3]
    4306:	2d04      	cmp	r5, #4
    4308:	d1fd      	bne.n	4306 <Connect_send_ScanCode+0x16>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    430a:	2601      	movs	r6, #1
    430c:	2316      	movs	r3, #22
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    430e:	2700      	movs	r7, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    4310:	f88d 0003 	strb.w	r0, [sp, #3]
    4314:	4632      	mov	r2, r6
    4316:	4668      	mov	r0, sp
    4318:	2105      	movs	r1, #5
    431a:	f88d 3000 	strb.w	r3, [sp]
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    431e:	70a7      	strb	r7, [r4, #2]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    4320:	f88d 6001 	strb.w	r6, [sp, #1]
    4324:	f88d 5002 	strb.w	r5, [sp, #2]
    4328:	f88d 8004 	strb.w	r8, [sp, #4]
    432c:	f7ff fd14 	bl	3d58 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Send each of the scan codes
	Connect_addBytes( (uint8_t*)scanCodeStateList, numScanCodes * TriggerGuideSize, UART_Master );
    4330:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    4334:	4648      	mov	r0, r9
    4336:	b2c9      	uxtb	r1, r1
    4338:	4632      	mov	r2, r6
    433a:	f7ff fe29 	bl	3f90 <Connect_addBytes>

	// Unlock Tx
	uart_unlockTx( UART_Master );
    433e:	70a5      	strb	r5, [r4, #2]
    4340:	70e7      	strb	r7, [r4, #3]
}
    4342:	b003      	add	sp, #12
    4344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4348:	1fff9c26 	.word	0x1fff9c26

0000434c <cliFunc_connectCmd>:


// ----- CLI Command Functions -----

void cliFunc_connectCmd( char* args )
{
    434c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    434e:	4669      	mov	r1, sp
    4350:	aa01      	add	r2, sp, #4
    4352:	f002 ffa7 	bl	72a4 <CLI_argumentIsolation>

	print( NL );
    4356:	4815      	ldr	r0, [pc, #84]	; (43ac <cliFunc_connectCmd+0x60>)
    4358:	f003 fa64 	bl	7824 <_print>

	switch ( numToInt( &arg1Ptr[0] ) )
    435c:	9800      	ldr	r0, [sp, #0]
    435e:	f003 fb3c 	bl	79da <numToInt>
    4362:	2804      	cmp	r0, #4
    4364:	d81e      	bhi.n	43a4 <cliFunc_connectCmd+0x58>
    4366:	e8df f000 	tbb	[pc, r0]
    436a:	0703      	.short	0x0703
    436c:	0e0a      	.short	0x0e0a
    436e:	12          	.byte	0x12
    436f:	00          	.byte	0x00
	{
	case CableCheck:
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    4370:	2002      	movs	r0, #2
    4372:	f7ff fea7 	bl	40c4 <Connect_send_CableCheck>
		break;
    4376:	e015      	b.n	43a4 <cliFunc_connectCmd+0x58>

	case IdRequest:
		Connect_send_IdRequest();
    4378:	f7ff feea 	bl	4150 <Connect_send_IdRequest>
		break;
    437c:	e012      	b.n	43a4 <cliFunc_connectCmd+0x58>

	case IdEnumeration:
		Connect_send_IdEnumeration( 5 );
    437e:	2005      	movs	r0, #5
    4380:	f7ff ff06 	bl	4190 <Connect_send_IdEnumeration>
		break;
    4384:	e00e      	b.n	43a4 <cliFunc_connectCmd+0x58>

	case IdReport:
		Connect_send_IdReport( 8 );
    4386:	2008      	movs	r0, #8
    4388:	f7ff ff40 	bl	420c <Connect_send_IdReport>
		break;
    438c:	e00a      	b.n	43a4 <cliFunc_connectCmd+0x58>

	case ScanCode:
	{
		TriggerGuide scanCodes[] = { { 0x00, 0x01, 0x05 }, { 0x00, 0x03, 0x16 } };
    438e:	4b08      	ldr	r3, [pc, #32]	; (43b0 <cliFunc_connectCmd+0x64>)
    4390:	6818      	ldr	r0, [r3, #0]
    4392:	9002      	str	r0, [sp, #8]
    4394:	889b      	ldrh	r3, [r3, #4]
    4396:	f8ad 300c 	strh.w	r3, [sp, #12]
		Connect_send_ScanCode( 10, scanCodes, 2 );
    439a:	200a      	movs	r0, #10
    439c:	a902      	add	r1, sp, #8
    439e:	2202      	movs	r2, #2
    43a0:	f7ff ffa6 	bl	42f0 <Connect_send_ScanCode>
		break;

	default:
		break;
	}
}
    43a4:	b005      	add	sp, #20
    43a6:	f85d fb04 	ldr.w	pc, [sp], #4
    43aa:	bf00      	nop
    43ac:	0000b143 	.word	0x0000b143
    43b0:	00008c6d 	.word	0x00008c6d

000043b4 <Connect_send_RemoteCapability>:

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    43b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    43b8:	f88d 3006 	strb.w	r3, [sp, #6]

	// Ignore current id
	if ( id == Connect_id )
    43bc:	4b2b      	ldr	r3, [pc, #172]	; (446c <Connect_send_RemoteCapability+0xb8>)
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    43be:	f88d 2005 	strb.w	r2, [sp, #5]

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    43c2:	4605      	mov	r5, r0
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };

	// Ignore current id
	if ( id == Connect_id )
    43c4:	781a      	ldrb	r2, [r3, #0]

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    43c6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    43ca:	f88d 5003 	strb.w	r5, [sp, #3]
    43ce:	2016      	movs	r0, #22
    43d0:	f88d 0000 	strb.w	r0, [sp]
    43d4:	2001      	movs	r0, #1
    43d6:	f88d 0001 	strb.w	r0, [sp, #1]

	// Ignore current id
	if ( id == Connect_id )
    43da:	4295      	cmp	r5, r2
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    43dc:	f04f 0006 	mov.w	r0, #6
    43e0:	f88d 0002 	strb.w	r0, [sp, #2]
    43e4:	f88d 1004 	strb.w	r1, [sp, #4]
    43e8:	f88d 7007 	strb.w	r7, [sp, #7]
    43ec:	461e      	mov	r6, r3

	// Ignore current id
	if ( id == Connect_id )
    43ee:	d039      	beq.n	4464 <Connect_send_RemoteCapability+0xb0>
		return;

	// Send towards slave node
	if ( id > Connect_id )
    43f0:	d91c      	bls.n	442c <Connect_send_RemoteCapability+0x78>
	{
		// Lock slave bound Tx
		uart_lockTx( UART_Slave );
    43f2:	4c1f      	ldr	r4, [pc, #124]	; (4470 <Connect_send_RemoteCapability+0xbc>)
    43f4:	7863      	ldrb	r3, [r4, #1]
    43f6:	2b00      	cmp	r3, #0
    43f8:	d1fd      	bne.n	43f6 <Connect_send_RemoteCapability+0x42>
    43fa:	2301      	movs	r3, #1
    43fc:	f894 9000 	ldrb.w	r9, [r4]
    4400:	7063      	strb	r3, [r4, #1]
    4402:	f1b9 0f04 	cmp.w	r9, #4
    4406:	d1fc      	bne.n	4402 <Connect_send_RemoteCapability+0x4e>
    4408:	f04f 0800 	mov.w	r8, #0
    440c:	4668      	mov	r0, sp
    440e:	2108      	movs	r1, #8
    4410:	4642      	mov	r2, r8
    4412:	f884 8000 	strb.w	r8, [r4]
    4416:	f7ff fc9f 	bl	3d58 <Connect_addBytes.part.1>

		// Send header
		Connect_addBytes( header, sizeof( header ), UART_Slave );

		// Send arguments
		Connect_addBytes( args, numArgs, UART_Slave );
    441a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    441c:	4639      	mov	r1, r7
    441e:	4642      	mov	r2, r8
    4420:	f7ff fdb6 	bl	3f90 <Connect_addBytes>

		// Unlock Tx
		uart_unlockTx( UART_Slave );
    4424:	f884 9000 	strb.w	r9, [r4]
    4428:	f884 8001 	strb.w	r8, [r4, #1]
	}

	// Send towards master node
	if ( id < Connect_id || id == 255 )
    442c:	7833      	ldrb	r3, [r6, #0]
    442e:	42ab      	cmp	r3, r5
    4430:	d801      	bhi.n	4436 <Connect_send_RemoteCapability+0x82>
    4432:	2dff      	cmp	r5, #255	; 0xff
    4434:	d116      	bne.n	4464 <Connect_send_RemoteCapability+0xb0>
	{
		// Lock slave bound Tx
		uart_lockTx( UART_Master );
    4436:	4c0e      	ldr	r4, [pc, #56]	; (4470 <Connect_send_RemoteCapability+0xbc>)
    4438:	78e3      	ldrb	r3, [r4, #3]
    443a:	2b00      	cmp	r3, #0
    443c:	d1fd      	bne.n	443a <Connect_send_RemoteCapability+0x86>
    443e:	2301      	movs	r3, #1
    4440:	78a6      	ldrb	r6, [r4, #2]
    4442:	70e3      	strb	r3, [r4, #3]
    4444:	2e04      	cmp	r6, #4
    4446:	d1fd      	bne.n	4444 <Connect_send_RemoteCapability+0x90>
    4448:	2500      	movs	r5, #0
    444a:	4668      	mov	r0, sp
    444c:	2108      	movs	r1, #8
    444e:	2201      	movs	r2, #1
    4450:	70a5      	strb	r5, [r4, #2]
    4452:	f7ff fc81 	bl	3d58 <Connect_addBytes.part.1>

		// Send header
		Connect_addBytes( header, sizeof( header ), UART_Master );

		// Send arguments
		Connect_addBytes( args, numArgs, UART_Master );
    4456:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4458:	4639      	mov	r1, r7
    445a:	2201      	movs	r2, #1
    445c:	f7ff fd98 	bl	3f90 <Connect_addBytes>

		// Unlock Tx
		uart_unlockTx( UART_Master );
    4460:	70a6      	strb	r6, [r4, #2]
    4462:	70e5      	strb	r5, [r4, #3]
	}
}
    4464:	b003      	add	sp, #12
    4466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    446a:	bf00      	nop
    446c:	1fff89c5 	.word	0x1fff89c5
    4470:	1fff9c26 	.word	0x1fff9c26

00004474 <Connect_send_Idle>:

void Connect_send_Idle( uint8_t num )
{
    4474:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    4476:	4c17      	ldr	r4, [pc, #92]	; (44d4 <Connect_send_Idle+0x60>)
    4478:	7862      	ldrb	r2, [r4, #1]
    447a:	78e3      	ldrb	r3, [r4, #3]
		uart_unlockTx( UART_Master );
	}
}

void Connect_send_Idle( uint8_t num )
{
    447c:	4606      	mov	r6, r0
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    447e:	2a00      	cmp	r2, #0
    4480:	d1fd      	bne.n	447e <Connect_send_Idle+0xa>
    4482:	2b00      	cmp	r3, #0
    4484:	d1fd      	bne.n	4482 <Connect_send_Idle+0xe>
    4486:	2301      	movs	r3, #1
    4488:	7063      	strb	r3, [r4, #1]
    448a:	70e3      	strb	r3, [r4, #3]
    448c:	7822      	ldrb	r2, [r4, #0]
    448e:	78a3      	ldrb	r3, [r4, #2]
    4490:	2a04      	cmp	r2, #4
    4492:	d1fd      	bne.n	4490 <Connect_send_Idle+0x1c>
    4494:	2b04      	cmp	r3, #4
    4496:	d1fd      	bne.n	4494 <Connect_send_Idle+0x20>
    4498:	2500      	movs	r5, #0

	// Send n number of idles to reset link status (if in a bad state)
	uint8_t value = 0x16;
    449a:	2316      	movs	r3, #22
}

void Connect_send_Idle( uint8_t num )
{
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    449c:	7025      	strb	r5, [r4, #0]
    449e:	70a5      	strb	r5, [r4, #2]

	// Send n number of idles to reset link status (if in a bad state)
	uint8_t value = 0x16;
    44a0:	f88d 3007 	strb.w	r3, [sp, #7]
	for ( uint8_t c = 0; c < num; c++ )
    44a4:	42b5      	cmp	r5, r6
    44a6:	d00d      	beq.n	44c4 <Connect_send_Idle+0x50>
    44a8:	2101      	movs	r1, #1
    44aa:	460a      	mov	r2, r1
    44ac:	f10d 0007 	add.w	r0, sp, #7
    44b0:	f7ff fc52 	bl	3d58 <Connect_addBytes.part.1>
    44b4:	f10d 0007 	add.w	r0, sp, #7
    44b8:	2101      	movs	r1, #1
    44ba:	2200      	movs	r2, #0
    44bc:	f7ff fc4c 	bl	3d58 <Connect_addBytes.part.1>
    44c0:	3501      	adds	r5, #1
    44c2:	e7ef      	b.n	44a4 <Connect_send_Idle+0x30>
		Connect_addBytes( &value, 1, UART_Master );
		Connect_addBytes( &value, 1, UART_Slave );
	}

	// Release Tx buffers
	uart_unlockTx( UART_Master );
    44c4:	2204      	movs	r2, #4
    44c6:	2300      	movs	r3, #0
    44c8:	70a2      	strb	r2, [r4, #2]
    44ca:	70e3      	strb	r3, [r4, #3]
	uart_unlockTx( UART_Slave );
    44cc:	7022      	strb	r2, [r4, #0]
    44ce:	7063      	strb	r3, [r4, #1]
}
    44d0:	b002      	add	sp, #8
    44d2:	bd70      	pop	{r4, r5, r6, pc}
    44d4:	1fff9c26 	.word	0x1fff9c26

000044d8 <cliFunc_connectIdl>:
	info_msg("Connect Debug Mode Toggle");
	Connect_debug = !Connect_debug;
}

void cliFunc_connectIdl( char* args )
{
    44d8:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    44da:	4669      	mov	r1, sp
    44dc:	aa01      	add	r2, sp, #4
    44de:	f002 fee1 	bl	72a4 <CLI_argumentIsolation>

	print( NL );
    44e2:	4809      	ldr	r0, [pc, #36]	; (4508 <cliFunc_connectIdl+0x30>)
    44e4:	f003 f99e 	bl	7824 <_print>
	info_msg("Sending Sync Idles...");
    44e8:	4808      	ldr	r0, [pc, #32]	; (450c <cliFunc_connectIdl+0x34>)
    44ea:	f003 f99b 	bl	7824 <_print>

	uint8_t count = numToInt( &arg1Ptr[0] );
    44ee:	9800      	ldr	r0, [sp, #0]
    44f0:	f003 fa73 	bl	79da <numToInt>
    44f4:	b2c0      	uxtb	r0, r0
	// Default to 2 idles
	if ( count == 0 )
    44f6:	2800      	cmp	r0, #0
		count = 2;

	Connect_send_Idle( count );
    44f8:	bf08      	it	eq
    44fa:	2002      	moveq	r0, #2
    44fc:	f7ff ffba 	bl	4474 <Connect_send_Idle>
}
    4500:	b003      	add	sp, #12
    4502:	f85d fb04 	ldr.w	pc, [sp], #4
    4506:	bf00      	nop
    4508:	0000b143 	.word	0x0000b143
    450c:	0000913c 	.word	0x0000913c

00004510 <Connect_reset>:

// ----- Functions -----

// Resets the state of the UART buffers and state variables
void Connect_reset()
{
    4510:	b510      	push	{r4, lr}
	// Reset Rx
	memset( (void*)uart_rx_status, 0, sizeof( UARTStatusRx ) * UART_Num_Interfaces );
    4512:	2100      	movs	r1, #0

	// Reset Tx
	memset( (void*)uart_tx_buf,    0, sizeof( UARTRingBuf )  * UART_Num_Interfaces );
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );
    4514:	4c0c      	ldr	r4, [pc, #48]	; (4548 <Connect_reset+0x38>)

// Resets the state of the UART buffers and state variables
void Connect_reset()
{
	// Reset Rx
	memset( (void*)uart_rx_status, 0, sizeof( UARTStatusRx ) * UART_Num_Interfaces );
    4516:	480d      	ldr	r0, [pc, #52]	; (454c <Connect_reset+0x3c>)
    4518:	2208      	movs	r2, #8
    451a:	f7fe f825 	bl	2568 <memset>

	// Reset Tx
	memset( (void*)uart_tx_buf,    0, sizeof( UARTRingBuf )  * UART_Num_Interfaces );
    451e:	2100      	movs	r1, #0
    4520:	f44f 7283 	mov.w	r2, #262	; 0x106
    4524:	480a      	ldr	r0, [pc, #40]	; (4550 <Connect_reset+0x40>)
    4526:	f7fe f81f 	bl	2568 <memset>
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );
    452a:	2100      	movs	r1, #0
    452c:	2204      	movs	r2, #4
    452e:	4620      	mov	r0, r4
    4530:	f7fe f81a 	bl	2568 <memset>

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    4534:	4b07      	ldr	r3, [pc, #28]	; (4554 <Connect_reset+0x44>)
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
    4536:	2104      	movs	r1, #4
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    4538:	2280      	movs	r2, #128	; 0x80
    453a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
    453e:	7021      	strb	r1, [r4, #0]
    4540:	70a1      	strb	r1, [r4, #2]
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    4542:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    4546:	bd10      	pop	{r4, pc}
    4548:	1fff9c26 	.word	0x1fff9c26
    454c:	1fff9c44 	.word	0x1fff9c44
    4550:	1fff9b1a 	.word	0x1fff9b1a
    4554:	1fff9c4c 	.word	0x1fff9c4c

00004558 <cliFunc_connectRst>:
		break;
	}
}

void cliFunc_connectRst( char* args )
{
    4558:	b508      	push	{r3, lr}
	print( NL );
    455a:	4806      	ldr	r0, [pc, #24]	; (4574 <cliFunc_connectRst+0x1c>)
    455c:	f003 f962 	bl	7824 <_print>
	info_msg("Resetting UARTConnect state...");
    4560:	4805      	ldr	r0, [pc, #20]	; (4578 <cliFunc_connectRst+0x20>)
    4562:	f003 f95f 	bl	7824 <_print>
	Connect_reset();
    4566:	f7ff ffd3 	bl	4510 <Connect_reset>

	// Reset node id
	Connect_id = 0xFF;
    456a:	4b04      	ldr	r3, [pc, #16]	; (457c <cliFunc_connectRst+0x24>)
    456c:	22ff      	movs	r2, #255	; 0xff
    456e:	701a      	strb	r2, [r3, #0]
    4570:	bd08      	pop	{r3, pc}
    4572:	bf00      	nop
    4574:	0000b143 	.word	0x0000b143
    4578:	00009164 	.word	0x00009164
    457c:	1fff89c5 	.word	0x1fff89c5

00004580 <Connect_setup>:
// Setup connection to other side
// - Only supports a single slave and master
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
    4580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Indication that UARTs are not ready
	uarts_configured = 0;
    4582:	4e58      	ldr	r6, [pc, #352]	; (46e4 <Connect_setup+0x164>)

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    4584:	4958      	ldr	r1, [pc, #352]	; (46e8 <Connect_setup+0x168>)
// Setup connection to other side
// - Only supports a single slave and master
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
    4586:	4605      	mov	r5, r0
	// Indication that UARTs are not ready
	uarts_configured = 0;
    4588:	2400      	movs	r4, #0

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    458a:	4858      	ldr	r0, [pc, #352]	; (46ec <Connect_setup+0x16c>)
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
	// Indication that UARTs are not ready
	uarts_configured = 0;
    458c:	7034      	strb	r4, [r6, #0]

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    458e:	f002 fefd 	bl	738c <CLI_registerDictionary>

	// Check if master
	Connect_master = master;
    4592:	4b57      	ldr	r3, [pc, #348]	; (46f0 <Connect_setup+0x170>)
    4594:	4630      	mov	r0, r6
    4596:	701d      	strb	r5, [r3, #0]
	if ( Connect_master )
    4598:	b10d      	cbz	r5, 459e <Connect_setup+0x1e>
		Connect_id = 0; // 0x00 is always the master Id
    459a:	4b56      	ldr	r3, [pc, #344]	; (46f4 <Connect_setup+0x174>)
    459c:	701c      	strb	r4, [r3, #0]

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    459e:	4b56      	ldr	r3, [pc, #344]	; (46f8 <Connect_setup+0x178>)
	PORTA_PCR2 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(2); // TX Pin
	PORTE_PCR0 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); // RX Pin
	PORTE_PCR1 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); // TX Pin

	// Baud Rate setting
	UART0_BDH = (uint8_t)(Connect_baud >> 8);
    45a0:	4956      	ldr	r1, [pc, #344]	; (46fc <Connect_setup+0x17c>)
		Connect_id = 0; // 0x00 is always the master Id

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    45a2:	681a      	ldr	r2, [r3, #0]
	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
    45a4:	4d56      	ldr	r5, [pc, #344]	; (4700 <Connect_setup+0x180>)
	// Default control register
	DMA_CR = 0;

	// DMA Priority
	DMA_DCHPRI0 = 0; // Ch 0, priority 0
	DMA_DCHPRI1 = 1; // ch 1, priority 1
    45a6:	4e57      	ldr	r6, [pc, #348]	; (4704 <Connect_setup+0x184>)

	// Clear error interrupts
	DMA_EEI = 0;

	// Setup TCD
	DMA_TCD0_SADDR = (uint32_t*)&UART0_D;
    45a8:	4f57      	ldr	r7, [pc, #348]	; (4708 <Connect_setup+0x188>)
		Connect_id = 0; // 0x00 is always the master Id

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    45aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    45ae:	601a      	str	r2, [r3, #0]
	SIM_SCGC4 |= SIM_SCGC4_UART1; // Disable clock gating
    45b0:	681a      	ldr	r2, [r3, #0]
    45b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    45b6:	601a      	str	r2, [r3, #0]

	// Pin Setup for UART0 / UART1
	PORTA_PCR1 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(2); // RX Pin
    45b8:	f240 2213 	movw	r2, #531	; 0x213
    45bc:	f8c3 2fd0 	str.w	r2, [r3, #4048]	; 0xfd0
	PORTA_PCR2 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(2); // TX Pin
    45c0:	f44f 7211 	mov.w	r2, #580	; 0x244
    45c4:	f8c3 2fd4 	str.w	r2, [r3, #4052]	; 0xfd4
	PORTE_PCR0 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); // RX Pin
    45c8:	4b50      	ldr	r3, [pc, #320]	; (470c <Connect_setup+0x18c>)
    45ca:	f240 3213 	movw	r2, #787	; 0x313
    45ce:	601a      	str	r2, [r3, #0]
	PORTE_PCR1 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); // TX Pin
    45d0:	f44f 7251 	mov.w	r2, #836	; 0x344
    45d4:	605a      	str	r2, [r3, #4]

	// Baud Rate setting
	UART0_BDH = (uint8_t)(Connect_baud >> 8);
    45d6:	4b4e      	ldr	r3, [pc, #312]	; (4710 <Connect_setup+0x190>)
    45d8:	881a      	ldrh	r2, [r3, #0]
    45da:	0a12      	lsrs	r2, r2, #8
    45dc:	700a      	strb	r2, [r1, #0]
	UART0_BDL = (uint8_t)Connect_baud;
    45de:	4a4d      	ldr	r2, [pc, #308]	; (4714 <Connect_setup+0x194>)
    45e0:	7819      	ldrb	r1, [r3, #0]
    45e2:	7011      	strb	r1, [r2, #0]
	UART0_C4  = Connect_baudFine;
    45e4:	494c      	ldr	r1, [pc, #304]	; (4718 <Connect_setup+0x198>)
    45e6:	780c      	ldrb	r4, [r1, #0]
    45e8:	7254      	strb	r4, [r2, #9]
	UART1_BDH = (uint8_t)(Connect_baud >> 8);
    45ea:	881a      	ldrh	r2, [r3, #0]
    45ec:	4c4b      	ldr	r4, [pc, #300]	; (471c <Connect_setup+0x19c>)
    45ee:	0a12      	lsrs	r2, r2, #8
    45f0:	7022      	strb	r2, [r4, #0]
	UART1_BDL = (uint8_t)Connect_baud;
    45f2:	781a      	ldrb	r2, [r3, #0]
    45f4:	4b4a      	ldr	r3, [pc, #296]	; (4720 <Connect_setup+0x1a0>)
    45f6:	701a      	strb	r2, [r3, #0]
	UART1_C4  = Connect_baudFine;
    45f8:	780a      	ldrb	r2, [r1, #0]
    45fa:	725a      	strb	r2, [r3, #9]

	// 8 bit, Even Parity, Idle Character bit after stop
	// NOTE: For 8 bit with Parity you must enable 9 bit transmission (pg. 1065)
	//       You only need to use UART0_D for 8 bit reading/writing though
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    45fc:	4a49      	ldr	r2, [pc, #292]	; (4724 <Connect_setup+0x1a4>)
    45fe:	2316      	movs	r3, #22
    4600:	7013      	strb	r3, [r2, #0]
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    4602:	f502 5280 	add.w	r2, r2, #4096	; 0x1000

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    4606:	2180      	movs	r1, #128	; 0x80
	// 8 bit, Even Parity, Idle Character bit after stop
	// NOTE: For 8 bit with Parity you must enable 9 bit transmission (pg. 1065)
	//       You only need to use UART0_D for 8 bit reading/writing though
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    4608:	7013      	strb	r3, [r2, #0]

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    460a:	4b47      	ldr	r3, [pc, #284]	; (4728 <Connect_setup+0x1a8>)
	UART1_PFIFO = UART_PFIFO_TXFE;

	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    460c:	f5a2 320b 	sub.w	r2, r2, #142336	; 0x22c00
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    4610:	7019      	strb	r1, [r3, #0]
	UART1_PFIFO = UART_PFIFO_TXFE;
    4612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000

	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    4616:	f2a2 32c6 	subw	r2, r2, #966	; 0x3c6
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
	UART1_PFIFO = UART_PFIFO_TXFE;
    461a:	7019      	strb	r1, [r3, #0]

	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    461c:	6813      	ldr	r3, [r2, #0]
    461e:	f043 0302 	orr.w	r3, r3, #2
    4622:	6013      	str	r3, [r2, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    4624:	6853      	ldr	r3, [r2, #4]
    4626:	f043 0302 	orr.w	r3, r3, #2
    462a:	6053      	str	r3, [r2, #4]

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
	DMAMUX0_CHCFG1 = 0;
    462c:	f5a4 2493 	sub.w	r4, r4, #301056	; 0x49800

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    4630:	f5a2 327c 	sub.w	r2, r2, #258048	; 0x3f000
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
	DMAMUX0_CHCFG1 = 0;
    4634:	f2a4 74ff 	subw	r4, r4, #2047	; 0x7ff

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    4638:	3a20      	subs	r2, #32
	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
    463a:	2300      	movs	r3, #0
    463c:	702b      	strb	r3, [r5, #0]
	DMAMUX0_CHCFG1 = 0;
    463e:	7023      	strb	r3, [r4, #0]

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    4640:	8013      	strh	r3, [r2, #0]
	DMA_TCD1_CSR = 0;
    4642:	8413      	strh	r3, [r2, #32]

	// Default control register
	DMA_CR = 0;
    4644:	4a39      	ldr	r2, [pc, #228]	; (472c <Connect_setup+0x1ac>)
    4646:	6013      	str	r3, [r2, #0]

	// DMA Priority
	DMA_DCHPRI0 = 0; // Ch 0, priority 0
    4648:	f882 3103 	strb.w	r3, [r2, #259]	; 0x103
	DMA_DCHPRI1 = 1; // ch 1, priority 1
    464c:	2201      	movs	r2, #1
    464e:	7032      	strb	r2, [r6, #0]

	// Clear error interrupts
	DMA_EEI = 0;
    4650:	f846 3cee 	str.w	r3, [r6, #-238]

	// Setup TCD
	DMA_TCD0_SADDR = (uint32_t*)&UART0_D;
    4654:	f8c6 7efe 	str.w	r7, [r6, #3838]	; 0xefe
    4658:	f606 66fe 	addw	r6, r6, #3838	; 0xefe
	DMA_TCD1_SADDR = (uint32_t*)&UART1_D;
    465c:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
    4660:	6237      	str	r7, [r6, #32]
	DMA_TCD0_SOFF = 0;
    4662:	80b3      	strh	r3, [r6, #4]
	DMA_TCD1_SOFF = 0;
    4664:	84b3      	strh	r3, [r6, #36]	; 0x24

	// No modulo, 8-bit transfer size
	DMA_TCD0_ATTR = DMA_TCD_ATTR_SMOD(0) | DMA_TCD_ATTR_SSIZE(0) | DMA_TCD_ATTR_DMOD(0) | DMA_TCD_ATTR_DSIZE(0);
    4666:	80f3      	strh	r3, [r6, #6]
	DMA_TCD1_ATTR = DMA_TCD_ATTR_SMOD(0) | DMA_TCD_ATTR_SSIZE(0) | DMA_TCD_ATTR_DMOD(0) | DMA_TCD_ATTR_DSIZE(0);
    4668:	84f3      	strh	r3, [r6, #38]	; 0x26

	// One byte transferred at a time
	DMA_TCD0_NBYTES_MLNO = 1;
    466a:	60b2      	str	r2, [r6, #8]
	DMA_TCD1_NBYTES_MLNO = 1;
    466c:	62b2      	str	r2, [r6, #40]	; 0x28

	// Source address does not change
	DMA_TCD0_SLAST = 0;
    466e:	60f3      	str	r3, [r6, #12]
	DMA_TCD1_SLAST = 0;
    4670:	62f3      	str	r3, [r6, #44]	; 0x2c

	// Destination buffer
	DMA_TCD0_DADDR = (uint32_t*)uart_rx_buf[0].buffer;
    4672:	4b2f      	ldr	r3, [pc, #188]	; (4730 <Connect_setup+0x1b0>)
    4674:	6133      	str	r3, [r6, #16]
	DMA_TCD1_DADDR = (uint32_t*)uart_rx_buf[1].buffer;
    4676:	3382      	adds	r3, #130	; 0x82
    4678:	6333      	str	r3, [r6, #48]	; 0x30

	// Incoming byte, increment by 1 in the rx buffer
	DMA_TCD0_DOFF = 1;
    467a:	4b2e      	ldr	r3, [pc, #184]	; (4734 <Connect_setup+0x1b4>)
    467c:	801a      	strh	r2, [r3, #0]
	DMA_TCD1_DOFF = 1;
    467e:	841a      	strh	r2, [r3, #32]

	// Single major loop, must be the same value
	DMA_TCD0_CITER_ELINKNO = UART_Buffer_Size;
    4680:	8059      	strh	r1, [r3, #2]
	DMA_TCD1_CITER_ELINKNO = UART_Buffer_Size;
    4682:	8459      	strh	r1, [r3, #34]	; 0x22
	DMA_TCD0_BITER_ELINKNO = UART_Buffer_Size;
    4684:	8159      	strh	r1, [r3, #10]
	DMA_TCD1_BITER_ELINKNO = UART_Buffer_Size;
    4686:	8559      	strh	r1, [r3, #42]	; 0x2a

	// Reset buffer when full
	DMA_TCD0_DLASTSGA = -( UART_Buffer_Size );
    4688:	492b      	ldr	r1, [pc, #172]	; (4738 <Connect_setup+0x1b8>)
    468a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    468e:	600b      	str	r3, [r1, #0]
	DMA_TCD1_DLASTSGA = -( UART_Buffer_Size );
    4690:	620b      	str	r3, [r1, #32]

	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;
    4692:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    4696:	390c      	subs	r1, #12
    4698:	680b      	ldr	r3, [r1, #0]
    469a:	f043 0303 	orr.w	r3, r3, #3
    469e:	600b      	str	r3, [r1, #0]

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
    46a0:	2382      	movs	r3, #130	; 0x82
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    46a2:	f501 21c3 	add.w	r1, r1, #399360	; 0x61800

	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
    46a6:	702b      	strb	r3, [r5, #0]
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    46a8:	f201 71ff 	addw	r1, r1, #2047	; 0x7ff
	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;
    46ac:	2384      	movs	r3, #132	; 0x84
    46ae:	7023      	strb	r3, [r4, #0]

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    46b0:	2320      	movs	r3, #32
    46b2:	700b      	strb	r3, [r1, #0]
	UART1_C5 = UART_C5_RDMAS;
    46b4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    46b8:	700b      	strb	r3, [r1, #0]

	// TX Enabled, RX Enabled, RX Interrupt Enabled
	UART0_C2 = UART_C2_TE | UART_C2_RE | UART_C2_RIE;
    46ba:	4920      	ldr	r1, [pc, #128]	; (473c <Connect_setup+0x1bc>)
    46bc:	232c      	movs	r3, #44	; 0x2c
    46be:	700b      	strb	r3, [r1, #0]
	UART1_C2 = UART_C2_TE | UART_C2_RE | UART_C2_RIE;
    46c0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    46c4:	700b      	strb	r3, [r1, #0]

	// Add interrupts to the vector table
	NVIC_ENABLE_IRQ( IRQ_UART0_STATUS );
    46c6:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
    46ca:	33d8      	adds	r3, #216	; 0xd8
    46cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    46d0:	6019      	str	r1, [r3, #0]
	NVIC_ENABLE_IRQ( IRQ_UART1_STATUS );
    46d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    46d6:	6019      	str	r1, [r3, #0]

	// UARTs are now ready to go
	uarts_configured = 1;
    46d8:	7002      	strb	r2, [r0, #0]

	// Reset the state of the UART variables
	Connect_reset();
}
    46da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	// UARTs are now ready to go
	uarts_configured = 1;

	// Reset the state of the UART variables
	Connect_reset();
    46de:	f7ff bf17 	b.w	4510 <Connect_reset>
    46e2:	bf00      	nop
    46e4:	1fff8fb5 	.word	0x1fff8fb5
    46e8:	000092df 	.word	0x000092df
    46ec:	00008c74 	.word	0x00008c74
    46f0:	1fff8fce 	.word	0x1fff8fce
    46f4:	1fff89c5 	.word	0x1fff89c5
    46f8:	40048034 	.word	0x40048034
    46fc:	4006a000 	.word	0x4006a000
    4700:	40021000 	.word	0x40021000
    4704:	40008102 	.word	0x40008102
    4708:	4006a007 	.word	0x4006a007
    470c:	4004d000 	.word	0x4004d000
    4710:	1fff89c6 	.word	0x1fff89c6
    4714:	4006a001 	.word	0x4006a001
    4718:	1fff8fb6 	.word	0x1fff8fb6
    471c:	4006b000 	.word	0x4006b000
    4720:	4006b001 	.word	0x4006b001
    4724:	4006a002 	.word	0x4006a002
    4728:	4006a010 	.word	0x4006a010
    472c:	40008000 	.word	0x40008000
    4730:	1fff9c4c 	.word	0x1fff9c4c
    4734:	40009014 	.word	0x40009014
    4738:	40009018 	.word	0x40009018
    473c:	4006a003 	.word	0x4006a003

00004740 <Connect_rx_process>:
#define DMA_BUF_POS( x, pos ) \
	case x: \
		pos = DMA_TCD##x##_CITER_ELINKNO; \
		break
void Connect_rx_process( uint8_t uartNum )
{
    4740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Determine current position to read until
	uint16_t bufpos = 0;
	switch ( uartNum )
    4744:	4604      	mov	r4, r0
    4746:	b118      	cbz	r0, 4750 <Connect_rx_process+0x10>
    4748:	2801      	cmp	r0, #1
    474a:	d105      	bne.n	4758 <Connect_rx_process+0x18>
	{
	DMA_BUF_POS( 0, bufpos );
	DMA_BUF_POS( 1, bufpos );
    474c:	4b5c      	ldr	r3, [pc, #368]	; (48c0 <Connect_rx_process+0x180>)
    474e:	e000      	b.n	4752 <Connect_rx_process+0x12>
{
	// Determine current position to read until
	uint16_t bufpos = 0;
	switch ( uartNum )
	{
	DMA_BUF_POS( 0, bufpos );
    4750:	4b5c      	ldr	r3, [pc, #368]	; (48c4 <Connect_rx_process+0x184>)
	DMA_BUF_POS( 1, bufpos );
    4752:	881e      	ldrh	r6, [r3, #0]
    4754:	b2b6      	uxth	r6, r6
    4756:	e007      	b.n	4768 <Connect_rx_process+0x28>
		pos = DMA_TCD##x##_CITER_ELINKNO; \
		break
void Connect_rx_process( uint8_t uartNum )
{
	// Determine current position to read until
	uint16_t bufpos = 0;
    4758:	2600      	movs	r6, #0
    475a:	e005      	b.n	4768 <Connect_rx_process+0x28>
			break;
		}

		// Unknown status, should never get here
		default:
			erro_msg("Invalid UARTStatus...");
    475c:	485a      	ldr	r0, [pc, #360]	; (48c8 <Connect_rx_process+0x188>)
    475e:	f003 f861 	bl	7824 <_print>
			uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    4762:	2300      	movs	r3, #0
    4764:	f807 3024 	strb.w	r3, [r7, r4, lsl #2]
	DMA_BUF_POS( 1, bufpos );
	}

	// Process each of the new bytes
	// Even if we receive more bytes during processing, wait until the next check so we don't starve other tasks
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
    4768:	4d58      	ldr	r5, [pc, #352]	; (48cc <Connect_rx_process+0x18c>)
    476a:	2382      	movs	r3, #130	; 0x82
    476c:	fb03 5304 	mla	r3, r3, r4, r5
    4770:	4629      	mov	r1, r5
    4772:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
    4776:	b292      	uxth	r2, r2
    4778:	4296      	cmp	r6, r2
    477a:	f000 809f 	beq.w	48bc <Connect_rx_process+0x17c>
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
    477e:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
    4782:	b292      	uxth	r2, r2
    4784:	b1e2      	cbz	r2, 47c0 <Connect_rx_process+0x80>
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    4786:	2382      	movs	r3, #130	; 0x82
    4788:	fb03 f004 	mul.w	r0, r3, r4
    478c:	4401      	add	r1, r0

		if ( Connect_debug )
    478e:	f8df 8164 	ldr.w	r8, [pc, #356]	; 48f4 <Connect_rx_process+0x1b4>
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    4792:	f8b1 2080 	ldrh.w	r2, [r1, #128]	; 0x80
    4796:	b293      	uxth	r3, r2
    4798:	1e5a      	subs	r2, r3, #1
    479a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
    479e:	4403      	add	r3, r0
    47a0:	b292      	uxth	r2, r2
    47a2:	f8a1 2080 	strh.w	r2, [r1, #128]	; 0x80
    47a6:	5ced      	ldrb	r5, [r5, r3]

		if ( Connect_debug )
    47a8:	f898 3000 	ldrb.w	r3, [r8]
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    47ac:	b2ed      	uxtb	r5, r5

		if ( Connect_debug )
    47ae:	b173      	cbz	r3, 47ce <Connect_rx_process+0x8e>
		{
			printHex( byte );
    47b0:	4628      	mov	r0, r5
    47b2:	2101      	movs	r1, #1
    47b4:	f003 f8b9 	bl	792a <printHex_op>
			print(" ");
    47b8:	4845      	ldr	r0, [pc, #276]	; (48d0 <Connect_rx_process+0x190>)
    47ba:	f003 f833 	bl	7824 <_print>
    47be:	e006      	b.n	47ce <Connect_rx_process+0x8e>
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
		{
			uart_rx_buf[ uartNum ].last_read = UART_Buffer_Size;
    47c0:	2280      	movs	r2, #128	; 0x80

			// Check to see if we're at the boundary
			if ( bufpos == UART_Buffer_Size )
    47c2:	4296      	cmp	r6, r2
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
		{
			uart_rx_buf[ uartNum ].last_read = UART_Buffer_Size;
    47c4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

			// Check to see if we're at the boundary
			if ( bufpos == UART_Buffer_Size )
    47c8:	d1dd      	bne.n	4786 <Connect_rx_process+0x46>
    47ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			printHex( byte );
			print(" ");
		}

		// Process UART byte
		switch ( uart_rx_status[ uartNum ].status )
    47ce:	4f41      	ldr	r7, [pc, #260]	; (48d4 <Connect_rx_process+0x194>)
    47d0:	f817 3024 	ldrb.w	r3, [r7, r4, lsl #2]
    47d4:	46b9      	mov	r9, r7
    47d6:	2b03      	cmp	r3, #3
    47d8:	d8c0      	bhi.n	475c <Connect_rx_process+0x1c>
    47da:	e8df f003 	tbb	[pc, r3]
    47de:	0f02      	.short	0x0f02
    47e0:	511a      	.short	0x511a
		{
		// Every packet must start with a SYN / 0x16
		case UARTStatus_Wait:
			if ( Connect_debug )
    47e2:	f898 3000 	ldrb.w	r3, [r8]
    47e6:	b113      	cbz	r3, 47ee <Connect_rx_process+0xae>
			{
				print(" Wait ");
    47e8:	483b      	ldr	r0, [pc, #236]	; (48d8 <Connect_rx_process+0x198>)
    47ea:	f003 f81b 	bl	7824 <_print>
			}
			uart_rx_status[ uartNum ].status = byte == 0x16 ? UARTStatus_SYN : UARTStatus_Wait;
    47ee:	f1a5 0316 	sub.w	r3, r5, #22
    47f2:	425d      	negs	r5, r3
    47f4:	415d      	adcs	r5, r3
    47f6:	f807 5024 	strb.w	r5, [r7, r4, lsl #2]
			break;
    47fa:	e056      	b.n	48aa <Connect_rx_process+0x16a>

		// After a SYN, there must be a SOH / 0x01
		case UARTStatus_SYN:
			if ( Connect_debug )
    47fc:	f898 3000 	ldrb.w	r3, [r8]
    4800:	b113      	cbz	r3, 4808 <Connect_rx_process+0xc8>
			{
				print(" SYN ");
    4802:	4836      	ldr	r0, [pc, #216]	; (48dc <Connect_rx_process+0x19c>)
    4804:	f003 f80e 	bl	7824 <_print>
			}
			uart_rx_status[ uartNum ].status = byte == 0x01 ? UARTStatus_SOH : UARTStatus_Wait;
    4808:	2d01      	cmp	r5, #1
    480a:	bf0c      	ite	eq
    480c:	2302      	moveq	r3, #2
    480e:	2300      	movne	r3, #0
    4810:	e008      	b.n	4824 <Connect_rx_process+0xe4>
		// After a SOH the packet structure may diverge a bit
		// This is the packet type field (refer to the Command enum)
		// For very small packets (e.g. IdRequest) this is all that's required to take action
		case UARTStatus_SOH:
		{
			if ( Connect_debug )
    4812:	f898 3000 	ldrb.w	r3, [r8]
    4816:	b113      	cbz	r3, 481e <Connect_rx_process+0xde>
			{
				print(" SOH ");
    4818:	4831      	ldr	r0, [pc, #196]	; (48e0 <Connect_rx_process+0x1a0>)
    481a:	f003 f803 	bl	7824 <_print>
			}

			// Check if this is actually a reserved CMD 0x16 (Error condition)
			if ( byte == Command_SYN )
    481e:	2d16      	cmp	r5, #22
    4820:	d103      	bne.n	482a <Connect_rx_process+0xea>
			{
				uart_rx_status[ uartNum ].status = UARTStatus_SYN;
    4822:	2301      	movs	r3, #1
    4824:	f807 3024 	strb.w	r3, [r7, r4, lsl #2]
				break;
    4828:	e03f      	b.n	48aa <Connect_rx_process+0x16a>
			}

			// Otherwise process the command
			if ( byte < Command_TOP )
    482a:	2d08      	cmp	r5, #8
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
    482c:	bf98      	it	ls
    482e:	2303      	movls	r3, #3
    4830:	ea4f 0184 	mov.w	r1, r4, lsl #2
    4834:	bf97      	itett	ls
    4836:	f807 3024 	strbls.w	r3, [r7, r4, lsl #2]
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
			}
			// Invalid packet type, ignore
			else
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    483a:	2300      	movhi	r3, #0

			// Otherwise process the command
			if ( byte < Command_TOP )
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
				uart_rx_status[ uartNum ].command = byte;
    483c:	eb09 0301 	addls.w	r3, r9, r1
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
    4840:	f64f 72ff 	movwls	r2, #65535	; 0xffff
			}
			// Invalid packet type, ignore
			else
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    4844:	bf88      	it	hi
    4846:	f807 3024 	strbhi.w	r3, [r7, r4, lsl #2]
			}

			// Check if this is a very short packet
			switch ( uart_rx_status[ uartNum ].command )
    484a:	4489      	add	r9, r1

			// Otherwise process the command
			if ( byte < Command_TOP )
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
				uart_rx_status[ uartNum ].command = byte;
    484c:	bf9c      	itt	ls
    484e:	705d      	strbls	r5, [r3, #1]
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
    4850:	805a      	strhls	r2, [r3, #2]
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
			}

			// Check if this is a very short packet
			switch ( uart_rx_status[ uartNum ].command )
    4852:	f899 3001 	ldrb.w	r3, [r9, #1]
    4856:	2b01      	cmp	r3, #1
    4858:	d106      	bne.n	4868 <Connect_rx_process+0x128>
			{
			case IdRequest:
				Connect_receive_IdRequest( 0, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum );
    485a:	f109 0102 	add.w	r1, r9, #2
    485e:	4622      	mov	r2, r4
    4860:	2000      	movs	r0, #0
    4862:	f7ff fcb7 	bl	41d4 <Connect_receive_IdRequest>
    4866:	e01c      	b.n	48a2 <Connect_rx_process+0x162>
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
				break;

			default:
				if ( Connect_debug )
    4868:	f898 3000 	ldrb.w	r3, [r8]
    486c:	b1eb      	cbz	r3, 48aa <Connect_rx_process+0x16a>
				{
					print(" ### ");
    486e:	481d      	ldr	r0, [pc, #116]	; (48e4 <Connect_rx_process+0x1a4>)
    4870:	f002 ffd8 	bl	7824 <_print>
					printHex( uart_rx_status[ uartNum ].command );
    4874:	f899 0001 	ldrb.w	r0, [r9, #1]
    4878:	2101      	movs	r1, #1
    487a:	f003 f856 	bl	792a <printHex_op>
    487e:	e014      	b.n	48aa <Connect_rx_process+0x16a>

		// After the packet type has been deciphered do Command specific processing
		// Until the Command has received all the bytes it requires the UART buffer stays in this state
		case UARTStatus_Command:
		{
			if ( Connect_debug )
    4880:	f898 3000 	ldrb.w	r3, [r8]
    4884:	b113      	cbz	r3, 488c <Connect_rx_process+0x14c>
			{
				print(" CMD ");
    4886:	4818      	ldr	r0, [pc, #96]	; (48e8 <Connect_rx_process+0x1a8>)
    4888:	f002 ffcc 	bl	7824 <_print>
			}
			/* Call specific UARTConnect command receive function */
			uint8_t (*rcvFunc)(uint8_t, uint16_t(*), uint8_t) = (uint8_t(*)(uint8_t, uint16_t(*), uint8_t))(Connect_receiveFunctions[ uart_rx_status[ uartNum ].command ]);
    488c:	eb09 0184 	add.w	r1, r9, r4, lsl #2
			if ( rcvFunc( byte, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum ) )
    4890:	4b16      	ldr	r3, [pc, #88]	; (48ec <Connect_rx_process+0x1ac>)
			if ( Connect_debug )
			{
				print(" CMD ");
			}
			/* Call specific UARTConnect command receive function */
			uint8_t (*rcvFunc)(uint8_t, uint16_t(*), uint8_t) = (uint8_t(*)(uint8_t, uint16_t(*), uint8_t))(Connect_receiveFunctions[ uart_rx_status[ uartNum ].command ]);
    4892:	784a      	ldrb	r2, [r1, #1]
			if ( rcvFunc( byte, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum ) )
    4894:	4628      	mov	r0, r5
    4896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    489a:	3102      	adds	r1, #2
    489c:	4622      	mov	r2, r4
    489e:	4798      	blx	r3
    48a0:	b118      	cbz	r0, 48aa <Connect_rx_process+0x16a>
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    48a2:	4b0c      	ldr	r3, [pc, #48]	; (48d4 <Connect_rx_process+0x194>)
    48a4:	2200      	movs	r2, #0
    48a6:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
			erro_msg("Invalid UARTStatus...");
			uart_rx_status[ uartNum ].status = UARTStatus_Wait;
			continue;
		}

		if ( Connect_debug )
    48aa:	f898 3000 	ldrb.w	r3, [r8]
    48ae:	2b00      	cmp	r3, #0
    48b0:	f43f af5a 	beq.w	4768 <Connect_rx_process+0x28>
		{
			print( NL );
    48b4:	480e      	ldr	r0, [pc, #56]	; (48f0 <Connect_rx_process+0x1b0>)
    48b6:	f002 ffb5 	bl	7824 <_print>
    48ba:	e755      	b.n	4768 <Connect_rx_process+0x28>
    48bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    48c0:	40009036 	.word	0x40009036
    48c4:	40009016 	.word	0x40009016
    48c8:	000091b4 	.word	0x000091b4
    48cc:	1fff9c4c 	.word	0x1fff9c4c
    48d0:	0000816a 	.word	0x0000816a
    48d4:	1fff9c44 	.word	0x1fff9c44
    48d8:	00009195 	.word	0x00009195
    48dc:	0000919c 	.word	0x0000919c
    48e0:	000091a2 	.word	0x000091a2
    48e4:	000091a8 	.word	0x000091a8
    48e8:	000091ae 	.word	0x000091ae
    48ec:	1fff89c8 	.word	0x1fff89c8
    48f0:	0000b143 	.word	0x0000b143
    48f4:	1fff8fc5 	.word	0x1fff8fc5

000048f8 <Connect_scan>:
// - Interrupts will deal with most input functions
// - Used to send queries
// - SyncEvent is sent immediately once the current command is sent
// - SyncEvent is also blocking until sent
void Connect_scan()
{
    48f8:	b570      	push	{r4, r5, r6, lr}
	// Check if initially configured as a slave and usb comes up
	// Then reconfigure as a master
	if ( !Connect_master && Output_Available && !Connect_override )
    48fa:	4b63      	ldr	r3, [pc, #396]	; (4a88 <Connect_scan+0x190>)
    48fc:	781a      	ldrb	r2, [r3, #0]
    48fe:	461c      	mov	r4, r3
    4900:	b942      	cbnz	r2, 4914 <Connect_scan+0x1c>
    4902:	4b62      	ldr	r3, [pc, #392]	; (4a8c <Connect_scan+0x194>)
    4904:	781a      	ldrb	r2, [r3, #0]
    4906:	b12a      	cbz	r2, 4914 <Connect_scan+0x1c>
    4908:	4a61      	ldr	r2, [pc, #388]	; (4a90 <Connect_scan+0x198>)
    490a:	7812      	ldrb	r2, [r2, #0]
    490c:	b912      	cbnz	r2, 4914 <Connect_scan+0x1c>
	{
		Connect_setup( Output_Available );
    490e:	7818      	ldrb	r0, [r3, #0]
    4910:	f7ff fe36 	bl	4580 <Connect_setup>
	}

	// Limit how often we do cable checks
	uint32_t time_compare = 0x7FF; // Must be all 1's, 0x3FF is valid, 0x4FF is not
	uint32_t current_time = systick_millis_count;
    4914:	4b5f      	ldr	r3, [pc, #380]	; (4a94 <Connect_scan+0x19c>)
	if ( Connect_lastCheck != current_time
    4916:	4a60      	ldr	r2, [pc, #384]	; (4a98 <Connect_scan+0x1a0>)
		Connect_setup( Output_Available );
	}

	// Limit how often we do cable checks
	uint32_t time_compare = 0x7FF; // Must be all 1's, 0x3FF is valid, 0x4FF is not
	uint32_t current_time = systick_millis_count;
    4918:	681b      	ldr	r3, [r3, #0]
	if ( Connect_lastCheck != current_time
    491a:	6811      	ldr	r1, [r2, #0]
    491c:	4299      	cmp	r1, r3
    491e:	d014      	beq.n	494a <Connect_scan+0x52>
		&& ( current_time & time_compare ) == time_compare
    4920:	f3c3 000a 	ubfx	r0, r3, #0, #11
    4924:	f240 71ff 	movw	r1, #2047	; 0x7ff
    4928:	4288      	cmp	r0, r1
    492a:	d10e      	bne.n	494a <Connect_scan+0x52>
	{
		// Make sure we don't double check if the clock speed is too high
		Connect_lastCheck = current_time;

		// Send a cable check command of 2 bytes
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    492c:	2002      	movs	r0, #2
	if ( Connect_lastCheck != current_time
		&& ( current_time & time_compare ) == time_compare
	)
	{
		// Make sure we don't double check if the clock speed is too high
		Connect_lastCheck = current_time;
    492e:	6013      	str	r3, [r2, #0]

		// Send a cable check command of 2 bytes
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    4930:	f7ff fbc8 	bl	40c4 <Connect_send_CableCheck>

		// If this is a slave, and we don't have an id yeth
		// Don't bother sending if there are cable issues
		if ( !Connect_master && Connect_id == 0xFF && Connect_cableOkMaster )
    4934:	7823      	ldrb	r3, [r4, #0]
    4936:	b943      	cbnz	r3, 494a <Connect_scan+0x52>
    4938:	4b58      	ldr	r3, [pc, #352]	; (4a9c <Connect_scan+0x1a4>)
    493a:	781b      	ldrb	r3, [r3, #0]
    493c:	2bff      	cmp	r3, #255	; 0xff
    493e:	d104      	bne.n	494a <Connect_scan+0x52>
    4940:	4b57      	ldr	r3, [pc, #348]	; (4aa0 <Connect_scan+0x1a8>)
    4942:	781b      	ldrb	r3, [r3, #0]
    4944:	b10b      	cbz	r3, 494a <Connect_scan+0x52>
		{
			Connect_send_IdRequest();
    4946:	f7ff fc03 	bl	4150 <Connect_send_IdRequest>
		}
	}

	// Only process commands if uarts have been configured
	if ( uarts_configured )
    494a:	4b56      	ldr	r3, [pc, #344]	; (4aa4 <Connect_scan+0x1ac>)
    494c:	781b      	ldrb	r3, [r3, #0]
    494e:	2b00      	cmp	r3, #0
    4950:	f000 8098 	beq.w	4a84 <Connect_scan+0x18c>
	{
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
    4954:	4d54      	ldr	r5, [pc, #336]	; (4aa8 <Connect_scan+0x1b0>)
    4956:	78ab      	ldrb	r3, [r5, #2]
    4958:	b923      	cbnz	r3, 4964 <Connect_scan+0x6c>
			uart_fillTxFifo( 0 );
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
    495a:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    495e:	2b00      	cmp	r3, #0
    4960:	d142      	bne.n	49e8 <Connect_scan+0xf0>
    4962:	e044      	b.n	49ee <Connect_scan+0xf6>
	// Only process commands if uarts have been configured
	if ( uarts_configured )
	{
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
    4964:	4e51      	ldr	r6, [pc, #324]	; (4aac <Connect_scan+0x1b4>)
    4966:	7833      	ldrb	r3, [r6, #0]
    4968:	2b00      	cmp	r3, #0
    496a:	d1f6      	bne.n	495a <Connect_scan+0x62>
			uart_fillTxFifo( 0 );
    496c:	4b50      	ldr	r3, [pc, #320]	; (4ab0 <Connect_scan+0x1b8>)
    496e:	781b      	ldrb	r3, [r3, #0]
    4970:	f003 0370 	and.w	r3, r3, #112	; 0x70
    4974:	109c      	asrs	r4, r3, #2
    4976:	b10b      	cbz	r3, 497c <Connect_scan+0x84>
    4978:	b2e4      	uxtb	r4, r4
    497a:	e000      	b.n	497e <Connect_scan+0x86>
    497c:	2401      	movs	r4, #1
    497e:	4b4d      	ldr	r3, [pc, #308]	; (4ab4 <Connect_scan+0x1bc>)
    4980:	781b      	ldrb	r3, [r3, #0]
    4982:	b1bb      	cbz	r3, 49b4 <Connect_scan+0xbc>
    4984:	484c      	ldr	r0, [pc, #304]	; (4ab8 <Connect_scan+0x1c0>)
    4986:	f002 ff4d 	bl	7824 <_print>
    498a:	2101      	movs	r1, #1
    498c:	4620      	mov	r0, r4
    498e:	f002 ffcc 	bl	792a <printHex_op>
    4992:	484a      	ldr	r0, [pc, #296]	; (4abc <Connect_scan+0x1c4>)
    4994:	f002 ff46 	bl	7824 <_print>
    4998:	2101      	movs	r1, #1
    499a:	7830      	ldrb	r0, [r6, #0]
    499c:	f002 ffc5 	bl	792a <printHex_op>
    49a0:	4846      	ldr	r0, [pc, #280]	; (4abc <Connect_scan+0x1c4>)
    49a2:	f002 ff3f 	bl	7824 <_print>
    49a6:	78a8      	ldrb	r0, [r5, #2]
    49a8:	2101      	movs	r1, #1
    49aa:	f002 ffbe 	bl	792a <printHex_op>
    49ae:	4844      	ldr	r0, [pc, #272]	; (4ac0 <Connect_scan+0x1c8>)
    49b0:	f002 ff38 	bl	7824 <_print>
    49b4:	7833      	ldrb	r3, [r6, #0]
    49b6:	1ae4      	subs	r4, r4, r3
    49b8:	b2e4      	uxtb	r4, r4
    49ba:	2c00      	cmp	r4, #0
    49bc:	d0cd      	beq.n	495a <Connect_scan+0x62>
    49be:	78aa      	ldrb	r2, [r5, #2]
    49c0:	4b39      	ldr	r3, [pc, #228]	; (4aa8 <Connect_scan+0x1b0>)
    49c2:	2a00      	cmp	r2, #0
    49c4:	d0c9      	beq.n	495a <Connect_scan+0x62>
    49c6:	7819      	ldrb	r1, [r3, #0]
    49c8:	1c48      	adds	r0, r1, #1
    49ca:	4419      	add	r1, r3
    49cc:	7018      	strb	r0, [r3, #0]
    49ce:	78c8      	ldrb	r0, [r1, #3]
    49d0:	493c      	ldr	r1, [pc, #240]	; (4ac4 <Connect_scan+0x1cc>)
    49d2:	3a01      	subs	r2, #1
    49d4:	7008      	strb	r0, [r1, #0]
    49d6:	709a      	strb	r2, [r3, #2]
    49d8:	f993 2000 	ldrsb.w	r2, [r3]
    49dc:	2a00      	cmp	r2, #0
    49de:	bfbc      	itt	lt
    49e0:	2200      	movlt	r2, #0
    49e2:	701a      	strblt	r2, [r3, #0]
    49e4:	3c01      	subs	r4, #1
    49e6:	e7e7      	b.n	49b8 <Connect_scan+0xc0>
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
    49e8:	4e37      	ldr	r6, [pc, #220]	; (4ac8 <Connect_scan+0x1d0>)
    49ea:	7833      	ldrb	r3, [r6, #0]
    49ec:	b13b      	cbz	r3, 49fe <Connect_scan+0x106>
			uart_fillTxFifo( 1 );

		// Process Rx Buffers
		Connect_rx_process( 0 );
    49ee:	2000      	movs	r0, #0
    49f0:	f7ff fea6 	bl	4740 <Connect_rx_process>
		Connect_rx_process( 1 );
    49f4:	2001      	movs	r0, #1
	}
}
    49f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
			uart_fillTxFifo( 1 );

		// Process Rx Buffers
		Connect_rx_process( 0 );
		Connect_rx_process( 1 );
    49fa:	f7ff bea1 	b.w	4740 <Connect_rx_process>
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
			uart_fillTxFifo( 0 );
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
			uart_fillTxFifo( 1 );
    49fe:	4b33      	ldr	r3, [pc, #204]	; (4acc <Connect_scan+0x1d4>)
    4a00:	781b      	ldrb	r3, [r3, #0]
    4a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
    4a06:	109c      	asrs	r4, r3, #2
    4a08:	b10b      	cbz	r3, 4a0e <Connect_scan+0x116>
    4a0a:	b2e4      	uxtb	r4, r4
    4a0c:	e000      	b.n	4a10 <Connect_scan+0x118>
    4a0e:	2401      	movs	r4, #1
    4a10:	4b28      	ldr	r3, [pc, #160]	; (4ab4 <Connect_scan+0x1bc>)
    4a12:	781b      	ldrb	r3, [r3, #0]
    4a14:	b1c3      	cbz	r3, 4a48 <Connect_scan+0x150>
    4a16:	482e      	ldr	r0, [pc, #184]	; (4ad0 <Connect_scan+0x1d8>)
    4a18:	f002 ff04 	bl	7824 <_print>
    4a1c:	2101      	movs	r1, #1
    4a1e:	4620      	mov	r0, r4
    4a20:	f002 ff83 	bl	792a <printHex_op>
    4a24:	4825      	ldr	r0, [pc, #148]	; (4abc <Connect_scan+0x1c4>)
    4a26:	f002 fefd 	bl	7824 <_print>
    4a2a:	2101      	movs	r1, #1
    4a2c:	7830      	ldrb	r0, [r6, #0]
    4a2e:	f002 ff7c 	bl	792a <printHex_op>
    4a32:	4822      	ldr	r0, [pc, #136]	; (4abc <Connect_scan+0x1c4>)
    4a34:	f002 fef6 	bl	7824 <_print>
    4a38:	f895 0085 	ldrb.w	r0, [r5, #133]	; 0x85
    4a3c:	2101      	movs	r1, #1
    4a3e:	f002 ff74 	bl	792a <printHex_op>
    4a42:	481f      	ldr	r0, [pc, #124]	; (4ac0 <Connect_scan+0x1c8>)
    4a44:	f002 feee 	bl	7824 <_print>
    4a48:	7833      	ldrb	r3, [r6, #0]
    4a4a:	1ae4      	subs	r4, r4, r3
    4a4c:	b2e4      	uxtb	r4, r4
    4a4e:	2c00      	cmp	r4, #0
    4a50:	d0cd      	beq.n	49ee <Connect_scan+0xf6>
    4a52:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    4a56:	4b14      	ldr	r3, [pc, #80]	; (4aa8 <Connect_scan+0x1b0>)
    4a58:	2a00      	cmp	r2, #0
    4a5a:	d0c8      	beq.n	49ee <Connect_scan+0xf6>
    4a5c:	f893 1083 	ldrb.w	r1, [r3, #131]	; 0x83
    4a60:	1c48      	adds	r0, r1, #1
    4a62:	4419      	add	r1, r3
    4a64:	3a01      	subs	r2, #1
    4a66:	f891 6086 	ldrb.w	r6, [r1, #134]	; 0x86
    4a6a:	491a      	ldr	r1, [pc, #104]	; (4ad4 <Connect_scan+0x1dc>)
    4a6c:	f883 0083 	strb.w	r0, [r3, #131]	; 0x83
    4a70:	700e      	strb	r6, [r1, #0]
    4a72:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    4a76:	0602      	lsls	r2, r0, #24
    4a78:	bf44      	itt	mi
    4a7a:	2200      	movmi	r2, #0
    4a7c:	f883 2083 	strbmi.w	r2, [r3, #131]	; 0x83
    4a80:	3c01      	subs	r4, #1
    4a82:	e7e3      	b.n	4a4c <Connect_scan+0x154>
    4a84:	bd70      	pop	{r4, r5, r6, pc}
    4a86:	bf00      	nop
    4a88:	1fff8fce 	.word	0x1fff8fce
    4a8c:	1fff910e 	.word	0x1fff910e
    4a90:	1fff8fcd 	.word	0x1fff8fcd
    4a94:	1fff8f9c 	.word	0x1fff8f9c
    4a98:	1fff8fb0 	.word	0x1fff8fb0
    4a9c:	1fff89c5 	.word	0x1fff89c5
    4aa0:	1fff8fb4 	.word	0x1fff8fb4
    4aa4:	1fff8fb5 	.word	0x1fff8fb5
    4aa8:	1fff9b1a 	.word	0x1fff9b1a
    4aac:	4006a014 	.word	0x4006a014
    4ab0:	4006a010 	.word	0x4006a010
    4ab4:	1fff8fc5 	.word	0x1fff8fc5
    4ab8:	000091df 	.word	0x000091df
    4abc:	00008e80 	.word	0x00008e80
    4ac0:	0000b143 	.word	0x0000b143
    4ac4:	4006a007 	.word	0x4006a007
    4ac8:	4006b014 	.word	0x4006b014
    4acc:	4006b010 	.word	0x4006b010
    4ad0:	000091eb 	.word	0x000091eb
    4ad4:	4006b007 	.word	0x4006b007

00004ad8 <Scan_setup>:

// ----- Functions -----

// Setup
inline void Scan_setup()
{
    4ad8:	b508      	push	{r3, lr}
	// Setup UART Connect, if Output_Available, this is the master node
	Connect_setup( Output_Available );
    4ada:	4b07      	ldr	r3, [pc, #28]	; (4af8 <Scan_setup+0x20>)
    4adc:	7818      	ldrb	r0, [r3, #0]
    4ade:	f7ff fd4f 	bl	4580 <Connect_setup>

	// Setup GPIO pins for matrix scanning
	Matrix_setup();
    4ae2:	f7fe fad1 	bl	3088 <Matrix_setup>

	// Setup ISSI chip to control the leds
	LED_setup();
    4ae6:	f7fd ffb3 	bl	2a50 <LED_setup>

	// Setup the ST/NHD lcd display
	LCD_setup();
    4aea:	f7fe fe15 	bl	3718 <LCD_setup>

	// Reset scan count
	Scan_scanCount = 0;
    4aee:	4b03      	ldr	r3, [pc, #12]	; (4afc <Scan_setup+0x24>)
    4af0:	2200      	movs	r2, #0
    4af2:	801a      	strh	r2, [r3, #0]
    4af4:	bd08      	pop	{r3, pc}
    4af6:	bf00      	nop
    4af8:	1fff910e 	.word	0x1fff910e
    4afc:	1fff8fd0 	.word	0x1fff8fd0

00004b00 <Scan_loop>:
}


// Main Detection Loop
inline uint8_t Scan_loop()
{
    4b00:	b508      	push	{r3, lr}
	// Scan Matrix
	Matrix_scan( Scan_scanCount++ );
    4b02:	4b07      	ldr	r3, [pc, #28]	; (4b20 <Scan_loop+0x20>)
    4b04:	8818      	ldrh	r0, [r3, #0]
    4b06:	1c42      	adds	r2, r0, #1
    4b08:	801a      	strh	r2, [r3, #0]
    4b0a:	f7fe fb4b 	bl	31a4 <Matrix_scan>

	// Process any interconnect commands
	Connect_scan();
    4b0e:	f7ff fef3 	bl	48f8 <Connect_scan>

	// Process any LED events
	LED_scan();
    4b12:	f7fe f94c 	bl	2dae <LED_scan>

	// Process any LCD events
	LCD_scan();
    4b16:	f7fe fe89 	bl	382c <LCD_scan>

	return 0;
}
    4b1a:	2000      	movs	r0, #0
    4b1c:	bd08      	pop	{r3, pc}
    4b1e:	bf00      	nop
    4b20:	1fff8fd0 	.word	0x1fff8fd0

00004b24 <Scan_finishedWithMacro>:


// Signal from Macro Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithMacro( uint8_t sentKeys )
{
    4b24:	4770      	bx	lr
    4b26:	0000      	movs	r0, r0

00004b28 <Scan_finishedWithOutput>:
// Signal from Output Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithOutput( uint8_t sentKeys )
{
	// Reset scan loop indicator (resets each key debounce state)
	// TODO should this occur after USB send or Macro processing?
	Scan_scanCount = 0;
    4b28:	4b01      	ldr	r3, [pc, #4]	; (4b30 <Scan_finishedWithOutput+0x8>)
    4b2a:	2200      	movs	r2, #0
    4b2c:	801a      	strh	r2, [r3, #0]
    4b2e:	4770      	bx	lr
    4b30:	1fff8fd0 	.word	0x1fff8fd0

00004b34 <cliFunc_capList>:


// ----- CLI Command Functions -----

void cliFunc_capList( char* args )
{
    4b34:	b510      	push	{r4, lr}
	print( NL );
    4b36:	4810      	ldr	r0, [pc, #64]	; (4b78 <cliFunc_capList+0x44>)
    4b38:	f002 fe74 	bl	7824 <_print>
	info_msg("Capabilities List ");
    4b3c:	480f      	ldr	r0, [pc, #60]	; (4b7c <cliFunc_capList+0x48>)
    4b3e:	f002 fe71 	bl	7824 <_print>
	printHex( CapabilitiesNum );
    4b42:	200f      	movs	r0, #15
    4b44:	2101      	movs	r1, #1
    4b46:	f002 fef0 	bl	792a <printHex_op>
    4b4a:	2400      	movs	r4, #0

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
	{
		print( NL "\t" );
    4b4c:	480c      	ldr	r0, [pc, #48]	; (4b80 <cliFunc_capList+0x4c>)
    4b4e:	f002 fe69 	bl	7824 <_print>
		printHex( cap );
    4b52:	b2a0      	uxth	r0, r4
    4b54:	2101      	movs	r1, #1
    4b56:	f002 fee8 	bl	792a <printHex_op>
		print(" - ");
    4b5a:	480a      	ldr	r0, [pc, #40]	; (4b84 <cliFunc_capList+0x50>)
    4b5c:	f002 fe62 	bl	7824 <_print>

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
    4b60:	4b09      	ldr	r3, [pc, #36]	; (4b88 <cliFunc_capList+0x54>)
		capability( 0xFF, 0xFF, 0 );
    4b62:	20ff      	movs	r0, #255	; 0xff
    4b64:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
    4b68:	4601      	mov	r1, r0
    4b6a:	2200      	movs	r2, #0
    4b6c:	3401      	adds	r4, #1
    4b6e:	4798      	blx	r3
	print( NL );
	info_msg("Capabilities List ");
	printHex( CapabilitiesNum );

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
    4b70:	2c0f      	cmp	r4, #15
    4b72:	d1eb      	bne.n	4b4c <cliFunc_capList+0x18>

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
		capability( 0xFF, 0xFF, 0 );
	}
}
    4b74:	bd10      	pop	{r4, pc}
    4b76:	bf00      	nop
    4b78:	0000b143 	.word	0x0000b143
    4b7c:	00009592 	.word	0x00009592
    4b80:	000095b7 	.word	0x000095b7
    4b84:	000091e7 	.word	0x000091e7
    4b88:	00009454 	.word	0x00009454

00004b8c <cliFunc_macroStep>:
		}
	}
}

void cliFunc_macroStep( char* args )
{
    4b8c:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    4b8e:	4669      	mov	r1, sp
    4b90:	aa01      	add	r2, sp, #4
    4b92:	f002 fb87 	bl	72a4 <CLI_argumentIsolation>

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );
    4b96:	9800      	ldr	r0, [sp, #0]
    4b98:	f002 ff1f 	bl	79da <numToInt>
    4b9c:	b2c0      	uxtb	r0, r0

	if ( count == 0 )
    4b9e:	2800      	cmp	r0, #0
		count = 1;

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    4ba0:	4b03      	ldr	r3, [pc, #12]	; (4bb0 <cliFunc_macroStep+0x24>)

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );

	if ( count == 0 )
		count = 1;
    4ba2:	bf08      	it	eq
    4ba4:	2001      	moveq	r0, #1

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    4ba6:	8018      	strh	r0, [r3, #0]
}
    4ba8:	b003      	add	sp, #12
    4baa:	f85d fb04 	ldr.w	pc, [sp], #4
    4bae:	bf00      	nop
    4bb0:	1fff905c 	.word	0x1fff905c

00004bb4 <cliFunc_capSelect>:
		capability( 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    4bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4bb8:	2600      	movs	r6, #0
		capability( 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    4bba:	4604      	mov	r4, r0
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4bbc:	9001      	str	r0, [sp, #4]
	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;

	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
    4bbe:	46b1      	mov	r9, r6
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;
    4bc0:	46b0      	mov	r8, r6
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
    4bc2:	2702      	movs	r7, #2

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    4bc4:	9801      	ldr	r0, [sp, #4]
    4bc6:	4669      	mov	r1, sp
    4bc8:	aa01      	add	r2, sp, #4
    4bca:	f002 fb6b 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		// Extra arguments are ignored
		if ( *arg1Ptr == '\0' )
    4bce:	9800      	ldr	r0, [sp, #0]
    4bd0:	7803      	ldrb	r3, [r0, #0]
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	d048      	beq.n	4c68 <cliFunc_capSelect+0xb4>
			break;

		// For the first argument, choose the capability
		if ( c == 0 ) switch ( arg1Ptr[0] )
    4bd6:	f016 0fff 	tst.w	r6, #255	; 0xff
    4bda:	d10e      	bne.n	4bfa <cliFunc_capSelect+0x46>
    4bdc:	2b4b      	cmp	r3, #75	; 0x4b
    4bde:	d10c      	bne.n	4bfa <cliFunc_capSelect+0x46>
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    4be0:	3001      	adds	r0, #1
    4be2:	f002 fefa 	bl	79da <numToInt>

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4be6:	4b22      	ldr	r3, [pc, #136]	; (4c70 <cliFunc_capSelect+0xbc>)
		if ( c == 0 ) switch ( arg1Ptr[0] )
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    4be8:	fa5f f880 	uxtb.w	r8, r0

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4bec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
			continue;
    4bf0:	464d      	mov	r5, r9
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4bf2:	791b      	ldrb	r3, [r3, #4]
    4bf4:	441f      	add	r7, r3
    4bf6:	b2ff      	uxtb	r7, r7
			continue;
    4bf8:	e030      	b.n	4c5c <cliFunc_capSelect+0xa8>
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    4bfa:	f002 feee 	bl	79da <numToInt>
    4bfe:	f109 0501 	add.w	r5, r9, #1
    4c02:	b2ed      	uxtb	r5, r5

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    4c04:	42bd      	cmp	r5, r7
			continue;
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    4c06:	f804 0009 	strb.w	r0, [r4, r9]

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    4c0a:	d127      	bne.n	4c5c <cliFunc_capSelect+0xa8>
		{
			// Indicate that the capability was called
			print( NL );
    4c0c:	4819      	ldr	r0, [pc, #100]	; (4c74 <cliFunc_capSelect+0xc0>)
    4c0e:	f002 fe09 	bl	7824 <_print>
			info_msg("K");
    4c12:	4819      	ldr	r0, [pc, #100]	; (4c78 <cliFunc_capSelect+0xc4>)
    4c14:	f002 fe06 	bl	7824 <_print>
			printInt8( cap );
    4c18:	4640      	mov	r0, r8
    4c1a:	f002 fe32 	bl	7882 <printInt8>
			print(" - ");
    4c1e:	4817      	ldr	r0, [pc, #92]	; (4c7c <cliFunc_capSelect+0xc8>)
    4c20:	f002 fe00 	bl	7824 <_print>
			printHex( argSet[0] );
    4c24:	2101      	movs	r1, #1
    4c26:	7820      	ldrb	r0, [r4, #0]
    4c28:	f002 fe7f 	bl	792a <printHex_op>
			print(" - ");
    4c2c:	4813      	ldr	r0, [pc, #76]	; (4c7c <cliFunc_capSelect+0xc8>)
    4c2e:	f002 fdf9 	bl	7824 <_print>
			printHex( argSet[1] );
    4c32:	2101      	movs	r1, #1
    4c34:	7860      	ldrb	r0, [r4, #1]
    4c36:	f002 fe78 	bl	792a <printHex_op>
			print(" - ");
    4c3a:	4810      	ldr	r0, [pc, #64]	; (4c7c <cliFunc_capSelect+0xc8>)
    4c3c:	f002 fdf2 	bl	7824 <_print>
			printHex( argSet[2] );
    4c40:	2101      	movs	r1, #1
    4c42:	78a0      	ldrb	r0, [r4, #2]
    4c44:	f002 fe71 	bl	792a <printHex_op>
			print( "..." NL );
    4c48:	480d      	ldr	r0, [pc, #52]	; (4c80 <cliFunc_capSelect+0xcc>)
    4c4a:	f002 fdeb 	bl	7824 <_print>
					return;
				}
			}

			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( argSet[0], argSet[1], &argSet[2] );
    4c4e:	4b08      	ldr	r3, [pc, #32]	; (4c70 <cliFunc_capSelect+0xbc>)
    4c50:	7820      	ldrb	r0, [r4, #0]
    4c52:	f853 3038 	ldr.w	r3, [r3, r8, lsl #3]
    4c56:	7861      	ldrb	r1, [r4, #1]
    4c58:	1ca2      	adds	r2, r4, #2
    4c5a:	4798      	blx	r3
	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
	uint8_t *argSet = (uint8_t*)args;

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
    4c5c:	42bd      	cmp	r5, r7
    4c5e:	f106 0601 	add.w	r6, r6, #1
    4c62:	d201      	bcs.n	4c68 <cliFunc_capSelect+0xb4>
    4c64:	46a9      	mov	r9, r5
    4c66:	e7ad      	b.n	4bc4 <cliFunc_capSelect+0x10>

			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( argSet[0], argSet[1], &argSet[2] );
		}
	}
}
    4c68:	b003      	add	sp, #12
    4c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4c6e:	bf00      	nop
    4c70:	00009454 	.word	0x00009454
    4c74:	0000b143 	.word	0x0000b143
    4c78:	000095bb 	.word	0x000095bb
    4c7c:	000091e7 	.word	0x000091e7
    4c80:	0000b575 	.word	0x0000b575

00004c84 <cliFunc_layerDebug>:
		}
	}
}

void cliFunc_layerDebug( char *args )
{
    4c84:	b510      	push	{r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    4c86:	4c08      	ldr	r4, [pc, #32]	; (4ca8 <cliFunc_layerDebug+0x24>)

	print( NL );
    4c88:	4808      	ldr	r0, [pc, #32]	; (4cac <cliFunc_layerDebug+0x28>)
}

void cliFunc_layerDebug( char *args )
{
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    4c8a:	7823      	ldrb	r3, [r4, #0]
    4c8c:	fab3 f383 	clz	r3, r3
    4c90:	095b      	lsrs	r3, r3, #5
    4c92:	7023      	strb	r3, [r4, #0]

	print( NL );
    4c94:	f002 fdc6 	bl	7824 <_print>
	info_msg("Layer Debug Mode: ");
    4c98:	4805      	ldr	r0, [pc, #20]	; (4cb0 <cliFunc_layerDebug+0x2c>)
    4c9a:	f002 fdc3 	bl	7824 <_print>
	printInt8( layerDebugMode );
    4c9e:	7820      	ldrb	r0, [r4, #0]
}
    4ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;

	print( NL );
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
    4ca4:	f002 bded 	b.w	7882 <printInt8>
    4ca8:	1fff9106 	.word	0x1fff9106
    4cac:	0000b143 	.word	0x0000b143
    4cb0:	000095cf 	.word	0x000095cf

00004cb4 <cliFunc_layerState>:
		printHex( LayerIndex[ layer ].last );
	}
}

void cliFunc_layerState( char* args )
{
    4cb4:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t arg1 = 0;
	uint8_t arg2 = 0;

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
    4cb6:	2400      	movs	r4, #0
void cliFunc_layerState( char* args )
{
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4cb8:	9001      	str	r0, [sp, #4]

	uint8_t arg1 = 0;
    4cba:	4625      	mov	r5, r4

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    4cbc:	9801      	ldr	r0, [sp, #4]
    4cbe:	4669      	mov	r1, sp
    4cc0:	aa01      	add	r2, sp, #4
    4cc2:	f002 faef 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    4cc6:	9800      	ldr	r0, [sp, #0]
    4cc8:	7803      	ldrb	r3, [r0, #0]
    4cca:	b1eb      	cbz	r3, 4d08 <cliFunc_layerState+0x54>
			break;

		switch ( c )
    4ccc:	b93c      	cbnz	r4, 4cde <cliFunc_layerState+0x2a>
		{
		// First argument (e.g. L1)
		case 0:
			if ( arg1Ptr[0] != 'L' )
    4cce:	2b4c      	cmp	r3, #76	; 0x4c
    4cd0:	d11a      	bne.n	4d08 <cliFunc_layerState+0x54>
				return;

			arg1 = (uint8_t)numToInt( &arg1Ptr[1] );
    4cd2:	3001      	adds	r0, #1
    4cd4:	f002 fe81 	bl	79da <numToInt>
    4cd8:	2401      	movs	r4, #1
    4cda:	b2c5      	uxtb	r5, r0
    4cdc:	e7ee      	b.n	4cbc <cliFunc_layerState+0x8>
			break;
		// Second argument (e.g. 4)
		case 1:
			arg2 = (uint8_t)numToInt( arg1Ptr );
    4cde:	f002 fe7c 	bl	79da <numToInt>
    4ce2:	b2c6      	uxtb	r6, r0

			// Display operation (to indicate that it worked)
			print( NL );
    4ce4:	4809      	ldr	r0, [pc, #36]	; (4d0c <cliFunc_layerState+0x58>)
    4ce6:	f002 fd9d 	bl	7824 <_print>
			info_msg("Setting Layer L");
    4cea:	4809      	ldr	r0, [pc, #36]	; (4d10 <cliFunc_layerState+0x5c>)
    4cec:	f002 fd9a 	bl	7824 <_print>
			printInt8( arg1 );
    4cf0:	4628      	mov	r0, r5
    4cf2:	f002 fdc6 	bl	7882 <printInt8>
			print(" to - ");
    4cf6:	4807      	ldr	r0, [pc, #28]	; (4d14 <cliFunc_layerState+0x60>)
    4cf8:	f002 fd94 	bl	7824 <_print>
			printHex( arg2 );
    4cfc:	4630      	mov	r0, r6
    4cfe:	4621      	mov	r1, r4
    4d00:	f002 fe13 	bl	792a <printHex_op>

			// Set the layer state
			LayerState[ arg1 ] = arg2;
    4d04:	4b04      	ldr	r3, [pc, #16]	; (4d18 <cliFunc_layerState+0x64>)
    4d06:	555e      	strb	r6, [r3, r5]
			break;
		}
	}
}
    4d08:	b002      	add	sp, #8
    4d0a:	bd70      	pop	{r4, r5, r6, pc}
    4d0c:	0000b143 	.word	0x0000b143
    4d10:	000095f4 	.word	0x000095f4
    4d14:	00009616 	.word	0x00009616
    4d18:	1fff9f30 	.word	0x1fff9f30

00004d1c <cliFunc_macroDebug>:

void cliFunc_macroDebug( char* args )
{
    4d1c:	b510      	push	{r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    4d1e:	4c08      	ldr	r4, [pc, #32]	; (4d40 <cliFunc_macroDebug+0x24>)

	print( NL );
    4d20:	4808      	ldr	r0, [pc, #32]	; (4d44 <cliFunc_macroDebug+0x28>)
}

void cliFunc_macroDebug( char* args )
{
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    4d22:	7823      	ldrb	r3, [r4, #0]
    4d24:	fab3 f383 	clz	r3, r3
    4d28:	095b      	lsrs	r3, r3, #5
    4d2a:	7023      	strb	r3, [r4, #0]

	print( NL );
    4d2c:	f002 fd7a 	bl	7824 <_print>
	info_msg("Macro Debug Mode: ");
    4d30:	4805      	ldr	r0, [pc, #20]	; (4d48 <cliFunc_macroDebug+0x2c>)
    4d32:	f002 fd77 	bl	7824 <_print>
	printInt8( macroDebugMode );
    4d36:	7820      	ldrb	r0, [r4, #0]
}
    4d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;

	print( NL );
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
    4d3c:	f002 bda1 	b.w	7882 <printInt8>
    4d40:	1fff90f8 	.word	0x1fff90f8
    4d44:	0000b143 	.word	0x0000b143
    4d48:	0000961d 	.word	0x0000961d

00004d4c <cliFunc_macroProc>:
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}

void cliFunc_macroProc( char* args )
{
    4d4c:	b510      	push	{r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    4d4e:	4c08      	ldr	r4, [pc, #32]	; (4d70 <cliFunc_macroProc+0x24>)

	print( NL );
    4d50:	4808      	ldr	r0, [pc, #32]	; (4d74 <cliFunc_macroProc+0x28>)
}

void cliFunc_macroProc( char* args )
{
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    4d52:	7823      	ldrb	r3, [r4, #0]
    4d54:	fab3 f383 	clz	r3, r3
    4d58:	095b      	lsrs	r3, r3, #5
    4d5a:	7023      	strb	r3, [r4, #0]

	print( NL );
    4d5c:	f002 fd62 	bl	7824 <_print>
	info_msg("Macro Processing Mode: ");
    4d60:	4805      	ldr	r0, [pc, #20]	; (4d78 <cliFunc_macroProc+0x2c>)
    4d62:	f002 fd5f 	bl	7824 <_print>
	printInt8( macroPauseMode );
    4d66:	7820      	ldrb	r0, [r4, #0]
}
    4d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;

	print( NL );
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
    4d6c:	f002 bd89 	b.w	7882 <printInt8>
    4d70:	1fff90fa 	.word	0x1fff90fa
    4d74:	0000b143 	.word	0x0000b143
    4d78:	00009642 	.word	0x00009642

00004d7c <cliFunc_layerList>:
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
}

void cliFunc_layerList( char* args )
{
    4d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	print( NL );
    4d80:	482b      	ldr	r0, [pc, #172]	; (4e30 <cliFunc_layerList+0xb4>)
	info_msg("Layer List");

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    4d82:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 4e54 <cliFunc_layerList+0xd8>
		printHex( layer );
		print(" - ");
    4d86:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 4e58 <cliFunc_layerList+0xdc>
		// Default map
		if ( layer == 0 )
			print(" \033[1m(default)\033[0m");

		// Layer State
		print( NL "\t\t Layer State: " );
    4d8a:	4f2a      	ldr	r7, [pc, #168]	; (4e34 <cliFunc_layerList+0xb8>)
		printHex( LayerState[ layer ] );
    4d8c:	4e2a      	ldr	r6, [pc, #168]	; (4e38 <cliFunc_layerList+0xbc>)

		// First -> Last Indices
		print(" First -> Last Indices: ");
    4d8e:	4d2b      	ldr	r5, [pc, #172]	; (4e3c <cliFunc_layerList+0xc0>)
		printHex( LayerIndex[ layer ].first );
		print(" -> ");
    4d90:	4c2b      	ldr	r4, [pc, #172]	; (4e40 <cliFunc_layerList+0xc4>)
	printInt8( layerDebugMode );
}

void cliFunc_layerList( char* args )
{
	print( NL );
    4d92:	f002 fd47 	bl	7824 <_print>
	info_msg("Layer List");
    4d96:	482b      	ldr	r0, [pc, #172]	; (4e44 <cliFunc_layerList+0xc8>)
    4d98:	f002 fd44 	bl	7824 <_print>

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    4d9c:	4648      	mov	r0, r9
    4d9e:	f002 fd41 	bl	7824 <_print>
		printHex( layer );
    4da2:	2101      	movs	r1, #1
    4da4:	2000      	movs	r0, #0
    4da6:	f002 fdc0 	bl	792a <printHex_op>
		print(" - ");
    4daa:	4640      	mov	r0, r8
    4dac:	f002 fd3a 	bl	7824 <_print>

		// Display layer name
		dPrint( (char*)LayerIndex[ layer ].name );
    4db0:	4825      	ldr	r0, [pc, #148]	; (4e48 <cliFunc_layerList+0xcc>)
    4db2:	f001 fa49 	bl	6248 <Output_putstr>

		// Default map
		if ( layer == 0 )
			print(" \033[1m(default)\033[0m");
    4db6:	4825      	ldr	r0, [pc, #148]	; (4e4c <cliFunc_layerList+0xd0>)
    4db8:	f002 fd34 	bl	7824 <_print>

		// Layer State
		print( NL "\t\t Layer State: " );
    4dbc:	4638      	mov	r0, r7
    4dbe:	f002 fd31 	bl	7824 <_print>
		printHex( LayerState[ layer ] );
    4dc2:	7830      	ldrb	r0, [r6, #0]
    4dc4:	2101      	movs	r1, #1
    4dc6:	f002 fdb0 	bl	792a <printHex_op>

		// First -> Last Indices
		print(" First -> Last Indices: ");
    4dca:	4628      	mov	r0, r5
    4dcc:	f002 fd2a 	bl	7824 <_print>
		printHex( LayerIndex[ layer ].first );
    4dd0:	2101      	movs	r1, #1
    4dd2:	2002      	movs	r0, #2
    4dd4:	f002 fda9 	bl	792a <printHex_op>
		print(" -> ");
    4dd8:	4620      	mov	r0, r4
    4dda:	f002 fd23 	bl	7824 <_print>
		printHex( LayerIndex[ layer ].last );
    4dde:	2101      	movs	r1, #1
    4de0:	2059      	movs	r0, #89	; 0x59
    4de2:	f002 fda2 	bl	792a <printHex_op>
	info_msg("Layer List");

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    4de6:	4648      	mov	r0, r9
    4de8:	f002 fd1c 	bl	7824 <_print>
		printHex( layer );
    4dec:	2001      	movs	r0, #1
    4dee:	4601      	mov	r1, r0
    4df0:	f002 fd9b 	bl	792a <printHex_op>
		print(" - ");
    4df4:	4640      	mov	r0, r8
    4df6:	f002 fd15 	bl	7824 <_print>

		// Display layer name
		dPrint( (char*)LayerIndex[ layer ].name );
    4dfa:	4815      	ldr	r0, [pc, #84]	; (4e50 <cliFunc_layerList+0xd4>)
    4dfc:	f001 fa24 	bl	6248 <Output_putstr>
		// Default map
		if ( layer == 0 )
			print(" \033[1m(default)\033[0m");

		// Layer State
		print( NL "\t\t Layer State: " );
    4e00:	4638      	mov	r0, r7
    4e02:	f002 fd0f 	bl	7824 <_print>
		printHex( LayerState[ layer ] );
    4e06:	7870      	ldrb	r0, [r6, #1]
    4e08:	2101      	movs	r1, #1
    4e0a:	f002 fd8e 	bl	792a <printHex_op>

		// First -> Last Indices
		print(" First -> Last Indices: ");
    4e0e:	4628      	mov	r0, r5
    4e10:	f002 fd08 	bl	7824 <_print>
		printHex( LayerIndex[ layer ].first );
    4e14:	2101      	movs	r1, #1
    4e16:	2000      	movs	r0, #0
    4e18:	f002 fd87 	bl	792a <printHex_op>
		print(" -> ");
    4e1c:	4620      	mov	r0, r4
    4e1e:	f002 fd01 	bl	7824 <_print>
		printHex( LayerIndex[ layer ].last );
    4e22:	2000      	movs	r0, #0
    4e24:	2101      	movs	r1, #1
	}
}
    4e26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

		// First -> Last Indices
		print(" First -> Last Indices: ");
		printHex( LayerIndex[ layer ].first );
		print(" -> ");
		printHex( LayerIndex[ layer ].last );
    4e2a:	f002 bd7e 	b.w	792a <printHex_op>
    4e2e:	bf00      	nop
    4e30:	0000b143 	.word	0x0000b143
    4e34:	000096c3 	.word	0x000096c3
    4e38:	1fff9f30 	.word	0x1fff9f30
    4e3c:	000096d6 	.word	0x000096d6
    4e40:	00008d70 	.word	0x00008d70
    4e44:	0000966c 	.word	0x0000966c
    4e48:	00009689 	.word	0x00009689
    4e4c:	000096b0 	.word	0x000096b0
    4e50:	000096ef 	.word	0x000096ef
    4e54:	000095b7 	.word	0x000095b7
    4e58:	000091e7 	.word	0x000091e7

00004e5c <cliFunc_macroList>:
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
}

void cliFunc_macroList( char* args )
{
    4e5c:	b538      	push	{r3, r4, r5, lr}
	// Show pending key events
	print( NL );
    4e5e:	4845      	ldr	r0, [pc, #276]	; (4f74 <cliFunc_macroList+0x118>)
	info_msg("Pending Key Events: ");
	printInt16( (uint16_t)macroTriggerListBufferSize );
    4e60:	4c45      	ldr	r4, [pc, #276]	; (4f78 <cliFunc_macroList+0x11c>)
}

void cliFunc_macroList( char* args )
{
	// Show pending key events
	print( NL );
    4e62:	f002 fcdf 	bl	7824 <_print>
	info_msg("Pending Key Events: ");
    4e66:	4845      	ldr	r0, [pc, #276]	; (4f7c <cliFunc_macroList+0x120>)
    4e68:	f002 fcdc 	bl	7824 <_print>
	printInt16( (uint16_t)macroTriggerListBufferSize );
    4e6c:	7820      	ldrb	r0, [r4, #0]
    4e6e:	f002 fd26 	bl	78be <printInt16>
	print(" : ");
    4e72:	4843      	ldr	r0, [pc, #268]	; (4f80 <cliFunc_macroList+0x124>)
    4e74:	f002 fcd6 	bl	7824 <_print>
	for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
    4e78:	2300      	movs	r3, #0
    4e7a:	7822      	ldrb	r2, [r4, #0]
    4e7c:	1c5d      	adds	r5, r3, #1
    4e7e:	b2db      	uxtb	r3, r3
    4e80:	429a      	cmp	r2, r3
    4e82:	d90c      	bls.n	4e9e <cliFunc_macroList+0x42>
	{
		printHex( macroTriggerListBuffer[ key ].scanCode );
    4e84:	4a3f      	ldr	r2, [pc, #252]	; (4f84 <cliFunc_macroList+0x128>)
    4e86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4e8a:	4413      	add	r3, r2
    4e8c:	2101      	movs	r1, #1
    4e8e:	7898      	ldrb	r0, [r3, #2]
    4e90:	f002 fd4b 	bl	792a <printHex_op>
		print(" ");
    4e94:	483c      	ldr	r0, [pc, #240]	; (4f88 <cliFunc_macroList+0x12c>)
    4e96:	f002 fcc5 	bl	7824 <_print>
    4e9a:	462b      	mov	r3, r5
    4e9c:	e7ed      	b.n	4e7a <cliFunc_macroList+0x1e>
	}

	// Show pending trigger macros
	print( NL );
    4e9e:	4835      	ldr	r0, [pc, #212]	; (4f74 <cliFunc_macroList+0x118>)
	info_msg("Pending Trigger Macros: ");
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    4ea0:	4c3a      	ldr	r4, [pc, #232]	; (4f8c <cliFunc_macroList+0x130>)
		printHex( macroTriggerListBuffer[ key ].scanCode );
		print(" ");
	}

	// Show pending trigger macros
	print( NL );
    4ea2:	f002 fcbf 	bl	7824 <_print>
	info_msg("Pending Trigger Macros: ");
    4ea6:	483a      	ldr	r0, [pc, #232]	; (4f90 <cliFunc_macroList+0x134>)
    4ea8:	f002 fcbc 	bl	7824 <_print>
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    4eac:	8820      	ldrh	r0, [r4, #0]
    4eae:	f002 fd06 	bl	78be <printInt16>
	print(" : ");
    4eb2:	4833      	ldr	r0, [pc, #204]	; (4f80 <cliFunc_macroList+0x124>)
    4eb4:	f002 fcb6 	bl	7824 <_print>
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    4eb8:	2300      	movs	r3, #0
    4eba:	8822      	ldrh	r2, [r4, #0]
    4ebc:	1c5d      	adds	r5, r3, #1
    4ebe:	b2db      	uxtb	r3, r3
    4ec0:	4293      	cmp	r3, r2
    4ec2:	d20a      	bcs.n	4eda <cliFunc_macroList+0x7e>
	{
		printHex( macroTriggerMacroPendingList[ macro ] );
    4ec4:	4a33      	ldr	r2, [pc, #204]	; (4f94 <cliFunc_macroList+0x138>)
    4ec6:	2101      	movs	r1, #1
    4ec8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    4ecc:	f002 fd2d 	bl	792a <printHex_op>
		print(" ");
    4ed0:	482d      	ldr	r0, [pc, #180]	; (4f88 <cliFunc_macroList+0x12c>)
    4ed2:	f002 fca7 	bl	7824 <_print>
    4ed6:	462b      	mov	r3, r5
    4ed8:	e7ef      	b.n	4eba <cliFunc_macroList+0x5e>
	}

	// Show pending result macros
	print( NL );
    4eda:	4826      	ldr	r0, [pc, #152]	; (4f74 <cliFunc_macroList+0x118>)
	info_msg("Pending Result Macros: ");
	printInt16( (uint16_t)macroResultMacroPendingListSize );
    4edc:	4c2e      	ldr	r4, [pc, #184]	; (4f98 <cliFunc_macroList+0x13c>)
		printHex( macroTriggerMacroPendingList[ macro ] );
		print(" ");
	}

	// Show pending result macros
	print( NL );
    4ede:	f002 fca1 	bl	7824 <_print>
	info_msg("Pending Result Macros: ");
    4ee2:	482e      	ldr	r0, [pc, #184]	; (4f9c <cliFunc_macroList+0x140>)
    4ee4:	f002 fc9e 	bl	7824 <_print>
	printInt16( (uint16_t)macroResultMacroPendingListSize );
    4ee8:	8820      	ldrh	r0, [r4, #0]
    4eea:	f002 fce8 	bl	78be <printInt16>
	print(" : ");
    4eee:	4824      	ldr	r0, [pc, #144]	; (4f80 <cliFunc_macroList+0x124>)
    4ef0:	f002 fc98 	bl	7824 <_print>
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    4ef4:	2300      	movs	r3, #0
    4ef6:	8822      	ldrh	r2, [r4, #0]
    4ef8:	1c5d      	adds	r5, r3, #1
    4efa:	b2db      	uxtb	r3, r3
    4efc:	4293      	cmp	r3, r2
    4efe:	d20a      	bcs.n	4f16 <cliFunc_macroList+0xba>
	{
		printHex( macroResultMacroPendingList[ macro ] );
    4f00:	4a27      	ldr	r2, [pc, #156]	; (4fa0 <cliFunc_macroList+0x144>)
    4f02:	2101      	movs	r1, #1
    4f04:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    4f08:	f002 fd0f 	bl	792a <printHex_op>
		print(" ");
    4f0c:	481e      	ldr	r0, [pc, #120]	; (4f88 <cliFunc_macroList+0x12c>)
    4f0e:	f002 fc89 	bl	7824 <_print>
    4f12:	462b      	mov	r3, r5
    4f14:	e7ef      	b.n	4ef6 <cliFunc_macroList+0x9a>
	}

	// Show available trigger macro indices
	print( NL );
    4f16:	4817      	ldr	r0, [pc, #92]	; (4f74 <cliFunc_macroList+0x118>)
    4f18:	f002 fc84 	bl	7824 <_print>
	info_msg("Trigger Macros Range: T0 -> T");
    4f1c:	4821      	ldr	r0, [pc, #132]	; (4fa4 <cliFunc_macroList+0x148>)
    4f1e:	f002 fc81 	bl	7824 <_print>
	printInt16( (uint16_t)TriggerMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    4f22:	204b      	movs	r0, #75	; 0x4b
    4f24:	f002 fccb 	bl	78be <printInt16>

	// Show available result macro indices
	print( NL );
    4f28:	4812      	ldr	r0, [pc, #72]	; (4f74 <cliFunc_macroList+0x118>)
    4f2a:	f002 fc7b 	bl	7824 <_print>
	info_msg("Result  Macros Range: R0 -> R");
    4f2e:	481e      	ldr	r0, [pc, #120]	; (4fa8 <cliFunc_macroList+0x14c>)
    4f30:	f002 fc78 	bl	7824 <_print>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    4f34:	2044      	movs	r0, #68	; 0x44
    4f36:	f002 fcc2 	bl	78be <printInt16>

	// Show Trigger to Result Macro Links
	print( NL );
    4f3a:	480e      	ldr	r0, [pc, #56]	; (4f74 <cliFunc_macroList+0x118>)
    4f3c:	f002 fc72 	bl	7824 <_print>
	info_msg("Trigger : Result Macro Pairs");
    4f40:	481a      	ldr	r0, [pc, #104]	; (4fac <cliFunc_macroList+0x150>)
    4f42:	f002 fc6f 	bl	7824 <_print>
    4f46:	2400      	movs	r4, #0
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		print( NL );
    4f48:	480a      	ldr	r0, [pc, #40]	; (4f74 <cliFunc_macroList+0x118>)
    4f4a:	f002 fc6b 	bl	7824 <_print>
		print("\tT");
    4f4e:	4818      	ldr	r0, [pc, #96]	; (4fb0 <cliFunc_macroList+0x154>)
    4f50:	f002 fc68 	bl	7824 <_print>
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
    4f54:	b2a0      	uxth	r0, r4
    4f56:	f002 fcb2 	bl	78be <printInt16>
		print(" : R");
    4f5a:	4816      	ldr	r0, [pc, #88]	; (4fb4 <cliFunc_macroList+0x158>)
    4f5c:	f002 fc62 	bl	7824 <_print>
    4f60:	4b15      	ldr	r3, [pc, #84]	; (4fb8 <cliFunc_macroList+0x15c>)
    4f62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    4f66:	3401      	adds	r4, #1
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
    4f68:	7918      	ldrb	r0, [r3, #4]
    4f6a:	f002 fca8 	bl	78be <printInt16>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)

	// Show Trigger to Result Macro Links
	print( NL );
	info_msg("Trigger : Result Macro Pairs");
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    4f6e:	2c4c      	cmp	r4, #76	; 0x4c
    4f70:	d1ea      	bne.n	4f48 <cliFunc_macroList+0xec>
		print("\tT");
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
		print(" : R");
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}
    4f72:	bd38      	pop	{r3, r4, r5, pc}
    4f74:	0000b143 	.word	0x0000b143
    4f78:	1fff90f9 	.word	0x1fff90f9
    4f7c:	000096fa 	.word	0x000096fa
    4f80:	00009721 	.word	0x00009721
    4f84:	1fff9d56 	.word	0x1fff9d56
    4f88:	0000816a 	.word	0x0000816a
    4f8c:	1fff9104 	.word	0x1fff9104
    4f90:	00009725 	.word	0x00009725
    4f94:	1fff9060 	.word	0x1fff9060
    4f98:	1fff905e 	.word	0x1fff905e
    4f9c:	00009750 	.word	0x00009750
    4fa0:	1fff8fd2 	.word	0x1fff8fd2
    4fa4:	0000977a 	.word	0x0000977a
    4fa8:	000097aa 	.word	0x000097aa
    4fac:	000097da 	.word	0x000097da
    4fb0:	00009809 	.word	0x00009809
    4fb4:	0000980c 	.word	0x0000980c
    4fb8:	0000a488 	.word	0x0000a488

00004fbc <Macro_layerState.part.1>:


// ----- Capabilities -----

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
    4fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
	uint16_t stackItem = 0;
	while ( stackItem < macroLayerIndexStackSize )
    4fbe:	4d2a      	ldr	r5, [pc, #168]	; (5068 <Macro_layerState.part.1+0xac>)
    4fc0:	882f      	ldrh	r7, [r5, #0]
    4fc2:	2200      	movs	r2, #0
    4fc4:	b293      	uxth	r3, r2
    4fc6:	42bb      	cmp	r3, r7
    4fc8:	d209      	bcs.n	4fde <Macro_layerState.part.1+0x22>
    4fca:	4c28      	ldr	r4, [pc, #160]	; (506c <Macro_layerState.part.1+0xb0>)
    4fcc:	3201      	adds	r2, #1
    4fce:	eb04 0442 	add.w	r4, r4, r2, lsl #1
	{
		// Flag if layer is already in the LayerIndexStack
		if ( macroLayerIndexStack[ stackItem ] == layer )
    4fd2:	f834 4c02 	ldrh.w	r4, [r4, #-2]
    4fd6:	4284      	cmp	r4, r0
    4fd8:	d1f4      	bne.n	4fc4 <Macro_layerState.part.1+0x8>
		{
			inLayerIndexStack = 1;
    4fda:	2601      	movs	r6, #1
    4fdc:	e000      	b.n	4fe0 <Macro_layerState.part.1+0x24>
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
    4fde:	2600      	movs	r6, #0
		// Increment to next item
		stackItem++;
	}

	// Toggle Layer State Byte
	if ( LayerState[ layer ] & layerState )
    4fe0:	4c23      	ldr	r4, [pc, #140]	; (5070 <Macro_layerState.part.1+0xb4>)
    4fe2:	5c22      	ldrb	r2, [r4, r0]
    4fe4:	420a      	tst	r2, r1
	{
		// Unset
		LayerState[ layer ] &= ~layerState;
    4fe6:	bf14      	ite	ne
    4fe8:	ea22 0101 	bicne.w	r1, r2, r1
	}
	else
	{
		// Set
		LayerState[ layer ] |= layerState;
    4fec:	4311      	orreq	r1, r2
    4fee:	5421      	strb	r1, [r4, r0]
	}

	// If the layer was not in the LayerIndexStack add it
	if ( !inLayerIndexStack )
    4ff0:	b926      	cbnz	r6, 4ffc <Macro_layerState.part.1+0x40>
	{
		macroLayerIndexStack[ macroLayerIndexStackSize++ ] = layer;
    4ff2:	1c7a      	adds	r2, r7, #1
    4ff4:	802a      	strh	r2, [r5, #0]
    4ff6:	4a1d      	ldr	r2, [pc, #116]	; (506c <Macro_layerState.part.1+0xb0>)
    4ff8:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
	}

	// If the layer is in the LayerIndexStack and the state is 0x00, remove
	if ( LayerState[ layer ] == 0x00 && inLayerIndexStack )
    4ffc:	5c22      	ldrb	r2, [r4, r0]
    4ffe:	b96a      	cbnz	r2, 501c <Macro_layerState.part.1+0x60>
    5000:	b166      	cbz	r6, 501c <Macro_layerState.part.1+0x60>
	{
		// Remove the layer from the LayerIndexStack
		// Using the already positioned stackItem variable from the loop above
		while ( stackItem < macroLayerIndexStackSize )
    5002:	882a      	ldrh	r2, [r5, #0]
    5004:	4293      	cmp	r3, r2
    5006:	d207      	bcs.n	5018 <Macro_layerState.part.1+0x5c>
		{
			macroLayerIndexStack[ stackItem ] = macroLayerIndexStack[ stackItem + 1 ];
    5008:	4818      	ldr	r0, [pc, #96]	; (506c <Macro_layerState.part.1+0xb0>)
    500a:	1c59      	adds	r1, r3, #1
    500c:	f830 6011 	ldrh.w	r6, [r0, r1, lsl #1]
    5010:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
			stackItem++;
    5014:	b28b      	uxth	r3, r1
    5016:	e7f5      	b.n	5004 <Macro_layerState.part.1+0x48>
		}

		// Reduce LayerIndexStack size
		macroLayerIndexStackSize--;
    5018:	3a01      	subs	r2, #1
    501a:	802a      	strh	r2, [r5, #0]
	}

	// Layer Debug Mode
	if ( layerDebugMode )
    501c:	4b15      	ldr	r3, [pc, #84]	; (5074 <Macro_layerState.part.1+0xb8>)
    501e:	781b      	ldrb	r3, [r3, #0]
    5020:	b303      	cbz	r3, 5064 <Macro_layerState.part.1+0xa8>
	{
		dbug_msg("Layer ");
    5022:	4815      	ldr	r0, [pc, #84]	; (5078 <Macro_layerState.part.1+0xbc>)
    5024:	f002 fbfe 	bl	7824 <_print>

		// Iterate over each of the layers displaying the state as a hex value
		for ( uint16_t index = 0; index < LayerNum; index++ )
		{
			printHex_op( LayerState[ index ], 0 );
    5028:	7820      	ldrb	r0, [r4, #0]
    502a:	2100      	movs	r1, #0
    502c:	f002 fc7d 	bl	792a <printHex_op>
    5030:	7860      	ldrb	r0, [r4, #1]
    5032:	2100      	movs	r1, #0
    5034:	f002 fc79 	bl	792a <printHex_op>
		}

		// Always show the default layer (it's always 0)
		print(" 0");
    5038:	4810      	ldr	r0, [pc, #64]	; (507c <Macro_layerState.part.1+0xc0>)
    503a:	f002 fbf3 	bl	7824 <_print>

		// Iterate over the layer stack starting from the bottom of the stack
		for ( uint16_t index = macroLayerIndexStackSize; index > 0; index-- )
    503e:	882c      	ldrh	r4, [r5, #0]
    5040:	b15c      	cbz	r4, 505a <Macro_layerState.part.1+0x9e>
		{
			print(":");
    5042:	480f      	ldr	r0, [pc, #60]	; (5080 <Macro_layerState.part.1+0xc4>)
    5044:	f002 fbee 	bl	7824 <_print>
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
    5048:	3c01      	subs	r4, #1
    504a:	4b08      	ldr	r3, [pc, #32]	; (506c <Macro_layerState.part.1+0xb0>)
    504c:	2100      	movs	r1, #0
    504e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    5052:	f002 fc6a 	bl	792a <printHex_op>

		// Always show the default layer (it's always 0)
		print(" 0");

		// Iterate over the layer stack starting from the bottom of the stack
		for ( uint16_t index = macroLayerIndexStackSize; index > 0; index-- )
    5056:	b2a4      	uxth	r4, r4
    5058:	e7f2      	b.n	5040 <Macro_layerState.part.1+0x84>
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    505a:	480a      	ldr	r0, [pc, #40]	; (5084 <Macro_layerState.part.1+0xc8>)
	}
}
    505c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    5060:	f002 bbe0 	b.w	7824 <_print>
    5064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5066:	bf00      	nop
    5068:	1fff90fc 	.word	0x1fff90fc
    506c:	1fff90fe 	.word	0x1fff90fe
    5070:	1fff9f30 	.word	0x1fff9f30
    5074:	1fff9106 	.word	0x1fff9106
    5078:	00009811 	.word	0x00009811
    507c:	0000982b 	.word	0x0000982b
    5080:	000081ff 	.word	0x000081ff
    5084:	0000b143 	.word	0x0000b143

00005088 <Macro_layerState_capability>:
// Argument #1: Layer Index -> uint16_t
// Argument #2: Layer State -> uint8_t
void Macro_layerState_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5088:	29ff      	cmp	r1, #255	; 0xff
    508a:	d104      	bne.n	5096 <Macro_layerState_capability+0xe>
    508c:	28ff      	cmp	r0, #255	; 0xff
    508e:	d105      	bne.n	509c <Macro_layerState_capability+0x14>
	{
		print("Macro_layerState(layerIndex,layerState)");
    5090:	4806      	ldr	r0, [pc, #24]	; (50ac <Macro_layerState_capability+0x24>)
    5092:	f002 bbc7 	b.w	7824 <_print>
	}

	// Only use capability on press or release
	// TODO Analog
	// XXX This may cause issues, might be better to implement state table here to decide -HaaTa
	if ( stateType == 0x00 && state == 0x02 ) // Hold condition
    5096:	b909      	cbnz	r1, 509c <Macro_layerState_capability+0x14>
    5098:	2802      	cmp	r0, #2
    509a:	d005      	beq.n	50a8 <Macro_layerState_capability+0x20>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    509c:	8810      	ldrh	r0, [r2, #0]
	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	// Get layer toggle byte
	uint8_t layerState = args[ sizeof(uint16_t) ];
    509e:	7891      	ldrb	r1, [r2, #2]

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    50a0:	2801      	cmp	r0, #1
    50a2:	d101      	bne.n	50a8 <Macro_layerState_capability+0x20>
    50a4:	f7ff bf8a 	b.w	4fbc <Macro_layerState.part.1>
    50a8:	4770      	bx	lr
    50aa:	bf00      	nop
    50ac:	0000982e 	.word	0x0000982e

000050b0 <Macro_layerShift_capability>:
// Shifts given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerShift_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    50b0:	29ff      	cmp	r1, #255	; 0xff
    50b2:	d104      	bne.n	50be <Macro_layerShift_capability+0xe>
    50b4:	28ff      	cmp	r0, #255	; 0xff
    50b6:	d106      	bne.n	50c6 <Macro_layerShift_capability+0x16>
	{
		print("Macro_layerShift(layerIndex)");
    50b8:	4806      	ldr	r0, [pc, #24]	; (50d4 <Macro_layerShift_capability+0x24>)
    50ba:	f002 bbb3 	b.w	7824 <_print>
		return;
	}

	// Only use capability on press or release
	// TODO Analog
	if ( stateType == 0x00 && ( state == 0x00 || state == 0x02 ) ) // Only pass press or release conditions
    50be:	b911      	cbnz	r1, 50c6 <Macro_layerShift_capability+0x16>
    50c0:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    50c4:	d005      	beq.n	50d2 <Macro_layerShift_capability+0x22>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    50c6:	8810      	ldrh	r0, [r2, #0]
    50c8:	2801      	cmp	r0, #1
    50ca:	d102      	bne.n	50d2 <Macro_layerShift_capability+0x22>
    50cc:	4601      	mov	r1, r0
    50ce:	f7ff bf75 	b.w	4fbc <Macro_layerState.part.1>
    50d2:	4770      	bx	lr
    50d4:	00009856 	.word	0x00009856

000050d8 <Macro_layerLatch_capability>:
// Latches given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLatch_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    50d8:	29ff      	cmp	r1, #255	; 0xff
    50da:	d104      	bne.n	50e6 <Macro_layerLatch_capability+0xe>
    50dc:	28ff      	cmp	r0, #255	; 0xff
    50de:	d105      	bne.n	50ec <Macro_layerLatch_capability+0x14>
	{
		print("Macro_layerLatch(layerIndex)");
    50e0:	4806      	ldr	r0, [pc, #24]	; (50fc <Macro_layerLatch_capability+0x24>)
    50e2:	f002 bb9f 	b.w	7824 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state != 0x03 ) // Only on release
    50e6:	b909      	cbnz	r1, 50ec <Macro_layerLatch_capability+0x14>
    50e8:	2803      	cmp	r0, #3
    50ea:	d105      	bne.n	50f8 <Macro_layerLatch_capability+0x20>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    50ec:	8810      	ldrh	r0, [r2, #0]
    50ee:	2801      	cmp	r0, #1
    50f0:	d102      	bne.n	50f8 <Macro_layerLatch_capability+0x20>
    50f2:	2102      	movs	r1, #2
    50f4:	f7ff bf62 	b.w	4fbc <Macro_layerState.part.1>
    50f8:	4770      	bx	lr
    50fa:	bf00      	nop
    50fc:	00009873 	.word	0x00009873

00005100 <Macro_layerLock_capability>:
// Locks given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLock_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5100:	29ff      	cmp	r1, #255	; 0xff
    5102:	d104      	bne.n	510e <Macro_layerLock_capability+0xe>
    5104:	28ff      	cmp	r0, #255	; 0xff
    5106:	d105      	bne.n	5114 <Macro_layerLock_capability+0x14>
	{
		print("Macro_layerLock(layerIndex)");
    5108:	4806      	ldr	r0, [pc, #24]	; (5124 <Macro_layerLock_capability+0x24>)
    510a:	f002 bb8b 	b.w	7824 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    510e:	b909      	cbnz	r1, 5114 <Macro_layerLock_capability+0x14>
    5110:	2801      	cmp	r0, #1
    5112:	d105      	bne.n	5120 <Macro_layerLock_capability+0x20>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5114:	8810      	ldrh	r0, [r2, #0]
    5116:	2801      	cmp	r0, #1
    5118:	d102      	bne.n	5120 <Macro_layerLock_capability+0x20>
    511a:	2104      	movs	r1, #4
    511c:	f7ff bf4e 	b.w	4fbc <Macro_layerState.part.1>
    5120:	4770      	bx	lr
    5122:	bf00      	nop
    5124:	00009890 	.word	0x00009890

00005128 <Macro_layerRotate_capability>:
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5128:	29ff      	cmp	r1, #255	; 0xff
// Rotate layer to next/previous
// Uses state variable to keep track of the current layer position
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    512a:	b538      	push	{r3, r4, r5, lr}
    512c:	4615      	mov	r5, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    512e:	d106      	bne.n	513e <Macro_layerRotate_capability+0x16>
    5130:	28ff      	cmp	r0, #255	; 0xff
    5132:	d107      	bne.n	5144 <Macro_layerRotate_capability+0x1c>
	{
		print("Macro_layerRotate(previous)");
    5134:	4813      	ldr	r0, [pc, #76]	; (5184 <Macro_layerRotate_capability+0x5c>)
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
}
    5136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Macro_layerRotate(previous)");
    513a:	f002 bb73 	b.w	7824 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    513e:	b909      	cbnz	r1, 5144 <Macro_layerRotate_capability+0x1c>
    5140:	2801      	cmp	r0, #1
    5142:	d11e      	bne.n	5182 <Macro_layerRotate_capability+0x5a>
		return;

	// Unset previous rotation layer if not 0
	if ( Macro_rotationLayer != 0 )
    5144:	4c10      	ldr	r4, [pc, #64]	; (5188 <Macro_layerRotate_capability+0x60>)

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5146:	8820      	ldrh	r0, [r4, #0]
    5148:	2801      	cmp	r0, #1
    514a:	d102      	bne.n	5152 <Macro_layerRotate_capability+0x2a>
    514c:	2104      	movs	r1, #4
    514e:	f7ff ff35 	bl	4fbc <Macro_layerState.part.1>

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    5152:	7829      	ldrb	r1, [r5, #0]
	{
		Macro_rotationLayer++;
    5154:	4a0c      	ldr	r2, [pc, #48]	; (5188 <Macro_layerRotate_capability+0x60>)
    5156:	8823      	ldrh	r3, [r4, #0]

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    5158:	b929      	cbnz	r1, 5166 <Macro_layerRotate_capability+0x3e>
	{
		Macro_rotationLayer++;
    515a:	3301      	adds	r3, #1
    515c:	b29b      	uxth	r3, r3

		// Invalid layer
		if ( Macro_rotationLayer >= LayerNum )
    515e:	2b01      	cmp	r3, #1
    5160:	d906      	bls.n	5170 <Macro_layerRotate_capability+0x48>
			Macro_rotationLayer = 0;
    5162:	8011      	strh	r1, [r2, #0]
    5164:	e005      	b.n	5172 <Macro_layerRotate_capability+0x4a>
	}
	// Previous
	else
	{
		Macro_rotationLayer--;
    5166:	3b01      	subs	r3, #1
    5168:	b29b      	uxth	r3, r3

		// Layer wrap
		if ( Macro_rotationLayer >= LayerNum )
    516a:	2b01      	cmp	r3, #1
			Macro_rotationLayer = LayerNum - 1;
    516c:	bf88      	it	hi
    516e:	2301      	movhi	r3, #1
    5170:	8013      	strh	r3, [r2, #0]

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5172:	8820      	ldrh	r0, [r4, #0]
    5174:	2801      	cmp	r0, #1
    5176:	d104      	bne.n	5182 <Macro_layerRotate_capability+0x5a>
    5178:	2104      	movs	r1, #4
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
}
    517a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    517e:	f7ff bf1d 	b.w	4fbc <Macro_layerState.part.1>
    5182:	bd38      	pop	{r3, r4, r5, pc}
    5184:	000098ac 	.word	0x000098ac
    5188:	1fff9d54 	.word	0x1fff9d54

0000518c <Macro_layerLookup>:
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    5190:	7803      	ldrb	r3, [r0, #0]

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
	uint8_t scanCode = guide->scanCode;
    5192:	7884      	ldrb	r4, [r0, #2]
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    5194:	460f      	mov	r7, r1
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    5196:	b9f3      	cbnz	r3, 51d6 <Macro_layerLookup+0x4a>
    5198:	7843      	ldrb	r3, [r0, #1]
    519a:	2b01      	cmp	r3, #1
    519c:	d01b      	beq.n	51d6 <Macro_layerLookup+0x4a>
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    519e:	4b3d      	ldr	r3, [pc, #244]	; (5294 <Macro_layerLookup+0x108>)

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    51a0:	493d      	ldr	r1, [pc, #244]	; (5298 <Macro_layerLookup+0x10c>)
	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    51a2:	5d18      	ldrb	r0, [r3, r4]

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    51a4:	230c      	movs	r3, #12
    51a6:	4343      	muls	r3, r0
    51a8:	18ca      	adds	r2, r1, r3
		const Layer *layer = &LayerIndex[ cachedLayer ];

		// Cache trigger list before attempting to expire latch
		nat_ptr_t *trigger_list = map[ scanCode - layer->first ];
    51aa:	58cb      	ldr	r3, [r1, r3]
    51ac:	7a12      	ldrb	r2, [r2, #8]
    51ae:	1aa4      	subs	r4, r4, r2
    51b0:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

		// Check if latch has been pressed for this layer
		uint8_t latch = LayerState[ cachedLayer ] & 0x02;
    51b4:	4b39      	ldr	r3, [pc, #228]	; (529c <Macro_layerLookup+0x110>)
    51b6:	5c1b      	ldrb	r3, [r3, r0]
		if ( latch && latch_expire )
    51b8:	079b      	lsls	r3, r3, #30
    51ba:	d568      	bpl.n	528e <Macro_layerLookup+0x102>
    51bc:	2f00      	cmp	r7, #0
    51be:	d066      	beq.n	528e <Macro_layerLookup+0x102>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    51c0:	2801      	cmp	r0, #1
    51c2:	d102      	bne.n	51ca <Macro_layerLookup+0x3e>
    51c4:	2102      	movs	r1, #2
    51c6:	f7ff fef9 	bl	4fbc <Macro_layerState.part.1>
		{
			Macro_layerState( 0, 0, cachedLayer, 0x02 );
#if defined(ConnectEnabled_define) && defined(LCDEnabled_define)
			// Evaluate the layerStack capability if available (LCD + Interconnect)
			extern void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args );
			LCD_layerStack_capability( 0, 0, 0 );
    51ca:	2000      	movs	r0, #0
    51cc:	4601      	mov	r1, r0
    51ce:	4602      	mov	r2, r0
    51d0:	f7fe fbba 	bl	3948 <LCD_layerStack_capability>
    51d4:	e05b      	b.n	528e <Macro_layerLookup+0x102>

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    51d6:	4b32      	ldr	r3, [pc, #200]	; (52a0 <Macro_layerLookup+0x114>)
    51d8:	881d      	ldrh	r5, [r3, #0]
    51da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    51de:	429d      	cmp	r5, r3
    51e0:	d03a      	beq.n	5258 <Macro_layerLookup+0xcc>
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    51e2:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 52b0 <Macro_layerLookup+0x124>

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    51e6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 529c <Macro_layerLookup+0x110>

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    51ea:	f839 6015 	ldrh.w	r6, [r9, r5, lsl #1]

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    51ee:	f818 3006 	ldrb.w	r3, [r8, r6]
    51f2:	f003 0302 	and.w	r3, r3, #2
		if ( latch && latch_expire )
    51f6:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    51fa:	b133      	cbz	r3, 520a <Macro_layerLookup+0x7e>
    51fc:	b12f      	cbz	r7, 520a <Macro_layerLookup+0x7e>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    51fe:	2e01      	cmp	r6, #1
    5200:	d103      	bne.n	520a <Macro_layerLookup+0x7e>
    5202:	4630      	mov	r0, r6
    5204:	2102      	movs	r1, #2
    5206:	f7ff fed9 	bl	4fbc <Macro_layerState.part.1>
		}

		// Only use layer, if state is valid
		// XOR each of the state bits
		// If only two are enabled, do not use this state
		if ( (LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x01) ^ (latch>>1) ^ ((LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x04)>>2) )
    520a:	f839 1015 	ldrh.w	r1, [r9, r5, lsl #1]
    520e:	f818 3001 	ldrb.w	r3, [r8, r1]
    5212:	f003 0201 	and.w	r2, r3, #1
    5216:	ea82 025a 	eor.w	r2, r2, sl, lsr #1
    521a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    521e:	429a      	cmp	r2, r3
    5220:	d017      	beq.n	5252 <Macro_layerLookup+0xc6>
		{
			// Lookup layer
			nat_ptr_t **map = (nat_ptr_t**)layer->triggerMap;
    5222:	200c      	movs	r0, #12
    5224:	4a1c      	ldr	r2, [pc, #112]	; (5298 <Macro_layerLookup+0x10c>)
    5226:	4370      	muls	r0, r6
    5228:	1813      	adds	r3, r2, r0
    522a:	5812      	ldr	r2, [r2, r0]

			// Determine if layer has key defined
			// Make sure scanCode is between layer first and last scancodes
			if ( map != 0
    522c:	b18a      	cbz	r2, 5252 <Macro_layerLookup+0xc6>
				&& scanCode <= layer->last
    522e:	7a58      	ldrb	r0, [r3, #9]
    5230:	42a0      	cmp	r0, r4
    5232:	d30e      	bcc.n	5252 <Macro_layerLookup+0xc6>
				&& scanCode >= layer->first
    5234:	7a1b      	ldrb	r3, [r3, #8]
    5236:	429c      	cmp	r4, r3
    5238:	d30b      	bcc.n	5252 <Macro_layerLookup+0xc6>
				&& *map[ scanCode - layer->first ] != 0 )
    523a:	1ae3      	subs	r3, r4, r3
    523c:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    5240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5244:	681b      	ldr	r3, [r3, #0]
    5246:	b123      	cbz	r3, 5252 <Macro_layerLookup+0xc6>
			{
				// Set the layer cache
				macroTriggerListLayerCache[ scanCode ] = macroLayerIndexStack[ layerIndex ];
    5248:	4b12      	ldr	r3, [pc, #72]	; (5294 <Macro_layerLookup+0x108>)
    524a:	5519      	strb	r1, [r3, r4]

				return map[ scanCode - layer->first ];
    524c:	6800      	ldr	r0, [r0, #0]
    524e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    5252:	3d01      	subs	r5, #1
    5254:	b2ad      	uxth	r5, r5
    5256:	e7c0      	b.n	51da <Macro_layerLookup+0x4e>
	const Layer *layer = &LayerIndex[0];

	// Make sure scanCode is between layer first and last scancodes
	if ( map != 0
		&& scanCode <= layer->last
		&& scanCode >= layer->first
    5258:	1ea3      	subs	r3, r4, #2
    525a:	b2da      	uxtb	r2, r3
    525c:	2a57      	cmp	r2, #87	; 0x57
    525e:	d809      	bhi.n	5274 <Macro_layerLookup+0xe8>
		&& *map[ scanCode - layer->first ] != 0 )
    5260:	4a10      	ldr	r2, [pc, #64]	; (52a4 <Macro_layerLookup+0x118>)
    5262:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5266:	6803      	ldr	r3, [r0, #0]
    5268:	b123      	cbz	r3, 5274 <Macro_layerLookup+0xe8>
	{
		// Set the layer cache to default map
		macroTriggerListLayerCache[ scanCode ] = 0;
    526a:	4b0a      	ldr	r3, [pc, #40]	; (5294 <Macro_layerLookup+0x108>)
    526c:	2200      	movs	r2, #0
    526e:	551a      	strb	r2, [r3, r4]

		return map[ scanCode - layer->first ];
    5270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
    5274:	480c      	ldr	r0, [pc, #48]	; (52a8 <Macro_layerLookup+0x11c>)
    5276:	f002 fad5 	bl	7824 <_print>
	printHex( scanCode );
    527a:	4620      	mov	r0, r4
    527c:	2101      	movs	r1, #1
    527e:	f002 fb54 	bl	792a <printHex_op>
	print( NL );
    5282:	480a      	ldr	r0, [pc, #40]	; (52ac <Macro_layerLookup+0x120>)
    5284:	f002 face 	bl	7824 <_print>
	return 0;
    5288:	2000      	movs	r0, #0
    528a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			extern void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args );
			LCD_layerStack_capability( 0, 0, 0 );
#endif
		}

		return trigger_list;
    528e:	4620      	mov	r0, r4
	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
	printHex( scanCode );
	print( NL );
	return 0;
}
    5290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5294:	1fff9f32 	.word	0x1fff9f32
    5298:	0000a028 	.word	0x0000a028
    529c:	1fff9f30 	.word	0x1fff9f30
    52a0:	1fff90fc 	.word	0x1fff90fc
    52a4:	1fff89e4 	.word	0x1fff89e4
    52a8:	000098c8 	.word	0x000098c8
    52ac:	0000b143 	.word	0x0000b143
    52b0:	1fff90fe 	.word	0x1fff90fe

000052b4 <Macro_interconnectAdd>:

// Add an interconnect ScanCode
// These are handled differently (less information is sent, hold/off states must be assumed)
#if defined(ConnectEnabled_define)
inline void Macro_interconnectAdd( void *trigger_ptr )
{
    52b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TriggerGuide *trigger = (TriggerGuide*)trigger_ptr;

	// Error checking
	uint8_t error = 0;
	switch ( trigger->type )
    52b6:	7803      	ldrb	r3, [r0, #0]

// Add an interconnect ScanCode
// These are handled differently (less information is sent, hold/off states must be assumed)
#if defined(ConnectEnabled_define)
inline void Macro_interconnectAdd( void *trigger_ptr )
{
    52b8:	4604      	mov	r4, r0
	TriggerGuide *trigger = (TriggerGuide*)trigger_ptr;

	// Error checking
	uint8_t error = 0;
	switch ( trigger->type )
    52ba:	b923      	cbnz	r3, 52c6 <Macro_interconnectAdd+0x12>
	{
	case 0x00: // Normal key
		switch ( trigger->state )
    52bc:	7842      	ldrb	r2, [r0, #1]
    52be:	2a03      	cmp	r2, #3
    52c0:	d905      	bls.n	52ce <Macro_interconnectAdd+0x1a>
		case 0x01:
		case 0x02:
		case 0x03:
			break;
		default:
			erro_msg("Invalid key state - ");
    52c2:	4823      	ldr	r0, [pc, #140]	; (5350 <Macro_interconnectAdd+0x9c>)
    52c4:	e000      	b.n	52c8 <Macro_interconnectAdd+0x14>
		}
		break;

	// Invalid TriggerGuide type
	default:
		erro_msg("Invalid type - ");
    52c6:	4823      	ldr	r0, [pc, #140]	; (5354 <Macro_interconnectAdd+0xa0>)
    52c8:	f002 faac 	bl	7824 <_print>
		error = 1;
    52cc:	2301      	movs	r3, #1
		break;
	}

	// Check if ScanCode is out of range
	if ( trigger->scanCode > MaxScanCode )
    52ce:	78a7      	ldrb	r7, [r4, #2]
    52d0:	2f59      	cmp	r7, #89	; 0x59
    52d2:	d903      	bls.n	52dc <Macro_interconnectAdd+0x28>
	{
		warn_msg("ScanCode is out of range/not defined - ");
    52d4:	4820      	ldr	r0, [pc, #128]	; (5358 <Macro_interconnectAdd+0xa4>)
    52d6:	f002 faa5 	bl	7824 <_print>
    52da:	e004      	b.n	52e6 <Macro_interconnectAdd+0x32>
		error = 1;
	}

	// Display TriggerGuide
	if ( error )
    52dc:	b91b      	cbnz	r3, 52e6 <Macro_interconnectAdd+0x32>
		return;
	}

	// Add trigger to the Interconnect Cache
	// During each processing loop, a scancode may be re-added depending on it's state
	for ( uint8_t c = 0; c < macroInterconnectCacheSize; c++ )
    52de:	491f      	ldr	r1, [pc, #124]	; (535c <Macro_interconnectAdd+0xa8>)
    52e0:	780a      	ldrb	r2, [r1, #0]
    52e2:	460d      	mov	r5, r1
    52e4:	e016      	b.n	5314 <Macro_interconnectAdd+0x60>
	}

	// Display TriggerGuide
	if ( error )
	{
		printHex( trigger->type );
    52e6:	7820      	ldrb	r0, [r4, #0]
    52e8:	2101      	movs	r1, #1
    52ea:	f002 fb1e 	bl	792a <printHex_op>
		print(" ");
    52ee:	481c      	ldr	r0, [pc, #112]	; (5360 <Macro_interconnectAdd+0xac>)
    52f0:	f002 fa98 	bl	7824 <_print>
		printHex( trigger->state );
    52f4:	7860      	ldrb	r0, [r4, #1]
    52f6:	2101      	movs	r1, #1
    52f8:	f002 fb17 	bl	792a <printHex_op>
		print(" ");
    52fc:	4818      	ldr	r0, [pc, #96]	; (5360 <Macro_interconnectAdd+0xac>)
    52fe:	f002 fa91 	bl	7824 <_print>
		printHex( trigger->scanCode );
    5302:	78a0      	ldrb	r0, [r4, #2]
    5304:	2101      	movs	r1, #1
    5306:	f002 fb10 	bl	792a <printHex_op>
		print( NL );
    530a:	4816      	ldr	r0, [pc, #88]	; (5364 <Macro_interconnectAdd+0xb0>)
		}
	}

	// If not in the list, add it
	macroInterconnectCache[ macroInterconnectCacheSize++ ] = *trigger;
}
    530c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printHex( trigger->type );
		print(" ");
		printHex( trigger->state );
		print(" ");
		printHex( trigger->scanCode );
		print( NL );
    5310:	f002 ba88 	b.w	7824 <_print>
		return;
	}

	// Add trigger to the Interconnect Cache
	// During each processing loop, a scancode may be re-added depending on it's state
	for ( uint8_t c = 0; c < macroInterconnectCacheSize; c++ )
    5314:	b2d9      	uxtb	r1, r3
    5316:	4291      	cmp	r1, r2
    5318:	4813      	ldr	r0, [pc, #76]	; (5368 <Macro_interconnectAdd+0xb4>)
    531a:	d20e      	bcs.n	533a <Macro_interconnectAdd+0x86>
	{
		// Check if the same ScanCode
		if ( macroInterconnectCache[ c ].scanCode == trigger->scanCode )
    531c:	4619      	mov	r1, r3
    531e:	3301      	adds	r3, #1
    5320:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    5324:	4406      	add	r6, r0
    5326:	f816 6c01 	ldrb.w	r6, [r6, #-1]
    532a:	42be      	cmp	r6, r7
    532c:	d1f2      	bne.n	5314 <Macro_interconnectAdd+0x60>
		{
			// Update the state
			macroInterconnectCache[ c ].state = trigger->state;
    532e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5332:	4401      	add	r1, r0
    5334:	7863      	ldrb	r3, [r4, #1]
    5336:	704b      	strb	r3, [r1, #1]
			return;
    5338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	// If not in the list, add it
	macroInterconnectCache[ macroInterconnectCacheSize++ ] = *trigger;
    533a:	1c53      	adds	r3, r2, #1
    533c:	702b      	strb	r3, [r5, #0]
    533e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5342:	8821      	ldrh	r1, [r4, #0]
    5344:	5281      	strh	r1, [r0, r2]
    5346:	1883      	adds	r3, r0, r2
    5348:	78a2      	ldrb	r2, [r4, #2]
    534a:	709a      	strb	r2, [r3, #2]
    534c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    534e:	bf00      	nop
    5350:	00009906 	.word	0x00009906
    5354:	00009930 	.word	0x00009930
    5358:	00009955 	.word	0x00009955
    535c:	1fff90fb 	.word	0x1fff90fb
    5360:	0000816a 	.word	0x0000816a
    5364:	0000b143 	.word	0x0000b143
    5368:	1fff9f8b 	.word	0x1fff9f8b

0000536c <Macro_keyState>:
//   * 0x01 - Pressed
//   * 0x02 - Held
//   * 0x03 - Released
//   * 0x04 - Unpressed (this is currently ignored)
inline void Macro_keyState( uint8_t scanCode, uint8_t state )
{
    536c:	b570      	push	{r4, r5, r6, lr}
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	if ( !Connect_master )
    536e:	4b12      	ldr	r3, [pc, #72]	; (53b8 <Macro_keyState+0x4c>)
    5370:	781b      	ldrb	r3, [r3, #0]
//   * 0x01 - Pressed
//   * 0x02 - Held
//   * 0x03 - Released
//   * 0x04 - Unpressed (this is currently ignored)
inline void Macro_keyState( uint8_t scanCode, uint8_t state )
{
    5372:	4604      	mov	r4, r0
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	if ( !Connect_master )
    5374:	b913      	cbnz	r3, 537c <Macro_keyState+0x10>
	{
		// ScanCodes are only added if there was a state change (on/off)
		switch ( state )
    5376:	b1f1      	cbz	r1, 53b6 <Macro_keyState+0x4a>
    5378:	2902      	cmp	r1, #2
    537a:	d01c      	beq.n	53b6 <Macro_keyState+0x4a>
		}
	}
#endif

	// Only add to macro trigger list if one of three states
	switch ( state )
    537c:	1e4b      	subs	r3, r1, #1
    537e:	2b02      	cmp	r3, #2
    5380:	d819      	bhi.n	53b6 <Macro_keyState+0x4a>
	{
	case 0x01: // Pressed
	case 0x02: // Held
	case 0x03: // Released
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
    5382:	2c59      	cmp	r4, #89	; 0x59
    5384:	d90b      	bls.n	539e <Macro_keyState+0x32>
		{
			warn_msg("ScanCode is out of range/not defined: ");
    5386:	480d      	ldr	r0, [pc, #52]	; (53bc <Macro_keyState+0x50>)
    5388:	f002 fa4c 	bl	7824 <_print>
			printHex( scanCode );
    538c:	4620      	mov	r0, r4
    538e:	2101      	movs	r1, #1
    5390:	f002 facb 	bl	792a <printHex_op>
			print( NL );
    5394:	480a      	ldr	r0, [pc, #40]	; (53c0 <Macro_keyState+0x54>)
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
		break;
	}
}
    5396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
		{
			warn_msg("ScanCode is out of range/not defined: ");
			printHex( scanCode );
			print( NL );
    539a:	f002 ba43 	b.w	7824 <_print>
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    539e:	4a09      	ldr	r2, [pc, #36]	; (53c4 <Macro_keyState+0x58>)
    53a0:	4d09      	ldr	r5, [pc, #36]	; (53c8 <Macro_keyState+0x5c>)
    53a2:	7813      	ldrb	r3, [r2, #0]
    53a4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    53a8:	182e      	adds	r6, r5, r0
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    53aa:	3301      	adds	r3, #1
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
    53ac:	7071      	strb	r1, [r6, #1]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
    53ae:	2100      	movs	r1, #0
    53b0:	5429      	strb	r1, [r5, r0]
			printHex( scanCode );
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    53b2:	70b4      	strb	r4, [r6, #2]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    53b4:	7013      	strb	r3, [r2, #0]
    53b6:	bd70      	pop	{r4, r5, r6, pc}
    53b8:	1fff8fce 	.word	0x1fff8fce
    53bc:	00009992 	.word	0x00009992
    53c0:	0000b143 	.word	0x0000b143
    53c4:	1fff90f9 	.word	0x1fff90f9
    53c8:	1fff9d56 	.word	0x1fff9d56

000053cc <cliFunc_keyHold>:
		}
	}
}

void cliFunc_keyHold( char* args )
{
    53cc:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    53ce:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    53d0:	9801      	ldr	r0, [sp, #4]
    53d2:	4669      	mov	r1, sp
    53d4:	aa01      	add	r2, sp, #4
    53d6:	f001 ff65 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    53da:	9800      	ldr	r0, [sp, #0]
    53dc:	7803      	ldrb	r3, [r0, #0]
    53de:	b14b      	cbz	r3, 53f4 <cliFunc_keyHold+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    53e0:	2b53      	cmp	r3, #83	; 0x53
    53e2:	d1f5      	bne.n	53d0 <cliFunc_keyHold+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x02 ); // Hold scancode
    53e4:	3001      	adds	r0, #1
    53e6:	f002 faf8 	bl	79da <numToInt>
    53ea:	2102      	movs	r1, #2
    53ec:	b2c0      	uxtb	r0, r0
    53ee:	f7ff ffbd 	bl	536c <Macro_keyState>
			break;
    53f2:	e7ed      	b.n	53d0 <cliFunc_keyHold+0x4>
		}
	}
}
    53f4:	b003      	add	sp, #12
    53f6:	f85d fb04 	ldr.w	pc, [sp], #4

000053fa <cliFunc_keyPress>:

void cliFunc_keyPress( char* args )
{
    53fa:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    53fc:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    53fe:	9801      	ldr	r0, [sp, #4]
    5400:	4669      	mov	r1, sp
    5402:	aa01      	add	r2, sp, #4
    5404:	f001 ff4e 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5408:	9800      	ldr	r0, [sp, #0]
    540a:	7803      	ldrb	r3, [r0, #0]
    540c:	b14b      	cbz	r3, 5422 <cliFunc_keyPress+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    540e:	2b53      	cmp	r3, #83	; 0x53
    5410:	d1f5      	bne.n	53fe <cliFunc_keyPress+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x01 ); // Press scancode
    5412:	3001      	adds	r0, #1
    5414:	f002 fae1 	bl	79da <numToInt>
    5418:	2101      	movs	r1, #1
    541a:	b2c0      	uxtb	r0, r0
    541c:	f7ff ffa6 	bl	536c <Macro_keyState>
			break;
    5420:	e7ed      	b.n	53fe <cliFunc_keyPress+0x4>
		}
	}
}
    5422:	b003      	add	sp, #12
    5424:	f85d fb04 	ldr.w	pc, [sp], #4

00005428 <cliFunc_keyRelease>:

void cliFunc_keyRelease( char* args )
{
    5428:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    542a:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    542c:	9801      	ldr	r0, [sp, #4]
    542e:	4669      	mov	r1, sp
    5430:	aa01      	add	r2, sp, #4
    5432:	f001 ff37 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5436:	9800      	ldr	r0, [sp, #0]
    5438:	7803      	ldrb	r3, [r0, #0]
    543a:	b14b      	cbz	r3, 5450 <cliFunc_keyRelease+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    543c:	2b53      	cmp	r3, #83	; 0x53
    543e:	d1f5      	bne.n	542c <cliFunc_keyRelease+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x03 ); // Release scancode
    5440:	3001      	adds	r0, #1
    5442:	f002 faca 	bl	79da <numToInt>
    5446:	2103      	movs	r1, #3
    5448:	b2c0      	uxtb	r0, r0
    544a:	f7ff ff8f 	bl	536c <Macro_keyState>
			break;
    544e:	e7ed      	b.n	542c <cliFunc_keyRelease+0x4>
		}
	}
}
    5450:	b003      	add	sp, #12
    5452:	f85d fb04 	ldr.w	pc, [sp], #4
    5456:	0000      	movs	r0, r0

00005458 <Macro_evalTriggerMacro>:
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    5458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    545c:	4d8d      	ldr	r5, [pc, #564]	; (5694 <Macro_evalTriggerMacro+0x23c>)
    545e:	f8df 924c 	ldr.w	r9, [pc, #588]	; 56ac <Macro_evalTriggerMacro+0x254>
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    5462:	b085      	sub	sp, #20
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    5464:	0043      	lsls	r3, r0, #1
    5466:	9302      	str	r3, [sp, #8]
    5468:	18eb      	adds	r3, r5, r3
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    546a:	4682      	mov	sl, r0
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    546c:	7859      	ldrb	r1, [r3, #1]
    546e:	2901      	cmp	r1, #1
    5470:	d10c      	bne.n	548c <Macro_evalTriggerMacro+0x34>
	{
		record->state = TriggerMacro_Waiting;
    5472:	2102      	movs	r1, #2
    5474:	7059      	strb	r1, [r3, #1]
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
    5476:	f815 1010 	ldrb.w	r1, [r5, r0, lsl #1]
    547a:	f859 303a 	ldr.w	r3, [r9, sl, lsl #3]
    547e:	5c5b      	ldrb	r3, [r3, r1]
    5480:	1c48      	adds	r0, r1, #1
    5482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5486:	4403      	add	r3, r0
    5488:	f805 301a 	strb.w	r3, [r5, sl, lsl #1]
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    548c:	f815 301a 	ldrb.w	r3, [r5, sl, lsl #1]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    5490:	f859 003a 	ldr.w	r0, [r9, sl, lsl #3]
		record->state = TriggerMacro_Waiting;
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    5494:	9300      	str	r3, [sp, #0]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    5496:	5cc3      	ldrb	r3, [r0, r3]
    5498:	eb03 0343 	add.w	r3, r3, r3, lsl #1

	// If no combo items are left, remove the TriggerMacro from the pending list
	if ( comboLength == 0 )
    549c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    54a0:	9303      	str	r3, [sp, #12]
    54a2:	d101      	bne.n	54a8 <Macro_evalTriggerMacro+0x50>
	{
		return TriggerMacroEval_Remove;
    54a4:	2003      	movs	r0, #3
    54a6:	e0f1      	b.n	568c <Macro_evalTriggerMacro+0x234>
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    54a8:	7801      	ldrb	r1, [r0, #0]
    54aa:	2303      	movs	r3, #3
    54ac:	fb03 0301 	mla	r3, r3, r1, r0
	// On scan after position increment, change to TriggerMacro_Waiting state
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
    54b0:	2400      	movs	r4, #0
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    54b2:	785f      	ldrb	r7, [r3, #1]
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    54b4:	9b00      	ldr	r3, [sp, #0]
    54b6:	f103 0801 	add.w	r8, r3, #1
    54ba:	fa5f f888 	uxtb.w	r8, r8
    54be:	9b00      	ldr	r3, [sp, #0]
    54c0:	9a03      	ldr	r2, [sp, #12]
    54c2:	4413      	add	r3, r2
    54c4:	4543      	cmp	r3, r8
    54c6:	db77      	blt.n	55b8 <Macro_evalTriggerMacro+0x160>
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    54c8:	f859 303a 	ldr.w	r3, [r9, sl, lsl #3]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
		// Iterate through the key buffer, comparing to each key in the combo
		for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
    54cc:	f04f 0b00 	mov.w	fp, #0
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    54d0:	4443      	add	r3, r8
    54d2:	9301      	str	r3, [sp, #4]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
    54d4:	465e      	mov	r6, fp
		// Iterate through the key buffer, comparing to each key in the combo
		for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
    54d6:	4b70      	ldr	r3, [pc, #448]	; (5698 <Macro_evalTriggerMacro+0x240>)
    54d8:	7819      	ldrb	r1, [r3, #0]
    54da:	fa5f f38b 	uxtb.w	r3, fp
    54de:	4299      	cmp	r1, r3
    54e0:	f240 80d1 	bls.w	5686 <Macro_evalTriggerMacro+0x22e>
    54e4:	9a01      	ldr	r2, [sp, #4]
    54e6:	7811      	ldrb	r1, [r2, #0]

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
    54e8:	b36f      	cbz	r7, 5546 <Macro_evalTriggerMacro+0xee>
// Votes on the given key vs. guide, long macros
// A long macro is defined as a guide with more than 1 combo
inline TriggerMacroVote Macro_evalLongTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    54ea:	2901      	cmp	r1, #1
    54ec:	d024      	beq.n	5538 <Macro_evalTriggerMacro+0xe0>
    54ee:	d303      	bcc.n	54f8 <Macro_evalTriggerMacro+0xa0>
    54f0:	2902      	cmp	r1, #2
    54f2:	d123      	bne.n	553c <Macro_evalTriggerMacro+0xe4>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    54f4:	4869      	ldr	r0, [pc, #420]	; (569c <Macro_evalTriggerMacro+0x244>)
    54f6:	e022      	b.n	553e <Macro_evalTriggerMacro+0xe6>
	{
	// Normal State Type
	case 0x00:
		// Depending on the state of the buffered key, make voting decision
		// Incorrect key
		if ( guide->scanCode != key->scanCode )
    54f8:	4969      	ldr	r1, [pc, #420]	; (56a0 <Macro_evalTriggerMacro+0x248>)
    54fa:	9a01      	ldr	r2, [sp, #4]
    54fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5500:	440b      	add	r3, r1
    5502:	7890      	ldrb	r0, [r2, #2]
    5504:	7899      	ldrb	r1, [r3, #2]
    5506:	785b      	ldrb	r3, [r3, #1]
    5508:	4288      	cmp	r0, r1
    550a:	d00c      	beq.n	5526 <Macro_evalTriggerMacro+0xce>
		{
			switch ( key->state )
    550c:	2b02      	cmp	r3, #2
    550e:	d040      	beq.n	5592 <Macro_evalTriggerMacro+0x13a>
    5510:	2b03      	cmp	r3, #3
    5512:	d006      	beq.n	5522 <Macro_evalTriggerMacro+0xca>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    5514:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    5518:	f1dc 0300 	rsbs	r3, ip, #0
    551c:	eb43 030c 	adc.w	r3, r3, ip
    5520:	e037      	b.n	5592 <Macro_evalTriggerMacro+0x13a>
			case 0x02:
				return TriggerMacroVote_DoNothing;

			// Wrong key released, fail out if pos == 0
			case 0x03:
				return TriggerMacroVote_DoNothing | TriggerMacroVote_DoNothingRelease;
    5522:	2306      	movs	r3, #6
    5524:	e035      	b.n	5592 <Macro_evalTriggerMacro+0x13a>
		}

		// Correct key
		else
		{
			switch ( key->state )
    5526:	2b02      	cmp	r3, #2
    5528:	d027      	beq.n	557a <Macro_evalTriggerMacro+0x122>
    552a:	2b03      	cmp	r3, #3
    552c:	d027      	beq.n	557e <Macro_evalTriggerMacro+0x126>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    552e:	2b01      	cmp	r3, #1
    5530:	bf0c      	ite	eq
    5532:	2308      	moveq	r3, #8
    5534:	2300      	movne	r3, #0
    5536:	e02c      	b.n	5592 <Macro_evalTriggerMacro+0x13a>

		break;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    5538:	485a      	ldr	r0, [pc, #360]	; (56a4 <Macro_evalTriggerMacro+0x24c>)
    553a:	e000      	b.n	553e <Macro_evalTriggerMacro+0xe6>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    553c:	485a      	ldr	r0, [pc, #360]	; (56a8 <Macro_evalTriggerMacro+0x250>)
    553e:	f002 f971 	bl	7824 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    5542:	2300      	movs	r3, #0
    5544:	e025      	b.n	5592 <Macro_evalTriggerMacro+0x13a>

// Votes on the given key vs. guide, short macros
inline TriggerMacroVote Macro_evalShortTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    5546:	2901      	cmp	r1, #1
    5548:	d01b      	beq.n	5582 <Macro_evalTriggerMacro+0x12a>
    554a:	d303      	bcc.n	5554 <Macro_evalTriggerMacro+0xfc>
    554c:	2902      	cmp	r1, #2
    554e:	d11a      	bne.n	5586 <Macro_evalTriggerMacro+0x12e>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    5550:	4852      	ldr	r0, [pc, #328]	; (569c <Macro_evalTriggerMacro+0x244>)
    5552:	e019      	b.n	5588 <Macro_evalTriggerMacro+0x130>
	switch ( guide->type )
	{
	// Normal State Type
	case 0x00:
		// For short TriggerMacros completely ignore incorrect keys
		if ( guide->scanCode == key->scanCode )
    5554:	4952      	ldr	r1, [pc, #328]	; (56a0 <Macro_evalTriggerMacro+0x248>)
    5556:	9a01      	ldr	r2, [sp, #4]
    5558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    555c:	440b      	add	r3, r1
    555e:	7890      	ldrb	r0, [r2, #2]
    5560:	7899      	ldrb	r1, [r3, #2]
    5562:	4288      	cmp	r0, r1
    5564:	d114      	bne.n	5590 <Macro_evalTriggerMacro+0x138>
		{
			switch ( key->state )
    5566:	785b      	ldrb	r3, [r3, #1]
    5568:	2b02      	cmp	r3, #2
    556a:	d006      	beq.n	557a <Macro_evalTriggerMacro+0x122>
    556c:	2b03      	cmp	r3, #3
    556e:	d006      	beq.n	557e <Macro_evalTriggerMacro+0x126>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    5570:	2b01      	cmp	r3, #1
    5572:	bf0c      	ite	eq
    5574:	2308      	moveq	r3, #8
    5576:	2302      	movne	r3, #2
    5578:	e00b      	b.n	5592 <Macro_evalTriggerMacro+0x13a>
			case 0x01:
				return TriggerMacroVote_Pass;

			// Correct key, held, possible passing or release
			case 0x02:
				return TriggerMacroVote_PassRelease;
    557a:	2318      	movs	r3, #24
    557c:	e009      	b.n	5592 <Macro_evalTriggerMacro+0x13a>

			// Correct key, released, possible release
			case 0x03:
				return TriggerMacroVote_Release;
    557e:	2310      	movs	r3, #16
    5580:	e007      	b.n	5592 <Macro_evalTriggerMacro+0x13a>

		return TriggerMacroVote_DoNothing;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    5582:	4848      	ldr	r0, [pc, #288]	; (56a4 <Macro_evalTriggerMacro+0x24c>)
    5584:	e000      	b.n	5588 <Macro_evalTriggerMacro+0x130>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    5586:	4848      	ldr	r0, [pc, #288]	; (56a8 <Macro_evalTriggerMacro+0x250>)
    5588:	f002 f94c 	bl	7824 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    558c:	463b      	mov	r3, r7
    558e:	e000      	b.n	5592 <Macro_evalTriggerMacro+0x13a>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    5590:	2302      	movs	r3, #2
			// Lookup key information
			TriggerGuide *keyInfo = &macroTriggerListBuffer[ key ];

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
    5592:	4333      	orrs	r3, r6
    5594:	b2de      	uxtb	r6, r3
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
			if ( vote >= TriggerMacroVote_Pass )
    5596:	2e07      	cmp	r6, #7
    5598:	f10b 0b01 	add.w	fp, fp, #1
    559c:	d99b      	bls.n	54d6 <Macro_evalTriggerMacro+0x7e>
			{
				vote &= TriggerMacroVote_Release | TriggerMacroVote_PassRelease | TriggerMacroVote_Pass;
    559e:	f006 0618 	and.w	r6, r6, #24
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    55a2:	b91f      	cbnz	r7, 55ac <Macro_evalTriggerMacro+0x154>
    55a4:	2e07      	cmp	r6, #7
    55a6:	d801      	bhi.n	55ac <Macro_evalTriggerMacro+0x154>
			vote |= TriggerMacroVote_Fail;
    55a8:	f046 0601 	orr.w	r6, r6, #1
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    55ac:	f108 0803 	add.w	r8, r8, #3
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
			vote |= TriggerMacroVote_Fail;

		// After voting, append to overall vote
		overallVote |= vote;
    55b0:	4334      	orrs	r4, r6
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    55b2:	fa5f f888 	uxtb.w	r8, r8
    55b6:	e782      	b.n	54be <Macro_evalTriggerMacro+0x66>
		overallVote |= vote;
	}

	// If no pass vote was found after scanning the entire combo
	// And this is the first position in the combo, just remove it (nothing important happened)
	if ( longMacro && overallVote & TriggerMacroVote_DoNothingRelease && pos == 0 )
    55b8:	b12f      	cbz	r7, 55c6 <Macro_evalTriggerMacro+0x16e>
    55ba:	0760      	lsls	r0, r4, #29
    55bc:	d503      	bpl.n	55c6 <Macro_evalTriggerMacro+0x16e>
    55be:	9a00      	ldr	r2, [sp, #0]
    55c0:	b90a      	cbnz	r2, 55c6 <Macro_evalTriggerMacro+0x16e>
		overallVote |= TriggerMacroVote_Fail;
    55c2:	f044 0401 	orr.w	r4, r4, #1

	// Decide new state of macro after voting
	// Fail macro, remove from pending list
	if ( overallVote & TriggerMacroVote_Fail )
    55c6:	f014 0001 	ands.w	r0, r4, #1
    55ca:	f47f af6b 	bne.w	54a4 <Macro_evalTriggerMacro+0x4c>
	{
		return TriggerMacroEval_Remove;
	}
	// Do nothing, incorrect key is being held or released
	else if ( overallVote & TriggerMacroVote_DoNothing && longMacro )
    55ce:	07a1      	lsls	r1, r4, #30
    55d0:	d501      	bpl.n	55d6 <Macro_evalTriggerMacro+0x17e>
    55d2:	2f00      	cmp	r7, #0
    55d4:	d15a      	bne.n	568c <Macro_evalTriggerMacro+0x234>
	{
		// Just doing nothing :)
	}
	// If ready for transition and in Press state, set to Waiting and increment combo position
	// Position is incremented (and possibly remove the macro from the pending list) on the next iteration
	else if ( overallVote & TriggerMacroVote_Release && record->state == TriggerMacro_Press )
    55d6:	f004 0110 	and.w	r1, r4, #16
    55da:	f001 00ff 	and.w	r0, r1, #255	; 0xff
    55de:	b1e1      	cbz	r1, 561a <Macro_evalTriggerMacro+0x1c2>
    55e0:	9a02      	ldr	r2, [sp, #8]
    55e2:	18a9      	adds	r1, r5, r2
    55e4:	784e      	ldrb	r6, [r1, #1]
    55e6:	b9c6      	cbnz	r6, 561a <Macro_evalTriggerMacro+0x1c2>
	{
		record->state = TriggerMacro_Release;
    55e8:	2301      	movs	r3, #1
    55ea:	704b      	strb	r3, [r1, #1]

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
    55ec:	4b29      	ldr	r3, [pc, #164]	; (5694 <Macro_evalTriggerMacro+0x23c>)
    55ee:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
    55f2:	f813 301a 	ldrb.w	r3, [r3, sl, lsl #1]
    55f6:	5cc8      	ldrb	r0, [r1, r3]
    55f8:	2203      	movs	r2, #3
    55fa:	3301      	adds	r3, #1
    55fc:	fb12 3300 	smlabb	r3, r2, r0, r3
    5600:	5ccb      	ldrb	r3, [r1, r3]
    5602:	b143      	cbz	r3, 5616 <Macro_evalTriggerMacro+0x1be>
		return TriggerMacroEval_DoResultAndRemove;
	}

	// If this is a short macro, just remove it
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
    5604:	2f00      	cmp	r7, #0
    5606:	f43f af4d 	beq.w	54a4 <Macro_evalTriggerMacro+0x4c>
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
    560a:	2000      	movs	r0, #0
    560c:	e03e      	b.n	568c <Macro_evalTriggerMacro+0x234>
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    560e:	5cc3      	ldrb	r3, [r0, r3]
    5610:	b353      	cbz	r3, 5668 <Macro_evalTriggerMacro+0x210>
			{
				// Only ever trigger result once, on press
				if ( overallVote == TriggerMacroVote_Pass )
    5612:	2c08      	cmp	r4, #8
    5614:	d1f6      	bne.n	5604 <Macro_evalTriggerMacro+0x1ac>
	{
		record->state = TriggerMacro_Release;

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
			return TriggerMacroEval_DoResultAndRemove;
    5616:	2002      	movs	r0, #2
    5618:	e038      	b.n	568c <Macro_evalTriggerMacro+0x234>
	}
	// If passing and in Waiting state, set macro state to Press
	else if ( overallVote & TriggerMacroVote_Pass
    561a:	0722      	lsls	r2, r4, #28
    561c:	d530      	bpl.n	5680 <Macro_evalTriggerMacro+0x228>
		&& ( record->state == TriggerMacro_Waiting || record->state == TriggerMacro_Press ) )
    561e:	9a02      	ldr	r2, [sp, #8]
    5620:	4415      	add	r5, r2
    5622:	7869      	ldrb	r1, [r5, #1]
    5624:	f011 01fd 	ands.w	r1, r1, #253	; 0xfd
    5628:	d12a      	bne.n	5680 <Macro_evalTriggerMacro+0x228>
	{
		record->state = TriggerMacro_Press;
    562a:	7069      	strb	r1, [r5, #1]

		// If in press state, and this is the final combo, send request for ResultMacro
		// Check to see if the result macro only has a single element
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
    562c:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
    5630:	440b      	add	r3, r1
    5632:	7859      	ldrb	r1, [r3, #1]
    5634:	2900      	cmp	r1, #0
    5636:	d1e5      	bne.n	5604 <Macro_evalTriggerMacro+0x1ac>
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    5638:	4b1c      	ldr	r3, [pc, #112]	; (56ac <Macro_evalTriggerMacro+0x254>)
    563a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    563e:	7918      	ldrb	r0, [r3, #4]
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    5640:	4b1b      	ldr	r3, [pc, #108]	; (56b0 <Macro_evalTriggerMacro+0x258>)
    5642:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5646:	7806      	ldrb	r6, [r0, #0]
inline uint8_t Macro_isLongResultMacro( const ResultMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
    5648:	2301      	movs	r3, #1
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    564a:	b2cd      	uxtb	r5, r1
    564c:	42b5      	cmp	r5, r6
    564e:	d2de      	bcs.n	560e <Macro_evalTriggerMacro+0x1b6>
		position += ResultGuideSize( (ResultGuide*)&macro->guide[ position ] );
    5650:	f810 e003 	ldrb.w	lr, [r0, r3]
    5654:	4d17      	ldr	r5, [pc, #92]	; (56b4 <Macro_evalTriggerMacro+0x25c>)
    5656:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
    565a:	3101      	adds	r1, #1
    565c:	792d      	ldrb	r5, [r5, #4]
    565e:	3501      	adds	r5, #1
    5660:	fa53 f385 	uxtab	r3, r3, r5
    5664:	b2db      	uxtb	r3, r3
    5666:	e7f0      	b.n	564a <Macro_evalTriggerMacro+0x1f2>
    5668:	4b10      	ldr	r3, [pc, #64]	; (56ac <Macro_evalTriggerMacro+0x254>)
    566a:	f853 203a 	ldr.w	r2, [r3, sl, lsl #3]
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    566e:	7811      	ldrb	r1, [r2, #0]
    5670:	2001      	movs	r0, #1
    5672:	2303      	movs	r3, #3
    5674:	fb13 0301 	smlabb	r3, r3, r1, r0
			}
			// Short result macro
			else
			{
				// Only trigger result once, on press, if long trigger (more than 1 combo)
				if ( Macro_isLongTriggerMacro( macro ) )
    5678:	5cd3      	ldrb	r3, [r2, r3]
    567a:	2b00      	cmp	r3, #0
    567c:	d1cb      	bne.n	5616 <Macro_evalTriggerMacro+0x1be>
    567e:	e005      	b.n	568c <Macro_evalTriggerMacro+0x234>
			}
		}
	}
	// Otherwise, just remove the macro on key release
	// One more result has to be called to indicate to the ResultMacro that the key transitioned to the release state
	else if ( overallVote & TriggerMacroVote_Release )
    5680:	2800      	cmp	r0, #0
    5682:	d1c8      	bne.n	5616 <Macro_evalTriggerMacro+0x1be>
    5684:	e7be      	b.n	5604 <Macro_evalTriggerMacro+0x1ac>
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    5686:	2f00      	cmp	r7, #0
    5688:	d08e      	beq.n	55a8 <Macro_evalTriggerMacro+0x150>
    568a:	e78f      	b.n	55ac <Macro_evalTriggerMacro+0x154>
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
}
    568c:	b005      	add	sp, #20
    568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5692:	bf00      	nop
    5694:	1fffa096 	.word	0x1fffa096
    5698:	1fff90f9 	.word	0x1fff90f9
    569c:	00009a09 	.word	0x00009a09
    56a0:	1fff9d56 	.word	0x1fff9d56
    56a4:	000099ce 	.word	0x000099ce
    56a8:	00009a47 	.word	0x00009a47
    56ac:	0000a488 	.word	0x0000a488
    56b0:	00009e40 	.word	0x00009e40
    56b4:	00009454 	.word	0x00009454

000056b8 <Macro_process>:


// Macro Procesing Loop
// Called once per USB buffer send
inline void Macro_process()
{
    56b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	// If this is a interconnect slave node, send all scancodes to master node
	if ( !Connect_master )
    56bc:	4ba1      	ldr	r3, [pc, #644]	; (5944 <Macro_process+0x28c>)
    56be:	781d      	ldrb	r5, [r3, #0]
    56c0:	b95d      	cbnz	r5, 56da <Macro_process+0x22>
	{
		if ( macroTriggerListBufferSize > 0 )
    56c2:	4ca1      	ldr	r4, [pc, #644]	; (5948 <Macro_process+0x290>)
    56c4:	7822      	ldrb	r2, [r4, #0]
    56c6:	2a00      	cmp	r2, #0
    56c8:	f000 81b8 	beq.w	5a3c <Macro_process+0x384>
		{
			Connect_send_ScanCode( Connect_id, macroTriggerListBuffer, macroTriggerListBufferSize );
    56cc:	4b9f      	ldr	r3, [pc, #636]	; (594c <Macro_process+0x294>)
    56ce:	49a0      	ldr	r1, [pc, #640]	; (5950 <Macro_process+0x298>)
    56d0:	7818      	ldrb	r0, [r3, #0]
    56d2:	f7fe fe0d 	bl	42f0 <Connect_send_ScanCode>
			macroTriggerListBufferSize = 0;
    56d6:	7025      	strb	r5, [r4, #0]
    56d8:	e1b0      	b.n	5a3c <Macro_process+0x384>
		return;
	}
#endif

	// Only do one round of macro processing between Output Module timer sends
	if ( USBKeys_Sent != 0 )
    56da:	4b9e      	ldr	r3, [pc, #632]	; (5954 <Macro_process+0x29c>)
    56dc:	781b      	ldrb	r3, [r3, #0]
    56de:	2b00      	cmp	r3, #0
    56e0:	f040 81ac 	bne.w	5a3c <Macro_process+0x384>
		return;

#if defined(ConnectEnabled_define)
	// Check if there are any ScanCodes in the interconnect cache to process
	if ( Connect_master && macroInterconnectCacheSize > 0 )
    56e4:	4a9c      	ldr	r2, [pc, #624]	; (5958 <Macro_process+0x2a0>)
    56e6:	7811      	ldrb	r1, [r2, #0]
    56e8:	b919      	cbnz	r1, 56f2 <Macro_process+0x3a>
		}
	}
#endif

	// If the pause flag is set, only process if the step counter is non-zero
	if ( macroPauseMode )
    56ea:	4b9c      	ldr	r3, [pc, #624]	; (595c <Macro_process+0x2a4>)
    56ec:	781b      	ldrb	r3, [r3, #0]
    56ee:	bb5b      	cbnz	r3, 5748 <Macro_process+0x90>
    56f0:	e034      	b.n	575c <Macro_process+0xa4>
	// Check if there are any ScanCodes in the interconnect cache to process
	if ( Connect_master && macroInterconnectCacheSize > 0 )
	{
		// Iterate over all the cache ScanCodes
		uint8_t currentInterconnectCacheSize = macroInterconnectCacheSize;
		macroInterconnectCacheSize = 0;
    56f2:	7013      	strb	r3, [r2, #0]
    56f4:	4b9a      	ldr	r3, [pc, #616]	; (5960 <Macro_process+0x2a8>)
    56f6:	2503      	movs	r5, #3
    56f8:	fb05 3501 	mla	r5, r5, r1, r3
    56fc:	1e5e      	subs	r6, r3, #1
		for ( uint8_t c = 0; c < currentInterconnectCacheSize; c++ )
    56fe:	42ab      	cmp	r3, r5
    5700:	d0f3      	beq.n	56ea <Macro_process+0x32>
		{
			// Add to the trigger list
			macroTriggerListBuffer[ macroTriggerListBufferSize++ ] = macroInterconnectCache[ c ];
    5702:	4891      	ldr	r0, [pc, #580]	; (5948 <Macro_process+0x290>)
    5704:	7801      	ldrb	r1, [r0, #0]
    5706:	1c4c      	adds	r4, r1, #1
    5708:	7004      	strb	r4, [r0, #0]
    570a:	4618      	mov	r0, r3
    570c:	4c90      	ldr	r4, [pc, #576]	; (5950 <Macro_process+0x298>)
    570e:	f830 ed01 	ldrh.w	lr, [r0, #-1]!
    5712:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5716:	1867      	adds	r7, r4, r1
    5718:	f824 e001 	strh.w	lr, [r4, r1]
    571c:	7881      	ldrb	r1, [r0, #2]
    571e:	70b9      	strb	r1, [r7, #2]

			// TODO Handle other TriggerGuide types (e.g. analog)
			switch ( macroInterconnectCache[ c ].type )
    5720:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    5724:	b971      	cbnz	r1, 5744 <Macro_process+0x8c>
			{
			// Normal (Press/Hold/Release)
			case 0x00:
				// Decide what to do based on the current state
				switch ( macroInterconnectCache[ c ].state )
    5726:	7819      	ldrb	r1, [r3, #0]
    5728:	2901      	cmp	r1, #1
    572a:	d10b      	bne.n	5744 <Macro_process+0x8c>
				{
				// Re-add to interconnect cache in hold state
				case 0x01: // Press
				//case 0x02: // Hold // XXX Why does this not work? -HaaTa
					macroInterconnectCache[ c ].state = 0x02;
    572c:	2102      	movs	r1, #2
    572e:	7019      	strb	r1, [r3, #0]
					macroInterconnectCache[ macroInterconnectCacheSize++ ] = macroInterconnectCache[ c ];
    5730:	7811      	ldrb	r1, [r2, #0]
    5732:	8807      	ldrh	r7, [r0, #0]
    5734:	1c4c      	adds	r4, r1, #1
    5736:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    573a:	7014      	strb	r4, [r2, #0]
    573c:	5277      	strh	r7, [r6, r1]
    573e:	1874      	adds	r4, r6, r1
    5740:	7881      	ldrb	r1, [r0, #2]
    5742:	70a1      	strb	r1, [r4, #2]
    5744:	3303      	adds	r3, #3
    5746:	e7da      	b.n	56fe <Macro_process+0x46>
#endif

	// If the pause flag is set, only process if the step counter is non-zero
	if ( macroPauseMode )
	{
		if ( macroStepCounter == 0 )
    5748:	4a86      	ldr	r2, [pc, #536]	; (5964 <Macro_process+0x2ac>)
    574a:	8813      	ldrh	r3, [r2, #0]
    574c:	2b00      	cmp	r3, #0
    574e:	f000 8175 	beq.w	5a3c <Macro_process+0x384>
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    5752:	3b01      	subs	r3, #1
		dbug_print("Macro Step");
    5754:	4884      	ldr	r0, [pc, #528]	; (5968 <Macro_process+0x2b0>)
	{
		if ( macroStepCounter == 0 )
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    5756:	8013      	strh	r3, [r2, #0]
		dbug_print("Macro Step");
    5758:	f002 f864 	bl	7824 <_print>
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    575c:	2500      	movs	r5, #0

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
    575e:	4c7a      	ldr	r4, [pc, #488]	; (5948 <Macro_process+0x290>)
    5760:	7823      	ldrb	r3, [r4, #0]
    5762:	b2e8      	uxtb	r0, r5
    5764:	4283      	cmp	r3, r0
    5766:	d93a      	bls.n	57de <Macro_process+0x126>
	{
		// TODO LED States
		// TODO Analog Switches
		// Only add TriggerMacro to pending list if key was pressed (not held, released or off)
		if ( macroTriggerListBuffer[ key ].state == 0x00 && macroTriggerListBuffer[ key ].state != 0x01 )
    5768:	4b79      	ldr	r3, [pc, #484]	; (5950 <Macro_process+0x298>)
    576a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    576e:	4418      	add	r0, r3
    5770:	7841      	ldrb	r1, [r0, #1]
    5772:	b391      	cbz	r1, 57da <Macro_process+0x122>
		// TODO Analog
		// If this is a release case, indicate to layer lookup for possible latch expiry
		uint8_t latch_expire = macroTriggerListBuffer[ key ].state == 0x03;

		// Lookup Trigger List
		nat_ptr_t *triggerList = Macro_layerLookup( &macroTriggerListBuffer[ key ], latch_expire );
    5774:	1ecb      	subs	r3, r1, #3
    5776:	4259      	negs	r1, r3
    5778:	4159      	adcs	r1, r3
    577a:	f7ff fd07 	bl	518c <Macro_layerLookup>

		// If there was an error during lookup, skip
		if ( triggerList == 0 )
    577e:	b360      	cbz	r0, 57da <Macro_process+0x122>
    5780:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 5974 <Macro_process+0x2bc>
			continue;

		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];
    5784:	f8d0 8000 	ldr.w	r8, [r0]
    5788:	f8bc 3000 	ldrh.w	r3, [ip]

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    578c:	2201      	movs	r2, #1
    578e:	f108 0101 	add.w	r1, r8, #1
    5792:	428a      	cmp	r2, r1
    5794:	d21f      	bcs.n	57d6 <Macro_process+0x11e>
		{
			// Lookup trigger macro index
			var_uint_t triggerMacroIndex = triggerList[ macro ];
    5796:	f810 e022 	ldrb.w	lr, [r0, r2, lsl #2]
    579a:	2600      	movs	r6, #0

			// Iterate over macroTriggerMacroPendingList to see if any macro in the scancode's
			//  triggerList needs to be added
			var_uint_t pending = 0;
			for ( ; pending < macroTriggerMacroPendingListSize; pending++ )
    579c:	b2f7      	uxtb	r7, r6
    579e:	b2bc      	uxth	r4, r7
    57a0:	429c      	cmp	r4, r3
    57a2:	d206      	bcs.n	57b2 <Macro_process+0xfa>
			{
				// Stop scanning if the trigger macro index is found in the pending list
				if ( macroTriggerMacroPendingList[ pending ] == triggerMacroIndex )
    57a4:	4971      	ldr	r1, [pc, #452]	; (596c <Macro_process+0x2b4>)
    57a6:	f831 1017 	ldrh.w	r1, [r1, r7, lsl #1]
    57aa:	4571      	cmp	r1, lr
    57ac:	f106 0601 	add.w	r6, r6, #1
    57b0:	d1f4      	bne.n	579c <Macro_process+0xe4>
					break;
			}

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
    57b2:	429c      	cmp	r4, r3
    57b4:	d10c      	bne.n	57d0 <Macro_process+0x118>
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    57b6:	496d      	ldr	r1, [pc, #436]	; (596c <Macro_process+0x2b4>)
    57b8:	f821 e014 	strh.w	lr, [r1, r4, lsl #1]

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
    57bc:	496c      	ldr	r1, [pc, #432]	; (5970 <Macro_process+0x2b8>)
    57be:	2400      	movs	r4, #0
    57c0:	f801 401e 	strb.w	r4, [r1, lr, lsl #1]
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    57c4:	eb01 014e 	add.w	r1, r1, lr, lsl #1

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    57c8:	3301      	adds	r3, #1

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    57ca:	2402      	movs	r4, #2

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    57cc:	b29b      	uxth	r3, r3

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    57ce:	704c      	strb	r4, [r1, #1]
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    57d0:	3201      	adds	r2, #1
    57d2:	b2d2      	uxtb	r2, r2
    57d4:	e7db      	b.n	578e <Macro_process+0xd6>
    57d6:	f8ac 3000 	strh.w	r3, [ip]
    57da:	3501      	adds	r5, #1
    57dc:	e7bf      	b.n	575e <Macro_process+0xa6>

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( uint8_t key = 0; key < macroTriggerListBufferSize; key++ )
    57de:	2600      	movs	r6, #0
    57e0:	4635      	mov	r5, r6
	// Tail pointer for macroTriggerMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroTriggerMacroPendingListTail = 0;

	// Iterate through the pending TriggerMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    57e2:	4b64      	ldr	r3, [pc, #400]	; (5974 <Macro_process+0x2bc>)
    57e4:	881a      	ldrh	r2, [r3, #0]
    57e6:	b2f7      	uxtb	r7, r6
    57e8:	4297      	cmp	r7, r2
    57ea:	f080 80cf 	bcs.w	598c <Macro_process+0x2d4>
	{
		switch ( Macro_evalTriggerMacro( macroTriggerMacroPendingList[ macro ] ) )
    57ee:	f8df 817c 	ldr.w	r8, [pc, #380]	; 596c <Macro_process+0x2b4>
    57f2:	f818 0017 	ldrb.w	r0, [r8, r7, lsl #1]
    57f6:	f7ff fe2f 	bl	5458 <Macro_evalTriggerMacro>
    57fa:	2802      	cmp	r0, #2
    57fc:	d055      	beq.n	58aa <Macro_process+0x1f2>
    57fe:	2803      	cmp	r0, #3
    5800:	f000 809d 	beq.w	593e <Macro_process+0x286>
    5804:	2801      	cmp	r0, #1
    5806:	d149      	bne.n	589c <Macro_process+0x1e4>
		{
		// Trigger Result Macro (purposely falling through)
		case TriggerMacroEval_DoResult:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    5808:	f838 9017 	ldrh.w	r9, [r8, r7, lsl #1]
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
inline void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    580c:	f8df c174 	ldr.w	ip, [pc, #372]	; 5984 <Macro_process+0x2cc>

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    5810:	f8df a174 	ldr.w	sl, [pc, #372]	; 5988 <Macro_process+0x2d0>
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
inline void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    5814:	eb0c 03c9 	add.w	r3, ip, r9, lsl #3

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    5818:	f8ba e000 	ldrh.w	lr, [sl]
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
inline void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    581c:	791b      	ldrb	r3, [r3, #4]

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    581e:	2200      	movs	r2, #0
    5820:	b2d0      	uxtb	r0, r2
    5822:	4570      	cmp	r0, lr
    5824:	4954      	ldr	r1, [pc, #336]	; (5978 <Macro_process+0x2c0>)
    5826:	d206      	bcs.n	5836 <Macro_process+0x17e>
	{
		// If duplicate found, do nothing
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
    5828:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    582c:	4299      	cmp	r1, r3
    582e:	f102 0201 	add.w	r2, r2, #1
    5832:	d1f5      	bne.n	5820 <Macro_process+0x168>
    5834:	e032      	b.n	589c <Macro_process+0x1e4>
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    5836:	f10e 0201 	add.w	r2, lr, #1
    583a:	f821 301e 	strh.w	r3, [r1, lr, lsl #1]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    583e:	f85c 0039 	ldr.w	r0, [ip, r9, lsl #3]
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    5842:	f8aa 2000 	strh.w	r2, [sl]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    5846:	7801      	ldrb	r1, [r0, #0]

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
    5848:	2200      	movs	r2, #0
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    584a:	b131      	cbz	r1, 585a <Macro_process+0x1a2>
	{
		pos += TriggerGuideSize * comboLength + 1;
    584c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5850:	3101      	adds	r1, #1
    5852:	4411      	add	r1, r2
    5854:	b2ca      	uxtb	r2, r1
		comboLength = triggerMacro->guide[ pos ];
    5856:	5c81      	ldrb	r1, [r0, r2]
    5858:	e7f7      	b.n	584a <Macro_process+0x192>
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    585a:	4402      	add	r2, r0

	// Lookup scanCode in buffer list for the current state and stateType
	for ( uint8_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    585c:	7821      	ldrb	r1, [r4, #0]
	{
		pos += TriggerGuideSize * comboLength + 1;
		comboLength = triggerMacro->guide[ pos ];
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    585e:	f812 ec01 	ldrb.w	lr, [r2, #-1]
    5862:	4a46      	ldr	r2, [pc, #280]	; (597c <Macro_process+0x2c4>)
    5864:	2003      	movs	r0, #3
    5866:	fb00 2001 	mla	r0, r0, r1, r2

	// Lookup scanCode in buffer list for the current state and stateType
	for ( uint8_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    586a:	4282      	cmp	r2, r0
    586c:	d011      	beq.n	5892 <Macro_process+0x1da>
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
    586e:	7811      	ldrb	r1, [r2, #0]
    5870:	4571      	cmp	r1, lr
    5872:	d10c      	bne.n	588e <Macro_process+0x1d6>
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    5874:	f8df c108 	ldr.w	ip, [pc, #264]	; 5980 <Macro_process+0x2c8>
    5878:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    587c:	4461      	add	r1, ip
    587e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
    5882:	f881 c001 	strb.w	ip, [r1, #1]
			ResultMacroRecordList[ resultMacroIndex ].stateType = macroTriggerListBuffer[ keyIndex ].type;
    5886:	f812 cc02 	ldrb.w	ip, [r2, #-2]
    588a:	f881 c002 	strb.w	ip, [r1, #2]
    588e:	3203      	adds	r2, #3
    5890:	e7eb      	b.n	586a <Macro_process+0x1b2>
		}
	}

	// Reset the macro position
	ResultMacroRecordList[ resultMacroIndex ].pos = 0;
    5892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5896:	4a3a      	ldr	r2, [pc, #232]	; (5980 <Macro_process+0x2c8>)
    5898:	2100      	movs	r1, #0
    589a:	54d1      	strb	r1, [r2, r3]
		case TriggerMacroEval_DoResult:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );

		default:
			macroTriggerMacroPendingList[ macroTriggerMacroPendingListTail++ ] = macroTriggerMacroPendingList[ macro ];
    589c:	1c6b      	adds	r3, r5, #1
    589e:	f838 2017 	ldrh.w	r2, [r8, r7, lsl #1]
    58a2:	f828 2015 	strh.w	r2, [r8, r5, lsl #1]
    58a6:	b2dd      	uxtb	r5, r3
			break;
    58a8:	e049      	b.n	593e <Macro_process+0x286>

		// Trigger Result Macro and Remove (purposely falling through)
		case TriggerMacroEval_DoResultAndRemove:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    58aa:	f838 7017 	ldrh.w	r7, [r8, r7, lsl #1]
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
inline void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    58ae:	4835      	ldr	r0, [pc, #212]	; (5984 <Macro_process+0x2cc>)

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    58b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 5988 <Macro_process+0x2d0>
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
inline void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    58b4:	eb00 03c7 	add.w	r3, r0, r7, lsl #3

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    58b8:	f8bc 2000 	ldrh.w	r2, [ip]
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
inline void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    58bc:	791b      	ldrb	r3, [r3, #4]

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    58be:	2100      	movs	r1, #0
    58c0:	fa5f f881 	uxtb.w	r8, r1
    58c4:	4590      	cmp	r8, r2
    58c6:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 5978 <Macro_process+0x2c0>
    58ca:	d206      	bcs.n	58da <Macro_process+0x222>
	{
		// If duplicate found, do nothing
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
    58cc:	f83e e018 	ldrh.w	lr, [lr, r8, lsl #1]
    58d0:	459e      	cmp	lr, r3
    58d2:	f101 0101 	add.w	r1, r1, #1
    58d6:	d1f3      	bne.n	58c0 <Macro_process+0x208>
    58d8:	e031      	b.n	593e <Macro_process+0x286>
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    58da:	1c51      	adds	r1, r2, #1
    58dc:	f82e 3012 	strh.w	r3, [lr, r2, lsl #1]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    58e0:	f850 0037 	ldr.w	r0, [r0, r7, lsl #3]
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    58e4:	f8ac 1000 	strh.w	r1, [ip]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    58e8:	7801      	ldrb	r1, [r0, #0]

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
    58ea:	2200      	movs	r2, #0
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    58ec:	b131      	cbz	r1, 58fc <Macro_process+0x244>
	{
		pos += TriggerGuideSize * comboLength + 1;
    58ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    58f2:	3101      	adds	r1, #1
    58f4:	4411      	add	r1, r2
    58f6:	b2ca      	uxtb	r2, r1
		comboLength = triggerMacro->guide[ pos ];
    58f8:	5c81      	ldrb	r1, [r0, r2]
    58fa:	e7f7      	b.n	58ec <Macro_process+0x234>
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    58fc:	4402      	add	r2, r0

	// Lookup scanCode in buffer list for the current state and stateType
	for ( uint8_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    58fe:	7821      	ldrb	r1, [r4, #0]
	{
		pos += TriggerGuideSize * comboLength + 1;
		comboLength = triggerMacro->guide[ pos ];
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    5900:	f812 7c01 	ldrb.w	r7, [r2, #-1]
    5904:	4a1d      	ldr	r2, [pc, #116]	; (597c <Macro_process+0x2c4>)
    5906:	2003      	movs	r0, #3
    5908:	fb00 2001 	mla	r0, r0, r1, r2

	// Lookup scanCode in buffer list for the current state and stateType
	for ( uint8_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    590c:	4282      	cmp	r2, r0
    590e:	d011      	beq.n	5934 <Macro_process+0x27c>
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
    5910:	7811      	ldrb	r1, [r2, #0]
    5912:	42b9      	cmp	r1, r7
    5914:	d10c      	bne.n	5930 <Macro_process+0x278>
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    5916:	f8df e068 	ldr.w	lr, [pc, #104]	; 5980 <Macro_process+0x2c8>
    591a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    591e:	4471      	add	r1, lr
    5920:	f812 ec01 	ldrb.w	lr, [r2, #-1]
    5924:	f881 e001 	strb.w	lr, [r1, #1]
			ResultMacroRecordList[ resultMacroIndex ].stateType = macroTriggerListBuffer[ keyIndex ].type;
    5928:	f812 ec02 	ldrb.w	lr, [r2, #-2]
    592c:	f881 e002 	strb.w	lr, [r1, #2]
    5930:	3203      	adds	r2, #3
    5932:	e7eb      	b.n	590c <Macro_process+0x254>
		}
	}

	// Reset the macro position
	ResultMacroRecordList[ resultMacroIndex ].pos = 0;
    5934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5938:	4a11      	ldr	r2, [pc, #68]	; (5980 <Macro_process+0x2c8>)
    593a:	2100      	movs	r1, #0
    593c:	54d1      	strb	r1, [r2, r3]
    593e:	3601      	adds	r6, #1
    5940:	e74f      	b.n	57e2 <Macro_process+0x12a>
    5942:	bf00      	nop
    5944:	1fff8fce 	.word	0x1fff8fce
    5948:	1fff90f9 	.word	0x1fff90f9
    594c:	1fff89c5 	.word	0x1fff89c5
    5950:	1fff9d56 	.word	0x1fff9d56
    5954:	1fff910c 	.word	0x1fff910c
    5958:	1fff90fb 	.word	0x1fff90fb
    595c:	1fff90fa 	.word	0x1fff90fa
    5960:	1fff9f8c 	.word	0x1fff9f8c
    5964:	1fff905c 	.word	0x1fff905c
    5968:	00009a81 	.word	0x00009a81
    596c:	1fff9060 	.word	0x1fff9060
    5970:	1fffa096 	.word	0x1fffa096
    5974:	1fff9104 	.word	0x1fff9104
    5978:	1fff8fd2 	.word	0x1fff8fd2
    597c:	1fff9d58 	.word	0x1fff9d58
    5980:	1fff9e61 	.word	0x1fff9e61
    5984:	0000a488 	.word	0x0000a488
    5988:	1fff905e 	.word	0x1fff905e
	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroResultMacroPendingListTail = 0;

	// Iterate through the pending ResultMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    598c:	f04f 0800 	mov.w	r8, #0
			break;
		}
	}

	// Update the macroTriggerMacroPendingListSize with the tail pointer
	macroTriggerMacroPendingListSize = macroTriggerMacroPendingListTail;
    5990:	801d      	strh	r5, [r3, #0]


	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroResultMacroPendingListTail = 0;
    5992:	4647      	mov	r7, r8

	// Iterate through the pending ResultMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    5994:	4b2b      	ldr	r3, [pc, #172]	; (5a44 <Macro_process+0x38c>)
    5996:	881a      	ldrh	r2, [r3, #0]
    5998:	fa5f f988 	uxtb.w	r9, r8
    599c:	4591      	cmp	r9, r2
    599e:	d236      	bcs.n	5a0e <Macro_process+0x356>

// Evaluate/Update ResultMacro
inline ResultMacroEval Macro_evalResultMacro( var_uint_t resultMacroIndex )
{
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
    59a0:	4b29      	ldr	r3, [pc, #164]	; (5a48 <Macro_process+0x390>)
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];

	// Current Macro position
	var_uint_t pos = record->pos;
    59a2:	4a2a      	ldr	r2, [pc, #168]	; (5a4c <Macro_process+0x394>)

// Evaluate/Update ResultMacro
inline ResultMacroEval Macro_evalResultMacro( var_uint_t resultMacroIndex )
{
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
    59a4:	f813 5019 	ldrb.w	r5, [r3, r9, lsl #1]
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];

	// Current Macro position
	var_uint_t pos = record->pos;
    59a8:	eb05 0345 	add.w	r3, r5, r5, lsl #1

	// Function Counter, used to keep track of the combo items processed
	var_uint_t funcCount = 0;

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;
    59ac:	f04f 0a00 	mov.w	sl, #0
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];

	// Current Macro position
	var_uint_t pos = record->pos;
    59b0:	5cd4      	ldrb	r4, [r2, r3]

	// Length of combo being processed
	uint8_t comboLength = macro->guide[ pos ];
    59b2:	4b27      	ldr	r3, [pc, #156]	; (5a50 <Macro_process+0x398>)
    59b4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
    59b8:	f816 b004 	ldrb.w	fp, [r6, r4]

	// Function Counter, used to keep track of the combo items processed
	var_uint_t funcCount = 0;

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;
    59bc:	3401      	adds	r4, #1
    59be:	b2e4      	uxtb	r4, r4

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
    59c0:	fa5f f38a 	uxtb.w	r3, sl
    59c4:	455b      	cmp	r3, fp
    59c6:	4821      	ldr	r0, [pc, #132]	; (5a4c <Macro_process+0x394>)
    59c8:	d218      	bcs.n	59fc <Macro_process+0x344>

		// Do lookup on capability function
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( record->state, record->stateType, &guide->args );
    59ca:	eb05 0145 	add.w	r1, r5, r5, lsl #1
	{
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);

		// Do lookup on capability function
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    59ce:	4b21      	ldr	r3, [pc, #132]	; (5a54 <Macro_process+0x39c>)
    59d0:	f816 e004 	ldrb.w	lr, [r6, r4]

		// Call capability
		capability( record->state, record->stateType, &guide->args );
    59d4:	9301      	str	r3, [sp, #4]
    59d6:	4401      	add	r1, r0

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);
    59d8:	1932      	adds	r2, r6, r4

		// Do lookup on capability function
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( record->state, record->stateType, &guide->args );
    59da:	f853 c03e 	ldr.w	ip, [r3, lr, lsl #3]
    59de:	7848      	ldrb	r0, [r1, #1]
    59e0:	7889      	ldrb	r1, [r1, #2]
    59e2:	3201      	adds	r2, #1
    59e4:	47e0      	blx	ip

		// Increment counters
		funcCount++;
		comboItem += ResultGuideSize( (ResultGuide*)(&macro->guide[ comboItem ]) );
    59e6:	5d32      	ldrb	r2, [r6, r4]
    59e8:	9b01      	ldr	r3, [sp, #4]
    59ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    59ee:	f10a 0a01 	add.w	sl, sl, #1
    59f2:	791b      	ldrb	r3, [r3, #4]
    59f4:	3301      	adds	r3, #1
    59f6:	441c      	add	r4, r3
    59f8:	b2e4      	uxtb	r4, r4
    59fa:	e7e1      	b.n	59c0 <Macro_process+0x308>
	}

	// Move to next item in the sequence
	record->pos = comboItem;
    59fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5a00:	5544      	strb	r4, [r0, r5]

	// If the ResultMacro is finished, remove
	if ( macro->guide[ comboItem ] == 0 )
    5a02:	5d33      	ldrb	r3, [r6, r4]
    5a04:	b993      	cbnz	r3, 5a2c <Macro_process+0x374>
	{
		record->pos = 0;
    5a06:	5543      	strb	r3, [r0, r5]
    5a08:	f108 0801 	add.w	r8, r8, #1
    5a0c:	e7c2      	b.n	5994 <Macro_process+0x2dc>

	// Update the macroResultMacroPendingListSize with the tail pointer
	macroResultMacroPendingListSize = macroResultMacroPendingListTail;

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    5a0e:	4c12      	ldr	r4, [pc, #72]	; (5a58 <Macro_process+0x3a0>)
			break;
		}
	}

	// Update the macroResultMacroPendingListSize with the tail pointer
	macroResultMacroPendingListSize = macroResultMacroPendingListTail;
    5a10:	801f      	strh	r7, [r3, #0]

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    5a12:	7820      	ldrb	r0, [r4, #0]
    5a14:	f7ff f886 	bl	4b24 <Scan_finishedWithMacro>

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    5a18:	4a10      	ldr	r2, [pc, #64]	; (5a5c <Macro_process+0x3a4>)
    5a1a:	7812      	ldrb	r2, [r2, #0]

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;
    5a1c:	2300      	movs	r3, #0
    5a1e:	7023      	strb	r3, [r4, #0]

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    5a20:	b162      	cbz	r2, 5a3c <Macro_process+0x384>
	{
		USBKeys_Modifiers = 0;
    5a22:	4a0f      	ldr	r2, [pc, #60]	; (5a60 <Macro_process+0x3a8>)
    5a24:	7013      	strb	r3, [r2, #0]
		USBKeys_Sent = 0;
    5a26:	4a0f      	ldr	r2, [pc, #60]	; (5a64 <Macro_process+0x3ac>)
    5a28:	7013      	strb	r3, [r2, #0]
    5a2a:	e007      	b.n	5a3c <Macro_process+0x384>
		switch ( Macro_evalResultMacro( macroResultMacroPendingList[ macro ] ) )
		{
		// Re-add macros to pending list
		case ResultMacroEval_DoNothing:
		default:
			macroResultMacroPendingList[ macroResultMacroPendingListTail++ ] = macroResultMacroPendingList[ macro ];
    5a2c:	4b06      	ldr	r3, [pc, #24]	; (5a48 <Macro_process+0x390>)
    5a2e:	1c7a      	adds	r2, r7, #1
    5a30:	f833 1019 	ldrh.w	r1, [r3, r9, lsl #1]
    5a34:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    5a38:	b2d7      	uxtb	r7, r2
			break;
    5a3a:	e7e5      	b.n	5a08 <Macro_process+0x350>
	if ( macroDebugMode )
	{
		USBKeys_Modifiers = 0;
		USBKeys_Sent = 0;
	}
}
    5a3c:	b003      	add	sp, #12
    5a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a42:	bf00      	nop
    5a44:	1fff905e 	.word	0x1fff905e
    5a48:	1fff8fd2 	.word	0x1fff8fd2
    5a4c:	1fff9e61 	.word	0x1fff9e61
    5a50:	00009e40 	.word	0x00009e40
    5a54:	00009454 	.word	0x00009454
    5a58:	1fff90f9 	.word	0x1fff90f9
    5a5c:	1fff90f8 	.word	0x1fff90f8
    5a60:	1fff9108 	.word	0x1fff9108
    5a64:	1fff910c 	.word	0x1fff910c

00005a68 <Macro_setup>:


inline void Macro_setup()
{
    5a68:	b508      	push	{r3, lr}
	// Register Macro CLI dictionary
	CLI_registerDictionary( macroCLIDict, macroCLIDictName );
    5a6a:	4811      	ldr	r0, [pc, #68]	; (5ab0 <Macro_setup+0x48>)
    5a6c:	4911      	ldr	r1, [pc, #68]	; (5ab4 <Macro_setup+0x4c>)
    5a6e:	f001 fc8d 	bl	738c <CLI_registerDictionary>

	// Disable Macro debug mode
	macroDebugMode = 0;
    5a72:	4a11      	ldr	r2, [pc, #68]	; (5ab8 <Macro_setup+0x50>)
    5a74:	2300      	movs	r3, #0
    5a76:	7013      	strb	r3, [r2, #0]

	// Disable Macro pause flag
	macroPauseMode = 0;
    5a78:	4a10      	ldr	r2, [pc, #64]	; (5abc <Macro_setup+0x54>)
    5a7a:	7013      	strb	r3, [r2, #0]

	// Set Macro step counter to zero
	macroStepCounter = 0;
    5a7c:	4a10      	ldr	r2, [pc, #64]	; (5ac0 <Macro_setup+0x58>)
    5a7e:	8013      	strh	r3, [r2, #0]

	// Make sure macro trigger buffer is empty
	macroTriggerListBufferSize = 0;
    5a80:	4a10      	ldr	r2, [pc, #64]	; (5ac4 <Macro_setup+0x5c>)
    5a82:	7013      	strb	r3, [r2, #0]

	// Set the current rotated layer to 0
	Macro_rotationLayer = 0;
    5a84:	4a10      	ldr	r2, [pc, #64]	; (5ac8 <Macro_setup+0x60>)
    5a86:	8013      	strh	r3, [r2, #0]

	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
    5a88:	4910      	ldr	r1, [pc, #64]	; (5acc <Macro_setup+0x64>)
    5a8a:	2200      	movs	r2, #0
    5a8c:	1858      	adds	r0, r3, r1
    5a8e:	545a      	strb	r2, [r3, r1]
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    5a90:	2102      	movs	r1, #2
    5a92:	440b      	add	r3, r1

	// Set the current rotated layer to 0
	Macro_rotationLayer = 0;

	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    5a94:	2b98      	cmp	r3, #152	; 0x98
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    5a96:	7041      	strb	r1, [r0, #1]

	// Set the current rotated layer to 0
	Macro_rotationLayer = 0;

	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    5a98:	d1f6      	bne.n	5a88 <Macro_setup+0x20>
    5a9a:	4613      	mov	r3, r2
	}

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
	{
		ResultMacroRecordList[ macro ].pos       = 0;
    5a9c:	480c      	ldr	r0, [pc, #48]	; (5ad0 <Macro_setup+0x68>)
    5a9e:	2200      	movs	r2, #0
    5aa0:	1819      	adds	r1, r3, r0
    5aa2:	541a      	strb	r2, [r3, r0]
    5aa4:	3303      	adds	r3, #3
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
	}

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    5aa6:	2bcf      	cmp	r3, #207	; 0xcf
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
    5aa8:	704a      	strb	r2, [r1, #1]
		ResultMacroRecordList[ macro ].stateType = 0;
    5aaa:	708a      	strb	r2, [r1, #2]
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
	}

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    5aac:	d1f6      	bne.n	5a9c <Macro_setup+0x34>
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
		ResultMacroRecordList[ macro ].stateType = 0;
	}
}
    5aae:	bd08      	pop	{r3, pc}
    5ab0:	0000a1bc 	.word	0x0000a1bc
    5ab4:	00009c8f 	.word	0x00009c8f
    5ab8:	1fff90f8 	.word	0x1fff90f8
    5abc:	1fff90fa 	.word	0x1fff90fa
    5ac0:	1fff905c 	.word	0x1fff905c
    5ac4:	1fff90f9 	.word	0x1fff90f9
    5ac8:	1fff9d54 	.word	0x1fff9d54
    5acc:	1fffa096 	.word	0x1fffa096
    5ad0:	1fff9e61 	.word	0x1fff9e61

00005ad4 <macroDebugShowTrigger>:
}

void macroDebugShowTrigger( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    5ad4:	284b      	cmp	r0, #75	; 0x4b
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
}

void macroDebugShowTrigger( var_uint_t index )
{
    5ad6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ada:	4605      	mov	r5, r0
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    5adc:	d865      	bhi.n	5baa <macroDebugShowTrigger+0xd6>

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];

	print( NL );
    5ade:	4834      	ldr	r0, [pc, #208]	; (5bb0 <macroDebugShowTrigger+0xdc>)
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    5ae0:	4e34      	ldr	r6, [pc, #208]	; (5bb4 <macroDebugShowTrigger+0xe0>)

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];

	print( NL );
    5ae2:	f001 fe9f 	bl	7824 <_print>
	info_msg("Trigger Macro Index: ");
    5ae6:	4834      	ldr	r0, [pc, #208]	; (5bb8 <macroDebugShowTrigger+0xe4>)
    5ae8:	f001 fe9c 	bl	7824 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    5aec:	4628      	mov	r0, r5
    5aee:	f001 fee6 	bl	78be <printInt16>
	print( NL );
    5af2:	482f      	ldr	r0, [pc, #188]	; (5bb0 <macroDebugShowTrigger+0xdc>)
    5af4:	f001 fe96 	bl	7824 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    5af8:	f856 8035 	ldr.w	r8, [r6, r5, lsl #3]
    5afc:	f898 7000 	ldrb.w	r7, [r8]
	info_msg("Trigger Macro Index: ");
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
    5b00:	2400      	movs	r4, #0
	uint8_t comboLength = macro->guide[ pos ];

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    5b02:	b367      	cbz	r7, 5b5e <macroDebugShowTrigger+0x8a>
	{
		// Initial position of the combo
		var_uint_t comboPos = ++pos;
    5b04:	3401      	adds	r4, #1
    5b06:	b2e4      	uxtb	r4, r4

		// Iterate through the combo
		while ( pos < comboLength * TriggerGuideSize + comboPos )
    5b08:	2303      	movs	r3, #3
    5b0a:	fb13 4707 	smlabb	r7, r3, r7, r4
    5b0e:	42bc      	cmp	r4, r7
    5b10:	d21e      	bcs.n	5b50 <macroDebugShowTrigger+0x7c>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ pos ]);
    5b12:	eb08 0904 	add.w	r9, r8, r4

			// Display guide information about trigger key
			printHex( guide->scanCode );
    5b16:	2101      	movs	r1, #1
    5b18:	f899 0002 	ldrb.w	r0, [r9, #2]
    5b1c:	f001 ff05 	bl	792a <printHex_op>
			print("|");
    5b20:	4826      	ldr	r0, [pc, #152]	; (5bbc <macroDebugShowTrigger+0xe8>)
    5b22:	f001 fe7f 	bl	7824 <_print>
			printHex( guide->type );
    5b26:	f818 0004 	ldrb.w	r0, [r8, r4]
    5b2a:	2101      	movs	r1, #1
    5b2c:	f001 fefd 	bl	792a <printHex_op>
			print("|");
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    5b30:	3403      	adds	r4, #3

			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
    5b32:	4822      	ldr	r0, [pc, #136]	; (5bbc <macroDebugShowTrigger+0xe8>)
    5b34:	f001 fe76 	bl	7824 <_print>
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    5b38:	b2e4      	uxtb	r4, r4
			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
			printHex( guide->state );
    5b3a:	f899 0001 	ldrb.w	r0, [r9, #1]
    5b3e:	2101      	movs	r1, #1
    5b40:	f001 fef3 	bl	792a <printHex_op>

			// Increment position
			pos += TriggerGuideSize;

			// Only show combo separator if there are combos left in the sequence element
			if ( pos < comboLength * TriggerGuideSize + comboPos )
    5b44:	42bc      	cmp	r4, r7
    5b46:	d2e2      	bcs.n	5b0e <macroDebugShowTrigger+0x3a>
				print("+");
    5b48:	481d      	ldr	r0, [pc, #116]	; (5bc0 <macroDebugShowTrigger+0xec>)
    5b4a:	f001 fe6b 	bl	7824 <_print>
    5b4e:	e7de      	b.n	5b0e <macroDebugShowTrigger+0x3a>
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos ];
    5b50:	f818 7004 	ldrb.w	r7, [r8, r4]

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    5b54:	b11f      	cbz	r7, 5b5e <macroDebugShowTrigger+0x8a>
			print(";");
    5b56:	481b      	ldr	r0, [pc, #108]	; (5bc4 <macroDebugShowTrigger+0xf0>)
    5b58:	f001 fe64 	bl	7824 <_print>
    5b5c:	e7d1      	b.n	5b02 <macroDebugShowTrigger+0x2e>
	}

	// Display current position
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    5b5e:	4c1a      	ldr	r4, [pc, #104]	; (5bc8 <macroDebugShowTrigger+0xf4>)
		if ( comboLength != 0 )
			print(";");
	}

	// Display current position
	print( NL "Position: " );
    5b60:	481a      	ldr	r0, [pc, #104]	; (5bcc <macroDebugShowTrigger+0xf8>)
    5b62:	f001 fe5f 	bl	7824 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)

	// Display result macro index
	print( NL "Result Macro Index: " );
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    5b66:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
			print(";");
	}

	// Display current position
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    5b6a:	f814 0015 	ldrb.w	r0, [r4, r5, lsl #1]
    5b6e:	f001 fea6 	bl	78be <printInt16>

	// Display result macro index
	print( NL "Result Macro Index: " );
    5b72:	4817      	ldr	r0, [pc, #92]	; (5bd0 <macroDebugShowTrigger+0xfc>)
    5b74:	f001 fe56 	bl	7824 <_print>
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
	switch ( record->state )
    5b78:	eb04 0545 	add.w	r5, r4, r5, lsl #1
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)

	// Display result macro index
	print( NL "Result Macro Index: " );
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    5b7c:	7930      	ldrb	r0, [r6, #4]
    5b7e:	f001 fe9e 	bl	78be <printInt16>

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
    5b82:	4814      	ldr	r0, [pc, #80]	; (5bd4 <macroDebugShowTrigger+0x100>)
    5b84:	f001 fe4e 	bl	7824 <_print>
	switch ( record->state )
    5b88:	786b      	ldrb	r3, [r5, #1]
    5b8a:	2b01      	cmp	r3, #1
    5b8c:	d006      	beq.n	5b9c <macroDebugShowTrigger+0xc8>
    5b8e:	d303      	bcc.n	5b98 <macroDebugShowTrigger+0xc4>
    5b90:	2b02      	cmp	r3, #2
    5b92:	d005      	beq.n	5ba0 <macroDebugShowTrigger+0xcc>
    5b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
	case TriggerMacro_Press:   print("Press");   break;
    5b98:	480f      	ldr	r0, [pc, #60]	; (5bd8 <macroDebugShowTrigger+0x104>)
    5b9a:	e002      	b.n	5ba2 <macroDebugShowTrigger+0xce>
	case TriggerMacro_Release: print("Release"); break;
    5b9c:	480f      	ldr	r0, [pc, #60]	; (5bdc <macroDebugShowTrigger+0x108>)
    5b9e:	e000      	b.n	5ba2 <macroDebugShowTrigger+0xce>
	case TriggerMacro_Waiting: print("Waiting"); break;
    5ba0:	480f      	ldr	r0, [pc, #60]	; (5be0 <macroDebugShowTrigger+0x10c>)
	}
}
    5ba2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	print( NL "Trigger Macro State: " );
	switch ( record->state )
	{
	case TriggerMacro_Press:   print("Press");   break;
	case TriggerMacro_Release: print("Release"); break;
	case TriggerMacro_Waiting: print("Waiting"); break;
    5ba6:	f001 be3d 	b.w	7824 <_print>
    5baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5bae:	bf00      	nop
    5bb0:	0000b143 	.word	0x0000b143
    5bb4:	0000a488 	.word	0x0000a488
    5bb8:	00009aa1 	.word	0x00009aa1
    5bbc:	00009ac9 	.word	0x00009ac9
    5bc0:	00008f42 	.word	0x00008f42
    5bc4:	00009acb 	.word	0x00009acb
    5bc8:	1fffa096 	.word	0x1fffa096
    5bcc:	00009acd 	.word	0x00009acd
    5bd0:	00009ada 	.word	0x00009ada
    5bd4:	00009af1 	.word	0x00009af1
    5bd8:	00009b7e 	.word	0x00009b7e
    5bdc:	00009b87 	.word	0x00009b87
    5be0:	00009b09 	.word	0x00009b09

00005be4 <macroDebugShowResult>:
}

void macroDebugShowResult( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    5be4:	2844      	cmp	r0, #68	; 0x44
	case TriggerMacro_Waiting: print("Waiting"); break;
	}
}

void macroDebugShowResult( var_uint_t index )
{
    5be6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bea:	4604      	mov	r4, r0
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    5bec:	f200 8095 	bhi.w	5d1a <macroDebugShowResult+0x136>

	// Trigger Macro Show
	const ResultMacro *macro = &ResultMacroList[ index ];
	ResultMacroRecord *record = &ResultMacroRecordList[ index ];

	print( NL );
    5bf0:	484b      	ldr	r0, [pc, #300]	; (5d20 <macroDebugShowResult+0x13c>)
    5bf2:	f001 fe17 	bl	7824 <_print>
	info_msg("Result Macro Index: ");
    5bf6:	484b      	ldr	r0, [pc, #300]	; (5d24 <macroDebugShowResult+0x140>)
    5bf8:	f001 fe14 	bl	7824 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    5bfc:	4620      	mov	r0, r4
    5bfe:	f001 fe5e 	bl	78be <printInt16>
	print( NL );
    5c02:	4847      	ldr	r0, [pc, #284]	; (5d20 <macroDebugShowResult+0x13c>)
    5c04:	f001 fe0e 	bl	7824 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos++ ];
    5c08:	4b47      	ldr	r3, [pc, #284]	; (5d28 <macroDebugShowResult+0x144>)
    5c0a:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
    5c0e:	f896 8000 	ldrb.w	r8, [r6]
    5c12:	2701      	movs	r7, #1

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    5c14:	f1b8 0f00 	cmp.w	r8, #0
    5c18:	d064      	beq.n	5ce4 <macroDebugShowResult+0x100>
    5c1a:	463d      	mov	r5, r7
    5c1c:	2700      	movs	r7, #0
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);

			// Display Function Index
			printHex( guide->index );
    5c1e:	2101      	movs	r1, #1
    5c20:	5d70      	ldrb	r0, [r6, r5]
			print("|");

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    5c22:	f8df 9130 	ldr.w	r9, [pc, #304]	; 5d54 <macroDebugShowResult+0x170>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);

			// Display Function Index
			printHex( guide->index );
    5c26:	f001 fe80 	bl	792a <printHex_op>
			print("|");
    5c2a:	4840      	ldr	r0, [pc, #256]	; (5d2c <macroDebugShowResult+0x148>)
    5c2c:	f001 fdfa 	bl	7824 <_print>

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    5c30:	5d73      	ldrb	r3, [r6, r5]
    5c32:	2101      	movs	r1, #1
    5c34:	f839 0033 	ldrh.w	r0, [r9, r3, lsl #3]
    5c38:	f001 fe77 	bl	792a <printHex_op>
			print("|");
    5c3c:	483b      	ldr	r0, [pc, #236]	; (5d2c <macroDebugShowResult+0x148>)
    5c3e:	f001 fdf1 	bl	7824 <_print>

			// Display/Lookup Capability Name (utilize debug mode of capability)
			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    5c42:	5d73      	ldrb	r3, [r6, r5]
			capability( 0xFF, 0xFF, 0 );
    5c44:	20ff      	movs	r0, #255	; 0xff
    5c46:	4601      	mov	r1, r0
    5c48:	2200      	movs	r2, #0
    5c4a:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
    5c4e:	4798      	blx	r3

			// Display Argument(s)
			print("(");
    5c50:	4837      	ldr	r0, [pc, #220]	; (5d30 <macroDebugShowResult+0x14c>)
    5c52:	f001 fde7 	bl	7824 <_print>

		// Iterate through the combo
		while ( funcCount < comboLength )
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);
    5c56:	eb06 0b05 	add.w	fp, r6, r5
			// Display/Lookup Capability Name (utilize debug mode of capability)
			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
			capability( 0xFF, 0xFF, 0 );

			// Display Argument(s)
			print("(");
    5c5a:	2200      	movs	r2, #0
			for ( var_uint_t arg = 0; arg < CapabilitiesList[ guide->index ].argCount; arg++ )
    5c5c:	f89b 3000 	ldrb.w	r3, [fp]
    5c60:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 5d54 <macroDebugShowResult+0x170>
    5c64:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
    5c68:	7919      	ldrb	r1, [r3, #4]
    5c6a:	b2d3      	uxtb	r3, r2
    5c6c:	4299      	cmp	r1, r3
    5c6e:	d919      	bls.n	5ca4 <macroDebugShowResult+0xc0>
			{
				// Arguments are only 8 bit values
				printHex( (&guide->args)[ arg ] );
    5c70:	eb0b 0103 	add.w	r1, fp, r3
    5c74:	9201      	str	r2, [sp, #4]
    5c76:	7848      	ldrb	r0, [r1, #1]
    5c78:	9300      	str	r3, [sp, #0]
    5c7a:	2101      	movs	r1, #1
    5c7c:	f001 fe55 	bl	792a <printHex_op>

				// Only show arg separator if there are args left
				if ( arg + 1 < CapabilitiesList[ guide->index ].argCount )
    5c80:	f89b 1000 	ldrb.w	r1, [fp]
    5c84:	9b00      	ldr	r3, [sp, #0]
    5c86:	9a01      	ldr	r2, [sp, #4]
    5c88:	eb0a 0ac1 	add.w	sl, sl, r1, lsl #3
    5c8c:	3301      	adds	r3, #1
    5c8e:	f89a 1004 	ldrb.w	r1, [sl, #4]
    5c92:	428b      	cmp	r3, r1
    5c94:	da04      	bge.n	5ca0 <macroDebugShowResult+0xbc>
					print(",");
    5c96:	4827      	ldr	r0, [pc, #156]	; (5d34 <macroDebugShowResult+0x150>)
    5c98:	9200      	str	r2, [sp, #0]
    5c9a:	f001 fdc3 	bl	7824 <_print>
    5c9e:	9a00      	ldr	r2, [sp, #0]
    5ca0:	3201      	adds	r2, #1
    5ca2:	e7db      	b.n	5c5c <macroDebugShowResult+0x78>
			}
			print(")");
    5ca4:	4824      	ldr	r0, [pc, #144]	; (5d38 <macroDebugShowResult+0x154>)
    5ca6:	f001 fdbd 	bl	7824 <_print>

			// Increment position
			pos += ResultGuideSize( guide );
    5caa:	f89b 3000 	ldrb.w	r3, [fp]
    5cae:	eb0a 0ac3 	add.w	sl, sl, r3, lsl #3

			// Increment function count
			funcCount++;
    5cb2:	3701      	adds	r7, #1
    5cb4:	f89a 3004 	ldrb.w	r3, [sl, #4]
    5cb8:	b2ff      	uxtb	r7, r7
    5cba:	3301      	adds	r3, #1
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    5cbc:	441d      	add	r5, r3

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    5cbe:	4547      	cmp	r7, r8
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    5cc0:	b2ed      	uxtb	r5, r5

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    5cc2:	d202      	bcs.n	5cca <macroDebugShowResult+0xe6>
				print("+");
    5cc4:	481d      	ldr	r0, [pc, #116]	; (5d3c <macroDebugShowResult+0x158>)
    5cc6:	f001 fdad 	bl	7824 <_print>
	{
		// Function Counter, used to keep track of the combos processed
		var_uint_t funcCount = 0;

		// Iterate through the combo
		while ( funcCount < comboLength )
    5cca:	4547      	cmp	r7, r8
    5ccc:	d1a7      	bne.n	5c1e <macroDebugShowResult+0x3a>
			if ( funcCount < comboLength )
				print("+");
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos++ ];
    5cce:	f816 8005 	ldrb.w	r8, [r6, r5]
    5cd2:	1c6f      	adds	r7, r5, #1
    5cd4:	b2ff      	uxtb	r7, r7

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    5cd6:	f1b8 0f00 	cmp.w	r8, #0
    5cda:	d003      	beq.n	5ce4 <macroDebugShowResult+0x100>
			print(";");
    5cdc:	4818      	ldr	r0, [pc, #96]	; (5d40 <macroDebugShowResult+0x15c>)
    5cde:	f001 fda1 	bl	7824 <_print>
    5ce2:	e797      	b.n	5c14 <macroDebugShowResult+0x30>
	}

	// Display current position
	print( NL "Position: " );
    5ce4:	4817      	ldr	r0, [pc, #92]	; (5d44 <macroDebugShowResult+0x160>)
    5ce6:	f001 fd9d 	bl	7824 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    5cea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5cee:	4b16      	ldr	r3, [pc, #88]	; (5d48 <macroDebugShowResult+0x164>)
    5cf0:	191d      	adds	r5, r3, r4
    5cf2:	5d18      	ldrb	r0, [r3, r4]
    5cf4:	f001 fde3 	bl	78be <printInt16>

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
    5cf8:	4814      	ldr	r0, [pc, #80]	; (5d4c <macroDebugShowResult+0x168>)
    5cfa:	f001 fd93 	bl	7824 <_print>
	printHex( record->state );
    5cfe:	7868      	ldrb	r0, [r5, #1]
    5d00:	2101      	movs	r1, #1
    5d02:	f001 fe12 	bl	792a <printHex_op>
	print("/");
    5d06:	4812      	ldr	r0, [pc, #72]	; (5d50 <macroDebugShowResult+0x16c>)
    5d08:	f001 fd8c 	bl	7824 <_print>
	printHex( record->stateType );
    5d0c:	78a8      	ldrb	r0, [r5, #2]
    5d0e:	2101      	movs	r1, #1
}
    5d10:	b003      	add	sp, #12
    5d12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
	printHex( record->state );
	print("/");
	printHex( record->stateType );
    5d16:	f001 be08 	b.w	792a <printHex_op>
}
    5d1a:	b003      	add	sp, #12
    5d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d20:	0000b143 	.word	0x0000b143
    5d24:	00009b11 	.word	0x00009b11
    5d28:	00009e40 	.word	0x00009e40
    5d2c:	00009ac9 	.word	0x00009ac9
    5d30:	00009b38 	.word	0x00009b38
    5d34:	00009b3a 	.word	0x00009b3a
    5d38:	0000ac37 	.word	0x0000ac37
    5d3c:	00008f42 	.word	0x00008f42
    5d40:	00009acb 	.word	0x00009acb
    5d44:	00009acd 	.word	0x00009acd
    5d48:	1fff9e61 	.word	0x1fff9e61
    5d4c:	00009b3c 	.word	0x00009b3c
    5d50:	00008e80 	.word	0x00008e80
    5d54:	00009454 	.word	0x00009454

00005d58 <cliFunc_macroShow>:

void cliFunc_macroShow( char* args )
{
    5d58:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5d5a:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5d5c:	9801      	ldr	r0, [sp, #4]
    5d5e:	4669      	mov	r1, sp
    5d60:	aa01      	add	r2, sp, #4
    5d62:	f001 fa9f 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5d66:	9800      	ldr	r0, [sp, #0]
    5d68:	7803      	ldrb	r3, [r0, #0]
    5d6a:	b18b      	cbz	r3, 5d90 <cliFunc_macroShow+0x38>
			break;

		// Ignore invalid codes
		switch ( arg1Ptr[0] )
    5d6c:	2b52      	cmp	r3, #82	; 0x52
    5d6e:	d008      	beq.n	5d82 <cliFunc_macroShow+0x2a>
    5d70:	2b54      	cmp	r3, #84	; 0x54
    5d72:	d1f3      	bne.n	5d5c <cliFunc_macroShow+0x4>
		{
		// Indexed Trigger Macro
		case 'T':
			macroDebugShowTrigger( numToInt( &arg1Ptr[1] ) );
    5d74:	3001      	adds	r0, #1
    5d76:	f001 fe30 	bl	79da <numToInt>
    5d7a:	b2c0      	uxtb	r0, r0
    5d7c:	f7ff feaa 	bl	5ad4 <macroDebugShowTrigger>
			break;
    5d80:	e7ec      	b.n	5d5c <cliFunc_macroShow+0x4>
		// Indexed Result Macro
		case 'R':
			macroDebugShowResult( numToInt( &arg1Ptr[1] ) );
    5d82:	3001      	adds	r0, #1
    5d84:	f001 fe29 	bl	79da <numToInt>
    5d88:	b2c0      	uxtb	r0, r0
    5d8a:	f7ff ff2b 	bl	5be4 <macroDebugShowResult>
			break;
    5d8e:	e7e5      	b.n	5d5c <cliFunc_macroShow+0x4>
		}
	}
}
    5d90:	b003      	add	sp, #12
    5d92:	f85d fb04 	ldr.w	pc, [sp], #4
    5d96:	0000      	movs	r0, r0

00005d98 <cliFunc_sendKeys>:


void cliFunc_sendKeys( char* args )
{
	// Copy USBKeys_KeysCLI to USBKeys_Keys
	for ( uint8_t key = 0; key < USBKeys_SentCLI; ++key )
    5d98:	4b04      	ldr	r3, [pc, #16]	; (5dac <cliFunc_sendKeys+0x14>)
	{
		// TODO
		//USBKeys_Keys[key] = USBKeys_KeysCLI[key];
	}
	USBKeys_Sent = USBKeys_SentCLI;
    5d9a:	781a      	ldrb	r2, [r3, #0]
    5d9c:	4b04      	ldr	r3, [pc, #16]	; (5db0 <cliFunc_sendKeys+0x18>)
    5d9e:	701a      	strb	r2, [r3, #0]

	// Set modifier byte
	USBKeys_Modifiers = USBKeys_ModifiersCLI;
    5da0:	4b04      	ldr	r3, [pc, #16]	; (5db4 <cliFunc_sendKeys+0x1c>)
    5da2:	781a      	ldrb	r2, [r3, #0]
    5da4:	4b04      	ldr	r3, [pc, #16]	; (5db8 <cliFunc_sendKeys+0x20>)
    5da6:	701a      	strb	r2, [r3, #0]
    5da8:	4770      	bx	lr
    5daa:	bf00      	nop
    5dac:	1fff910d 	.word	0x1fff910d
    5db0:	1fff910c 	.word	0x1fff910c
    5db4:	1fff910f 	.word	0x1fff910f
    5db8:	1fff9108 	.word	0x1fff9108

00005dbc <cliFunc_kbdProtocol>:


// ----- CLI Command Functions -----

void cliFunc_kbdProtocol( char* args )
{
    5dbc:	b508      	push	{r3, lr}
	print( NL );
    5dbe:	4806      	ldr	r0, [pc, #24]	; (5dd8 <cliFunc_kbdProtocol+0x1c>)
    5dc0:	f001 fd30 	bl	7824 <_print>
	info_msg("Keyboard Protocol: ");
    5dc4:	4805      	ldr	r0, [pc, #20]	; (5ddc <cliFunc_kbdProtocol+0x20>)
    5dc6:	f001 fd2d 	bl	7824 <_print>
	printInt8( USBKeys_Protocol );
    5dca:	4b05      	ldr	r3, [pc, #20]	; (5de0 <cliFunc_kbdProtocol+0x24>)
    5dcc:	7818      	ldrb	r0, [r3, #0]
}
    5dce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void cliFunc_kbdProtocol( char* args )
{
	print( NL );
	info_msg("Keyboard Protocol: ");
	printInt8( USBKeys_Protocol );
    5dd2:	f001 bd56 	b.w	7882 <printInt8>
    5dd6:	bf00      	nop
    5dd8:	0000b143 	.word	0x0000b143
    5ddc:	0000aad4 	.word	0x0000aad4
    5de0:	1fff8b49 	.word	0x1fff8b49

00005de4 <cliFunc_readLEDs>:
	}
}


void cliFunc_readLEDs( char* args )
{
    5de4:	b508      	push	{r3, lr}
	print( NL );
    5de6:	4806      	ldr	r0, [pc, #24]	; (5e00 <cliFunc_readLEDs+0x1c>)
    5de8:	f001 fd1c 	bl	7824 <_print>
	info_msg("LED State: ");
    5dec:	4805      	ldr	r0, [pc, #20]	; (5e04 <cliFunc_readLEDs+0x20>)
    5dee:	f001 fd19 	bl	7824 <_print>
	printInt8( USBKeys_LEDs );
    5df2:	4b05      	ldr	r3, [pc, #20]	; (5e08 <cliFunc_readLEDs+0x24>)
    5df4:	7818      	ldrb	r0, [r3, #0]
}
    5df6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void cliFunc_readLEDs( char* args )
{
	print( NL );
	info_msg("LED State: ");
	printInt8( USBKeys_LEDs );
    5dfa:	f001 bd42 	b.w	7882 <printInt8>
    5dfe:	bf00      	nop
    5e00:	0000b143 	.word	0x0000b143
    5e04:	0000aafa 	.word	0x0000aafa
    5e08:	1fff9107 	.word	0x1fff9107

00005e0c <cliFunc_setKeys>:
	USBKeys_Modifiers = USBKeys_ModifiersCLI;
}


void cliFunc_setKeys( char* args )
{
    5e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5e0e:	4b0b      	ldr	r3, [pc, #44]	; (5e3c <cliFunc_setKeys+0x30>)

void cliFunc_setKeys( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5e10:	9001      	str	r0, [sp, #4]

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5e12:	2200      	movs	r2, #0
    5e14:	701a      	strb	r2, [r3, #0]
    5e16:	461c      	mov	r4, r3
    5e18:	7823      	ldrb	r3, [r4, #0]
    5e1a:	4d08      	ldr	r5, [pc, #32]	; (5e3c <cliFunc_setKeys+0x30>)
    5e1c:	2b05      	cmp	r3, #5
    5e1e:	d80b      	bhi.n	5e38 <cliFunc_setKeys+0x2c>
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5e20:	9801      	ldr	r0, [sp, #4]
    5e22:	4669      	mov	r1, sp
    5e24:	aa01      	add	r2, sp, #4
    5e26:	f001 fa3d 	bl	72a4 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5e2a:	9b00      	ldr	r3, [sp, #0]
    5e2c:	781b      	ldrb	r3, [r3, #0]
    5e2e:	b11b      	cbz	r3, 5e38 <cliFunc_setKeys+0x2c>
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5e30:	782b      	ldrb	r3, [r5, #0]
    5e32:	3301      	adds	r3, #1
    5e34:	702b      	strb	r3, [r5, #0]
    5e36:	e7ef      	b.n	5e18 <cliFunc_setKeys+0xc>

		// Add the USB code to be sent
		// TODO
		//USBKeys_KeysCLI[USBKeys_SentCLI] = numToInt( arg1Ptr );
	}
}
    5e38:	b003      	add	sp, #12
    5e3a:	bd30      	pop	{r4, r5, pc}
    5e3c:	1fff910d 	.word	0x1fff910d

00005e40 <cliFunc_outputDebug>:
	printInt8( USBKeys_Protocol );
}


void cliFunc_outputDebug( char* args )
{
    5e40:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    5e42:	4c07      	ldr	r4, [pc, #28]	; (5e60 <cliFunc_outputDebug+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    5e44:	4669      	mov	r1, sp
    5e46:	aa01      	add	r2, sp, #4
    5e48:	f001 fa2c 	bl	72a4 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    5e4c:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    5e4e:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    5e50:	7023      	strb	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    5e52:	7803      	ldrb	r3, [r0, #0]
    5e54:	b113      	cbz	r3, 5e5c <cliFunc_outputDebug+0x1c>
	{
		Output_DebugMode = (uint16_t)numToInt( arg1Ptr );
    5e56:	f001 fdc0 	bl	79da <numToInt>
    5e5a:	7020      	strb	r0, [r4, #0]
	}
}
    5e5c:	b002      	add	sp, #8
    5e5e:	bd10      	pop	{r4, pc}
    5e60:	1fff910b 	.word	0x1fff910b

00005e64 <cliFunc_setMod>:
	}
}


void cliFunc_setMod( char* args )
{
    5e64:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    5e66:	4669      	mov	r1, sp
    5e68:	aa01      	add	r2, sp, #4
    5e6a:	f001 fa1b 	bl	72a4 <CLI_argumentIsolation>

	USBKeys_ModifiersCLI = numToInt( arg1Ptr );
    5e6e:	9800      	ldr	r0, [sp, #0]
    5e70:	f001 fdb3 	bl	79da <numToInt>
    5e74:	4b02      	ldr	r3, [pc, #8]	; (5e80 <cliFunc_setMod+0x1c>)
    5e76:	7018      	strb	r0, [r3, #0]
}
    5e78:	b003      	add	sp, #12
    5e7a:	f85d fb04 	ldr.w	pc, [sp], #4
    5e7e:	bf00      	nop
    5e80:	1fff910f 	.word	0x1fff910f

00005e84 <Output_consCtrlSend_capability>:

// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5e84:	29ff      	cmp	r1, #255	; 0xff
}


// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5e86:	b530      	push	{r4, r5, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5e88:	d103      	bne.n	5e92 <Output_consCtrlSend_capability+0xe>
    5e8a:	28ff      	cmp	r0, #255	; 0xff
    5e8c:	d101      	bne.n	5e92 <Output_consCtrlSend_capability+0xe>
	{
		print("Output_consCtrlSend(consCode)");
    5e8e:	480e      	ldr	r0, [pc, #56]	; (5ec8 <Output_consCtrlSend_capability+0x44>)
    5e90:	e003      	b.n	5e9a <Output_consCtrlSend_capability+0x16>
		return;
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
    5e92:	4b0e      	ldr	r3, [pc, #56]	; (5ecc <Output_consCtrlSend_capability+0x48>)
    5e94:	781b      	ldrb	r3, [r3, #0]
    5e96:	b923      	cbnz	r3, 5ea2 <Output_consCtrlSend_capability+0x1e>
	{
		warn_print("Consumer Control is not implemented for Boot Mode");
    5e98:	480d      	ldr	r0, [pc, #52]	; (5ed0 <Output_consCtrlSend_capability+0x4c>)
		return;
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
}
    5e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
	{
		warn_print("Consumer Control is not implemented for Boot Mode");
    5e9e:	f001 bcc1 	b.w	7824 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    5ea2:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    5ea6:	2b01      	cmp	r3, #1
    5ea8:	4c0a      	ldr	r4, [pc, #40]	; (5ed4 <Output_consCtrlSend_capability+0x50>)
    5eaa:	d109      	bne.n	5ec0 <Output_consCtrlSend_capability+0x3c>
		USBKeys_Changed |= USBKeyChangeState_Consumer;
    5eac:	4d0a      	ldr	r5, [pc, #40]	; (5ed8 <Output_consCtrlSend_capability+0x54>)
    5eae:	782b      	ldrb	r3, [r5, #0]
    5eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5eb4:	702b      	strb	r3, [r5, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    5eb6:	b919      	cbnz	r1, 5ec0 <Output_consCtrlSend_capability+0x3c>
    5eb8:	2803      	cmp	r0, #3
    5eba:	d101      	bne.n	5ec0 <Output_consCtrlSend_capability+0x3c>
	{
		USBKeys_ConsCtrl = 0;
    5ebc:	8021      	strh	r1, [r4, #0]
		return;
    5ebe:	bd30      	pop	{r4, r5, pc}
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
    5ec0:	8813      	ldrh	r3, [r2, #0]
    5ec2:	8023      	strh	r3, [r4, #0]
    5ec4:	bd30      	pop	{r4, r5, pc}
    5ec6:	bf00      	nop
    5ec8:	0000ab18 	.word	0x0000ab18
    5ecc:	1fff8b49 	.word	0x1fff8b49
    5ed0:	0000ab36 	.word	0x0000ab36
    5ed4:	1fffa166 	.word	0x1fffa166
    5ed8:	1fff9109 	.word	0x1fff9109

00005edc <Output_noneSend_capability>:
// Ignores the given key status update
// Used to prevent fall-through, this is the None keyword in KLL
void Output_noneSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5edc:	29ff      	cmp	r1, #255	; 0xff
    5ede:	d104      	bne.n	5eea <Output_noneSend_capability+0xe>
    5ee0:	28ff      	cmp	r0, #255	; 0xff
    5ee2:	d102      	bne.n	5eea <Output_noneSend_capability+0xe>
	{
		print("Output_noneSend()");
    5ee4:	4801      	ldr	r0, [pc, #4]	; (5eec <Output_noneSend_capability+0x10>)
    5ee6:	f001 bc9d 	b.w	7824 <_print>
    5eea:	4770      	bx	lr
    5eec:	0000ab7f 	.word	0x0000ab7f

00005ef0 <Output_sysCtrlSend_capability>:

// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5ef0:	29ff      	cmp	r1, #255	; 0xff
}


// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5ef2:	b530      	push	{r4, r5, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5ef4:	d103      	bne.n	5efe <Output_sysCtrlSend_capability+0xe>
    5ef6:	28ff      	cmp	r0, #255	; 0xff
    5ef8:	d101      	bne.n	5efe <Output_sysCtrlSend_capability+0xe>
	{
		print("Output_sysCtrlSend(sysCode)");
    5efa:	480e      	ldr	r0, [pc, #56]	; (5f34 <Output_sysCtrlSend_capability+0x44>)
    5efc:	e003      	b.n	5f06 <Output_sysCtrlSend_capability+0x16>
		return;
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
    5efe:	4b0e      	ldr	r3, [pc, #56]	; (5f38 <Output_sysCtrlSend_capability+0x48>)
    5f00:	781b      	ldrb	r3, [r3, #0]
    5f02:	b923      	cbnz	r3, 5f0e <Output_sysCtrlSend_capability+0x1e>
	{
		warn_print("System Control is not implemented for Boot Mode");
    5f04:	480d      	ldr	r0, [pc, #52]	; (5f3c <Output_sysCtrlSend_capability+0x4c>)
		return;
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
}
    5f06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
	{
		warn_print("System Control is not implemented for Boot Mode");
    5f0a:	f001 bc8b 	b.w	7824 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    5f0e:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    5f12:	2b01      	cmp	r3, #1
    5f14:	4c0a      	ldr	r4, [pc, #40]	; (5f40 <Output_sysCtrlSend_capability+0x50>)
    5f16:	d109      	bne.n	5f2c <Output_sysCtrlSend_capability+0x3c>
		USBKeys_Changed |= USBKeyChangeState_System;
    5f18:	4d0a      	ldr	r5, [pc, #40]	; (5f44 <Output_sysCtrlSend_capability+0x54>)
    5f1a:	782b      	ldrb	r3, [r5, #0]
    5f1c:	f043 0320 	orr.w	r3, r3, #32
    5f20:	702b      	strb	r3, [r5, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    5f22:	b919      	cbnz	r1, 5f2c <Output_sysCtrlSend_capability+0x3c>
    5f24:	2803      	cmp	r0, #3
    5f26:	d101      	bne.n	5f2c <Output_sysCtrlSend_capability+0x3c>
	{
		USBKeys_SysCtrl = 0;
    5f28:	7021      	strb	r1, [r4, #0]
		return;
    5f2a:	bd30      	pop	{r4, r5, pc}
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
    5f2c:	7813      	ldrb	r3, [r2, #0]
    5f2e:	7023      	strb	r3, [r4, #0]
    5f30:	bd30      	pop	{r4, r5, pc}
    5f32:	bf00      	nop
    5f34:	0000ab91 	.word	0x0000ab91
    5f38:	1fff8b49 	.word	0x1fff8b49
    5f3c:	0000abad 	.word	0x0000abad
    5f40:	1fffa12e 	.word	0x1fffa12e
    5f44:	1fff9109 	.word	0x1fff9109

00005f48 <Output_flashMode_capability>:
}

void Output_flashMode_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f48:	29ff      	cmp	r1, #255	; 0xff
    5f4a:	d104      	bne.n	5f56 <Output_flashMode_capability+0xe>
    5f4c:	28ff      	cmp	r0, #255	; 0xff
    5f4e:	d102      	bne.n	5f56 <Output_flashMode_capability+0xe>
	{
		print("Output_flashMode()");
    5f50:	4802      	ldr	r0, [pc, #8]	; (5f5c <Output_flashMode_capability+0x14>)
    5f52:	f001 bc67 	b.w	7824 <_print>


// Sets the device into firmware reload mode
inline void Output_firmwareReload()
{
	usb_device_reload();
    5f56:	f000 ba51 	b.w	63fc <usb_device_reload>
    5f5a:	bf00      	nop
    5f5c:	0000abf4 	.word	0x0000abf4

00005f60 <Output_flushBuffers>:

// ----- Functions -----

// Flush Key buffers
void Output_flushBuffers()
{
    5f60:	2200      	movs	r2, #0
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
		USBKeys_Keys[ c ] = 0;
    5f62:	4906      	ldr	r1, [pc, #24]	; (5f7c <Output_flushBuffers+0x1c>)
    5f64:	2300      	movs	r3, #0
    5f66:	5453      	strb	r3, [r2, r1]
    5f68:	3201      	adds	r2, #1

// Flush Key buffers
void Output_flushBuffers()
{
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
    5f6a:	2a1b      	cmp	r2, #27
    5f6c:	d1f9      	bne.n	5f62 <Output_flushBuffers+0x2>
		USBKeys_Keys[ c ] = 0;

	// Zero out other key buffers
	USBKeys_ConsCtrl = 0;
    5f6e:	4a04      	ldr	r2, [pc, #16]	; (5f80 <Output_flushBuffers+0x20>)
    5f70:	8013      	strh	r3, [r2, #0]
	USBKeys_Modifiers = 0;
    5f72:	4a04      	ldr	r2, [pc, #16]	; (5f84 <Output_flushBuffers+0x24>)
    5f74:	7013      	strb	r3, [r2, #0]
	USBKeys_SysCtrl = 0;
    5f76:	4a04      	ldr	r2, [pc, #16]	; (5f88 <Output_flushBuffers+0x28>)
    5f78:	7013      	strb	r3, [r2, #0]
    5f7a:	4770      	bx	lr
    5f7c:	1fffa12f 	.word	0x1fffa12f
    5f80:	1fffa166 	.word	0x1fffa166
    5f84:	1fff9108 	.word	0x1fff9108
    5f88:	1fffa12e 	.word	0x1fffa12e

00005f8c <Output_kbdProtocolBoot_capability>:

// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f8c:	29ff      	cmp	r1, #255	; 0xff

// ----- Capabilities -----

// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5f8e:	b510      	push	{r4, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f90:	d106      	bne.n	5fa0 <Output_kbdProtocolBoot_capability+0x14>
    5f92:	28ff      	cmp	r0, #255	; 0xff
    5f94:	d104      	bne.n	5fa0 <Output_kbdProtocolBoot_capability+0x14>
	{
		print("Output_kbdProtocolBoot()");
    5f96:	4807      	ldr	r0, [pc, #28]	; (5fb4 <Output_kbdProtocolBoot_capability+0x28>)
	// Flush the key buffers
	Output_flushBuffers();

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
}
    5f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolBoot()");
    5f9c:	f001 bc42 	b.w	7824 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 0 )
    5fa0:	4c05      	ldr	r4, [pc, #20]	; (5fb8 <Output_kbdProtocolBoot_capability+0x2c>)
    5fa2:	7823      	ldrb	r3, [r4, #0]
    5fa4:	b12b      	cbz	r3, 5fb2 <Output_kbdProtocolBoot_capability+0x26>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    5fa6:	2901      	cmp	r1, #1
    5fa8:	d103      	bne.n	5fb2 <Output_kbdProtocolBoot_capability+0x26>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    5faa:	f7ff ffd9 	bl	5f60 <Output_flushBuffers>

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
    5fae:	2300      	movs	r3, #0
    5fb0:	7023      	strb	r3, [r4, #0]
    5fb2:	bd10      	pop	{r4, pc}
    5fb4:	0000ac07 	.word	0x0000ac07
    5fb8:	1fff8b49 	.word	0x1fff8b49

00005fbc <Output_kbdProtocolNKRO_capability>:

// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5fbc:	29ff      	cmp	r1, #255	; 0xff
}


// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5fbe:	b538      	push	{r3, r4, r5, lr}
    5fc0:	460c      	mov	r4, r1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5fc2:	d106      	bne.n	5fd2 <Output_kbdProtocolNKRO_capability+0x16>
    5fc4:	28ff      	cmp	r0, #255	; 0xff
    5fc6:	d104      	bne.n	5fd2 <Output_kbdProtocolNKRO_capability+0x16>
	{
		print("Output_kbdProtocolNKRO()");
    5fc8:	4807      	ldr	r0, [pc, #28]	; (5fe8 <Output_kbdProtocolNKRO_capability+0x2c>)
	// Flush the key buffers
	Output_flushBuffers();

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
}
    5fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolNKRO()");
    5fce:	f001 bc29 	b.w	7824 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 1 )
    5fd2:	4d06      	ldr	r5, [pc, #24]	; (5fec <Output_kbdProtocolNKRO_capability+0x30>)
    5fd4:	782b      	ldrb	r3, [r5, #0]
    5fd6:	2b01      	cmp	r3, #1
    5fd8:	d004      	beq.n	5fe4 <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    5fda:	2c01      	cmp	r4, #1
    5fdc:	d102      	bne.n	5fe4 <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    5fde:	f7ff ffbf 	bl	5f60 <Output_flushBuffers>

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
    5fe2:	702c      	strb	r4, [r5, #0]
    5fe4:	bd38      	pop	{r3, r4, r5, pc}
    5fe6:	bf00      	nop
    5fe8:	0000ac20 	.word	0x0000ac20
    5fec:	1fff8b49 	.word	0x1fff8b49

00005ff0 <Output_usbCodeSend_capability>:
// Adds a single USB Code to the USB Output buffer
// Argument #1: USB Code
void Output_usbCodeSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5ff0:	29ff      	cmp	r1, #255	; 0xff


// Adds a single USB Code to the USB Output buffer
// Argument #1: USB Code
void Output_usbCodeSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5ff2:	b538      	push	{r3, r4, r5, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5ff4:	d103      	bne.n	5ffe <Output_usbCodeSend_capability+0xe>
    5ff6:	28ff      	cmp	r0, #255	; 0xff
    5ff8:	d101      	bne.n	5ffe <Output_usbCodeSend_capability+0xe>
	{
		print("Output_usbCodeSend(usbCode)");
    5ffa:	485f      	ldr	r0, [pc, #380]	; (6178 <Output_usbCodeSend_capability+0x188>)
    5ffc:	e0a8      	b.n	6150 <Output_usbCodeSend_capability+0x160>
		return;
	}

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release, only used for NKRO
	switch ( USBKeys_Protocol )
    5ffe:	4b5f      	ldr	r3, [pc, #380]	; (617c <Output_usbCodeSend_capability+0x18c>)
    6000:	781c      	ldrb	r4, [r3, #0]
    6002:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    6006:	b114      	cbz	r4, 600e <Output_usbCodeSend_capability+0x1e>
    6008:	2d01      	cmp	r5, #1
    600a:	d00b      	beq.n	6024 <Output_usbCodeSend_capability+0x34>
    600c:	e012      	b.n	6034 <Output_usbCodeSend_capability+0x44>
	{
	case 0: // Boot Mode
		// TODO Analog inputs
		// Only indicate USB has changed if either a press or release has occured
		if ( state == 0x01 || state == 0x03 )
    600e:	f000 04fd 	and.w	r4, r0, #253	; 0xfd
    6012:	2c01      	cmp	r4, #1
    6014:	d10e      	bne.n	6034 <Output_usbCodeSend_capability+0x44>
			USBKeys_Changed = USBKeyChangeState_MainKeys;
    6016:	4c5a      	ldr	r4, [pc, #360]	; (6180 <Output_usbCodeSend_capability+0x190>)
    6018:	2502      	movs	r5, #2
    601a:	7025      	strb	r5, [r4, #0]

		// Only send keypresses if press or hold state
		if ( stateType == 0x00 && state == 0x03 ) // Release state
    601c:	b951      	cbnz	r1, 6034 <Output_usbCodeSend_capability+0x44>
    601e:	2803      	cmp	r0, #3
    6020:	d108      	bne.n	6034 <Output_usbCodeSend_capability+0x44>
    6022:	bd38      	pop	{r3, r4, r5, pc}
			return;
		break;
	case 1: // NKRO Mode
		// Only send press and release events
		if ( stateType == 0x00 && state == 0x02 ) // Hold state
    6024:	b931      	cbnz	r1, 6034 <Output_usbCodeSend_capability+0x44>
    6026:	2802      	cmp	r0, #2
    6028:	f000 80a4 	beq.w	6174 <Output_usbCodeSend_capability+0x184>
		print("Output_usbCodeSend(usbCode)");
		return;
	}

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release, only used for NKRO
    602c:	1e41      	subs	r1, r0, #1
    602e:	4248      	negs	r0, r1
    6030:	4148      	adcs	r0, r1
    6032:	e000      	b.n	6036 <Output_usbCodeSend_capability+0x46>
    6034:	2000      	movs	r0, #0
	//  Bits  48 - 161 (bytes  6 - 20) correspond to USB Codes  51 - 164 (Secondary)
	//  Bits 168 - 213 (bytes 21 - 26) correspond to USB Codes 176 - 221 (Tertiary)
	//  Bits 214 - 216                 unused
	uint8_t bytePosition = 0;
	uint8_t byteShift = 0;
	switch ( USBKeys_Protocol )
    6036:	781b      	ldrb	r3, [r3, #0]
			keyPress = 1;
		break;
	}

	// Get the keycode from arguments
	uint8_t key = args[0];
    6038:	7814      	ldrb	r4, [r2, #0]
	//  Bits  48 - 161 (bytes  6 - 20) correspond to USB Codes  51 - 164 (Secondary)
	//  Bits 168 - 213 (bytes 21 - 26) correspond to USB Codes 176 - 221 (Tertiary)
	//  Bits 214 - 216                 unused
	uint8_t bytePosition = 0;
	uint8_t byteShift = 0;
	switch ( USBKeys_Protocol )
    603a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    603e:	b113      	cbz	r3, 6046 <Output_usbCodeSend_capability+0x56>
    6040:	2d01      	cmp	r5, #1
    6042:	d020      	beq.n	6086 <Output_usbCodeSend_capability+0x96>
    6044:	bd38      	pop	{r3, r4, r5, pc}
	{
	case 0: // Boot Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    6046:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    604a:	2be0      	cmp	r3, #224	; 0xe0
    604c:	d108      	bne.n	6060 <Output_usbCodeSend_capability+0x70>
		{
			USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    604e:	494d      	ldr	r1, [pc, #308]	; (6184 <Output_usbCodeSend_capability+0x194>)
    6050:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
    6054:	780a      	ldrb	r2, [r1, #0]
    6056:	2301      	movs	r3, #1
    6058:	40a3      	lsls	r3, r4
    605a:	4313      	orrs	r3, r2
    605c:	700b      	strb	r3, [r1, #0]
    605e:	bd38      	pop	{r3, r4, r5, pc}
		}
		// Normal USB Code
		else
		{
			// USB Key limit reached
			if ( USBKeys_Sent >= USB_BOOT_MAX_KEYS )
    6060:	4a49      	ldr	r2, [pc, #292]	; (6188 <Output_usbCodeSend_capability+0x198>)
    6062:	7813      	ldrb	r3, [r2, #0]
    6064:	2b05      	cmp	r3, #5
    6066:	d901      	bls.n	606c <Output_usbCodeSend_capability+0x7c>
			{
				warn_print("USB Key limit reached");
    6068:	4848      	ldr	r0, [pc, #288]	; (618c <Output_usbCodeSend_capability+0x19c>)
    606a:	e071      	b.n	6150 <Output_usbCodeSend_capability+0x160>
				return;
			}

			// Make sure key is within the USB HID range
			if ( key <= 104 )
    606c:	2c68      	cmp	r4, #104	; 0x68
    606e:	d804      	bhi.n	607a <Output_usbCodeSend_capability+0x8a>
			{
				USBKeys_Keys[USBKeys_Sent++] = key;
    6070:	1c59      	adds	r1, r3, #1
    6072:	7011      	strb	r1, [r2, #0]
    6074:	4a46      	ldr	r2, [pc, #280]	; (6190 <Output_usbCodeSend_capability+0x1a0>)
    6076:	54d4      	strb	r4, [r2, r3]
    6078:	bd38      	pop	{r3, r4, r5, pc}
			}
			// Invalid key
			else
			{
				warn_msg("USB Code above 104/0x68 in Boot Mode: ");
    607a:	4846      	ldr	r0, [pc, #280]	; (6194 <Output_usbCodeSend_capability+0x1a4>)
    607c:	f001 fbd2 	bl	7824 <_print>
				printHex( key );
    6080:	4620      	mov	r0, r4
    6082:	2101      	movs	r1, #1
    6084:	e061      	b.n	614a <Output_usbCodeSend_capability+0x15a>
		}
		break;

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    6086:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    608a:	2be0      	cmp	r3, #224	; 0xe0
    608c:	d110      	bne.n	60b0 <Output_usbCodeSend_capability+0xc0>
    608e:	4b3d      	ldr	r3, [pc, #244]	; (6184 <Output_usbCodeSend_capability+0x194>)
    6090:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
		{
			if ( keyPress )
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    6094:	40a5      	lsls	r5, r4
    6096:	781a      	ldrb	r2, [r3, #0]

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
		{
			if ( keyPress )
    6098:	b108      	cbz	r0, 609e <Output_usbCodeSend_capability+0xae>
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    609a:	4315      	orrs	r5, r2
    609c:	e001      	b.n	60a2 <Output_usbCodeSend_capability+0xb2>
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    609e:	ea22 0505 	bic.w	r5, r2, r5
			}

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
    60a2:	4a37      	ldr	r2, [pc, #220]	; (6180 <Output_usbCodeSend_capability+0x190>)
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    60a4:	701d      	strb	r5, [r3, #0]
			}

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
    60a6:	7813      	ldrb	r3, [r2, #0]
    60a8:	f043 0301 	orr.w	r3, r3, #1
    60ac:	7013      	strb	r3, [r2, #0]
			break;
    60ae:	bd38      	pop	{r3, r4, r5, pc}
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    60b0:	1f23      	subs	r3, r4, #4
    60b2:	2b2d      	cmp	r3, #45	; 0x2d
    60b4:	d80f      	bhi.n	60d6 <Output_usbCodeSend_capability+0xe6>
    60b6:	3c05      	subs	r4, #5
    60b8:	b2e4      	uxtb	r4, r4
    60ba:	2c2e      	cmp	r4, #46	; 0x2e
    60bc:	bf9f      	itttt	ls
    60be:	4b36      	ldrls	r3, [pc, #216]	; (6198 <Output_usbCodeSend_capability+0x1a8>)
    60c0:	5d1a      	ldrbls	r2, [r3, r4]
    60c2:	4b36      	ldrls	r3, [pc, #216]	; (619c <Output_usbCodeSend_capability+0x1ac>)
    60c4:	5d19      	ldrbls	r1, [r3, r4]
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    60c6:	4c2e      	ldr	r4, [pc, #184]	; (6180 <Output_usbCodeSend_capability+0x190>)
    60c8:	7823      	ldrb	r3, [r4, #0]

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
			break;
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    60ca:	bf84      	itt	hi
    60cc:	2100      	movhi	r1, #0
    60ce:	460a      	movhi	r2, r1
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    60d0:	f043 0302 	orr.w	r3, r3, #2
    60d4:	e00c      	b.n	60f0 <Output_usbCodeSend_capability+0x100>
		}
		// Next 14 bytes
		else if ( key >= 51 && key <= 155 )
    60d6:	f1a4 0333 	sub.w	r3, r4, #51	; 0x33
    60da:	b2db      	uxtb	r3, r3
    60dc:	2b68      	cmp	r3, #104	; 0x68
    60de:	d809      	bhi.n	60f4 <Output_usbCodeSend_capability+0x104>
    60e0:	4a2f      	ldr	r2, [pc, #188]	; (61a0 <Output_usbCodeSend_capability+0x1b0>)
    60e2:	4930      	ldr	r1, [pc, #192]	; (61a4 <Output_usbCodeSend_capability+0x1b4>)
				byteLookup( 17 );
				byteLookup( 18 );
				byteLookup( 19 );
			}

			USBKeys_Changed |= USBKeyChangeState_SecondaryKeys;
    60e4:	4c26      	ldr	r4, [pc, #152]	; (6180 <Output_usbCodeSend_capability+0x190>)
    60e6:	5cd2      	ldrb	r2, [r2, r3]
    60e8:	5cc9      	ldrb	r1, [r1, r3]
    60ea:	7823      	ldrb	r3, [r4, #0]
    60ec:	f043 0304 	orr.w	r3, r3, #4
    60f0:	7023      	strb	r3, [r4, #0]
    60f2:	e031      	b.n	6158 <Output_usbCodeSend_capability+0x168>
		}
		// Next byte
		else if ( key >= 157 && key <= 164 )
    60f4:	f104 0363 	add.w	r3, r4, #99	; 0x63
    60f8:	b2db      	uxtb	r3, r3
    60fa:	2b07      	cmp	r3, #7
    60fc:	d808      	bhi.n	6110 <Output_usbCodeSend_capability+0x120>
    60fe:	4a2a      	ldr	r2, [pc, #168]	; (61a8 <Output_usbCodeSend_capability+0x1b8>)
    6100:	5cd1      	ldrb	r1, [r2, r3]
			switch ( keyPos )
			{
				byteLookup( 20 );
			}

			USBKeys_Changed |= USBKeyChangeState_TertiaryKeys;
    6102:	4a1f      	ldr	r2, [pc, #124]	; (6180 <Output_usbCodeSend_capability+0x190>)
    6104:	7813      	ldrb	r3, [r2, #0]
    6106:	f043 0308 	orr.w	r3, r3, #8
    610a:	7013      	strb	r3, [r2, #0]
    610c:	2214      	movs	r2, #20
    610e:	e023      	b.n	6158 <Output_usbCodeSend_capability+0x168>
		}
		// Last 6 bytes
		else if ( key >= 176 && key <= 221 )
    6110:	f104 0350 	add.w	r3, r4, #80	; 0x50
    6114:	b2db      	uxtb	r3, r3
    6116:	2b2d      	cmp	r3, #45	; 0x2d
    6118:	d808      	bhi.n	612c <Output_usbCodeSend_capability+0x13c>
    611a:	4a24      	ldr	r2, [pc, #144]	; (61ac <Output_usbCodeSend_capability+0x1bc>)
    611c:	4924      	ldr	r1, [pc, #144]	; (61b0 <Output_usbCodeSend_capability+0x1c0>)
				byteLookup( 24 );
				byteLookup( 25 );
				byteLookup( 26 );
			}

			USBKeys_Changed |= USBKeyChangeState_QuartiaryKeys;
    611e:	4c18      	ldr	r4, [pc, #96]	; (6180 <Output_usbCodeSend_capability+0x190>)
    6120:	5cd2      	ldrb	r2, [r2, r3]
    6122:	5cc9      	ldrb	r1, [r1, r3]
    6124:	7823      	ldrb	r3, [r4, #0]
    6126:	f043 0310 	orr.w	r3, r3, #16
    612a:	e7e1      	b.n	60f0 <Output_usbCodeSend_capability+0x100>
		}
		// Received 0x00
		// This is a special USB Code that internally indicates a "break"
		// It is used to send "nothing" in order to break up sequences of USB Codes
		else if ( key == 0x00 )
    612c:	b944      	cbnz	r4, 6140 <Output_usbCodeSend_capability+0x150>
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    612e:	4a14      	ldr	r2, [pc, #80]	; (6180 <Output_usbCodeSend_capability+0x190>)
    6130:	7813      	ldrb	r3, [r2, #0]
    6132:	f043 0302 	orr.w	r3, r3, #2
    6136:	7013      	strb	r3, [r2, #0]
			USBKeys_Sent++;
		}

		break;
	}
}
    6138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		else if ( key == 0x00 )
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;

			// Also flush out buffers just in case
			Output_flushBuffers();
    613c:	f7ff bf10 	b.w	5f60 <Output_flushBuffers>
			break;
		}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
    6140:	481c      	ldr	r0, [pc, #112]	; (61b4 <Output_usbCodeSend_capability+0x1c4>)
    6142:	f001 fb6f 	bl	7824 <_print>
			printHex( key );
    6146:	4620      	mov	r0, r4
    6148:	4629      	mov	r1, r5
    614a:	f001 fbee 	bl	792a <printHex_op>
			print( NL );
    614e:	481a      	ldr	r0, [pc, #104]	; (61b8 <Output_usbCodeSend_capability+0x1c8>)
			USBKeys_Sent++;
		}

		break;
	}
}
    6150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
			printHex( key );
			print( NL );
    6154:	f001 bb66 	b.w	7824 <_print>
    6158:	4d0d      	ldr	r5, [pc, #52]	; (6190 <Output_usbCodeSend_capability+0x1a0>)
    615a:	4c0b      	ldr	r4, [pc, #44]	; (6188 <Output_usbCodeSend_capability+0x198>)
    615c:	2301      	movs	r3, #1
		}

		// Set/Unset
		if ( keyPress )
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    615e:	408b      	lsls	r3, r1
    6160:	5ca9      	ldrb	r1, [r5, r2]
			print( NL );
			break;
		}

		// Set/Unset
		if ( keyPress )
    6162:	b108      	cbz	r0, 6168 <Output_usbCodeSend_capability+0x178>
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    6164:	430b      	orrs	r3, r1
    6166:	e001      	b.n	616c <Output_usbCodeSend_capability+0x17c>
			USBKeys_Sent++;
		}
		else // Release
		{
			USBKeys_Keys[bytePosition] &= ~(1 << byteShift);
    6168:	ea21 0303 	bic.w	r3, r1, r3
    616c:	54ab      	strb	r3, [r5, r2]
			USBKeys_Sent++;
    616e:	7823      	ldrb	r3, [r4, #0]
    6170:	3301      	adds	r3, #1
    6172:	7023      	strb	r3, [r4, #0]
    6174:	bd38      	pop	{r3, r4, r5, pc}
    6176:	bf00      	nop
    6178:	0000ac39 	.word	0x0000ac39
    617c:	1fff8b49 	.word	0x1fff8b49
    6180:	1fff9109 	.word	0x1fff9109
    6184:	1fff9108 	.word	0x1fff9108
    6188:	1fff910c 	.word	0x1fff910c
    618c:	0000ac55 	.word	0x0000ac55
    6190:	1fffa12f 	.word	0x1fffa12f
    6194:	0000ac82 	.word	0x0000ac82
    6198:	0000a989 	.word	0x0000a989
    619c:	0000adeb 	.word	0x0000adeb
    61a0:	0000ae1a 	.word	0x0000ae1a
    61a4:	0000ae8a 	.word	0x0000ae8a
    61a8:	0000aefa 	.word	0x0000aefa
    61ac:	0000a9b8 	.word	0x0000a9b8
    61b0:	0000a8bc 	.word	0x0000a8bc
    61b4:	0000acbe 	.word	0x0000acbe
    61b8:	0000b143 	.word	0x0000b143

000061bc <Output_setup>:
}


// USB Module Setup
inline void Output_setup()
{
    61bc:	b508      	push	{r3, lr}
	// Initialize the USB
	// If a USB connection does not exist, just ignore it
	// All usb related functions will non-fatally fail if called
	// If the USB initialization is delayed, then functionality will just be delayed
	usb_init();
    61be:	f000 fccd 	bl	6b5c <usb_init>

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );
    61c2:	4804      	ldr	r0, [pc, #16]	; (61d4 <Output_setup+0x18>)
    61c4:	4904      	ldr	r1, [pc, #16]	; (61d8 <Output_setup+0x1c>)
    61c6:	f001 f8e1 	bl	738c <CLI_registerDictionary>

	// Flush key buffers
	Output_flushBuffers();
}
    61ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );

	// Flush key buffers
	Output_flushBuffers();
    61ce:	f7ff bec7 	b.w	5f60 <Output_flushBuffers>
    61d2:	bf00      	nop
    61d4:	0000a9e8 	.word	0x0000a9e8
    61d8:	0000a975 	.word	0x0000a975

000061dc <Output_send>:
}


// USB Data Send
inline void Output_send()
{
    61dc:	b510      	push	{r4, lr}
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
    61de:	4b12      	ldr	r3, [pc, #72]	; (6228 <Output_send+0x4c>)
    61e0:	781a      	ldrb	r2, [r3, #0]
    61e2:	461c      	mov	r4, r3
    61e4:	b94a      	cbnz	r2, 61fa <Output_send+0x1e>
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    61e6:	4b11      	ldr	r3, [pc, #68]	; (622c <Output_send+0x50>)
    61e8:	781b      	ldrb	r3, [r3, #0]
    61ea:	2b05      	cmp	r3, #5
    61ec:	d805      	bhi.n	61fa <Output_send+0x1e>
			USBKeys_Keys[c] = 0;
    61ee:	4a10      	ldr	r2, [pc, #64]	; (6230 <Output_send+0x54>)
    61f0:	2100      	movs	r1, #0
    61f2:	54d1      	strb	r1, [r2, r3]
// USB Data Send
inline void Output_send()
{
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    61f4:	3301      	adds	r3, #1
    61f6:	b2db      	uxtb	r3, r3
    61f8:	e7f7      	b.n	61ea <Output_send+0xe>
			USBKeys_Keys[c] = 0;

	// Send keypresses while there are pending changes
	while ( USBKeys_Changed )
    61fa:	4b0e      	ldr	r3, [pc, #56]	; (6234 <Output_send+0x58>)
    61fc:	781b      	ldrb	r3, [r3, #0]
    61fe:	b113      	cbz	r3, 6206 <Output_send+0x2a>
		usb_keyboard_send();
    6200:	f000 fcfa 	bl	6bf8 <usb_keyboard_send>
    6204:	e7f9      	b.n	61fa <Output_send+0x1e>

	// Clear keys sent
	USBKeys_Sent = 0;
    6206:	4a09      	ldr	r2, [pc, #36]	; (622c <Output_send+0x50>)
    6208:	7013      	strb	r3, [r2, #0]

	// Signal Scan Module we are finished
	switch ( USBKeys_Protocol )
    620a:	7822      	ldrb	r2, [r4, #0]
    620c:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    6210:	b112      	cbz	r2, 6218 <Output_send+0x3c>
    6212:	2801      	cmp	r0, #1
    6214:	d003      	beq.n	621e <Output_send+0x42>
    6216:	bd10      	pop	{r4, pc}
	{
	case 0: // Boot Mode
		// Clear modifiers only in boot mode
		USBKeys_Modifiers = 0;
    6218:	4b07      	ldr	r3, [pc, #28]	; (6238 <Output_send+0x5c>)
    621a:	7018      	strb	r0, [r3, #0]
    621c:	e000      	b.n	6220 <Output_send+0x44>
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    621e:	4618      	mov	r0, r3
		break;
	}
}
    6220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		// Clear modifiers only in boot mode
		USBKeys_Modifiers = 0;
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    6224:	f7fe bc80 	b.w	4b28 <Scan_finishedWithOutput>
    6228:	1fff8b49 	.word	0x1fff8b49
    622c:	1fff910c 	.word	0x1fff910c
    6230:	1fffa12f 	.word	0x1fffa12f
    6234:	1fff9109 	.word	0x1fff9109
    6238:	1fff9108 	.word	0x1fff9108

0000623c <Output_firmwareReload>:


// Sets the device into firmware reload mode
inline void Output_firmwareReload()
{
	usb_device_reload();
    623c:	f000 b8de 	b.w	63fc <usb_device_reload>

00006240 <Output_availablechar>:


// USB Input buffer available
inline unsigned int Output_availablechar()
{
	return usb_serial_available();
    6240:	f000 be9e 	b.w	6f80 <usb_serial_available>

00006244 <Output_getchar>:

// USB Get Character from input buffer
inline int Output_getchar()
{
	// XXX Make sure to check output_availablechar() first! Information is lost with the cast (error codes) (AVR)
	return (int)usb_serial_getchar();
    6244:	f000 be76 	b.w	6f34 <usb_serial_getchar>

00006248 <Output_putstr>:
	uint16_t count = 0;
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	uint32_t count = 0;
#endif
	// Count characters until NULL character, then send the amount counted
	while ( str[count] != '\0' )
    6248:	4603      	mov	r3, r0
    624a:	1a19      	subs	r1, r3, r0
    624c:	f813 2b01 	ldrb.w	r2, [r3], #1
    6250:	2a00      	cmp	r2, #0
    6252:	d1fa      	bne.n	624a <Output_putstr+0x2>
		count++;

	return usb_serial_write( str, count );
    6254:	f000 bea2 	b.w	6f9c <usb_serial_write>

00006258 <Output_softReset>:


// Soft Chip Reset
inline void Output_softReset()
{
	usb_device_software_reset();
    6258:	4b01      	ldr	r3, [pc, #4]	; (6260 <Output_softReset+0x8>)
    625a:	4a02      	ldr	r2, [pc, #8]	; (6264 <Output_softReset+0xc>)
    625c:	601a      	str	r2, [r3, #0]
    625e:	4770      	bx	lr
    6260:	e000ed0c 	.word	0xe000ed0c
    6264:	05fa0004 	.word	0x05fa0004

00006268 <endpoint0_transmit>:
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
    6268:	b5f0      	push	{r4, r5, r6, r7, lr}
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    626a:	4c0c      	ldr	r4, [pc, #48]	; (629c <endpoint0_transmit+0x34>)
    626c:	4e0c      	ldr	r6, [pc, #48]	; (62a0 <endpoint0_transmit+0x38>)
    626e:	7823      	ldrb	r3, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6270:	4d0c      	ldr	r5, [pc, #48]	; (62a4 <endpoint0_transmit+0x3c>)
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6272:	f043 0702 	orr.w	r7, r3, #2
    6276:	eb06 02c7 	add.w	r2, r6, r7, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    627a:	f083 0301 	eor.w	r3, r3, #1
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    627e:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6280:	782a      	ldrb	r2, [r5, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6282:	7023      	strb	r3, [r4, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6284:	2a00      	cmp	r2, #0
    6286:	bf14      	ite	ne
    6288:	20c8      	movne	r0, #200	; 0xc8
    628a:	2088      	moveq	r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    628c:	f082 0201 	eor.w	r2, r2, #1
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6290:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
	ep0_tx_data_toggle ^= 1;
    6294:	702a      	strb	r2, [r5, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6296:	f846 1037 	str.w	r1, [r6, r7, lsl #3]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    629a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    629c:	1fff91a0 	.word	0x1fff91a0
    62a0:	1fff8000 	.word	0x1fff8000
    62a4:	1fff9238 	.word	0x1fff9238

000062a8 <usb_rx>:

usb_packet_t *usb_rx( uint32_t endpoint )
{
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
    62a8:	1e43      	subs	r3, r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    62aa:	2b07      	cmp	r3, #7
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
}

usb_packet_t *usb_rx( uint32_t endpoint )
{
    62ac:	b510      	push	{r4, lr}
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
    62ae:	d810      	bhi.n	62d2 <usb_rx+0x2a>
		return NULL;
	__disable_irq();
    62b0:	b672      	cpsid	i
	ret = rx_first[endpoint];
    62b2:	4a09      	ldr	r2, [pc, #36]	; (62d8 <usb_rx+0x30>)
    62b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if ( ret )
    62b8:	b110      	cbz	r0, 62c0 <usb_rx+0x18>
		rx_first[ endpoint ] = ret->next;
    62ba:	6841      	ldr	r1, [r0, #4]
    62bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	usb_rx_byte_count_data[ endpoint ] -= ret->len;
    62c0:	4906      	ldr	r1, [pc, #24]	; (62dc <usb_rx+0x34>)
    62c2:	8804      	ldrh	r4, [r0, #0]
    62c4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    62c8:	1b12      	subs	r2, r2, r4
    62ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	__enable_irq();
    62ce:	b662      	cpsie	i
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    62d0:	bd10      	pop	{r4, pc}
{
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return NULL;
    62d2:	2000      	movs	r0, #0
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    62d4:	bd10      	pop	{r4, pc}
    62d6:	bf00      	nop
    62d8:	1fff9180 	.word	0x1fff9180
    62dc:	1fffa168 	.word	0x1fffa168

000062e0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    62e0:	3801      	subs	r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    62e2:	2807      	cmp	r0, #7
    62e4:	d80a      	bhi.n	62fc <usb_tx_packet_count+0x1c>
		return 0;
	__disable_irq();
    62e6:	b672      	cpsid	i
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    62e8:	4b05      	ldr	r3, [pc, #20]	; (6300 <usb_tx_packet_count+0x20>)
    62ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
}

uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;
    62ee:	2000      	movs	r0, #0

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    62f0:	b113      	cbz	r3, 62f8 <usb_tx_packet_count+0x18>
		count++;
    62f2:	3001      	adds	r0, #1

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    62f4:	685b      	ldr	r3, [r3, #4]
    62f6:	e7fb      	b.n	62f0 <usb_tx_packet_count+0x10>
		count++;
	__enable_irq();
    62f8:	b662      	cpsie	i
	return count;
    62fa:	4770      	bx	lr
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
    62fc:	2000      	movs	r0, #0
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
		count++;
	__enable_irq();
	return count;
}
    62fe:	4770      	bx	lr
    6300:	1fff91e4 	.word	0x1fff91e4

00006304 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory( usb_packet_t *packet )
{
    6304:	b510      	push	{r4, lr}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    6306:	b672      	cpsid	i
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6308:	2301      	movs	r3, #1
    630a:	4a17      	ldr	r2, [pc, #92]	; (6368 <usb_rx_memory+0x64>)
    630c:	441a      	add	r2, r3
	{
		if ( *cfg++ & USB_ENDPT_EPRXEN )
    630e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    6312:	0712      	lsls	r2, r2, #28
    6314:	d51c      	bpl.n	6350 <usb_rx_memory+0x4c>
		{
			if ( table[ index( i, RX, EVEN ) ].desc == 0 )
    6316:	009a      	lsls	r2, r3, #2
    6318:	4914      	ldr	r1, [pc, #80]	; (636c <usb_rx_memory+0x68>)
    631a:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
    631e:	b92c      	cbnz	r4, 632c <usb_rx_memory+0x28>
			{
				table[ index( i, RX, EVEN ) ].addr = packet->buf;
    6320:	eb01 1343 	add.w	r3, r1, r3, lsl #5
    6324:	3008      	adds	r0, #8
    6326:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    6328:	4b11      	ldr	r3, [pc, #68]	; (6370 <usb_rx_memory+0x6c>)
    632a:	e009      	b.n	6340 <usb_rx_memory+0x3c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if ( table[ index( i, RX, ODD ) ].desc == 0 )
    632c:	f042 0201 	orr.w	r2, r2, #1
    6330:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
    6334:	b964      	cbnz	r4, 6350 <usb_rx_memory+0x4c>
			{
				table[ index( i, RX, ODD ) ].addr = packet->buf;
    6336:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    633a:	3008      	adds	r0, #8
    633c:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    633e:	4b0d      	ldr	r3, [pc, #52]	; (6374 <usb_rx_memory+0x70>)
    6340:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
				usb_rx_memory_needed--;
    6344:	4a0c      	ldr	r2, [pc, #48]	; (6378 <usb_rx_memory+0x74>)
    6346:	7813      	ldrb	r3, [r2, #0]
    6348:	3b01      	subs	r3, #1
    634a:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    634c:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    634e:	bd10      	pop	{r4, pc}
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6350:	3301      	adds	r3, #1
    6352:	2b09      	cmp	r3, #9
    6354:	d1d9      	bne.n	630a <usb_rx_memory+0x6>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    6356:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    6358:	4b07      	ldr	r3, [pc, #28]	; (6378 <usb_rx_memory+0x74>)
    635a:	2200      	movs	r2, #0
    635c:	701a      	strb	r2, [r3, #0]
	usb_free( packet );
	return;
}
    635e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free( packet );
    6362:	f000 bdc5 	b.w	6ef0 <usb_free>
    6366:	bf00      	nop
    6368:	0000af02 	.word	0x0000af02
    636c:	1fff8000 	.word	0x1fff8000
    6370:	00400088 	.word	0x00400088
    6374:	004000c8 	.word	0x004000c8
    6378:	1fff922e 	.word	0x1fff922e

0000637c <usb_tx>:
void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
	uint8_t next;

	endpoint--;
    637c:	1e43      	subs	r3, r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    637e:	2b07      	cmp	r3, #7

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    6380:	b510      	push	{r4, lr}
	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
	uint8_t next;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
    6382:	d832      	bhi.n	63ea <usb_tx+0x6e>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
    6384:	4a19      	ldr	r2, [pc, #100]	; (63ec <usb_tx+0x70>)
    6386:	0140      	lsls	r0, r0, #5
    6388:	f040 0010 	orr.w	r0, r0, #16
    638c:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return;
	__disable_irq();
    638e:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
    6390:	4a17      	ldr	r2, [pc, #92]	; (63f0 <usb_tx+0x74>)
    6392:	5cd4      	ldrb	r4, [r2, r3]
    6394:	2c03      	cmp	r4, #3
    6396:	d80b      	bhi.n	63b0 <usb_tx+0x34>
    6398:	e8df f004 	tbb	[pc, r4]
    639c:	07020418 	.word	0x07020418
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    63a0:	2405      	movs	r4, #5
    63a2:	e014      	b.n	63ce <usb_tx+0x52>
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    63a4:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    63a6:	2402      	movs	r4, #2
		break;
    63a8:	e011      	b.n	63ce <usb_tx+0x52>
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	case TX_STATE_ODD_FREE:
		b++;
    63aa:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    63ac:	2404      	movs	r4, #4
		break;
    63ae:	e00e      	b.n	63ce <usb_tx+0x52>
	default:
		if (tx_first[ endpoint ] == NULL)
    63b0:	4810      	ldr	r0, [pc, #64]	; (63f4 <usb_tx+0x78>)
    63b2:	4a11      	ldr	r2, [pc, #68]	; (63f8 <usb_tx+0x7c>)
    63b4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    63b8:	b914      	cbnz	r4, 63c0 <usb_tx+0x44>
		{
			tx_first[ endpoint ] = packet;
    63ba:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    63be:	e002      	b.n	63c6 <usb_tx+0x4a>
		}
		else
		{
			tx_last[ endpoint ]->next = packet;
    63c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    63c4:	6041      	str	r1, [r0, #4]
		}
		tx_last[ endpoint ] = packet;
    63c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    63ca:	e00d      	b.n	63e8 <usb_tx+0x6c>
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    63cc:	2403      	movs	r4, #3
		tx_last[ endpoint ] = packet;
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
    63ce:	54d4      	strb	r4, [r2, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    63d0:	f010 0f08 	tst.w	r0, #8
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    63d4:	f101 0308 	add.w	r3, r1, #8
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    63d8:	880a      	ldrh	r2, [r1, #0]
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    63da:	6043      	str	r3, [r0, #4]
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    63dc:	bf14      	ite	ne
    63de:	23c8      	movne	r3, #200	; 0xc8
    63e0:	2388      	moveq	r3, #136	; 0x88
    63e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    63e6:	6003      	str	r3, [r0, #0]
	__enable_irq();
    63e8:	b662      	cpsie	i
    63ea:	bd10      	pop	{r4, pc}
    63ec:	1fff8000 	.word	0x1fff8000
    63f0:	1fff9138 	.word	0x1fff9138
    63f4:	1fff91e4 	.word	0x1fff91e4
    63f8:	1fff9204 	.word	0x1fff9204

000063fc <usb_device_reload>:
}


void usb_device_reload()
{
    63fc:	4b07      	ldr	r3, [pc, #28]	; (641c <usb_device_reload+0x20>)
    63fe:	4908      	ldr	r1, [pc, #32]	; (6420 <usb_device_reload+0x24>)
    6400:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    6404:	f5a2 3278 	sub.w	r2, r2, #253952	; 0x3e000
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
    6408:	5c52      	ldrb	r2, [r2, r1]
    640a:	f803 2b01 	strb.w	r2, [r3], #1
{
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
    640e:	4a05      	ldr	r2, [pc, #20]	; (6424 <usb_device_reload+0x28>)
    6410:	4293      	cmp	r3, r2
    6412:	d1f4      	bne.n	63fe <usb_device_reload+0x2>
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
	SOFTWARE_RESET();
    6414:	4b04      	ldr	r3, [pc, #16]	; (6428 <usb_device_reload+0x2c>)
    6416:	4a05      	ldr	r2, [pc, #20]	; (642c <usb_device_reload+0x30>)
    6418:	601a      	str	r2, [r3, #0]
    641a:	4770      	bx	lr
    641c:	4003e000 	.word	0x4003e000
    6420:	00007ae3 	.word	0x00007ae3
    6424:	4003e016 	.word	0x4003e016
    6428:	e000ed0c 	.word	0xe000ed0c
    642c:	05fa0004 	.word	0x05fa0004

00006430 <usb_isr>:
#endif
}


void usb_isr()
{
    6430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
restart:
	status = USB0_ISTAT;
    6434:	4da9      	ldr	r5, [pc, #676]	; (66dc <usb_isr+0x2ac>)
    6436:	782e      	ldrb	r6, [r5, #0]
    6438:	b2f6      	uxtb	r6, r6
	print("USB ISR STATUS: ");
	printHex( status );
	print( NL );
	*/

	if ( (status & USB_INTEN_SOFTOKEN /* 04 */ ) )
    643a:	f016 0f04 	tst.w	r6, #4
    643e:	462c      	mov	r4, r5
    6440:	d01a      	beq.n	6478 <usb_isr+0x48>
	{
		if ( usb_configuration )
    6442:	4ba7      	ldr	r3, [pc, #668]	; (66e0 <usb_isr+0x2b0>)
    6444:	781b      	ldrb	r3, [r3, #0]
    6446:	b1ab      	cbz	r3, 6474 <usb_isr+0x44>
		{
			t = usb_reboot_timer;
    6448:	4aa6      	ldr	r2, [pc, #664]	; (66e4 <usb_isr+0x2b4>)
    644a:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    644c:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    6450:	b129      	cbz	r1, 645e <usb_isr+0x2e>
			{
				usb_reboot_timer = --t;
    6452:	3b01      	subs	r3, #1
    6454:	b2db      	uxtb	r3, r3
    6456:	7013      	strb	r3, [r2, #0]
				if ( !t )
    6458:	b90b      	cbnz	r3, 645e <usb_isr+0x2e>
					usb_device_reload();
    645a:	f7ff ffcf 	bl	63fc <usb_device_reload>
			}

			// CDC Interface
			t = usb_cdc_transmit_flush_timer;
    645e:	4aa2      	ldr	r2, [pc, #648]	; (66e8 <usb_isr+0x2b8>)
    6460:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    6462:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    6466:	b129      	cbz	r1, 6474 <usb_isr+0x44>
			{
				usb_cdc_transmit_flush_timer = --t;
    6468:	3b01      	subs	r3, #1
    646a:	b2db      	uxtb	r3, r3
    646c:	7013      	strb	r3, [r2, #0]
				if ( t == 0 )
    646e:	b90b      	cbnz	r3, 6474 <usb_isr+0x44>
					usb_serial_flush_callback();
    6470:	f000 fdfc 	bl	706c <usb_serial_flush_callback>
			}

		}
		USB0_ISTAT = USB_INTEN_SOFTOKEN;
    6474:	2304      	movs	r3, #4
    6476:	702b      	strb	r3, [r5, #0]
	}

	if ( (status & USB_ISTAT_TOKDNE /* 08 */ ) )
    6478:	f006 0308 	and.w	r3, r6, #8
    647c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    6480:	2b00      	cmp	r3, #0
    6482:	f000 8316 	beq.w	6ab2 <usb_isr+0x682>
	{
		uint8_t endpoint;
		stat = USB0_STAT;
    6486:	4b99      	ldr	r3, [pc, #612]	; (66ec <usb_isr+0x2bc>)
    6488:	4c99      	ldr	r4, [pc, #612]	; (66f0 <usb_isr+0x2c0>)
    648a:	781b      	ldrb	r3, [r3, #0]
    648c:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if ( endpoint == 0 )
    648e:	091f      	lsrs	r7, r3, #4
    6490:	ea4f 0693 	mov.w	r6, r3, lsr #2
    6494:	f040 8269 	bne.w	696a <usb_isr+0x53a>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
    6498:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
	pid = BDT_PID( b->desc );
	buf = b->addr;
    649c:	6859      	ldr	r1, [r3, #4]
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
	pid = BDT_PID( b->desc );
    649e:	f854 3036 	ldr.w	r3, [r4, r6, lsl #3]
    64a2:	f3c3 0383 	ubfx	r3, r3, #2, #4
	print(", count:");
	printHex32(b->desc);
	print(" - ");
	#endif

	switch (pid)
    64a6:	3b01      	subs	r3, #1
    64a8:	2b0c      	cmp	r3, #12
    64aa:	f200 825a 	bhi.w	6962 <usb_isr+0x532>
    64ae:	e8df f013 	tbh	[pc, r3, lsl #1]
    64b2:	01fb      	.short	0x01fb
    64b4:	025801fb 	.word	0x025801fb
    64b8:	02580258 	.word	0x02580258
    64bc:	02580258 	.word	0x02580258
    64c0:	02330258 	.word	0x02330258
    64c4:	02580258 	.word	0x02580258
    64c8:	000d0258 	.word	0x000d0258
	{
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    64cc:	4f89      	ldr	r7, [pc, #548]	; (66f4 <usb_isr+0x2c4>)
    64ce:	680b      	ldr	r3, [r1, #0]
		setup.word2 = *(uint32_t *)(buf + 4);
    64d0:	684a      	ldr	r2, [r1, #4]
    64d2:	607a      	str	r2, [r7, #4]

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    64d4:	4a88      	ldr	r2, [pc, #544]	; (66f8 <usb_isr+0x2c8>)
    64d6:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
	{
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    64da:	603b      	str	r3, [r7, #0]
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    64dc:	4e87      	ldr	r6, [pc, #540]	; (66fc <usb_isr+0x2cc>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    64de:	4a88      	ldr	r2, [pc, #544]	; (6700 <usb_isr+0x2d0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    64e0:	b29b      	uxth	r3, r3
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    64e2:	2100      	movs	r1, #0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    64e4:	f04f 0801 	mov.w	r8, #1
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    64e8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    64ec:	6031      	str	r1, [r6, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    64ee:	6121      	str	r1, [r4, #16]
		table[index(0, TX, ODD)].desc = 0;
    64f0:	61a1      	str	r1, [r4, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    64f2:	f882 8000 	strb.w	r8, [r2]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    64f6:	f000 8160 	beq.w	67ba <usb_isr+0x38a>
    64fa:	d82b      	bhi.n	6554 <usb_isr+0x124>
    64fc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6500:	f000 814c 	beq.w	679c <usb_isr+0x36c>
    6504:	d810      	bhi.n	6528 <usb_isr+0xf8>
    6506:	2b82      	cmp	r3, #130	; 0x82
    6508:	f000 813a 	beq.w	6780 <usb_isr+0x350>
    650c:	d806      	bhi.n	651c <usb_isr+0xec>
    650e:	2b80      	cmp	r3, #128	; 0x80
    6510:	f040 8199 	bne.w	6846 <usb_isr+0x416>
		datalen = 1;
		data = reply_buffer;
		goto send;

	case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    6514:	4c7b      	ldr	r4, [pc, #492]	; (6704 <usb_isr+0x2d4>)
    6516:	7021      	strb	r1, [r4, #0]
		reply_buffer[1] = 0;
    6518:	7061      	strb	r1, [r4, #1]
    651a:	e198      	b.n	684e <usb_isr+0x41e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    651c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6520:	f0c0 8191 	bcc.w	6846 <usb_isr+0x416>
		goto send;

	case 0x0100: // CLEAR_FEATURE (device)
	case 0x0101: // CLEAR_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_print("CLEAR_FEATURE - Device/Interface");
    6524:	4878      	ldr	r0, [pc, #480]	; (6708 <usb_isr+0x2d8>)
    6526:	e176      	b.n	6816 <usb_isr+0x3e6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    6528:	f240 3201 	movw	r2, #769	; 0x301
    652c:	4293      	cmp	r3, r2
    652e:	d80b      	bhi.n	6548 <usb_isr+0x118>
    6530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    6534:	f080 8143 	bcs.w	67be <usb_isr+0x38e>
    6538:	f240 12a1 	movw	r2, #417	; 0x1a1
    653c:	4293      	cmp	r3, r2
    653e:	f040 8182 	bne.w	6846 <usb_isr+0x416>
		{
			if ( list->addr == NULL )
				break;
			if ( list->wValue != 0x2200 )
				continue;
			if ( setup.wIndex == list->wIndex )
    6542:	88ba      	ldrh	r2, [r7, #4]
    6544:	4b71      	ldr	r3, [pc, #452]	; (670c <usb_isr+0x2dc>)
    6546:	e16e      	b.n	6826 <usb_isr+0x3f6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    6548:	f240 3202 	movw	r2, #770	; 0x302
    654c:	4293      	cmp	r3, r2
    654e:	f000 8138 	beq.w	67c2 <usb_isr+0x392>
    6552:	e178      	b.n	6846 <usb_isr+0x416>
    6554:	f640 1221 	movw	r2, #2337	; 0x921
    6558:	4293      	cmp	r3, r2
    655a:	f000 8151 	beq.w	6800 <usb_isr+0x3d0>
    655e:	d81a      	bhi.n	6596 <usb_isr+0x166>
    6560:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    6564:	f000 8106 	beq.w	6774 <usb_isr+0x344>
    6568:	d808      	bhi.n	657c <usb_isr+0x14c>
    656a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    656e:	2b01      	cmp	r3, #1
    6570:	f200 8169 	bhi.w	6846 <usb_isr+0x416>
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    6574:	887a      	ldrh	r2, [r7, #2]
    6576:	88b9      	ldrh	r1, [r7, #4]
    6578:	4b64      	ldr	r3, [pc, #400]	; (670c <usb_isr+0x2dc>)
    657a:	e135      	b.n	67e8 <usb_isr+0x3b8>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    657c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    6580:	f040 8161 	bne.w	6846 <usb_isr+0x416>

	case 0x0900: // SET_CONFIGURATION
		#ifdef UART_DEBUG
		print("CONFIGURE - ");
		#endif
		usb_configuration = setup.wValue;
    6584:	4b56      	ldr	r3, [pc, #344]	; (66e0 <usb_isr+0x2b0>)
    6586:	78ba      	ldrb	r2, [r7, #2]
    6588:	701a      	strb	r2, [r3, #0]
		Output_Available = usb_configuration;
    658a:	781b      	ldrb	r3, [r3, #0]
    658c:	4a60      	ldr	r2, [pc, #384]	; (6710 <usb_isr+0x2e0>)
    658e:	b2db      	uxtb	r3, r3
    6590:	7013      	strb	r3, [r2, #0]
    6592:	4688      	mov	r8, r1
    6594:	e021      	b.n	65da <usb_isr+0x1aa>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    6596:	f242 0221 	movw	r2, #8225	; 0x2021
    659a:	4293      	cmp	r3, r2
    659c:	f000 8181 	beq.w	68a2 <usb_isr+0x472>
    65a0:	d80c      	bhi.n	65bc <usb_isr+0x18c>
    65a2:	f640 2221 	movw	r2, #2593	; 0xa21
    65a6:	4293      	cmp	r3, r2
    65a8:	f000 8146 	beq.w	6838 <usb_isr+0x408>
    65ac:	f640 3221 	movw	r2, #2849	; 0xb21
    65b0:	4293      	cmp	r3, r2
    65b2:	f040 8148 	bne.w	6846 <usb_isr+0x416>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue & 0xFF );
		print(NL);
		#endif
		USBKeys_Protocol = setup.wValue & 0xFF; // 0 - Boot Mode, 1 - NKRO Mode
    65b6:	78ba      	ldrb	r2, [r7, #2]
    65b8:	4b56      	ldr	r3, [pc, #344]	; (6714 <usb_isr+0x2e4>)
    65ba:	e0fd      	b.n	67b8 <usb_isr+0x388>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch ( setup.wRequestAndType )
    65bc:	f242 12a1 	movw	r2, #8609	; 0x21a1
    65c0:	4293      	cmp	r3, r2
    65c2:	d007      	beq.n	65d4 <usb_isr+0x1a4>
    65c4:	f242 2221 	movw	r2, #8737	; 0x2221
    65c8:	4293      	cmp	r3, r2
    65ca:	f040 813c 	bne.w	6846 <usb_isr+0x416>
		#endif
		endpoint0_stall();
		return;

	case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr = setup.wValue;
    65ce:	78ba      	ldrb	r2, [r7, #2]
    65d0:	4b51      	ldr	r3, [pc, #324]	; (6718 <usb_isr+0x2e8>)
    65d2:	e0f1      	b.n	67b8 <usb_isr+0x388>
		//serial_print("set control line state\n");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)usb_cdc_line_coding;
		datalen = sizeof( usb_cdc_line_coding );
    65d4:	2107      	movs	r1, #7
		usb_cdc_line_rtsdtr = setup.wValue;
		//serial_print("set control line state\n");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)usb_cdc_line_coding;
    65d6:	4c51      	ldr	r4, [pc, #324]	; (671c <usb_isr+0x2ec>)
    65d8:	e13a      	b.n	6850 <usb_isr+0x420>
    65da:	eb04 0308 	add.w	r3, r4, r8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
		{
			if ( table[i].desc & BDT_OWN )
    65de:	6a1a      	ldr	r2, [r3, #32]
    65e0:	0611      	lsls	r1, r2, #24
    65e2:	d503      	bpl.n	65ec <usb_isr+0x1bc>
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
    65e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    65e6:	3808      	subs	r0, #8
    65e8:	f000 fc82 	bl	6ef0 <usb_free>
    65ec:	f108 0808 	add.w	r8, r8, #8
		usb_configuration = setup.wValue;
		Output_Available = usb_configuration;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
    65f0:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    65f4:	d1f1      	bne.n	65da <usb_isr+0x1aa>
    65f6:	f8df a144 	ldr.w	sl, [pc, #324]	; 673c <usb_isr+0x30c>
    65fa:	f04f 0900 	mov.w	r9, #0
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
		{
			usb_packet_t *p, *n;
			p = rx_first[i];
    65fe:	f8df 8140 	ldr.w	r8, [pc, #320]	; 6740 <usb_isr+0x310>
    6602:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
    6606:	ea4f 0b89 	mov.w	fp, r9, lsl #2
			while ( p )
    660a:	b130      	cbz	r0, 661a <usb_isr+0x1ea>
			{
				n = p->next;
    660c:	6843      	ldr	r3, [r0, #4]
    660e:	9301      	str	r3, [sp, #4]
				usb_free(p);
    6610:	f000 fc6e 	bl	6ef0 <usb_free>
				p = n;
    6614:	9b01      	ldr	r3, [sp, #4]
    6616:	4618      	mov	r0, r3
    6618:	e7f7      	b.n	660a <usb_isr+0x1da>
			}
			rx_first[ i ] = NULL;
    661a:	f848 000b 	str.w	r0, [r8, fp]
			rx_last[ i ] = NULL;
    661e:	4b40      	ldr	r3, [pc, #256]	; (6720 <usb_isr+0x2f0>)
			p = tx_first[i];
    6620:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6744 <usb_isr+0x314>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[ i ] = NULL;
			rx_last[ i ] = NULL;
    6624:	f84b 0003 	str.w	r0, [fp, r3]
			p = tx_first[i];
    6628:	f85b 0008 	ldr.w	r0, [fp, r8]
			while (p)
    662c:	b130      	cbz	r0, 663c <usb_isr+0x20c>
			{
				n = p->next;
    662e:	6843      	ldr	r3, [r0, #4]
    6630:	9301      	str	r3, [sp, #4]
				usb_free(p);
    6632:	f000 fc5d 	bl	6ef0 <usb_free>
				p = n;
    6636:	9b01      	ldr	r3, [sp, #4]
    6638:	4618      	mov	r0, r3
    663a:	e7f7      	b.n	662c <usb_isr+0x1fc>
			}
			tx_first[ i ] = NULL;
			tx_last[ i ] = NULL;
    663c:	4b39      	ldr	r3, [pc, #228]	; (6724 <usb_isr+0x2f4>)
			{
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[ i ] = NULL;
    663e:	f848 000b 	str.w	r0, [r8, fp]
			tx_last[ i ] = NULL;
    6642:	f84b 0003 	str.w	r0, [fp, r3]
			usb_rx_byte_count_data[i] = 0;
    6646:	4b38      	ldr	r3, [pc, #224]	; (6728 <usb_isr+0x2f8>)
    6648:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]

			switch ( tx_state[ i ] )
    664c:	f89a 3000 	ldrb.w	r3, [sl]
    6650:	3b02      	subs	r3, #2
    6652:	2b03      	cmp	r3, #3
    6654:	d808      	bhi.n	6668 <usb_isr+0x238>
    6656:	e8df f003 	tbb	[pc, r3]
    665a:	0402      	.short	0x0402
    665c:	0402      	.short	0x0402
			{
			case TX_STATE_EVEN_FREE:
			case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    665e:	2300      	movs	r3, #0
    6660:	e000      	b.n	6664 <usb_isr+0x234>
				break;
			case TX_STATE_ODD_FREE:
			case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    6662:	2301      	movs	r3, #1
    6664:	f88a 3000 	strb.w	r3, [sl]
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
			}
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
    6668:	f109 0901 	add.w	r9, r9, #1
    666c:	f1b9 0f08 	cmp.w	r9, #8
    6670:	f10a 0a01 	add.w	sl, sl, #1
    6674:	d1c3      	bne.n	65fe <usb_isr+0x1ce>
				break;
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    6676:	4b2d      	ldr	r3, [pc, #180]	; (672c <usb_isr+0x2fc>)
    6678:	2200      	movs	r2, #0
    667a:	701a      	strb	r2, [r3, #0]
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    667c:	f04f 0801 	mov.w	r8, #1
    6680:	4699      	mov	r9, r3
    6682:	4a2b      	ldr	r2, [pc, #172]	; (6730 <usb_isr+0x300>)
    6684:	4b2b      	ldr	r3, [pc, #172]	; (6734 <usb_isr+0x304>)
    6686:	4442      	add	r2, r8
    6688:	4443      	add	r3, r8
		{
			epconf = *cfg++;
    668a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    668e:	009b      	lsls	r3, r3, #2
			*reg = epconf;
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    6690:	f012 0f08 	tst.w	r2, #8
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
		{
			epconf = *cfg++;
			*reg = epconf;
    6694:	701a      	strb	r2, [r3, #0]
    6696:	ea4f 0a88 	mov.w	sl, r8, lsl #2
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    669a:	d05c      	beq.n	6756 <usb_isr+0x326>
			{
				usb_packet_t *p;
				p = usb_malloc();
    669c:	f000 fc0a 	bl	6eb4 <usb_malloc>
				if ( p )
    66a0:	b138      	cbz	r0, 66b2 <usb_isr+0x282>
				{
					table[ index( i, RX, EVEN ) ].addr = p->buf;
    66a2:	eb04 1348 	add.w	r3, r4, r8, lsl #5
    66a6:	3008      	adds	r0, #8
    66a8:	6058      	str	r0, [r3, #4]
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    66aa:	4b23      	ldr	r3, [pc, #140]	; (6738 <usb_isr+0x308>)
    66ac:	f844 303a 	str.w	r3, [r4, sl, lsl #3]
    66b0:	e006      	b.n	66c0 <usb_isr+0x290>
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
    66b2:	f899 3000 	ldrb.w	r3, [r9]
					table[ index( i, RX, EVEN ) ].addr = p->buf;
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
    66b6:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
					usb_rx_memory_needed++;
    66ba:	3301      	adds	r3, #1
    66bc:	f889 3000 	strb.w	r3, [r9]
				}
				p = usb_malloc();
    66c0:	f000 fbf8 	bl	6eb4 <usb_malloc>
				if ( p )
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    66c4:	f04a 0301 	orr.w	r3, sl, #1
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if ( p )
    66c8:	2800      	cmp	r0, #0
    66ca:	d03d      	beq.n	6748 <usb_isr+0x318>
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    66cc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    66d0:	3008      	adds	r0, #8
    66d2:	6050      	str	r0, [r2, #4]
					table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    66d4:	4a08      	ldr	r2, [pc, #32]	; (66f8 <usb_isr+0x2c8>)
    66d6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
    66da:	e03c      	b.n	6756 <usb_isr+0x326>
    66dc:	40072080 	.word	0x40072080
    66e0:	1fff9237 	.word	0x1fff9237
    66e4:	1fff91a1 	.word	0x1fff91a1
    66e8:	1fff923a 	.word	0x1fff923a
    66ec:	40072090 	.word	0x40072090
    66f0:	1fff8000 	.word	0x1fff8000
    66f4:	1fff9224 	.word	0x1fff9224
    66f8:	004000c8 	.word	0x004000c8
    66fc:	1fff9114 	.word	0x1fff9114
    6700:	1fff9238 	.word	0x1fff9238
    6704:	1fff922f 	.word	0x1fff922f
    6708:	0000b044 	.word	0x0000b044
    670c:	0000af0c 	.word	0x0000af0c
    6710:	1fff910e 	.word	0x1fff910e
    6714:	1fff8b49 	.word	0x1fff8b49
    6718:	1fff9248 	.word	0x1fff9248
    671c:	1fff8f94 	.word	0x1fff8f94
    6720:	1fff9118 	.word	0x1fff9118
    6724:	1fff9204 	.word	0x1fff9204
    6728:	1fffa168 	.word	0x1fffa168
    672c:	1fff922e 	.word	0x1fff922e
    6730:	0000af02 	.word	0x0000af02
    6734:	1001c830 	.word	0x1001c830
    6738:	00400088 	.word	0x00400088
    673c:	1fff9138 	.word	0x1fff9138
    6740:	1fff9180 	.word	0x1fff9180
    6744:	1fff91e4 	.word	0x1fff91e4
				}
				else
				{
					table[ index( i, RX, ODD ) ].desc = 0;
    6748:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
					usb_rx_memory_needed++;
    674c:	f899 3000 	ldrb.w	r3, [r9]
    6750:	3301      	adds	r3, #1
    6752:	f889 3000 	strb.w	r3, [r9]
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
    6756:	f04a 0302 	orr.w	r3, sl, #2
    675a:	2100      	movs	r1, #0
    675c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6760:	f108 0801 	add.w	r8, r8, #1
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
			table[ index( i, TX, ODD ) ].desc = 0;
    6764:	f04a 0303 	orr.w	r3, sl, #3
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6768:	f1b8 0f09 	cmp.w	r8, #9
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
			table[ index( i, TX, ODD ) ].desc = 0;
    676c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6770:	d187      	bne.n	6682 <usb_isr+0x252>
    6772:	e022      	b.n	67ba <usb_isr+0x38a>
			table[ index( i, TX, ODD ) ].desc = 0;
		}
		goto send;

	case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    6774:	4ba0      	ldr	r3, [pc, #640]	; (69f8 <usb_isr+0x5c8>)
    6776:	4ca1      	ldr	r4, [pc, #644]	; (69fc <usb_isr+0x5cc>)
    6778:	781b      	ldrb	r3, [r3, #0]
    677a:	7023      	strb	r3, [r4, #0]
		datalen = 1;
    677c:	4641      	mov	r1, r8
    677e:	e067      	b.n	6850 <usb_isr+0x420>
		datalen = 2;
		data = reply_buffer;
		goto send;

	case 0x0082: // GET_STATUS (endpoint)
		if ( setup.wIndex > NUM_ENDPOINTS )
    6780:	88bb      	ldrh	r3, [r7, #4]
    6782:	2b08      	cmp	r3, #8
    6784:	d85f      	bhi.n	6846 <usb_isr+0x416>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    6786:	4c9d      	ldr	r4, [pc, #628]	; (69fc <usb_isr+0x5cc>)
		reply_buffer[1] = 0;
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
    6788:	4a9d      	ldr	r2, [pc, #628]	; (6a00 <usb_isr+0x5d0>)
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    678a:	7021      	strb	r1, [r4, #0]
		reply_buffer[1] = 0;
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
    678c:	009b      	lsls	r3, r3, #2
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
    678e:	7061      	strb	r1, [r4, #1]
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
    6790:	5cd3      	ldrb	r3, [r2, r3]
    6792:	079a      	lsls	r2, r3, #30
    6794:	d55b      	bpl.n	684e <usb_isr+0x41e>
			reply_buffer[0] = 1;
    6796:	f884 8000 	strb.w	r8, [r4]
    679a:	e058      	b.n	684e <usb_isr+0x41e>
		warn_print("CLEAR_FEATURE - Device/Interface");
		endpoint0_stall();
		return;

	case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    679c:	88bb      	ldrh	r3, [r7, #4]
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    679e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    67a2:	2a08      	cmp	r2, #8
    67a4:	d84f      	bhi.n	6846 <usb_isr+0x416>
    67a6:	8879      	ldrh	r1, [r7, #2]
    67a8:	2900      	cmp	r1, #0
    67aa:	d14c      	bne.n	6846 <usb_isr+0x416>
		{
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
    67ac:	009a      	lsls	r2, r3, #2
    67ae:	4b94      	ldr	r3, [pc, #592]	; (6a00 <usb_isr+0x5d0>)
    67b0:	4413      	add	r3, r2
    67b2:	781a      	ldrb	r2, [r3, #0]
    67b4:	f022 0202 	bic.w	r2, r2, #2
    67b8:	701a      	strb	r2, [r3, #0]
	ep0_tx_bdt_bank ^= 1;
}

static void usb_setup()
{
	const uint8_t *data = NULL;
    67ba:	460c      	mov	r4, r1
    67bc:	e048      	b.n	6850 <usb_isr+0x420>
		goto send;

	case 0x0300: // SET_FEATURE (device)
	case 0x0301: // SET_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_print("SET_FEATURE - Device/Interface");
    67be:	4891      	ldr	r0, [pc, #580]	; (6a04 <usb_isr+0x5d4>)
    67c0:	e029      	b.n	6816 <usb_isr+0x3e6>
		endpoint0_stall();
		return;

	case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    67c2:	88bb      	ldrh	r3, [r7, #4]
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    67c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    67c8:	2a08      	cmp	r2, #8
    67ca:	d83c      	bhi.n	6846 <usb_isr+0x416>
    67cc:	8879      	ldrh	r1, [r7, #2]
    67ce:	2900      	cmp	r1, #0
    67d0:	d139      	bne.n	6846 <usb_isr+0x416>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) |= 0x02;
    67d2:	009a      	lsls	r2, r3, #2
    67d4:	4b8a      	ldr	r3, [pc, #552]	; (6a00 <usb_isr+0x5d0>)
    67d6:	4413      	add	r3, r2
    67d8:	781a      	ldrb	r2, [r3, #0]
    67da:	f042 0202 	orr.w	r2, r2, #2
    67de:	e7eb      	b.n	67b8 <usb_isr+0x388>
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    67e0:	8818      	ldrh	r0, [r3, #0]
    67e2:	4290      	cmp	r0, r2
    67e4:	d004      	beq.n	67f0 <usb_isr+0x3c0>
		#ifdef UART_DEBUG
		print("desc:");
		printHex( setup.wValue );
		print( NL );
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
    67e6:	330c      	adds	r3, #12
		{
			if ( list->addr == NULL )
    67e8:	685c      	ldr	r4, [r3, #4]
    67ea:	2c00      	cmp	r4, #0
    67ec:	d1f8      	bne.n	67e0 <usb_isr+0x3b0>
    67ee:	e02a      	b.n	6846 <usb_isr+0x416>
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    67f0:	8858      	ldrh	r0, [r3, #2]
    67f2:	4288      	cmp	r0, r1
    67f4:	d1f7      	bne.n	67e6 <usb_isr+0x3b6>
			{
				data = list->addr;
				if ( (setup.wValue >> 8) == 3 )
    67f6:	0a12      	lsrs	r2, r2, #8
    67f8:	2a03      	cmp	r2, #3
    67fa:	d11b      	bne.n	6834 <usb_isr+0x404>
				{
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    67fc:	7821      	ldrb	r1, [r4, #0]
    67fe:	e027      	b.n	6850 <usb_isr+0x420>
		//serial_print("set coding, waiting...\n");
		return;

	case 0x0921: // HID SET_REPORT
		// Interface
		switch ( setup.wIndex & 0xFF )
    6800:	793b      	ldrb	r3, [r7, #4]
    6802:	2b01      	cmp	r3, #1
    6804:	d94d      	bls.n	68a2 <usb_isr+0x472>
			break;
		// NKRO Keyboard Interface
		case NKRO_KEYBOARD_INTERFACE:
			break;
		default:
			warn_msg("Unknown interface - ");
    6806:	4880      	ldr	r0, [pc, #512]	; (6a08 <usb_isr+0x5d8>)
    6808:	f001 f80c 	bl	7824 <_print>
			printHex( setup.wIndex );
    680c:	88b8      	ldrh	r0, [r7, #4]
    680e:	4641      	mov	r1, r8
    6810:	f001 f88b 	bl	792a <printHex_op>
			print( NL );
    6814:	487d      	ldr	r0, [pc, #500]	; (6a0c <usb_isr+0x5dc>)
    6816:	f001 f805 	bl	7824 <_print>
    681a:	e014      	b.n	6846 <usb_isr+0x416>
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( list->wValue != 0x2200 )
    681c:	8819      	ldrh	r1, [r3, #0]
    681e:	f5b1 5f08 	cmp.w	r1, #8704	; 0x2200
    6822:	d004      	beq.n	682e <usb_isr+0x3fe>
		print("GET_REPORT - ");
		printHex( setup.wIndex );
		print(NL);
		#endif
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
    6824:	330c      	adds	r3, #12
		{
			if ( list->addr == NULL )
    6826:	685c      	ldr	r4, [r3, #4]
    6828:	2c00      	cmp	r4, #0
    682a:	d1f7      	bne.n	681c <usb_isr+0x3ec>
    682c:	e00b      	b.n	6846 <usb_isr+0x416>
				break;
			if ( list->wValue != 0x2200 )
				continue;
			if ( setup.wIndex == list->wIndex )
    682e:	8859      	ldrh	r1, [r3, #2]
    6830:	4291      	cmp	r1, r2
    6832:	d1f7      	bne.n	6824 <usb_isr+0x3f4>
			{
				data = list->addr;
				datalen = list->length;
    6834:	8919      	ldrh	r1, [r3, #8]
    6836:	e00b      	b.n	6850 <usb_isr+0x420>
		#ifdef UART_DEBUG
		print("SET_IDLE - ");
		printHex( setup.wValue );
		print(NL);
		#endif
		USBKeys_Idle_Config = (setup.wValue >> 8);
    6838:	887b      	ldrh	r3, [r7, #2]
    683a:	4a75      	ldr	r2, [pc, #468]	; (6a10 <usb_isr+0x5e0>)
    683c:	0a1b      	lsrs	r3, r3, #8
    683e:	7013      	strb	r3, [r2, #0]
		USBKeys_Idle_Count = 0;
    6840:	4b74      	ldr	r3, [pc, #464]	; (6a14 <usb_isr+0x5e4>)
    6842:	7019      	strb	r1, [r3, #0]
    6844:	e7b9      	b.n	67ba <usb_isr+0x38a>
static void endpoint0_stall()
{
	#ifdef UART_DEBUG_UNKNOWN
	print("STALL" NL );
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6846:	4b6e      	ldr	r3, [pc, #440]	; (6a00 <usb_isr+0x5d0>)
    6848:	220f      	movs	r2, #15
    684a:	701a      	strb	r2, [r3, #0]
    684c:	e029      	b.n	68a2 <usb_isr+0x472>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
			reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    684e:	2102      	movs	r1, #2
	print(",");
	printHex( datalen );
	print( NL );
	#endif

	if ( datalen > setup.wLength )
    6850:	88ff      	ldrh	r7, [r7, #6]
    6852:	428f      	cmp	r7, r1
    6854:	bf28      	it	cs
    6856:	460f      	movcs	r7, r1
    6858:	2f40      	cmp	r7, #64	; 0x40
    685a:	46b8      	mov	r8, r7
    685c:	bf28      	it	cs
    685e:	f04f 0840 	movcs.w	r8, #64	; 0x40

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit(data, size);
    6862:	4620      	mov	r0, r4
    6864:	4641      	mov	r1, r8
    6866:	f7ff fcff 	bl	6268 <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    686a:	ebb7 0708 	subs.w	r7, r7, r8
	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit(data, size);
	data += size;
    686e:	4444      	add	r4, r8
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6870:	d104      	bne.n	687c <usb_isr+0x44c>
    6872:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    6876:	d114      	bne.n	68a2 <usb_isr+0x472>
    6878:	46b8      	mov	r8, r7
    687a:	e004      	b.n	6886 <usb_isr+0x456>
    687c:	2f40      	cmp	r7, #64	; 0x40
    687e:	46b8      	mov	r8, r7
    6880:	bf28      	it	cs
    6882:	f04f 0840 	movcs.w	r8, #64	; 0x40
		return;

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit(data, size);
    6886:	4620      	mov	r0, r4
    6888:	4641      	mov	r1, r8
    688a:	f7ff fced 	bl	6268 <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    688e:	ebb7 0708 	subs.w	r7, r7, r8

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6892:	4444      	add	r4, r8
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6894:	d102      	bne.n	689c <usb_isr+0x46c>
    6896:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    689a:	d102      	bne.n	68a2 <usb_isr+0x472>
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    689c:	4b5e      	ldr	r3, [pc, #376]	; (6a18 <usb_isr+0x5e8>)
	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
    689e:	6034      	str	r4, [r6, #0]
	ep0_tx_len = datalen;
    68a0:	801f      	strh	r7, [r3, #0]
		print(NL);
		#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    68a2:	2201      	movs	r2, #1
    68a4:	4b5d      	ldr	r3, [pc, #372]	; (6a1c <usb_isr+0x5ec>)
    68a6:	e05b      	b.n	6960 <usb_isr+0x530>
		printHex32(setup.word2);
		print(NL);
		#endif

		// CDC Interface
		if ( setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/ )
    68a8:	4f5d      	ldr	r7, [pc, #372]	; (6a20 <usb_isr+0x5f0>)
    68aa:	883b      	ldrh	r3, [r7, #0]
    68ac:	f242 0221 	movw	r2, #8225	; 0x2021
    68b0:	4293      	cmp	r3, r2
    68b2:	d10e      	bne.n	68d2 <usb_isr+0x4a2>
    68b4:	2300      	movs	r3, #0
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for ( i = 0; i < 7; i++ )
			{
				//serial_phex(*buf);
				*dst++ = *buf++;
    68b6:	4a5b      	ldr	r2, [pc, #364]	; (6a24 <usb_isr+0x5f4>)
    68b8:	5cc8      	ldrb	r0, [r1, r3]
    68ba:	5498      	strb	r0, [r3, r2]
		if ( setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/ )
		{
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for ( i = 0; i < 7; i++ )
    68bc:	3301      	adds	r3, #1
    68be:	2b07      	cmp	r3, #7
    68c0:	d1f9      	bne.n	68b6 <usb_isr+0x486>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if ( usb_cdc_line_coding[0] == 134 )
    68c2:	7813      	ldrb	r3, [r2, #0]
    68c4:	2b86      	cmp	r3, #134	; 0x86
    68c6:	d102      	bne.n	68ce <usb_isr+0x49e>
				usb_reboot_timer = 15;
    68c8:	4b57      	ldr	r3, [pc, #348]	; (6a28 <usb_isr+0x5f8>)
    68ca:	220f      	movs	r2, #15
    68cc:	701a      	strb	r2, [r3, #0]
			endpoint0_transmit( NULL, 0 );
    68ce:	2000      	movs	r0, #0
    68d0:	e010      	b.n	68f4 <usb_isr+0x4c4>
		}

		// Keyboard SET_REPORT
		if ( setup.wRequestAndType == 0x921 && setup.wValue & 0x200 )
    68d2:	f640 1221 	movw	r2, #2337	; 0x921
    68d6:	4293      	cmp	r3, r2
    68d8:	d11a      	bne.n	6910 <usb_isr+0x4e0>
    68da:	887b      	ldrh	r3, [r7, #2]
    68dc:	059b      	lsls	r3, r3, #22
    68de:	d517      	bpl.n	6910 <usb_isr+0x4e0>
		{
			// Interface
			switch ( setup.wIndex & 0xFF )
    68e0:	7938      	ldrb	r0, [r7, #4]
    68e2:	b120      	cbz	r0, 68ee <usb_isr+0x4be>
    68e4:	2801      	cmp	r0, #1
    68e6:	d109      	bne.n	68fc <usb_isr+0x4cc>
				endpoint0_transmit( NULL, 0 );
				break;
			// NKRO Keyboard Interface
			case NKRO_KEYBOARD_INTERFACE:
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
    68e8:	784a      	ldrb	r2, [r1, #1]
    68ea:	4b50      	ldr	r3, [pc, #320]	; (6a2c <usb_isr+0x5fc>)
    68ec:	e7ee      	b.n	68cc <usb_isr+0x49c>
			// Interface
			switch ( setup.wIndex & 0xFF )
			{
			// Keyboard Interface
			case KEYBOARD_INTERFACE:
				USBKeys_LEDs = buf[0];
    68ee:	4b4f      	ldr	r3, [pc, #316]	; (6a2c <usb_isr+0x5fc>)
    68f0:	780a      	ldrb	r2, [r1, #0]
    68f2:	701a      	strb	r2, [r3, #0]
				endpoint0_transmit( NULL, 0 );
    68f4:	4601      	mov	r1, r0
    68f6:	f7ff fcb7 	bl	6268 <endpoint0_transmit>
    68fa:	e009      	b.n	6910 <usb_isr+0x4e0>
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
				endpoint0_transmit( NULL, 0 );
				break;
			default:
				warn_msg("Unknown interface - ");
    68fc:	4842      	ldr	r0, [pc, #264]	; (6a08 <usb_isr+0x5d8>)
    68fe:	f000 ff91 	bl	7824 <_print>
				printHex( setup.wIndex );
    6902:	88b8      	ldrh	r0, [r7, #4]
    6904:	2101      	movs	r1, #1
    6906:	f001 f810 	bl	792a <printHex_op>
				print( NL );
    690a:	4840      	ldr	r0, [pc, #256]	; (6a0c <usb_isr+0x5dc>)
    690c:	f000 ff8a 	bl	7824 <_print>
			print( NL );
			#endif
		}

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    6910:	4b47      	ldr	r3, [pc, #284]	; (6a30 <usb_isr+0x600>)
    6912:	f844 3036 	str.w	r3, [r4, r6, lsl #3]
    6916:	e024      	b.n	6962 <usb_isr+0x532>
		printHex(stat);
		print(NL);
		#endif

		// send remaining data, if any...
		data = ep0_tx_ptr;
    6918:	f8df 8124 	ldr.w	r8, [pc, #292]	; 6a40 <usb_isr+0x610>
    691c:	f8d8 7000 	ldr.w	r7, [r8]
		if ( data )
    6920:	b1af      	cbz	r7, 694e <usb_isr+0x51e>
		{
			size = ep0_tx_len;
    6922:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 6a18 <usb_isr+0x5e8>
    6926:	f8b9 4000 	ldrh.w	r4, [r9]
    692a:	2c40      	cmp	r4, #64	; 0x40
    692c:	4626      	mov	r6, r4
    692e:	bf28      	it	cs
    6930:	2640      	movcs	r6, #64	; 0x40
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
    6932:	4638      	mov	r0, r7
    6934:	4631      	mov	r1, r6
    6936:	f7ff fc97 	bl	6268 <endpoint0_transmit>
			data += size;
			ep0_tx_len -= size;
    693a:	1ba0      	subs	r0, r4, r6
    693c:	b280      	uxth	r0, r0
    693e:	f8a9 0000 	strh.w	r0, [r9]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    6942:	b908      	cbnz	r0, 6948 <usb_isr+0x518>
    6944:	2e40      	cmp	r6, #64	; 0x40
    6946:	d100      	bne.n	694a <usb_isr+0x51a>
		if ( data )
		{
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    6948:	19b8      	adds	r0, r7, r6
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    694a:	f8c8 0000 	str.w	r0, [r8]
		}

		if ( setup.bRequest == 5 && setup.bmRequestType == 0 )
    694e:	4b34      	ldr	r3, [pc, #208]	; (6a20 <usb_isr+0x5f0>)
    6950:	881a      	ldrh	r2, [r3, #0]
    6952:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    6956:	d104      	bne.n	6962 <usb_isr+0x532>
		{
			setup.bRequest = 0;
    6958:	2200      	movs	r2, #0
    695a:	705a      	strb	r2, [r3, #1]
			#ifdef UART_DEBUG
			print("set address: ");
			printHex(setup.wValue);
			print(NL);
			#endif
			USB0_ADDR = setup.wValue;
    695c:	789a      	ldrb	r2, [r3, #2]
    695e:	4b35      	ldr	r3, [pc, #212]	; (6a34 <usb_isr+0x604>)
    6960:	701a      	strb	r2, [r3, #0]
		printHex(pid);
		print(NL);
		#endif
		break;
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6962:	4b2e      	ldr	r3, [pc, #184]	; (6a1c <usb_isr+0x5ec>)
    6964:	2201      	movs	r2, #1
    6966:	701a      	strb	r2, [r3, #0]
    6968:	e0a0      	b.n	6aac <usb_isr+0x67c>
		{
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
    696a:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    696e:	3f01      	subs	r7, #1
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6970:	f8d8 2004 	ldr.w	r2, [r8, #4]
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays

			if ( stat & 0x08 )
    6974:	f003 0308 	and.w	r3, r3, #8
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6978:	f1a2 0008 	sub.w	r0, r2, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    697c:	b2ff      	uxtb	r7, r7

			if ( stat & 0x08 )
    697e:	f003 0eff 	and.w	lr, r3, #255	; 0xff
    6982:	2b00      	cmp	r3, #0
    6984:	d05e      	beq.n	6a44 <usb_isr+0x614>
			{ // transmit
				usb_free( packet );
    6986:	f000 fab3 	bl	6ef0 <usb_free>
				packet = tx_first[ endpoint ];
    698a:	4b2b      	ldr	r3, [pc, #172]	; (6a38 <usb_isr+0x608>)
    698c:	4a2b      	ldr	r2, [pc, #172]	; (6a3c <usb_isr+0x60c>)
    698e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
				if ( packet )
    6992:	b1f0      	cbz	r0, 69d2 <usb_isr+0x5a2>
				{
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    6994:	6841      	ldr	r1, [r0, #4]
    6996:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
					b->addr = packet->buf;
    699a:	f100 0308 	add.w	r3, r0, #8
    699e:	f8c8 3004 	str.w	r3, [r8, #4]
					switch ( tx_state[ endpoint ] )
    69a2:	5dd3      	ldrb	r3, [r2, r7]
    69a4:	2b03      	cmp	r3, #3
    69a6:	d80b      	bhi.n	69c0 <usb_isr+0x590>
    69a8:	e8df f003 	tbb	[pc, r3]
    69ac:	08060402 	.word	0x08060402
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[ endpoint ] = TX_STATE_ODD_FREE;
    69b0:	2303      	movs	r3, #3
    69b2:	e004      	b.n	69be <usb_isr+0x58e>
						break;
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[ endpoint ] = TX_STATE_EVEN_FREE;
    69b4:	2302      	movs	r3, #2
    69b6:	e002      	b.n	69be <usb_isr+0x58e>
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_ODD_FIRST;
    69b8:	2305      	movs	r3, #5
    69ba:	e000      	b.n	69be <usb_isr+0x58e>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_EVEN_FIRST;
    69bc:	2304      	movs	r3, #4
    69be:	55d3      	strb	r3, [r2, r7]
						break;
					default:
						break;
					}
					b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    69c0:	f018 0f08 	tst.w	r8, #8
    69c4:	8802      	ldrh	r2, [r0, #0]
    69c6:	bf14      	ite	ne
    69c8:	23c8      	movne	r3, #200	; 0xc8
    69ca:	2388      	moveq	r3, #136	; 0x88
    69cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    69d0:	e06a      	b.n	6aa8 <usb_isr+0x678>
				} else {
					//serial_print("tx no packet\n");
					switch ( tx_state[ endpoint ] )
    69d2:	5dd3      	ldrb	r3, [r2, r7]
    69d4:	2b03      	cmp	r3, #3
    69d6:	d807      	bhi.n	69e8 <usb_isr+0x5b8>
    69d8:	e8df f003 	tbb	[pc, r3]
    69dc:	04026868 	.word	0x04026868
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    69e0:	2300      	movs	r3, #0
    69e2:	e006      	b.n	69f2 <usb_isr+0x5c2>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    69e4:	2301      	movs	r3, #1
    69e6:	e004      	b.n	69f2 <usb_isr+0x5c2>
						break;
					default:
						tx_state[ endpoint ] = ((uint32_t)b & 8)
    69e8:	f018 0f08 	tst.w	r8, #8
    69ec:	bf14      	ite	ne
    69ee:	2303      	movne	r3, #3
    69f0:	2302      	moveq	r3, #2
    69f2:	55d3      	strb	r3, [r2, r7]
							? TX_STATE_ODD_FREE
							: TX_STATE_EVEN_FREE;
						break;
    69f4:	e05a      	b.n	6aac <usb_isr+0x67c>
    69f6:	bf00      	nop
    69f8:	1fff9237 	.word	0x1fff9237
    69fc:	1fff922f 	.word	0x1fff922f
    6a00:	400720c0 	.word	0x400720c0
    6a04:	0000b07c 	.word	0x0000b07c
    6a08:	0000b0b2 	.word	0x0000b0b2
    6a0c:	0000b143 	.word	0x0000b143
    6a10:	1fff8b48 	.word	0x1fff8b48
    6a14:	1fff910a 	.word	0x1fff910a
    6a18:	1fff922c 	.word	0x1fff922c
    6a1c:	40072094 	.word	0x40072094
    6a20:	1fff9224 	.word	0x1fff9224
    6a24:	1fff8f94 	.word	0x1fff8f94
    6a28:	1fff91a1 	.word	0x1fff91a1
    6a2c:	1fff9107 	.word	0x1fff9107
    6a30:	004000c8 	.word	0x004000c8
    6a34:	40072098 	.word	0x40072098
    6a38:	1fff91e4 	.word	0x1fff91e4
    6a3c:	1fff9138 	.word	0x1fff9138
    6a40:	1fff9114 	.word	0x1fff9114
					}
				}
			}
			else
			{ // receive
				packet->len = b->desc >> 16;
    6a44:	f854 3036 	ldr.w	r3, [r4, r6, lsl #3]
    6a48:	0c19      	lsrs	r1, r3, #16
    6a4a:	f822 1c08 	strh.w	r1, [r2, #-8]
				if ( packet->len > 0 )
    6a4e:	b329      	cbz	r1, 6a9c <usb_isr+0x66c>
				{
					packet->index = 0;
					packet->next = NULL;
					if ( rx_first[ endpoint ] == NULL )
    6a50:	4b34      	ldr	r3, [pc, #208]	; (6b24 <usb_isr+0x6f4>)
			else
			{ // receive
				packet->len = b->desc >> 16;
				if ( packet->len > 0 )
				{
					packet->index = 0;
    6a52:	f822 ec06 	strh.w	lr, [r2, #-6]
					packet->next = NULL;
    6a56:	f842 ec04 	str.w	lr, [r2, #-4]
					if ( rx_first[ endpoint ] == NULL )
    6a5a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    6a5e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 6b58 <usb_isr+0x728>
    6a62:	b912      	cbnz	r2, 6a6a <usb_isr+0x63a>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[ endpoint ] = packet;
    6a64:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    6a68:	e002      	b.n	6a70 <usb_isr+0x640>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
    6a6a:	f85e 3027 	ldr.w	r3, [lr, r7, lsl #2]
    6a6e:	6058      	str	r0, [r3, #4]
					}
					rx_last[ endpoint ] = packet;
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    6a70:	4a2d      	ldr	r2, [pc, #180]	; (6b28 <usb_isr+0x6f8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
					}
					rx_last[ endpoint ] = packet;
    6a72:	f84e 0027 	str.w	r0, [lr, r7, lsl #2]
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    6a76:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
    6a7a:	440b      	add	r3, r1
    6a7c:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated packets
					// so a flood of incoming data on 1 endpoint doesn't starve
					// the others if the user isn't reading it regularly
					packet = usb_malloc();
    6a80:	f000 fa18 	bl	6eb4 <usb_malloc>
					if ( packet )
    6a84:	b118      	cbz	r0, 6a8e <usb_isr+0x65e>
					{
						b->addr = packet->buf;
    6a86:	3008      	adds	r0, #8
    6a88:	f8c8 0004 	str.w	r0, [r8, #4]
    6a8c:	e006      	b.n	6a9c <usb_isr+0x66c>
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
						usb_rx_memory_needed++;
    6a8e:	4a27      	ldr	r2, [pc, #156]	; (6b2c <usb_isr+0x6fc>)
					else
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
    6a90:	f844 0036 	str.w	r0, [r4, r6, lsl #3]
						usb_rx_memory_needed++;
    6a94:	7813      	ldrb	r3, [r2, #0]
    6a96:	3301      	adds	r3, #1
    6a98:	7013      	strb	r3, [r2, #0]
    6a9a:	e007      	b.n	6aac <usb_isr+0x67c>
					}
				}
				else
				{
					b->desc = BDT_DESC( 64, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6a9c:	4a24      	ldr	r2, [pc, #144]	; (6b30 <usb_isr+0x700>)
    6a9e:	4b25      	ldr	r3, [pc, #148]	; (6b34 <usb_isr+0x704>)
    6aa0:	f018 0f08 	tst.w	r8, #8
    6aa4:	bf08      	it	eq
    6aa6:	4613      	moveq	r3, r2
    6aa8:	f844 3036 	str.w	r3, [r4, r6, lsl #3]




		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    6aac:	2308      	movs	r3, #8
    6aae:	702b      	strb	r3, [r5, #0]
		goto restart;
    6ab0:	e4c0      	b.n	6434 <usb_isr+0x4>
	}


	if ( status & USB_ISTAT_USBRST /* 01 */ )
    6ab2:	07f0      	lsls	r0, r6, #31
    6ab4:	d51d      	bpl.n	6af2 <usb_isr+0x6c2>
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6ab6:	4820      	ldr	r0, [pc, #128]	; (6b38 <usb_isr+0x708>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    6ab8:	4a1d      	ldr	r2, [pc, #116]	; (6b30 <usb_isr+0x700>)
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    6aba:	4d20      	ldr	r5, [pc, #128]	; (6b3c <usb_isr+0x70c>)
	if ( status & USB_ISTAT_USBRST /* 01 */ )
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6abc:	2302      	movs	r3, #2
    6abe:	7003      	strb	r3, [r0, #0]
		ep0_tx_bdt_bank = 0;
    6ac0:	4b1f      	ldr	r3, [pc, #124]	; (6b40 <usb_isr+0x710>)
    6ac2:	7019      	strb	r1, [r3, #0]

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    6ac4:	4b1f      	ldr	r3, [pc, #124]	; (6b44 <usb_isr+0x714>)
    6ac6:	601a      	str	r2, [r3, #0]
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
		table[index( 0, RX, ODD ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    6ac8:	609a      	str	r2, [r3, #8]
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
    6aca:	4a1f      	ldr	r2, [pc, #124]	; (6b48 <usb_isr+0x718>)
    6acc:	60da      	str	r2, [r3, #12]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    6ace:	605d      	str	r5, [r3, #4]
		table[index( 0, RX, ODD ) ].desc = BDT_DESC( EP0_SIZE, 0 );
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
		table[index( 0, TX, EVEN ) ].desc = 0;
    6ad0:	6119      	str	r1, [r3, #16]
		table[index( 0, TX, ODD ) ].desc = 0;
    6ad2:	6199      	str	r1, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6ad4:	4b1d      	ldr	r3, [pc, #116]	; (6b4c <usb_isr+0x71c>)
    6ad6:	220d      	movs	r2, #13
    6ad8:	701a      	strb	r2, [r3, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    6ada:	4a1d      	ldr	r2, [pc, #116]	; (6b50 <usb_isr+0x720>)
    6adc:	23ff      	movs	r3, #255	; 0xff
    6ade:	7013      	strb	r3, [r2, #0]
		USB0_ISTAT = 0xFF;
    6ae0:	7023      	strb	r3, [r4, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    6ae2:	7411      	strb	r1, [r2, #16]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    6ae4:	7113      	strb	r3, [r2, #4]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    6ae6:	4b1b      	ldr	r3, [pc, #108]	; (6b54 <usb_isr+0x724>)
    6ae8:	229f      	movs	r2, #159	; 0x9f
    6aea:	701a      	strb	r2, [r3, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    6aec:	2301      	movs	r3, #1
    6aee:	7003      	strb	r3, [r0, #0]
		return;
    6af0:	e014      	b.n	6b1c <usb_isr+0x6ec>
	}


	if ( (status & USB_ISTAT_STALL /* 80 */ ) )
    6af2:	0631      	lsls	r1, r6, #24
	{
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6af4:	bf41      	itttt	mi
    6af6:	4b15      	ldrmi	r3, [pc, #84]	; (6b4c <usb_isr+0x71c>)
    6af8:	220d      	movmi	r2, #13
    6afa:	701a      	strbmi	r2, [r3, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    6afc:	2380      	movmi	r3, #128	; 0x80
    6afe:	bf48      	it	mi
    6b00:	7023      	strbmi	r3, [r4, #0]
	}
	if ( (status & USB_ISTAT_ERROR /* 02 */ ) )
    6b02:	07b2      	lsls	r2, r6, #30
	{
		uint8_t err = USB0_ERRSTAT;
    6b04:	bf41      	itttt	mi
    6b06:	4a12      	ldrmi	r2, [pc, #72]	; (6b50 <usb_isr+0x720>)
    6b08:	7813      	ldrbmi	r3, [r2, #0]
    6b0a:	b2db      	uxtbmi	r3, r3
		USB0_ERRSTAT = err;
    6b0c:	7013      	strbmi	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    6b0e:	bf44      	itt	mi
    6b10:	2302      	movmi	r3, #2
    6b12:	7023      	strbmi	r3, [r4, #0]
	}

	if ( (status & USB_ISTAT_SLEEP /* 10 */ ) )
    6b14:	06f3      	lsls	r3, r6, #27
	{
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    6b16:	bf44      	itt	mi
    6b18:	2310      	movmi	r3, #16
    6b1a:	7023      	strbmi	r3, [r4, #0]
	}
}
    6b1c:	b003      	add	sp, #12
    6b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b22:	bf00      	nop
    6b24:	1fff9180 	.word	0x1fff9180
    6b28:	1fffa168 	.word	0x1fffa168
    6b2c:	1fff922e 	.word	0x1fff922e
    6b30:	00400088 	.word	0x00400088
    6b34:	004000c8 	.word	0x004000c8
    6b38:	40072094 	.word	0x40072094
    6b3c:	1fff9140 	.word	0x1fff9140
    6b40:	1fff91a0 	.word	0x1fff91a0
    6b44:	1fff8000 	.word	0x1fff8000
    6b48:	1fff91a4 	.word	0x1fff91a4
    6b4c:	400720c0 	.word	0x400720c0
    6b50:	40072088 	.word	0x40072088
    6b54:	40072084 	.word	0x40072084
    6b58:	1fff9118 	.word	0x1fff9118

00006b5c <usb_init>:



uint8_t usb_init()
{
    6b5c:	2200      	movs	r2, #0
	#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
	{
		table[i].desc = 0;
    6b5e:	4b20      	ldr	r3, [pc, #128]	; (6be0 <usb_init+0x84>)
    6b60:	2100      	movs	r1, #0
    6b62:	50d1      	str	r1, [r2, r3]
    6b64:	1898      	adds	r0, r3, r2
    6b66:	3208      	adds	r2, #8
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    6b68:	f5b2 7f84 	cmp.w	r2, #264	; 0x108
	{
		table[i].desc = 0;
		table[i].addr = 0;
    6b6c:	6041      	str	r1, [r0, #4]
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    6b6e:	d1f6      	bne.n	6b5e <usb_init+0x2>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    6b70:	491c      	ldr	r1, [pc, #112]	; (6be4 <usb_init+0x88>)
    6b72:	680a      	ldr	r2, [r1, #0]
    6b74:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    6b78:	600a      	str	r2, [r1, #0]

	// reset USB module
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
    6b7a:	4a1b      	ldr	r2, [pc, #108]	; (6be8 <usb_init+0x8c>)
    6b7c:	2180      	movs	r1, #128	; 0x80
    6b7e:	7011      	strb	r1, [r2, #0]
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end
    6b80:	7810      	ldrb	r0, [r2, #0]
    6b82:	4919      	ldr	r1, [pc, #100]	; (6be8 <usb_init+0x8c>)
    6b84:	0600      	lsls	r0, r0, #24
    6b86:	d4fb      	bmi.n	6b80 <usb_init+0x24>

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    6b88:	4a18      	ldr	r2, [pc, #96]	; (6bec <usb_init+0x90>)
    6b8a:	f3c3 2007 	ubfx	r0, r3, #8, #8
    6b8e:	7010      	strb	r0, [r2, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    6b90:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    6b94:	0e1b      	lsrs	r3, r3, #24
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    6b96:	7510      	strb	r0, [r2, #20]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    6b98:	7613      	strb	r3, [r2, #24]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    6b9a:	23ff      	movs	r3, #255	; 0xff
    6b9c:	f802 3c1c 	strb.w	r3, [r2, #-28]
	USB0_ERRSTAT = 0xFF;
    6ba0:	f802 3c14 	strb.w	r3, [r2, #-20]
	USB0_OTGISTAT = 0xFF;
    6ba4:	f802 3c8c 	strb.w	r3, [r2, #-140]

	USB0_USBTRC0 |= 0x40; // undocumented bit
    6ba8:	780b      	ldrb	r3, [r1, #0]
    6baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6bae:	700b      	strb	r3, [r1, #0]

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    6bb0:	4b0f      	ldr	r3, [pc, #60]	; (6bf0 <usb_init+0x94>)
    6bb2:	2001      	movs	r0, #1
	USB0_USBCTRL = 0;
    6bb4:	2200      	movs	r2, #0
	USB0_OTGISTAT = 0xFF;

	USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    6bb6:	7018      	strb	r0, [r3, #0]
	USB0_USBCTRL = 0;
    6bb8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    6bbc:	f803 0c10 	strb.w	r0, [r3, #-16]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    6bc0:	4b0c      	ldr	r3, [pc, #48]	; (6bf4 <usb_init+0x98>)
    6bc2:	2270      	movs	r2, #112	; 0x70
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    6bc4:	f46f 7150 	mvn.w	r1, #832	; 0x340

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    6bc8:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    6bca:	440b      	add	r3, r1
    6bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
    6bd0:	601a      	str	r2, [r3, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    6bd2:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
    6bd6:	f503 23c8 	add.w	r3, r3, #409600	; 0x64000
    6bda:	2210      	movs	r2, #16
    6bdc:	701a      	strb	r2, [r3, #0]

	return 1;
}
    6bde:	4770      	bx	lr
    6be0:	1fff8000 	.word	0x1fff8000
    6be4:	40048034 	.word	0x40048034
    6be8:	4007210c 	.word	0x4007210c
    6bec:	4007209c 	.word	0x4007209c
    6bf0:	40072094 	.word	0x40072094
    6bf4:	e000e449 	.word	0xe000e449

00006bf8 <usb_keyboard_send>:

// ----- Functions -----

// send the contents of keyboard_keys and keyboard_modifier_keys
void usb_keyboard_send()
{
    6bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6bfc:	f246 4501 	movw	r5, #25601	; 0x6401
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    6c00:	4b97      	ldr	r3, [pc, #604]	; (6e60 <usb_keyboard_send+0x268>)
    6c02:	781b      	ldrb	r3, [r3, #0]
    6c04:	b90b      	cbnz	r3, 6c0a <usb_keyboard_send+0x12>
		{
			erro_print("USB not configured...");
    6c06:	4897      	ldr	r0, [pc, #604]	; (6e64 <usb_keyboard_send+0x26c>)
    6c08:	e023      	b.n	6c52 <usb_keyboard_send+0x5a>
			return;
		}

		if ( USBKeys_Protocol == 0 ) // Boot Mode
    6c0a:	4b97      	ldr	r3, [pc, #604]	; (6e68 <usb_keyboard_send+0x270>)
    6c0c:	781a      	ldrb	r2, [r3, #0]
    6c0e:	461e      	mov	r6, r3
    6c10:	b942      	cbnz	r2, 6c24 <usb_keyboard_send+0x2c>
		{
			if ( usb_tx_packet_count( KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    6c12:	2001      	movs	r0, #1
    6c14:	f7ff fb64 	bl	62e0 <usb_tx_packet_count>
    6c18:	2803      	cmp	r0, #3
    6c1a:	d90f      	bls.n	6c3c <usb_keyboard_send+0x44>
				if ( tx_packet )
					break;
			}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    6c1c:	3d01      	subs	r5, #1
    6c1e:	4b93      	ldr	r3, [pc, #588]	; (6e6c <usb_keyboard_send+0x274>)
    6c20:	d112      	bne.n	6c48 <usb_keyboard_send+0x50>
    6c22:	e013      	b.n	6c4c <usb_keyboard_send+0x54>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Protocol == 1 ) // NKRO Mode
    6c24:	781b      	ldrb	r3, [r3, #0]
    6c26:	2b01      	cmp	r3, #1
    6c28:	d101      	bne.n	6c2e <usb_keyboard_send+0x36>
		{
			if ( usb_tx_packet_count( NKRO_KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    6c2a:	2002      	movs	r0, #2
    6c2c:	e7f2      	b.n	6c14 <usb_keyboard_send+0x1c>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Changed &
    6c2e:	4b90      	ldr	r3, [pc, #576]	; (6e70 <usb_keyboard_send+0x278>)
    6c30:	781b      	ldrb	r3, [r3, #0]
    6c32:	f013 0f60 	tst.w	r3, #96	; 0x60
    6c36:	d0f1      	beq.n	6c1c <usb_keyboard_send+0x24>
			( USBKeyChangeState_System | USBKeyChangeState_Consumer )
		)
		{
			if ( usb_tx_packet_count( SYS_CTRL_ENDPOINT ) < TX_PACKET_LIMIT )
    6c38:	2008      	movs	r0, #8
    6c3a:	e7eb      	b.n	6c14 <usb_keyboard_send+0x1c>
			{
				tx_packet = usb_malloc();
    6c3c:	f000 f93a 	bl	6eb4 <usb_malloc>
				if ( tx_packet )
    6c40:	4604      	mov	r4, r0
    6c42:	2800      	cmp	r0, #0
    6c44:	d0ea      	beq.n	6c1c <usb_keyboard_send+0x24>
    6c46:	e00b      	b.n	6c60 <usb_keyboard_send+0x68>
					break;
			}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    6c48:	781a      	ldrb	r2, [r3, #0]
    6c4a:	b132      	cbz	r2, 6c5a <usb_keyboard_send+0x62>
		{
			transmit_previous_timeout = 1;
    6c4c:	2201      	movs	r2, #1
			warn_print("USB Transmit Timeout...");
    6c4e:	4889      	ldr	r0, [pc, #548]	; (6e74 <usb_keyboard_send+0x27c>)
			}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
    6c50:	701a      	strb	r2, [r3, #0]

		break;
	}

	return;
}
    6c52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
			warn_print("USB Transmit Timeout...");
    6c56:	f000 bde5 	b.w	7824 <_print>
			return;
		}
		yield();
    6c5a:	f7fb fc99 	bl	2590 <yield>
	}
    6c5e:	e7cf      	b.n	6c00 <usb_keyboard_send+0x8>

	// Pointer to USB tx packet buffer
	uint8_t *tx_buf = tx_packet->buf;

	// Check system control keys
	if ( USBKeys_Changed & USBKeyChangeState_System )
    6c60:	4d83      	ldr	r5, [pc, #524]	; (6e70 <usb_keyboard_send+0x278>)
    6c62:	782b      	ldrb	r3, [r5, #0]
    6c64:	069a      	lsls	r2, r3, #26
    6c66:	d51a      	bpl.n	6c9e <usb_keyboard_send+0xa6>
	{
		if ( Output_DebugMode )
    6c68:	4b83      	ldr	r3, [pc, #524]	; (6e78 <usb_keyboard_send+0x280>)
    6c6a:	4e84      	ldr	r6, [pc, #528]	; (6e7c <usb_keyboard_send+0x284>)
    6c6c:	781b      	ldrb	r3, [r3, #0]
    6c6e:	b14b      	cbz	r3, 6c84 <usb_keyboard_send+0x8c>
		{
			print("SysCtrl[");
    6c70:	4883      	ldr	r0, [pc, #524]	; (6e80 <usb_keyboard_send+0x288>)
    6c72:	f000 fdd7 	bl	7824 <_print>
			printHex_op( USBKeys_SysCtrl, 2 );
    6c76:	7830      	ldrb	r0, [r6, #0]
    6c78:	2102      	movs	r1, #2
    6c7a:	f000 fe56 	bl	792a <printHex_op>
			print( "] " NL );
    6c7e:	4881      	ldr	r0, [pc, #516]	; (6e84 <usb_keyboard_send+0x28c>)
    6c80:	f000 fdd0 	bl	7824 <_print>
		}

		*tx_buf++ = 0x02; // ID
    6c84:	2302      	movs	r3, #2
		*tx_buf   = USBKeys_SysCtrl;
    6c86:	7832      	ldrb	r2, [r6, #0]
			print("SysCtrl[");
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
    6c88:	7223      	strb	r3, [r4, #8]
		*tx_buf   = USBKeys_SysCtrl;
		tx_packet->len = 2;
    6c8a:	8023      	strh	r3, [r4, #0]
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
		*tx_buf   = USBKeys_SysCtrl;
    6c8c:	7262      	strb	r2, [r4, #9]
		tx_packet->len = 2;

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    6c8e:	2008      	movs	r0, #8
    6c90:	4621      	mov	r1, r4
    6c92:	f7ff fb73 	bl	637c <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_System; // Mark sent
    6c96:	782b      	ldrb	r3, [r5, #0]
    6c98:	f023 0320 	bic.w	r3, r3, #32
    6c9c:	e0dc      	b.n	6e58 <usb_keyboard_send+0x260>
		return;
	}

	// Check consumer control keys
	if ( USBKeys_Changed & USBKeyChangeState_Consumer )
    6c9e:	065b      	lsls	r3, r3, #25
    6ca0:	d51c      	bpl.n	6cdc <usb_keyboard_send+0xe4>
	{
		if ( Output_DebugMode )
    6ca2:	4b75      	ldr	r3, [pc, #468]	; (6e78 <usb_keyboard_send+0x280>)
    6ca4:	4e78      	ldr	r6, [pc, #480]	; (6e88 <usb_keyboard_send+0x290>)
    6ca6:	781b      	ldrb	r3, [r3, #0]
    6ca8:	b14b      	cbz	r3, 6cbe <usb_keyboard_send+0xc6>
		{
			print("ConsCtrl[");
    6caa:	4878      	ldr	r0, [pc, #480]	; (6e8c <usb_keyboard_send+0x294>)
    6cac:	f000 fdba 	bl	7824 <_print>
			printHex_op( USBKeys_ConsCtrl, 2 );
    6cb0:	8830      	ldrh	r0, [r6, #0]
    6cb2:	2102      	movs	r1, #2
    6cb4:	f000 fe39 	bl	792a <printHex_op>
			print( "] " NL );
    6cb8:	4872      	ldr	r0, [pc, #456]	; (6e84 <usb_keyboard_send+0x28c>)
    6cba:	f000 fdb3 	bl	7824 <_print>
		}

		*tx_buf++ = 0x03; // ID
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
    6cbe:	8833      	ldrh	r3, [r6, #0]
    6cc0:	7263      	strb	r3, [r4, #9]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    6cc2:	2203      	movs	r2, #3
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
    6cc4:	0a1b      	lsrs	r3, r3, #8
    6cc6:	72a3      	strb	r3, [r4, #10]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    6cc8:	7222      	strb	r2, [r4, #8]
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
		tx_packet->len = 3;
    6cca:	8022      	strh	r2, [r4, #0]

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    6ccc:	2008      	movs	r0, #8
    6cce:	4621      	mov	r1, r4
    6cd0:	f7ff fb54 	bl	637c <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_Consumer; // Mark sent
    6cd4:	782b      	ldrb	r3, [r5, #0]
    6cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    6cda:	e0bd      	b.n	6e58 <usb_keyboard_send+0x260>
		return;
	}

	switch ( USBKeys_Protocol )
    6cdc:	7833      	ldrb	r3, [r6, #0]
    6cde:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    6ce2:	b11b      	cbz	r3, 6cec <usb_keyboard_send+0xf4>
    6ce4:	2e01      	cmp	r6, #1
    6ce6:	d045      	beq.n	6d74 <usb_keyboard_send+0x17c>
    6ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
	// Send boot keyboard interrupt packet(s)
	case 0:
		// USB Boot Mode debug output
		if ( Output_DebugMode )
    6cec:	4b62      	ldr	r3, [pc, #392]	; (6e78 <usb_keyboard_send+0x280>)
    6cee:	4f68      	ldr	r7, [pc, #416]	; (6e90 <usb_keyboard_send+0x298>)
    6cf0:	781b      	ldrb	r3, [r3, #0]
    6cf2:	b363      	cbz	r3, 6d4e <usb_keyboard_send+0x156>
		{
			dbug_msg("Boot USB: ");
    6cf4:	4867      	ldr	r0, [pc, #412]	; (6e94 <usb_keyboard_send+0x29c>)
    6cf6:	f000 fd95 	bl	7824 <_print>
			printHex_op( USBKeys_Modifiers, 2 );
    6cfa:	2102      	movs	r1, #2
    6cfc:	7838      	ldrb	r0, [r7, #0]
    6cfe:	f000 fe14 	bl	792a <printHex_op>
			print(" ");
    6d02:	4865      	ldr	r0, [pc, #404]	; (6e98 <usb_keyboard_send+0x2a0>)
    6d04:	f000 fd8e 	bl	7824 <_print>
			printHex( 0 );
    6d08:	4630      	mov	r0, r6
    6d0a:	2101      	movs	r1, #1
			print(" ");
			printHex_op( USBKeys_Keys[0], 2 );
    6d0c:	4e63      	ldr	r6, [pc, #396]	; (6e9c <usb_keyboard_send+0x2a4>)
		if ( Output_DebugMode )
		{
			dbug_msg("Boot USB: ");
			printHex_op( USBKeys_Modifiers, 2 );
			print(" ");
			printHex( 0 );
    6d0e:	f000 fe0c 	bl	792a <printHex_op>
			print(" ");
    6d12:	4861      	ldr	r0, [pc, #388]	; (6e98 <usb_keyboard_send+0x2a0>)
    6d14:	f000 fd86 	bl	7824 <_print>
			printHex_op( USBKeys_Keys[0], 2 );
    6d18:	7830      	ldrb	r0, [r6, #0]
    6d1a:	2102      	movs	r1, #2
    6d1c:	f000 fe05 	bl	792a <printHex_op>
			printHex_op( USBKeys_Keys[1], 2 );
    6d20:	7870      	ldrb	r0, [r6, #1]
    6d22:	2102      	movs	r1, #2
    6d24:	f000 fe01 	bl	792a <printHex_op>
			printHex_op( USBKeys_Keys[2], 2 );
    6d28:	78b0      	ldrb	r0, [r6, #2]
    6d2a:	2102      	movs	r1, #2
    6d2c:	f000 fdfd 	bl	792a <printHex_op>
			printHex_op( USBKeys_Keys[3], 2 );
    6d30:	78f0      	ldrb	r0, [r6, #3]
    6d32:	2102      	movs	r1, #2
    6d34:	f000 fdf9 	bl	792a <printHex_op>
			printHex_op( USBKeys_Keys[4], 2 );
    6d38:	7930      	ldrb	r0, [r6, #4]
    6d3a:	2102      	movs	r1, #2
    6d3c:	f000 fdf5 	bl	792a <printHex_op>
			printHex_op( USBKeys_Keys[5], 2 );
    6d40:	7970      	ldrb	r0, [r6, #5]
    6d42:	2102      	movs	r1, #2
    6d44:	f000 fdf1 	bl	792a <printHex_op>
			print( NL );
    6d48:	4855      	ldr	r0, [pc, #340]	; (6ea0 <usb_keyboard_send+0x2a8>)
    6d4a:	f000 fd6b 	bl	7824 <_print>
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
    6d4e:	783b      	ldrb	r3, [r7, #0]
    6d50:	7223      	strb	r3, [r4, #8]
		*tx_buf++ = 0;
    6d52:	2600      	movs	r6, #0
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    6d54:	4951      	ldr	r1, [pc, #324]	; (6e9c <usb_keyboard_send+0x2a4>)
			print( NL );
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
		*tx_buf++ = 0;
    6d56:	7266      	strb	r6, [r4, #9]
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    6d58:	2206      	movs	r2, #6
    6d5a:	f104 000a 	add.w	r0, r4, #10
    6d5e:	f7fb fc0b 	bl	2578 <memcpy>
		tx_packet->len = 8;
    6d62:	2308      	movs	r3, #8
    6d64:	8023      	strh	r3, [r4, #0]

		// Send USB Packet
		usb_tx( KEYBOARD_ENDPOINT, tx_packet );
    6d66:	2001      	movs	r0, #1
    6d68:	4621      	mov	r1, r4
    6d6a:	f7ff fb07 	bl	637c <usb_tx>
		USBKeys_Changed = USBKeyChangeState_None;
    6d6e:	702e      	strb	r6, [r5, #0]
		break;
    6d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	// Send NKRO keyboard interrupts packet(s)
	case 1:
		if ( Output_DebugMode )
    6d74:	4b40      	ldr	r3, [pc, #256]	; (6e78 <usb_keyboard_send+0x280>)
    6d76:	781a      	ldrb	r2, [r3, #0]
    6d78:	461e      	mov	r6, r3
    6d7a:	b112      	cbz	r2, 6d82 <usb_keyboard_send+0x18a>
		{
			dbug_msg("NKRO USB: ");
    6d7c:	4849      	ldr	r0, [pc, #292]	; (6ea4 <usb_keyboard_send+0x2ac>)
    6d7e:	f000 fd51 	bl	7824 <_print>
		}

		// Standard HID Keyboard
		if ( USBKeys_Changed )
    6d82:	782b      	ldrb	r3, [r5, #0]
    6d84:	2b00      	cmp	r3, #0
    6d86:	d068      	beq.n	6e5a <usb_keyboard_send+0x262>
		{
			// USB NKRO Debug output
			if ( Output_DebugMode )
    6d88:	7833      	ldrb	r3, [r6, #0]
    6d8a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 6e90 <usb_keyboard_send+0x298>
    6d8e:	b39b      	cbz	r3, 6df8 <usb_keyboard_send+0x200>
			{
				printHex_op( USBKeys_Modifiers, 2 );
    6d90:	f898 0000 	ldrb.w	r0, [r8]
    6d94:	2102      	movs	r1, #2
    6d96:	f000 fdc8 	bl	792a <printHex_op>
				print(" ");
    6d9a:	483f      	ldr	r0, [pc, #252]	; (6e98 <usb_keyboard_send+0x2a0>)
    6d9c:	f000 fd42 	bl	7824 <_print>
    6da0:	2700      	movs	r7, #0
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    6da2:	4e3e      	ldr	r6, [pc, #248]	; (6e9c <usb_keyboard_send+0x2a4>)
    6da4:	2102      	movs	r1, #2
    6da6:	5df0      	ldrb	r0, [r6, r7]
    6da8:	3701      	adds	r7, #1
    6daa:	f000 fdbe 	bl	792a <printHex_op>
			// USB NKRO Debug output
			if ( Output_DebugMode )
			{
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
    6dae:	2f06      	cmp	r7, #6
    6db0:	d1f7      	bne.n	6da2 <usb_keyboard_send+0x1aa>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    6db2:	4839      	ldr	r0, [pc, #228]	; (6e98 <usb_keyboard_send+0x2a0>)
    6db4:	f000 fd36 	bl	7824 <_print>
    6db8:	1d77      	adds	r7, r6, #5
    6dba:	f106 0913 	add.w	r9, r6, #19
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    6dbe:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    6dc2:	2102      	movs	r1, #2
    6dc4:	f000 fdb1 	bl	792a <printHex_op>
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				for ( uint8_t c = 6; c < 20; c++ )
    6dc8:	454f      	cmp	r7, r9
    6dca:	d1f8      	bne.n	6dbe <usb_keyboard_send+0x1c6>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    6dcc:	4832      	ldr	r0, [pc, #200]	; (6e98 <usb_keyboard_send+0x2a0>)
    6dce:	f000 fd29 	bl	7824 <_print>
				printHex_op( USBKeys_Keys[20], 2 );
    6dd2:	7d30      	ldrb	r0, [r6, #20]
    6dd4:	4e34      	ldr	r6, [pc, #208]	; (6ea8 <usb_keyboard_send+0x2b0>)
    6dd6:	2102      	movs	r1, #2
    6dd8:	f000 fda7 	bl	792a <printHex_op>
				print(" ");
    6ddc:	482e      	ldr	r0, [pc, #184]	; (6e98 <usb_keyboard_send+0x2a0>)
    6dde:	f000 fd21 	bl	7824 <_print>
    6de2:	1db7      	adds	r7, r6, #6
				for ( uint8_t c = 21; c < 27; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    6de4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    6de8:	2102      	movs	r1, #2
    6dea:	f000 fd9e 	bl	792a <printHex_op>
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				printHex_op( USBKeys_Keys[20], 2 );
				print(" ");
				for ( uint8_t c = 21; c < 27; c++ )
    6dee:	42be      	cmp	r6, r7
    6df0:	d1f8      	bne.n	6de4 <usb_keyboard_send+0x1ec>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print( NL );
    6df2:	482b      	ldr	r0, [pc, #172]	; (6ea0 <usb_keyboard_send+0x2a8>)
    6df4:	f000 fd16 	bl	7824 <_print>
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    6df8:	4620      	mov	r0, r4

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
    6dfa:	f898 3000 	ldrb.w	r3, [r8]
    6dfe:	7263      	strb	r3, [r4, #9]
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    6e00:	2701      	movs	r7, #1
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    6e02:	2602      	movs	r6, #2
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    6e04:	7227      	strb	r7, [r4, #8]
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    6e06:	4925      	ldr	r1, [pc, #148]	; (6e9c <usb_keyboard_send+0x2a4>)
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    6e08:	f820 6b0a 	strh.w	r6, [r0], #10

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    6e0c:	2206      	movs	r2, #6
    6e0e:	f7fb fbb3 	bl	2578 <memcpy>
			tx_buf += 6;
			tx_packet->len += 6;
    6e12:	8823      	ldrh	r3, [r4, #0]

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    6e14:	4925      	ldr	r1, [pc, #148]	; (6eac <usb_keyboard_send+0x2b4>)
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
			tx_buf += 6;
			tx_packet->len += 6;
    6e16:	4620      	mov	r0, r4
    6e18:	3306      	adds	r3, #6
    6e1a:	f820 3b10 	strh.w	r3, [r0], #16

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    6e1e:	220e      	movs	r2, #14
    6e20:	f7fb fbaa 	bl	2578 <memcpy>
			tx_buf += 14;
			tx_packet->len += 14;
    6e24:	8823      	ldrh	r3, [r4, #0]

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    6e26:	4920      	ldr	r1, [pc, #128]	; (6ea8 <usb_keyboard_send+0x2b0>)
			tx_packet->len += 6;

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
			tx_buf += 14;
			tx_packet->len += 14;
    6e28:	4620      	mov	r0, r4
    6e2a:	330e      	adds	r3, #14
    6e2c:	f820 3b1e 	strh.w	r3, [r0], #30

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    6e30:	463a      	mov	r2, r7
    6e32:	f7fb fba1 	bl	2578 <memcpy>
			tx_buf += 1;
			tx_packet->len += 1;
    6e36:	8823      	ldrh	r3, [r4, #0]

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    6e38:	491d      	ldr	r1, [pc, #116]	; (6eb0 <usb_keyboard_send+0x2b8>)
			tx_packet->len += 14;

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
			tx_buf += 1;
			tx_packet->len += 1;
    6e3a:	4620      	mov	r0, r4
    6e3c:	443b      	add	r3, r7
    6e3e:	f820 3b1f 	strh.w	r3, [r0], #31

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    6e42:	2206      	movs	r2, #6
    6e44:	f7fb fb98 	bl	2578 <memcpy>
			tx_packet->len += 6;
    6e48:	8823      	ldrh	r3, [r4, #0]
    6e4a:	3306      	adds	r3, #6
    6e4c:	8023      	strh	r3, [r4, #0]

			// Send USB Packet
			usb_tx( NKRO_KEYBOARD_ENDPOINT, tx_packet );
    6e4e:	4630      	mov	r0, r6
    6e50:	4621      	mov	r1, r4
    6e52:	f7ff fa93 	bl	637c <usb_tx>
			USBKeys_Changed = USBKeyChangeState_None; // Mark sent
    6e56:	2300      	movs	r3, #0
    6e58:	702b      	strb	r3, [r5, #0]
    6e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e5e:	bf00      	nop
    6e60:	1fff9237 	.word	0x1fff9237
    6e64:	0000b0dc 	.word	0x0000b0dc
    6e68:	1fff8b49 	.word	0x1fff8b49
    6e6c:	1fff9239 	.word	0x1fff9239
    6e70:	1fff9109 	.word	0x1fff9109
    6e74:	0000b109 	.word	0x0000b109
    6e78:	1fff910b 	.word	0x1fff910b
    6e7c:	1fffa12e 	.word	0x1fffa12e
    6e80:	0000b138 	.word	0x0000b138
    6e84:	0000b141 	.word	0x0000b141
    6e88:	1fffa166 	.word	0x1fffa166
    6e8c:	0000b146 	.word	0x0000b146
    6e90:	1fff9108 	.word	0x1fff9108
    6e94:	0000b150 	.word	0x0000b150
    6e98:	0000816a 	.word	0x0000816a
    6e9c:	1fffa12f 	.word	0x1fffa12f
    6ea0:	0000b143 	.word	0x0000b143
    6ea4:	0000b16e 	.word	0x0000b16e
    6ea8:	1fffa143 	.word	0x1fffa143
    6eac:	1fffa135 	.word	0x1fffa135
    6eb0:	1fffa144 	.word	0x1fffa144

00006eb4 <usb_malloc>:
// http://www.archivum.info/gnu.gcc.help/2006-08/00148/Re-GCC-Inline-Assembly.html
// http://gcc.gnu.org/ml/gcc/2012-06/msg00015.html
// __builtin_clz()

usb_packet_t *usb_malloc()
{
    6eb4:	b510      	push	{r4, lr}
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    6eb6:	b672      	cpsid	i
	avail = usb_buffer_available;
    6eb8:	480b      	ldr	r0, [pc, #44]	; (6ee8 <usb_malloc+0x34>)
    6eba:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz( avail ); // clz = count leading zeros
    6ebc:	fab2 f182 	clz	r1, r2
	if ( n >= NUM_USB_BUFFERS )
    6ec0:	291d      	cmp	r1, #29
    6ec2:	dd02      	ble.n	6eca <usb_malloc+0x16>
	{
		__enable_irq();
    6ec4:	b662      	cpsie	i
		return NULL;
    6ec6:	2000      	movs	r0, #0
    6ec8:	bd10      	pop	{r4, pc}
	}

	usb_buffer_available = avail & ~(0x80000000 >> n);
    6eca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    6ece:	40cb      	lsrs	r3, r1
    6ed0:	ea22 0203 	bic.w	r2, r2, r3
    6ed4:	6002      	str	r2, [r0, #0]
	__enable_irq();
    6ed6:	b662      	cpsie	i
	p = usb_buffer_memory + ( n * sizeof(usb_packet_t) );
    6ed8:	4c04      	ldr	r4, [pc, #16]	; (6eec <usb_malloc+0x38>)
    6eda:	2348      	movs	r3, #72	; 0x48
    6edc:	434b      	muls	r3, r1
    6ede:	18e0      	adds	r0, r4, r3
	*(uint32_t *)p = 0;
    6ee0:	2200      	movs	r2, #0
    6ee2:	50e2      	str	r2, [r4, r3]
	*(uint32_t *)(p + 4) = 0;
    6ee4:	6042      	str	r2, [r0, #4]
	return (usb_packet_t *)p;
}
    6ee6:	bd10      	pop	{r4, pc}
    6ee8:	1fff8f90 	.word	0x1fff8f90
    6eec:	1fff8120 	.word	0x1fff8120

00006ef0 <usb_free>:

void usb_free( usb_packet_t *p )
{
	unsigned int n, mask;

	n = ( (uint8_t *)p - usb_buffer_memory ) / sizeof(usb_packet_t);
    6ef0:	4b0c      	ldr	r3, [pc, #48]	; (6f24 <usb_free+0x34>)
    6ef2:	2248      	movs	r2, #72	; 0x48
    6ef4:	1ac3      	subs	r3, r0, r3
    6ef6:	fbb3 f3f2 	udiv	r3, r3, r2
	if ( n >= NUM_USB_BUFFERS )
    6efa:	2b1d      	cmp	r3, #29
    6efc:	d810      	bhi.n	6f20 <usb_free+0x30>
		return;

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if ( usb_rx_memory_needed && usb_configuration )
    6efe:	4a0a      	ldr	r2, [pc, #40]	; (6f28 <usb_free+0x38>)
    6f00:	7812      	ldrb	r2, [r2, #0]
    6f02:	b122      	cbz	r2, 6f0e <usb_free+0x1e>
    6f04:	4a09      	ldr	r2, [pc, #36]	; (6f2c <usb_free+0x3c>)
    6f06:	7812      	ldrb	r2, [r2, #0]
    6f08:	b10a      	cbz	r2, 6f0e <usb_free+0x1e>
	{
		usb_rx_memory( p );
    6f0a:	f7ff b9fb 	b.w	6304 <usb_rx_memory>
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    6f0e:	b672      	cpsid	i
	usb_buffer_available |= mask;
    6f10:	4907      	ldr	r1, [pc, #28]	; (6f30 <usb_free+0x40>)
	{
		usb_rx_memory( p );
		return;
	}

	mask = (0x80000000 >> n);
    6f12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6f16:	40da      	lsrs	r2, r3
	__disable_irq();
	usb_buffer_available |= mask;
    6f18:	680b      	ldr	r3, [r1, #0]
    6f1a:	4313      	orrs	r3, r2
    6f1c:	600b      	str	r3, [r1, #0]
	__enable_irq();
    6f1e:	b662      	cpsie	i
    6f20:	4770      	bx	lr
    6f22:	bf00      	nop
    6f24:	1fff8120 	.word	0x1fff8120
    6f28:	1fff922e 	.word	0x1fff922e
    6f2c:	1fff9237 	.word	0x1fff9237
    6f30:	1fff8f90 	.word	0x1fff8f90

00006f34 <usb_serial_getchar>:

// ----- Functions -----

// get the next character, or -1 if nothing received
int usb_serial_getchar()
{
    6f34:	b510      	push	{r4, lr}
	unsigned int i;
	int c;

	if ( !rx_packet )
    6f36:	4c10      	ldr	r4, [pc, #64]	; (6f78 <usb_serial_getchar+0x44>)
    6f38:	6823      	ldr	r3, [r4, #0]
    6f3a:	b16b      	cbz	r3, 6f58 <usb_serial_getchar+0x24>
			return -1;
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
		if ( !rx_packet )
			return -1;
	}
	i = rx_packet->index;
    6f3c:	6820      	ldr	r0, [r4, #0]
    6f3e:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
    6f40:	1c5a      	adds	r2, r3, #1
    6f42:	4403      	add	r3, r0
    6f44:	7a1c      	ldrb	r4, [r3, #8]
	if ( i >= rx_packet->len )
    6f46:	8803      	ldrh	r3, [r0, #0]
    6f48:	429a      	cmp	r2, r3
    6f4a:	d312      	bcc.n	6f72 <usb_serial_getchar+0x3e>
	{
		usb_free( rx_packet );
    6f4c:	f7ff ffd0 	bl	6ef0 <usb_free>
		rx_packet = NULL;
    6f50:	4b09      	ldr	r3, [pc, #36]	; (6f78 <usb_serial_getchar+0x44>)
    6f52:	2200      	movs	r2, #0
    6f54:	601a      	str	r2, [r3, #0]
    6f56:	e00d      	b.n	6f74 <usb_serial_getchar+0x40>
	unsigned int i;
	int c;

	if ( !rx_packet )
	{
		if ( !usb_configuration )
    6f58:	4b08      	ldr	r3, [pc, #32]	; (6f7c <usb_serial_getchar+0x48>)
    6f5a:	781b      	ldrb	r3, [r3, #0]
    6f5c:	b913      	cbnz	r3, 6f64 <usb_serial_getchar+0x30>
			return -1;
    6f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6f62:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
    6f64:	2004      	movs	r0, #4
    6f66:	f7ff f99f 	bl	62a8 <usb_rx>
    6f6a:	6020      	str	r0, [r4, #0]
		if ( !rx_packet )
    6f6c:	2800      	cmp	r0, #0
    6f6e:	d1e5      	bne.n	6f3c <usb_serial_getchar+0x8>
    6f70:	e7f5      	b.n	6f5e <usb_serial_getchar+0x2a>
		usb_free( rx_packet );
		rx_packet = NULL;
	}
	else
	{
		rx_packet->index = i;
    6f72:	8042      	strh	r2, [r0, #2]
	}
	return c;
    6f74:	4620      	mov	r0, r4
}
    6f76:	bd10      	pop	{r4, pc}
    6f78:	1fff9244 	.word	0x1fff9244
    6f7c:	1fff9237 	.word	0x1fff9237

00006f80 <usb_serial_available>:
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	return usb_rx_byte_count_data[ endpoint ];
    6f80:	4b04      	ldr	r3, [pc, #16]	; (6f94 <usb_serial_available+0x14>)
}

// number of bytes available in the receive buffer
int usb_serial_available()
{
	int count = usb_rx_byte_count( CDC_RX_ENDPOINT );
    6f82:	88d8      	ldrh	r0, [r3, #6]
	if ( rx_packet )
    6f84:	4b04      	ldr	r3, [pc, #16]	; (6f98 <usb_serial_available+0x18>)
    6f86:	681a      	ldr	r2, [r3, #0]
    6f88:	b11a      	cbz	r2, 6f92 <usb_serial_available+0x12>
		count += rx_packet->len - rx_packet->index;
    6f8a:	8813      	ldrh	r3, [r2, #0]
    6f8c:	8852      	ldrh	r2, [r2, #2]
    6f8e:	1a9b      	subs	r3, r3, r2
    6f90:	4418      	add	r0, r3
	return count;
}
    6f92:	4770      	bx	lr
    6f94:	1fffa168 	.word	0x1fffa168
    6f98:	1fff9244 	.word	0x1fff9244

00006f9c <usb_serial_write>:
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    6f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    6fa0:	4d2d      	ldr	r5, [pc, #180]	; (7058 <usb_serial_write+0xbc>)
    6fa2:	2301      	movs	r3, #1
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    6fa4:	4680      	mov	r8, r0
    6fa6:	460c      	mov	r4, r1
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    6fa8:	702b      	strb	r3, [r5, #0]
	while ( size > 0 )
    6faa:	2c00      	cmp	r4, #0
    6fac:	d04f      	beq.n	704e <usb_serial_write+0xb2>
	{
		if ( !tx_packet )
    6fae:	4e2b      	ldr	r6, [pc, #172]	; (705c <usb_serial_write+0xc0>)
    6fb0:	6833      	ldr	r3, [r6, #0]
    6fb2:	46b1      	mov	r9, r6
    6fb4:	bb23      	cbnz	r3, 7000 <usb_serial_write+0x64>
    6fb6:	f648 4701 	movw	r7, #35841	; 0x8c01
		{
			wait_count = 0;
			while ( 1 )
			{
				if ( !usb_configuration )
    6fba:	4b29      	ldr	r3, [pc, #164]	; (7060 <usb_serial_write+0xc4>)
    6fbc:	781b      	ldrb	r3, [r3, #0]
    6fbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    6fc2:	b90b      	cbnz	r3, 6fc8 <usb_serial_write+0x2c>
				{
					tx_noautoflush = 0;
    6fc4:	702a      	strb	r2, [r5, #0]
    6fc6:	e014      	b.n	6ff2 <usb_serial_write+0x56>
					return -1;
				}
				if ( usb_tx_packet_count( CDC_TX_ENDPOINT ) < TX_PACKET_LIMIT )
    6fc8:	2005      	movs	r0, #5
    6fca:	f7ff f989 	bl	62e0 <usb_tx_packet_count>
    6fce:	2807      	cmp	r0, #7
    6fd0:	d808      	bhi.n	6fe4 <usb_serial_write+0x48>
				{
					tx_noautoflush = 1;
    6fd2:	2301      	movs	r3, #1
    6fd4:	702b      	strb	r3, [r5, #0]
					tx_packet = usb_malloc();
    6fd6:	f7ff ff6d 	bl	6eb4 <usb_malloc>
    6fda:	f8c9 0000 	str.w	r0, [r9]
					if ( tx_packet )
    6fde:	b978      	cbnz	r0, 7000 <usb_serial_write+0x64>
						break;
					tx_noautoflush = 0;
    6fe0:	4b1d      	ldr	r3, [pc, #116]	; (7058 <usb_serial_write+0xbc>)
    6fe2:	7018      	strb	r0, [r3, #0]
				}
				if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    6fe4:	3f01      	subs	r7, #1
    6fe6:	4b1f      	ldr	r3, [pc, #124]	; (7064 <usb_serial_write+0xc8>)
    6fe8:	d001      	beq.n	6fee <usb_serial_write+0x52>
    6fea:	781a      	ldrb	r2, [r3, #0]
    6fec:	b12a      	cbz	r2, 6ffa <usb_serial_write+0x5e>
				{
					transmit_previous_timeout = 1;
    6fee:	2201      	movs	r2, #1
    6ff0:	701a      	strb	r2, [r3, #0]
					return -1;
    6ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
				yield();
    6ffa:	f7fb fac9 	bl	2590 <yield>
			}
    6ffe:	e7dc      	b.n	6fba <usb_serial_write+0x1e>
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    7000:	6831      	ldr	r1, [r6, #0]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    7002:	4b18      	ldr	r3, [pc, #96]	; (7064 <usb_serial_write+0xc8>)
    7004:	2200      	movs	r2, #0
    7006:	701a      	strb	r2, [r3, #0]
		len = CDC_TX_SIZE - tx_packet->index;
    7008:	884b      	ldrh	r3, [r1, #2]
    700a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
    700e:	42a2      	cmp	r2, r4
    7010:	bf28      	it	cs
    7012:	4622      	movcs	r2, r4
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    7014:	1898      	adds	r0, r3, r2
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
    7016:	440b      	add	r3, r1
		tx_packet->index += len;
    7018:	8048      	strh	r0, [r1, #2]
		size -= len;
    701a:	1aa4      	subs	r4, r4, r2
    701c:	3307      	adds	r3, #7
    701e:	eb08 0702 	add.w	r7, r8, r2
		while ( len-- > 0 )
    7022:	45b8      	cmp	r8, r7
    7024:	d004      	beq.n	7030 <usb_serial_write+0x94>
			*dest++ = *src++;
    7026:	f818 2b01 	ldrb.w	r2, [r8], #1
    702a:	f803 2f01 	strb.w	r2, [r3, #1]!
    702e:	e7f8      	b.n	7022 <usb_serial_write+0x86>
		if ( tx_packet->index >= CDC_TX_SIZE )
    7030:	884b      	ldrh	r3, [r1, #2]
    7032:	2b3f      	cmp	r3, #63	; 0x3f
    7034:	d906      	bls.n	7044 <usb_serial_write+0xa8>
		{
			tx_packet->len = CDC_TX_SIZE;
    7036:	2340      	movs	r3, #64	; 0x40
    7038:	800b      	strh	r3, [r1, #0]
			usb_tx( CDC_TX_ENDPOINT, tx_packet );
    703a:	2005      	movs	r0, #5
    703c:	f7ff f99e 	bl	637c <usb_tx>
			tx_packet = NULL;
    7040:	2300      	movs	r3, #0
    7042:	6033      	str	r3, [r6, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    7044:	4b08      	ldr	r3, [pc, #32]	; (7068 <usb_serial_write+0xcc>)
    7046:	2205      	movs	r2, #5
    7048:	701a      	strb	r2, [r3, #0]
    704a:	46b8      	mov	r8, r7
    704c:	e7ad      	b.n	6faa <usb_serial_write+0xe>
	}
	tx_noautoflush = 0;
    704e:	702c      	strb	r4, [r5, #0]
	return 0;
    7050:	4620      	mov	r0, r4
}
    7052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7056:	bf00      	nop
    7058:	1fff923b 	.word	0x1fff923b
    705c:	1fff923c 	.word	0x1fff923c
    7060:	1fff9237 	.word	0x1fff9237
    7064:	1fff9240 	.word	0x1fff9240
    7068:	1fff923a 	.word	0x1fff923a

0000706c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback()
{
    706c:	b538      	push	{r3, r4, r5, lr}
	if ( tx_noautoflush )
    706e:	4b0e      	ldr	r3, [pc, #56]	; (70a8 <usb_serial_flush_callback+0x3c>)
    7070:	781b      	ldrb	r3, [r3, #0]
    7072:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    7076:	b9ab      	cbnz	r3, 70a4 <usb_serial_flush_callback+0x38>
		return;
	if ( tx_packet )
    7078:	4c0c      	ldr	r4, [pc, #48]	; (70ac <usb_serial_flush_callback+0x40>)
    707a:	6821      	ldr	r1, [r4, #0]
    707c:	b131      	cbz	r1, 708c <usb_serial_flush_callback+0x20>
	{
		tx_packet->len = tx_packet->index;
    707e:	884b      	ldrh	r3, [r1, #2]
    7080:	800b      	strh	r3, [r1, #0]
		usb_tx( CDC_TX_ENDPOINT, tx_packet );
    7082:	2005      	movs	r0, #5
    7084:	f7ff f97a 	bl	637c <usb_tx>
		tx_packet = NULL;
    7088:	6025      	str	r5, [r4, #0]
    708a:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
    708c:	f7ff ff12 	bl	6eb4 <usb_malloc>
		if ( tx )
    7090:	4601      	mov	r1, r0
    7092:	b120      	cbz	r0, 709e <usb_serial_flush_callback+0x32>
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    7094:	2005      	movs	r0, #5
		else
		{
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    7096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if ( tx )
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    709a:	f7ff b96f 	b.w	637c <usb_tx>
		}
		else
		{
			usb_cdc_transmit_flush_timer = 1;
    709e:	4b04      	ldr	r3, [pc, #16]	; (70b0 <usb_serial_flush_callback+0x44>)
    70a0:	2201      	movs	r2, #1
    70a2:	701a      	strb	r2, [r3, #0]
    70a4:	bd38      	pop	{r3, r4, r5, pc}
    70a6:	bf00      	nop
    70a8:	1fff923b 	.word	0x1fff923b
    70ac:	1fff923c 	.word	0x1fff923c
    70b0:	1fff923a 	.word	0x1fff923a

000070b4 <cliFunc_clear>:

// ----- CLI Command Functions -----

void cliFunc_clear( char* args)
{
	print("\033[2J\033[H\r"); // Erases the whole screen
    70b4:	4801      	ldr	r0, [pc, #4]	; (70bc <cliFunc_clear+0x8>)
    70b6:	f000 bbb5 	b.w	7824 <_print>
    70ba:	bf00      	nop
    70bc:	0000b255 	.word	0x0000b255

000070c0 <cliFunc_reset>:
	Output_firmwareReload();
}

void cliFunc_reset( char* args )
{
	print("\033c"); // Resets the terminal
    70c0:	4801      	ldr	r0, [pc, #4]	; (70c8 <cliFunc_reset+0x8>)
    70c2:	f000 bbaf 	b.w	7824 <_print>
    70c6:	bf00      	nop
    70c8:	0000b25e 	.word	0x0000b25e

000070cc <cliFunc_help>:
		CLIHexDebugMode = 1;
	}
}

void cliFunc_help( char* args )
{
    70cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Scan array of dictionaries and print every description
	//  (no alphabetical here, too much processing/memory to sort...)
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    70d0:	2700      	movs	r7, #0
    70d2:	4b20      	ldr	r3, [pc, #128]	; (7154 <cliFunc_help+0x88>)
    70d4:	781b      	ldrb	r3, [r3, #0]
    70d6:	b2fd      	uxtb	r5, r7
    70d8:	42ab      	cmp	r3, r5
    70da:	d938      	bls.n	714e <cliFunc_help+0x82>
	{
		// Print the name of each dictionary as a title
		print( NL "\033[1;32m" );
    70dc:	481e      	ldr	r0, [pc, #120]	; (7158 <cliFunc_help+0x8c>)
    70de:	f000 fba1 	bl	7824 <_print>
		_print( CLIDictNames[dict] ); // This print is requride by AVR (flash)
    70e2:	4b1e      	ldr	r3, [pc, #120]	; (715c <cliFunc_help+0x90>)
    70e4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    70e8:	f000 fb9c 	bl	7824 <_print>
		print( "\033[0m" NL );
    70ec:	481c      	ldr	r0, [pc, #112]	; (7160 <cliFunc_help+0x94>)
    70ee:	f000 fb99 	bl	7824 <_print>

		// Parse each cmd/description until a null command entry is found
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    70f2:	f04f 0900 	mov.w	r9, #0
    70f6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 7178 <cliFunc_help+0xac>
    70fa:	fa5f f389 	uxtb.w	r3, r9
    70fe:	260c      	movs	r6, #12
    7100:	435e      	muls	r6, r3
    7102:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    7106:	5999      	ldr	r1, [r3, r6]
    7108:	b1f9      	cbz	r1, 714a <cliFunc_help+0x7e>
		{
			dPrintStrs(" \033[35m", CLIDict[dict][cmd].name, "\033[0m");
    710a:	4816      	ldr	r0, [pc, #88]	; (7164 <cliFunc_help+0x98>)
    710c:	4a16      	ldr	r2, [pc, #88]	; (7168 <cliFunc_help+0x9c>)
    710e:	4b17      	ldr	r3, [pc, #92]	; (716c <cliFunc_help+0xa0>)
    7110:	f000 fb6e 	bl	77f0 <printstrs>

			// Determine number of spaces to tab by the length of the command and TabAlign
			uint8_t padLength = CLIEntryTabAlign - lenStr( (char*)CLIDict[dict][cmd].name );
    7114:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    7118:	5998      	ldr	r0, [r3, r6]
    711a:	f000 fb85 	bl	7828 <lenStr>
    711e:	f1c0 000d 	rsb	r0, r0, #13
    7122:	b2c4      	uxtb	r4, r0
			while ( padLength-- > 0 )
    7124:	b12c      	cbz	r4, 7132 <cliFunc_help+0x66>
				print(" ");
    7126:	4812      	ldr	r0, [pc, #72]	; (7170 <cliFunc_help+0xa4>)
    7128:	3c01      	subs	r4, #1
    712a:	f000 fb7b 	bl	7824 <_print>
    712e:	b2e4      	uxtb	r4, r4
    7130:	e7f8      	b.n	7124 <cliFunc_help+0x58>

			_print( CLIDict[dict][cmd].description ); // This print is required by AVR (flash)
    7132:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    7136:	441e      	add	r6, r3
    7138:	f109 0901 	add.w	r9, r9, #1
    713c:	6870      	ldr	r0, [r6, #4]
    713e:	f000 fb71 	bl	7824 <_print>
			print( NL );
    7142:	480c      	ldr	r0, [pc, #48]	; (7174 <cliFunc_help+0xa8>)
    7144:	f000 fb6e 	bl	7824 <_print>
    7148:	e7d5      	b.n	70f6 <cliFunc_help+0x2a>
    714a:	3701      	adds	r7, #1
    714c:	e7c1      	b.n	70d2 <cliFunc_help+0x6>
		}
	}
}
    714e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7152:	bf00      	nop
    7154:	1fff924f 	.word	0x1fff924f
    7158:	0000b261 	.word	0x0000b261
    715c:	1fff96cc 	.word	0x1fff96cc
    7160:	0000b26b 	.word	0x0000b26b
    7164:	0000b272 	.word	0x0000b272
    7168:	000096be 	.word	0x000096be
    716c:	0000b18c 	.word	0x0000b18c
    7170:	0000816a 	.word	0x0000816a
    7174:	0000b143 	.word	0x0000b143
    7178:	1fff96a0 	.word	0x1fff96a0

0000717c <cliFunc_led>:

void cliFunc_led( char* args )
{
	CLILEDState ^= 1 << 1; // Toggle between 0 and 1
    717c:	4b03      	ldr	r3, [pc, #12]	; (718c <cliFunc_led+0x10>)
    717e:	7818      	ldrb	r0, [r3, #0]
    7180:	f080 0002 	eor.w	r0, r0, #2
    7184:	7018      	strb	r0, [r3, #0]
	errorLED( CLILEDState ); // Enable/Disable error LED
    7186:	f000 bb25 	b.w	77d4 <errorLED>
    718a:	bf00      	nop
    718c:	1fff924e 	.word	0x1fff924e

00007190 <cliFunc_reload>:
		info_msg("Set flashModeEnabled to 1 in your kll configuration.");
		return;
	}

	// Request to output module to be set into firmware reload mode
	Output_firmwareReload();
    7190:	f7ff b854 	b.w	623c <Output_firmwareReload>

00007194 <cliFunc_restart>:
}

void cliFunc_restart( char* args )
{
	// Trigger an overall software reset
	Output_softReset();
    7194:	f7ff b860 	b.w	6258 <Output_softReset>

00007198 <cliFunc_version>:
}

void cliFunc_version( char* args )
{
    7198:	b508      	push	{r3, lr}
	print( NL );
    719a:	4821      	ldr	r0, [pc, #132]	; (7220 <cliFunc_version+0x88>)
    719c:	f000 fb42 	bl	7824 <_print>
	print( " \033[1mRevision:\033[0m      " CLI_Revision       NL );
    71a0:	4820      	ldr	r0, [pc, #128]	; (7224 <cliFunc_version+0x8c>)
    71a2:	f000 fb3f 	bl	7824 <_print>
	print( " \033[1mBranch:\033[0m        " CLI_Branch         NL );
    71a6:	4820      	ldr	r0, [pc, #128]	; (7228 <cliFunc_version+0x90>)
    71a8:	f000 fb3c 	bl	7824 <_print>
	print( " \033[1mTree Status:\033[0m   " CLI_ModifiedStatus CLI_ModifiedFiles NL );
    71ac:	481f      	ldr	r0, [pc, #124]	; (722c <cliFunc_version+0x94>)
    71ae:	f000 fb39 	bl	7824 <_print>
	print( " \033[1mRepo Origin:\033[0m   " CLI_RepoOrigin     NL );
    71b2:	481f      	ldr	r0, [pc, #124]	; (7230 <cliFunc_version+0x98>)
    71b4:	f000 fb36 	bl	7824 <_print>
	print( " \033[1mCommit Date:\033[0m   " CLI_CommitDate     NL );
    71b8:	481e      	ldr	r0, [pc, #120]	; (7234 <cliFunc_version+0x9c>)
    71ba:	f000 fb33 	bl	7824 <_print>
	print( " \033[1mCommit Author:\033[0m " CLI_CommitAuthor   NL );
    71be:	481e      	ldr	r0, [pc, #120]	; (7238 <cliFunc_version+0xa0>)
    71c0:	f000 fb30 	bl	7824 <_print>
	print( " \033[1mBuild Date:\033[0m    " CLI_BuildDate      NL );
    71c4:	481d      	ldr	r0, [pc, #116]	; (723c <cliFunc_version+0xa4>)
    71c6:	f000 fb2d 	bl	7824 <_print>
	print( " \033[1mBuild OS:\033[0m      " CLI_BuildOS        NL );
    71ca:	481d      	ldr	r0, [pc, #116]	; (7240 <cliFunc_version+0xa8>)
    71cc:	f000 fb2a 	bl	7824 <_print>
	print( " \033[1mArchitecture:\033[0m  " CLI_Arch           NL );
    71d0:	481c      	ldr	r0, [pc, #112]	; (7244 <cliFunc_version+0xac>)
    71d2:	f000 fb27 	bl	7824 <_print>
	print( " \033[1mChip:\033[0m          " CLI_Chip           NL );
    71d6:	481c      	ldr	r0, [pc, #112]	; (7248 <cliFunc_version+0xb0>)
    71d8:	f000 fb24 	bl	7824 <_print>
	print( " \033[1mCPU:\033[0m           " CLI_CPU            NL );
    71dc:	481b      	ldr	r0, [pc, #108]	; (724c <cliFunc_version+0xb4>)
    71de:	f000 fb21 	bl	7824 <_print>
	print( " \033[1mDevice:\033[0m        " CLI_Device         NL );
    71e2:	481b      	ldr	r0, [pc, #108]	; (7250 <cliFunc_version+0xb8>)
    71e4:	f000 fb1e 	bl	7824 <_print>
	print( " \033[1mModules:\033[0m       " CLI_Modules        NL );
    71e8:	481a      	ldr	r0, [pc, #104]	; (7254 <cliFunc_version+0xbc>)
    71ea:	f000 fb1b 	bl	7824 <_print>
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
    71ee:	481a      	ldr	r0, [pc, #104]	; (7258 <cliFunc_version+0xc0>)
    71f0:	f000 fb18 	bl	7824 <_print>
	printHex32_op( SIM_UIDH, 4 );
    71f4:	4b19      	ldr	r3, [pc, #100]	; (725c <cliFunc_version+0xc4>)
    71f6:	2104      	movs	r1, #4
    71f8:	6818      	ldr	r0, [r3, #0]
    71fa:	f000 fbce 	bl	799a <printHex32_op>
	printHex32_op( SIM_UIDMH, 4 );
    71fe:	4b18      	ldr	r3, [pc, #96]	; (7260 <cliFunc_version+0xc8>)
    7200:	2104      	movs	r1, #4
    7202:	6818      	ldr	r0, [r3, #0]
    7204:	f000 fbc9 	bl	799a <printHex32_op>
	printHex32_op( SIM_UIDML, 4 );
    7208:	4b16      	ldr	r3, [pc, #88]	; (7264 <cliFunc_version+0xcc>)
    720a:	2104      	movs	r1, #4
    720c:	6818      	ldr	r0, [r3, #0]
    720e:	f000 fbc4 	bl	799a <printHex32_op>
	printHex32_op( SIM_UIDL, 4 );
    7212:	4b15      	ldr	r3, [pc, #84]	; (7268 <cliFunc_version+0xd0>)
    7214:	2104      	movs	r1, #4
    7216:	6818      	ldr	r0, [r3, #0]
#elif defined(_at90usb162_) || defined(_atmega32u4_) || defined(_at90usb646_) || defined(_at90usb1286_)
#else
#error "No unique id defined."
#endif
}
    7218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
	printHex32_op( SIM_UIDH, 4 );
	printHex32_op( SIM_UIDMH, 4 );
	printHex32_op( SIM_UIDML, 4 );
	printHex32_op( SIM_UIDL, 4 );
    721c:	f000 bbbd 	b.w	799a <printHex32_op>
    7220:	0000b143 	.word	0x0000b143
    7224:	0000b279 	.word	0x0000b279
    7228:	0000b2bc 	.word	0x0000b2bc
    722c:	0000b2dd 	.word	0x0000b2dd
    7230:	0000b314 	.word	0x0000b314
    7234:	0000b354 	.word	0x0000b354
    7238:	0000b388 	.word	0x0000b388
    723c:	0000b3c6 	.word	0x0000b3c6
    7240:	0000b3fa 	.word	0x0000b3fa
    7244:	0000b422 	.word	0x0000b422
    7248:	0000b440 	.word	0x0000b440
    724c:	0000b468 	.word	0x0000b468
    7250:	0000b48c 	.word	0x0000b48c
    7254:	0000b4af 	.word	0x0000b4af
    7258:	0000b505 	.word	0x0000b505
    725c:	40048054 	.word	0x40048054
    7260:	40048058 	.word	0x40048058
    7264:	4004805c 	.word	0x4004805c
    7268:	40048060 	.word	0x40048060

0000726c <cliFunc_cliDebug>:
{
	print("\033[2J\033[H\r"); // Erases the whole screen
}

void cliFunc_cliDebug( char* args )
{
    726c:	b510      	push	{r4, lr}
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    726e:	4c09      	ldr	r4, [pc, #36]	; (7294 <cliFunc_cliDebug+0x28>)
	{
		print( NL );
    7270:	4809      	ldr	r0, [pc, #36]	; (7298 <cliFunc_cliDebug+0x2c>)
}

void cliFunc_cliDebug( char* args )
{
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    7272:	7823      	ldrb	r3, [r4, #0]
    7274:	b133      	cbz	r3, 7284 <cliFunc_cliDebug+0x18>
	{
		print( NL );
    7276:	f000 fad5 	bl	7824 <_print>
		info_print("Hex debug mode disabled...");
    727a:	4808      	ldr	r0, [pc, #32]	; (729c <cliFunc_cliDebug+0x30>)
    727c:	f000 fad2 	bl	7824 <_print>
		CLIHexDebugMode = 0;
    7280:	2300      	movs	r3, #0
    7282:	e005      	b.n	7290 <cliFunc_cliDebug+0x24>
	}
	else
	{
		print( NL );
    7284:	f000 face 	bl	7824 <_print>
		info_print("Hex debug mode enabled...");
    7288:	4805      	ldr	r0, [pc, #20]	; (72a0 <cliFunc_cliDebug+0x34>)
    728a:	f000 facb 	bl	7824 <_print>
		CLIHexDebugMode = 1;
    728e:	2301      	movs	r3, #1
    7290:	7023      	strb	r3, [r4, #0]
    7292:	bd10      	pop	{r4, pc}
    7294:	1fff924c 	.word	0x1fff924c
    7298:	0000b143 	.word	0x0000b143
    729c:	0000b51e 	.word	0x0000b51e
    72a0:	0000b54d 	.word	0x0000b54d

000072a4 <CLI_argumentIsolation>:
// Takes a string, returns two pointers
//  One to the first non-space character
//  The second to the next argument (first NULL if there isn't an argument). delimited by a space
//  Places a NULL at the first space after the first argument
void CLI_argumentIsolation( char* string, char** first, char** second )
{
    72a4:	b530      	push	{r4, r5, lr}
	// Mark out the first argument
	// This is done by finding the first space after a list of non-spaces and setting it NULL
	char* cmdPtr = string - 1;
    72a6:	3801      	subs	r0, #1
	while ( *++cmdPtr == ' ' ); // Skips leading spaces, and points to first character of cmd
    72a8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    72ac:	2b20      	cmp	r3, #32
    72ae:	d0fb      	beq.n	72a8 <CLI_argumentIsolation+0x4>

	// Locates first space delimiter
	char* argPtr = cmdPtr + 1;
    72b0:	1c45      	adds	r5, r0, #1
    72b2:	462b      	mov	r3, r5
    72b4:	3501      	adds	r5, #1
	while ( *argPtr != ' ' && *argPtr != '\0' )
    72b6:	781c      	ldrb	r4, [r3, #0]
    72b8:	f014 04df 	ands.w	r4, r4, #223	; 0xdf
    72bc:	d1f9      	bne.n	72b2 <CLI_argumentIsolation+0xe>
		argPtr++;

	// Point to the first character of args or a NULL (no args) and set the space delimiter as a NULL
	(++argPtr)[-1] = '\0';
    72be:	f803 4b01 	strb.w	r4, [r3], #1

	// Set return variables
	*first = cmdPtr;
    72c2:	6008      	str	r0, [r1, #0]
	*second = argPtr;
    72c4:	6013      	str	r3, [r2, #0]
    72c6:	bd30      	pop	{r4, r5, pc}

000072c8 <CLI_commandLookup>:
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    72c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    72cc:	4b22      	ldr	r3, [pc, #136]	; (7358 <CLI_commandLookup+0x90>)
    72ce:	781b      	ldrb	r3, [r3, #0]
	*second = argPtr;
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    72d0:	b089      	sub	sp, #36	; 0x24
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    72d2:	2b00      	cmp	r3, #0
    72d4:	d03c      	beq.n	7350 <CLI_commandLookup+0x88>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    72d6:	4d21      	ldr	r5, [pc, #132]	; (735c <CLI_commandLookup+0x94>)
    72d8:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    72da:	4628      	mov	r0, r5
    72dc:	a906      	add	r1, sp, #24
    72de:	aa07      	add	r2, sp, #28
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    72e0:	54ec      	strb	r4, [r5, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    72e2:	f7ff ffdf 	bl	72a4 <CLI_argumentIsolation>
    72e6:	46a8      	mov	r8, r5

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    72e8:	4b1d      	ldr	r3, [pc, #116]	; (7360 <CLI_commandLookup+0x98>)
    72ea:	781b      	ldrb	r3, [r3, #0]
    72ec:	b2e6      	uxtb	r6, r4
    72ee:	42b3      	cmp	r3, r6
    72f0:	d919      	bls.n	7326 <CLI_commandLookup+0x5e>
    72f2:	2700      	movs	r7, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    72f4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 7388 <CLI_commandLookup+0xc0>
    72f8:	230c      	movs	r3, #12
    72fa:	b2fd      	uxtb	r5, r7
    72fc:	435d      	muls	r5, r3
    72fe:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
    7302:	5959      	ldr	r1, [r3, r5]
    7304:	b169      	cbz	r1, 7322 <CLI_commandLookup+0x5a>
		{
			// Compare the first argument and each command entry
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == -1 )
    7306:	9806      	ldr	r0, [sp, #24]
    7308:	f000 fb52 	bl	79b0 <eqStr>
    730c:	3001      	adds	r0, #1
    730e:	f107 0701 	add.w	r7, r7, #1
    7312:	d1ef      	bne.n	72f4 <CLI_commandLookup+0x2c>
			{
				// Run the specified command function pointer
				//   argPtr is already pointing at the first character of the arguments
				(*(void (*)(char*))CLIDict[dict][cmd].function)( argPtr );
    7314:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
    7318:	9807      	ldr	r0, [sp, #28]
    731a:	441d      	add	r5, r3
    731c:	68ab      	ldr	r3, [r5, #8]
    731e:	4798      	blx	r3

				return;
    7320:	e016      	b.n	7350 <CLI_commandLookup+0x88>
    7322:	3401      	adds	r4, #1
    7324:	e7e0      	b.n	72e8 <CLI_commandLookup+0x20>
			}
		}
	}

	// No match for the command...
	print( NL );
    7326:	4c0f      	ldr	r4, [pc, #60]	; (7364 <CLI_commandLookup+0x9c>)
    7328:	4620      	mov	r0, r4
    732a:	f000 fa7b 	bl	7824 <_print>
	erro_dPrint("\"", CLILineBuffer, "\" is not a valid command...type \033[35mhelp\033[0m");
    732e:	4b0e      	ldr	r3, [pc, #56]	; (7368 <CLI_commandLookup+0xa0>)
    7330:	9300      	str	r3, [sp, #0]
    7332:	4b0e      	ldr	r3, [pc, #56]	; (736c <CLI_commandLookup+0xa4>)
    7334:	9301      	str	r3, [sp, #4]
    7336:	4b0e      	ldr	r3, [pc, #56]	; (7370 <CLI_commandLookup+0xa8>)
    7338:	9303      	str	r3, [sp, #12]
    733a:	4b0e      	ldr	r3, [pc, #56]	; (7374 <CLI_commandLookup+0xac>)
    733c:	9305      	str	r3, [sp, #20]
    733e:	f8cd 8008 	str.w	r8, [sp, #8]
    7342:	9404      	str	r4, [sp, #16]
    7344:	480c      	ldr	r0, [pc, #48]	; (7378 <CLI_commandLookup+0xb0>)
    7346:	490d      	ldr	r1, [pc, #52]	; (737c <CLI_commandLookup+0xb4>)
    7348:	4a0d      	ldr	r2, [pc, #52]	; (7380 <CLI_commandLookup+0xb8>)
    734a:	4b0e      	ldr	r3, [pc, #56]	; (7384 <CLI_commandLookup+0xbc>)
    734c:	f000 fa50 	bl	77f0 <printstrs>
}
    7350:	b009      	add	sp, #36	; 0x24
    7352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7356:	bf00      	nop
    7358:	1fff96f4 	.word	0x1fff96f4
    735c:	1fff9638 	.word	0x1fff9638
    7360:	1fff924f 	.word	0x1fff924f
    7364:	0000b143 	.word	0x0000b143
    7368:	00008fcc 	.word	0x00008fcc
    736c:	0000b58b 	.word	0x0000b58b
    7370:	0000b58d 	.word	0x0000b58d
    7374:	0000b18c 	.word	0x0000b18c
    7378:	0000b57b 	.word	0x0000b57b
    737c:	0000b57e 	.word	0x0000b57e
    7380:	000096c1 	.word	0x000096c1
    7384:	0000b585 	.word	0x0000b585
    7388:	1fff96a0 	.word	0x1fff96a0

0000738c <CLI_registerDictionary>:

// Registers a command dictionary with the CLI
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
    738c:	b510      	push	{r4, lr}
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
    738e:	4a09      	ldr	r2, [pc, #36]	; (73b4 <CLI_registerDictionary+0x28>)
    7390:	7813      	ldrb	r3, [r2, #0]
    7392:	2b09      	cmp	r3, #9
    7394:	d904      	bls.n	73a0 <CLI_registerDictionary+0x14>
	{
		erro_print("Max number of dictionaries defined already...");
    7396:	4808      	ldr	r0, [pc, #32]	; (73b8 <CLI_registerDictionary+0x2c>)
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}
    7398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
	{
		erro_print("Max number of dictionaries defined already...");
    739c:	f000 ba42 	b.w	7824 <_print>
		return;
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
    73a0:	4c06      	ldr	r4, [pc, #24]	; (73bc <CLI_registerDictionary+0x30>)
    73a2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
    73a6:	1c59      	adds	r1, r3, #1
    73a8:	7011      	strb	r1, [r2, #0]
    73aa:	4a05      	ldr	r2, [pc, #20]	; (73c0 <CLI_registerDictionary+0x34>)
    73ac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    73b0:	bd10      	pop	{r4, pc}
    73b2:	bf00      	nop
    73b4:	1fff924f 	.word	0x1fff924f
    73b8:	0000b5bb 	.word	0x0000b5bb
    73bc:	1fff96cc 	.word	0x1fff96cc
    73c0:	1fff96a0 	.word	0x1fff96a0

000073c4 <CLI_init>:

// Initialize the CLI
inline void CLI_init()
{
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    73c4:	4b0e      	ldr	r3, [pc, #56]	; (7400 <CLI_init+0x3c>)

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    73c6:	480f      	ldr	r0, [pc, #60]	; (7404 <CLI_init+0x40>)
	print("\033[1;34m:\033[0m "); // Blue bold prompt
}

// Initialize the CLI
inline void CLI_init()
{
    73c8:	b510      	push	{r4, lr}
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    73ca:	2400      	movs	r4, #0
    73cc:	701c      	strb	r4, [r3, #0]

	// History starts empty
	CLIHistoryHead = 0;
    73ce:	4b0e      	ldr	r3, [pc, #56]	; (7408 <CLI_init+0x44>)
    73d0:	701c      	strb	r4, [r3, #0]
	CLIHistoryCurrent = 0;
    73d2:	4b0e      	ldr	r3, [pc, #56]	; (740c <CLI_init+0x48>)
    73d4:	701c      	strb	r4, [r3, #0]
	CLIHistoryTail = 0;
    73d6:	4b0e      	ldr	r3, [pc, #56]	; (7410 <CLI_init+0x4c>)
    73d8:	701c      	strb	r4, [r3, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    73da:	f000 fa23 	bl	7824 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    73de:	480d      	ldr	r0, [pc, #52]	; (7414 <CLI_init+0x50>)
    73e0:	f000 fa20 	bl	7824 <_print>

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    73e4:	4b0c      	ldr	r3, [pc, #48]	; (7418 <CLI_init+0x54>)
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    73e6:	480d      	ldr	r0, [pc, #52]	; (741c <CLI_init+0x58>)
    73e8:	490d      	ldr	r1, [pc, #52]	; (7420 <CLI_init+0x5c>)

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    73ea:	701c      	strb	r4, [r3, #0]
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    73ec:	f7ff ffce 	bl	738c <CLI_registerDictionary>

	// Initialize main LED
	init_errorLED();
    73f0:	f000 f9e2 	bl	77b8 <init_errorLED>
	CLILEDState = 0;
    73f4:	4b0b      	ldr	r3, [pc, #44]	; (7424 <CLI_init+0x60>)
    73f6:	701c      	strb	r4, [r3, #0]

	// Hex debug mode is off by default
	CLIHexDebugMode = 0;
    73f8:	4b0b      	ldr	r3, [pc, #44]	; (7428 <CLI_init+0x64>)
    73fa:	701c      	strb	r4, [r3, #0]
    73fc:	bd10      	pop	{r4, pc}
    73fe:	bf00      	nop
    7400:	1fff96f4 	.word	0x1fff96f4
    7404:	0000b600 	.word	0x0000b600
    7408:	1fff969d 	.word	0x1fff969d
    740c:	1fff924d 	.word	0x1fff924d
    7410:	1fff96c8 	.word	0x1fff96c8
    7414:	0000b606 	.word	0x0000b606
    7418:	1fff924f 	.word	0x1fff924f
    741c:	0000b6e4 	.word	0x0000b6e4
    7420:	0000b7e6 	.word	0x0000b7e6
    7424:	1fff924e 	.word	0x1fff924e
    7428:	1fff924c 	.word	0x1fff924c

0000742c <CLI_tabCompletion>:
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    7430:	4d28      	ldr	r5, [pc, #160]	; (74d4 <CLI_tabCompletion+0xa8>)
    7432:	782b      	ldrb	r3, [r5, #0]
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    7434:	b085      	sub	sp, #20
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    7436:	2b00      	cmp	r3, #0
    7438:	d048      	beq.n	74cc <CLI_tabCompletion+0xa0>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    743a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 74e8 <CLI_tabCompletion+0xbc>
    743e:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    7440:	4640      	mov	r0, r8
    7442:	a902      	add	r1, sp, #8
    7444:	aa03      	add	r2, sp, #12
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    7446:	f808 4003 	strb.w	r4, [r8, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    744a:	f7ff ff2b 	bl	72a4 <CLI_argumentIsolation>

	// Tab match pointer
	char* tabMatch = 0;
	uint8_t matches = 0;
    744e:	4627      	mov	r7, r4
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );

	// Tab match pointer
	char* tabMatch = 0;
    7450:	4626      	mov	r6, r4
    7452:	46c3      	mov	fp, r8
	uint8_t matches = 0;

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    7454:	4b20      	ldr	r3, [pc, #128]	; (74d8 <CLI_tabCompletion+0xac>)
    7456:	781b      	ldrb	r3, [r3, #0]
    7458:	fa5f fa84 	uxtb.w	sl, r4
    745c:	4553      	cmp	r3, sl
    745e:	d91e      	bls.n	749e <CLI_tabCompletion+0x72>
    7460:	f04f 0900 	mov.w	r9, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    7464:	fa5f f389 	uxtb.w	r3, r9
    7468:	f04f 080c 	mov.w	r8, #12
    746c:	fb08 f803 	mul.w	r8, r8, r3
    7470:	4b1a      	ldr	r3, [pc, #104]	; (74dc <CLI_tabCompletion+0xb0>)
    7472:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
    7476:	f852 1008 	ldr.w	r1, [r2, r8]
    747a:	b171      	cbz	r1, 749a <CLI_tabCompletion+0x6e>
		{
			// Compare the first argument piece to each command entry to see if it is "like"
			// NOTE: To save on processing, we only care about the commands and ignore the arguments
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
    747c:	9802      	ldr	r0, [sp, #8]
    747e:	9301      	str	r3, [sp, #4]
    7480:	f000 fa96 	bl	79b0 <eqStr>
    7484:	9b01      	ldr	r3, [sp, #4]
    7486:	b928      	cbnz	r0, 7494 <CLI_tabCompletion+0x68>
			{
				// TODO Make list of commands if multiple matches
				matches++;
				tabMatch = (char*)CLIDict[dict][cmd].name;
    7488:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    748c:	3701      	adds	r7, #1
				tabMatch = (char*)CLIDict[dict][cmd].name;
    748e:	f853 6008 	ldr.w	r6, [r3, r8]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    7492:	b2ff      	uxtb	r7, r7
    7494:	f109 0901 	add.w	r9, r9, #1
    7498:	e7e4      	b.n	7464 <CLI_tabCompletion+0x38>
    749a:	3401      	adds	r4, #1
    749c:	e7da      	b.n	7454 <CLI_tabCompletion+0x28>
			}
		}
	}

	// Only tab complete if there was 1 match
	if ( matches == 1 )
    749e:	2f01      	cmp	r7, #1
    74a0:	d114      	bne.n	74cc <CLI_tabCompletion+0xa0>
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    74a2:	2300      	movs	r3, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    74a4:	480e      	ldr	r0, [pc, #56]	; (74e0 <CLI_tabCompletion+0xb4>)

	// Only tab complete if there was 1 match
	if ( matches == 1 )
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    74a6:	702b      	strb	r3, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    74a8:	f000 f9bc 	bl	7824 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    74ac:	480d      	ldr	r0, [pc, #52]	; (74e4 <CLI_tabCompletion+0xb8>)
    74ae:	f000 f9b9 	bl	7824 <_print>

		// Reprint the prompt (automatically clears the line)
		prompt();

		// Display the command
		dPrint( tabMatch );
    74b2:	4630      	mov	r0, r6
    74b4:	f7fe fec8 	bl	6248 <Output_putstr>

		// There are no index counts, so just copy the whole string to the input buffer
		while ( *tabMatch != '\0' )
    74b8:	7833      	ldrb	r3, [r6, #0]
    74ba:	b13b      	cbz	r3, 74cc <CLI_tabCompletion+0xa0>
		{
			CLILineBuffer[CLILineBufferCurrent++] = *tabMatch++;
    74bc:	782b      	ldrb	r3, [r5, #0]
    74be:	1c5a      	adds	r2, r3, #1
    74c0:	702a      	strb	r2, [r5, #0]
    74c2:	f816 2b01 	ldrb.w	r2, [r6], #1
    74c6:	f80b 2003 	strb.w	r2, [fp, r3]
    74ca:	e7f5      	b.n	74b8 <CLI_tabCompletion+0x8c>
		}
	}
}
    74cc:	b005      	add	sp, #20
    74ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74d2:	bf00      	nop
    74d4:	1fff96f4 	.word	0x1fff96f4
    74d8:	1fff924f 	.word	0x1fff924f
    74dc:	1fff96a0 	.word	0x1fff96a0
    74e0:	0000b600 	.word	0x0000b600
    74e4:	0000b606 	.word	0x0000b606
    74e8:	1fff9638 	.word	0x1fff9638

000074ec <CLI_wrap>:

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;

	if ( kX < kLowerBound )
    74ec:	4288      	cmp	r0, r1
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    74ee:	eba2 0201 	sub.w	r2, r2, r1

	if ( kX < kLowerBound )
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    74f2:	bfb8      	it	lt
    74f4:	1a0b      	sublt	r3, r1, r0
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    74f6:	f102 0201 	add.w	r2, r2, #1

	if ( kX < kLowerBound )
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    74fa:	bfbe      	ittt	lt
    74fc:	fb93 f3f2 	sdivlt	r3, r3, r2
    7500:	fb03 2302 	mlalt	r3, r3, r2, r2
    7504:	18c0      	addlt	r0, r0, r3

	return kLowerBound + (kX - kLowerBound) % range_size;
    7506:	1a43      	subs	r3, r0, r1
    7508:	fb93 f0f2 	sdiv	r0, r3, r2
    750c:	fb02 3010 	mls	r0, r2, r0, r3
}
    7510:	4408      	add	r0, r1
    7512:	4770      	bx	lr

00007514 <CLI_saveHistory>:

inline void CLI_saveHistory( char *buff )
{
    7514:	4b0b      	ldr	r3, [pc, #44]	; (7544 <CLI_saveHistory+0x30>)
    7516:	4a0c      	ldr	r2, [pc, #48]	; (7548 <CLI_saveHistory+0x34>)
	if ( buff == NULL )
    7518:	b138      	cbz	r0, 752a <CLI_saveHistory+0x16>

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    751a:	7818      	ldrb	r0, [r3, #0]
		return;
	}

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    751c:	490b      	ldr	r1, [pc, #44]	; (754c <CLI_saveHistory+0x38>)
    751e:	2364      	movs	r3, #100	; 0x64
    7520:	fb00 2203 	mla	r2, r0, r3, r2
    7524:	7809      	ldrb	r1, [r1, #0]
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    7526:	2300      	movs	r3, #0
    7528:	e004      	b.n	7534 <CLI_saveHistory+0x20>
inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    752a:	7819      	ldrb	r1, [r3, #0]
    752c:	2364      	movs	r3, #100	; 0x64
    752e:	434b      	muls	r3, r1
    7530:	54d0      	strb	r0, [r2, r3]
		return;
    7532:	4770      	bx	lr
	}

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    7534:	428b      	cmp	r3, r1
    7536:	da04      	bge.n	7542 <CLI_saveHistory+0x2e>
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    7538:	4805      	ldr	r0, [pc, #20]	; (7550 <CLI_saveHistory+0x3c>)
    753a:	5c18      	ldrb	r0, [r3, r0]
    753c:	54d0      	strb	r0, [r2, r3]
		return;
	}

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    753e:	3301      	adds	r3, #1
    7540:	e7f8      	b.n	7534 <CLI_saveHistory+0x20>
    7542:	4770      	bx	lr
    7544:	1fff96c8 	.word	0x1fff96c8
    7548:	1fff9250 	.word	0x1fff9250
    754c:	1fff96f4 	.word	0x1fff96f4
    7550:	1fff9638 	.word	0x1fff9638

00007554 <CLI_retreiveHistory>:
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
	}
}

void CLI_retreiveHistory( int index )
{
    7554:	b538      	push	{r3, r4, r5, lr}
	char *histMatch = CLIHistoryBuffer[ index ];
    7556:	4c0e      	ldr	r4, [pc, #56]	; (7590 <CLI_retreiveHistory+0x3c>)

	// Reset the buffer
	CLILineBufferCurrent = 0;
    7558:	4d0e      	ldr	r5, [pc, #56]	; (7594 <CLI_retreiveHistory+0x40>)
	}
}

void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];
    755a:	2364      	movs	r3, #100	; 0x64
    755c:	fb03 4400 	mla	r4, r3, r0, r4

	// Reset the buffer
	CLILineBufferCurrent = 0;
    7560:	2300      	movs	r3, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7562:	480d      	ldr	r0, [pc, #52]	; (7598 <CLI_retreiveHistory+0x44>)
void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];

	// Reset the buffer
	CLILineBufferCurrent = 0;
    7564:	702b      	strb	r3, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7566:	f000 f95d 	bl	7824 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    756a:	480c      	ldr	r0, [pc, #48]	; (759c <CLI_retreiveHistory+0x48>)
    756c:	f000 f95a 	bl	7824 <_print>

	// Reprint the prompt (automatically clears the line)
	prompt();

	// Display the command
	dPrint( histMatch );
    7570:	4620      	mov	r0, r4
    7572:	f7fe fe69 	bl	6248 <Output_putstr>

	// There are no index counts, so just copy the whole string to the input buffe
	CLILineBufferCurrent = 0;
	while ( *histMatch != '\0' )
    7576:	4622      	mov	r2, r4
    7578:	1b13      	subs	r3, r2, r4
    757a:	f812 1b01 	ldrb.w	r1, [r2], #1
    757e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    7582:	b111      	cbz	r1, 758a <CLI_retreiveHistory+0x36>
	{
		CLILineBuffer[ CLILineBufferCurrent++ ] = *histMatch++;
    7584:	4806      	ldr	r0, [pc, #24]	; (75a0 <CLI_retreiveHistory+0x4c>)
    7586:	54c1      	strb	r1, [r0, r3]
    7588:	e7f6      	b.n	7578 <CLI_retreiveHistory+0x24>
    758a:	702b      	strb	r3, [r5, #0]
    758c:	bd38      	pop	{r3, r4, r5, pc}
    758e:	bf00      	nop
    7590:	1fff9250 	.word	0x1fff9250
    7594:	1fff96f4 	.word	0x1fff96f4
    7598:	0000b600 	.word	0x0000b600
    759c:	0000b606 	.word	0x0000b606
    75a0:	1fff9638 	.word	0x1fff9638

000075a4 <CLI_process>:
	CLIHexDebugMode = 0;
}

// Query the serial input buffer for any new characters
void CLI_process()
{
    75a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Current buffer position
	uint8_t prev_buf_pos = CLILineBufferCurrent;
    75a6:	4d74      	ldr	r5, [pc, #464]	; (7778 <CLI_process+0x1d4>)
    75a8:	782c      	ldrb	r4, [r5, #0]

	// Process each character while available
	while ( 1 )
	{
		// No more characters to process
		if ( Output_availablechar() == 0 )
    75aa:	f7fe fe49 	bl	6240 <Output_availablechar>
    75ae:	b1a0      	cbz	r0, 75da <CLI_process+0x36>
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    75b0:	f7fe fe48 	bl	6244 <Output_getchar>

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    75b4:	782b      	ldrb	r3, [r5, #0]
    75b6:	4e70      	ldr	r6, [pc, #448]	; (7778 <CLI_process+0x1d4>)
    75b8:	2b63      	cmp	r3, #99	; 0x63
		// No more characters to process
		if ( Output_availablechar() == 0 )
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    75ba:	b2c0      	uxtb	r0, r0

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    75bc:	d908      	bls.n	75d0 <CLI_process+0x2c>
		{
			print( NL );
    75be:	486f      	ldr	r0, [pc, #444]	; (777c <CLI_process+0x1d8>)
    75c0:	f000 f930 	bl	7824 <_print>
			erro_print("Serial line buffer is full, dropping character and resetting...");
    75c4:	486e      	ldr	r0, [pc, #440]	; (7780 <CLI_process+0x1dc>)
    75c6:	f000 f92d 	bl	7824 <_print>

			// Clear buffer
			CLILineBufferCurrent = 0;
    75ca:	2300      	movs	r3, #0
    75cc:	7033      	strb	r3, [r6, #0]
    75ce:	e064      	b.n	769a <CLI_process+0xf6>

			return;
		}

		// Place into line buffer
		CLILineBuffer[CLILineBufferCurrent++] = cur_char;
    75d0:	1c5a      	adds	r2, r3, #1
    75d2:	7032      	strb	r2, [r6, #0]
    75d4:	4a6b      	ldr	r2, [pc, #428]	; (7784 <CLI_process+0x1e0>)
    75d6:	54d0      	strb	r0, [r2, r3]
	}
    75d8:	e7e7      	b.n	75aa <CLI_process+0x6>

	// Display Hex Key Input if enabled
	if ( CLIHexDebugMode && CLILineBufferCurrent > prev_buf_pos )
    75da:	4b6b      	ldr	r3, [pc, #428]	; (7788 <CLI_process+0x1e4>)
    75dc:	781b      	ldrb	r3, [r3, #0]
    75de:	b30b      	cbz	r3, 7624 <CLI_process+0x80>
    75e0:	782b      	ldrb	r3, [r5, #0]
    75e2:	42a3      	cmp	r3, r4
    75e4:	d91e      	bls.n	7624 <CLI_process+0x80>
	{
		print("\033[s\r\n"); // Save cursor position, and move to the next line
    75e6:	4869      	ldr	r0, [pc, #420]	; (778c <CLI_process+0x1e8>)
    75e8:	f000 f91c 	bl	7824 <_print>
		print("\033[2K");    // Erases the current line
    75ec:	4868      	ldr	r0, [pc, #416]	; (7790 <CLI_process+0x1ec>)
    75ee:	f000 f919 	bl	7824 <_print>

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
    75f2:	4623      	mov	r3, r4
    75f4:	782a      	ldrb	r2, [r5, #0]
    75f6:	429a      	cmp	r2, r3
    75f8:	d90b      	bls.n	7612 <CLI_process+0x6e>
		{
			printHex( CLILineBuffer[pos++] );
    75fa:	4a62      	ldr	r2, [pc, #392]	; (7784 <CLI_process+0x1e0>)
    75fc:	1c5e      	adds	r6, r3, #1
    75fe:	5cd0      	ldrb	r0, [r2, r3]
    7600:	2101      	movs	r1, #1
    7602:	f000 f992 	bl	792a <printHex_op>
    7606:	b2f6      	uxtb	r6, r6
			print(" ");
    7608:	4862      	ldr	r0, [pc, #392]	; (7794 <CLI_process+0x1f0>)
    760a:	f000 f90b 	bl	7824 <_print>
		print("\033[2K");    // Erases the current line

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
		{
			printHex( CLILineBuffer[pos++] );
    760e:	4633      	mov	r3, r6
    7610:	e7f0      	b.n	75f4 <CLI_process+0x50>
			print(" ");
		}

		print("\033[u"); // Restore cursor position
    7612:	4861      	ldr	r0, [pc, #388]	; (7798 <CLI_process+0x1f4>)
    7614:	e04c      	b.n	76b0 <CLI_process+0x10c>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    7616:	d856      	bhi.n	76c6 <CLI_process+0x122>
    7618:	2a08      	cmp	r2, #8
    761a:	d14c      	bne.n	76b6 <CLI_process+0x112>
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
    761c:	2b01      	cmp	r3, #1
    761e:	d144      	bne.n	76aa <CLI_process+0x106>
			return;

		case 0x08:
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace
    7620:	2300      	movs	r3, #0
    7622:	702b      	strb	r3, [r5, #0]

		print("\033[u"); // Restore cursor position
	}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
    7624:	782b      	ldrb	r3, [r5, #0]
    7626:	4f54      	ldr	r7, [pc, #336]	; (7778 <CLI_process+0x1d4>)
    7628:	42a3      	cmp	r3, r4
    762a:	f240 80a4 	bls.w	7776 <CLI_process+0x1d2>
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    762e:	4955      	ldr	r1, [pc, #340]	; (7784 <CLI_process+0x1e0>)
    7630:	5d0a      	ldrb	r2, [r1, r4]
    7632:	2a0a      	cmp	r2, #10
    7634:	460e      	mov	r6, r1
    7636:	d1ee      	bne.n	7616 <CLI_process+0x72>
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    7638:	441e      	add	r6, r3
    763a:	2220      	movs	r2, #32

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    763c:	2b01      	cmp	r3, #1
		switch ( CLILineBuffer[prev_buf_pos] )
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    763e:	f806 2c01 	strb.w	r2, [r6, #-1]

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    7642:	d025      	beq.n	7690 <CLI_process+0xec>
			{
			// Only do command-related stuff if there was actually a command
			// Avoids clogging command history with blanks

				// Process the current line buffer
				CLI_commandLookup();
    7644:	f7ff fe40 	bl	72c8 <CLI_commandLookup>

				// Add the command to the history
				CLI_saveHistory( CLILineBuffer );
    7648:	484e      	ldr	r0, [pc, #312]	; (7784 <CLI_process+0x1e0>)
    764a:	f7ff ff63 	bl	7514 <CLI_saveHistory>

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
    764e:	4a53      	ldr	r2, [pc, #332]	; (779c <CLI_process+0x1f8>)
    7650:	4953      	ldr	r1, [pc, #332]	; (77a0 <CLI_process+0x1fc>)
    7652:	7813      	ldrb	r3, [r2, #0]
    7654:	7808      	ldrb	r0, [r1, #0]
    7656:	4283      	cmp	r3, r0
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
    7658:	bf3c      	itt	cc
    765a:	3001      	addcc	r0, #1
    765c:	260a      	movcc	r6, #10
				CLIHistoryTail++;
    765e:	f103 0301 	add.w	r3, r3, #1
    7662:	b2db      	uxtb	r3, r3
				// Add the command to the history
				CLI_saveHistory( CLILineBuffer );

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
    7664:	bf3e      	ittt	cc
    7666:	fb90 f4f6 	sdivcc	r4, r0, r6
    766a:	fb06 0014 	mlscc	r0, r6, r4, r0
    766e:	7008      	strbcc	r0, [r1, #0]
				CLIHistoryTail++;
				if ( CLIHistoryTail == CLIMaxHistorySize )
    7670:	2b0a      	cmp	r3, #10
				{
					CLIHistoryTail = 0;
    7672:	bf03      	ittte	eq
    7674:	2300      	moveq	r3, #0
    7676:	7013      	strbeq	r3, [r2, #0]
					CLIHistoryHead = 1;
    7678:	2301      	moveq	r3, #1
				CLI_saveHistory( CLILineBuffer );

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
				CLIHistoryTail++;
    767a:	7013      	strbne	r3, [r2, #0]
				if ( CLIHistoryTail == CLIMaxHistorySize )
				{
					CLIHistoryTail = 0;
					CLIHistoryHead = 1;
    767c:	bf08      	it	eq
    767e:	700b      	strbeq	r3, [r1, #0]
				}

				CLIHistoryCurrent = CLIHistoryTail; // 'Up' starts at the last item
    7680:	4b48      	ldr	r3, [pc, #288]	; (77a4 <CLI_process+0x200>)
    7682:	7812      	ldrb	r2, [r2, #0]
    7684:	701a      	strb	r2, [r3, #0]
inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    7686:	2364      	movs	r3, #100	; 0x64
    7688:	4353      	muls	r3, r2
    768a:	4a47      	ldr	r2, [pc, #284]	; (77a8 <CLI_process+0x204>)
    768c:	2100      	movs	r1, #0
    768e:	54d1      	strb	r1, [r2, r3]
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    7690:	2300      	movs	r3, #0

			// Reset the prompt after processing has finished
			print( NL );
    7692:	483a      	ldr	r0, [pc, #232]	; (777c <CLI_process+0x1d8>)
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    7694:	702b      	strb	r3, [r5, #0]

			// Reset the prompt after processing has finished
			print( NL );
    7696:	f000 f8c5 	bl	7824 <_print>

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    769a:	4844      	ldr	r0, [pc, #272]	; (77ac <CLI_process+0x208>)
    769c:	f000 f8c2 	bl	7824 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    76a0:	4843      	ldr	r0, [pc, #268]	; (77b0 <CLI_process+0x20c>)
			prev_buf_pos++;

			break;
		}
	}
}
    76a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    76a6:	f000 b8bd 	b.w	7824 <_print>

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    76aa:	3b02      	subs	r3, #2

				// Remove character from tty
				print("\b \b");
    76ac:	4841      	ldr	r0, [pc, #260]	; (77b4 <CLI_process+0x210>)

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    76ae:	702b      	strb	r3, [r5, #0]

				// Remove character from tty
				print("\b \b");
    76b0:	f000 f8b8 	bl	7824 <_print>
    76b4:	e7b6      	b.n	7624 <CLI_process+0x80>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    76b6:	2a09      	cmp	r2, #9
    76b8:	d155      	bne.n	7766 <CLI_process+0x1c2>
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;

		case 0x09: // Tab
			// Tab completion for the current command
			CLI_tabCompletion();
    76ba:	f7ff feb7 	bl	742c <CLI_tabCompletion>

			CLILineBufferCurrent--; // Remove the Tab
    76be:	783b      	ldrb	r3, [r7, #0]
    76c0:	3b01      	subs	r3, #1
    76c2:	703b      	strb	r3, [r7, #0]

			// XXX There is a potential bug here when resetting the buffer (losing valid keypresses)
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;
    76c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    76c6:	2a1b      	cmp	r2, #27
    76c8:	d004      	beq.n	76d4 <CLI_process+0x130>
    76ca:	2a7f      	cmp	r2, #127	; 0x7f
    76cc:	d0a6      	beq.n	761c <CLI_process+0x78>
    76ce:	2a0d      	cmp	r2, #13
    76d0:	d149      	bne.n	7766 <CLI_process+0x1c2>
    76d2:	e7b1      	b.n	7638 <CLI_process+0x94>

		case 0x1B: // Esc / Escape codes
			// Check for other escape sequence

			// \e[ is an escape code in vt100 compatible terminals
			if ( CLILineBufferCurrent >= prev_buf_pos + 3
    76d4:	1ca7      	adds	r7, r4, #2
    76d6:	429f      	cmp	r7, r3
    76d8:	da4d      	bge.n	7776 <CLI_process+0x1d2>
				&& CLILineBuffer[ prev_buf_pos ] == 0x1B
				&& CLILineBuffer[ prev_buf_pos + 1] == 0x5B )
    76da:	190b      	adds	r3, r1, r4
    76dc:	785b      	ldrb	r3, [r3, #1]
    76de:	2b5b      	cmp	r3, #91	; 0x5b
    76e0:	d149      	bne.n	7776 <CLI_process+0x1d2>
			{
				// Arrow Keys: A (0x41) = Up, B (0x42) = Down, C (0x43) = Right, D (0x44) = Left

				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
    76e2:	5dcb      	ldrb	r3, [r1, r7]
    76e4:	2b41      	cmp	r3, #65	; 0x41
    76e6:	d122      	bne.n	772e <CLI_process+0x18a>
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
    76e8:	4d2e      	ldr	r5, [pc, #184]	; (77a4 <CLI_process+0x200>)
    76ea:	4b2c      	ldr	r3, [pc, #176]	; (779c <CLI_process+0x1f8>)
    76ec:	f995 2000 	ldrsb.w	r2, [r5]
    76f0:	781b      	ldrb	r3, [r3, #0]
    76f2:	429a      	cmp	r2, r3
    76f4:	d104      	bne.n	7700 <CLI_process+0x15c>
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    76f6:	2300      	movs	r3, #0
						CLI_saveHistory( CLILineBuffer );
    76f8:	4608      	mov	r0, r1
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    76fa:	550b      	strb	r3, [r1, r4]
						CLI_saveHistory( CLILineBuffer );
    76fc:	f7ff ff0a 	bl	7514 <CLI_saveHistory>
					}

					// Grab the previus item from the history if there is one
					if ( RING_PREV( CLIHistoryCurrent ) != RING_PREV( CLIHistoryHead ) )
    7700:	f995 0000 	ldrsb.w	r0, [r5]
    7704:	2100      	movs	r1, #0
    7706:	2209      	movs	r2, #9
    7708:	3801      	subs	r0, #1
    770a:	f7ff feef 	bl	74ec <CLI_wrap>
    770e:	4b24      	ldr	r3, [pc, #144]	; (77a0 <CLI_process+0x1fc>)
    7710:	4604      	mov	r4, r0
    7712:	7818      	ldrb	r0, [r3, #0]
    7714:	2100      	movs	r1, #0
    7716:	3801      	subs	r0, #1
    7718:	2209      	movs	r2, #9
    771a:	f7ff fee7 	bl	74ec <CLI_wrap>
    771e:	4284      	cmp	r4, r0
						CLIHistoryCurrent = RING_PREV( CLIHistoryCurrent );
    7720:	bf1c      	itt	ne
    7722:	4b20      	ldrne	r3, [pc, #128]	; (77a4 <CLI_process+0x200>)
    7724:	701c      	strbne	r4, [r3, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    7726:	f995 0000 	ldrsb.w	r0, [r5]
    772a:	f7ff ff13 	bl	7554 <CLI_retreiveHistory>
				}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
    772e:	5df3      	ldrb	r3, [r6, r7]
    7730:	2b42      	cmp	r3, #66	; 0x42
    7732:	d120      	bne.n	7776 <CLI_process+0x1d2>
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
    7734:	4c1b      	ldr	r4, [pc, #108]	; (77a4 <CLI_process+0x200>)
    7736:	f994 0000 	ldrsb.w	r0, [r4]
    773a:	2100      	movs	r1, #0
    773c:	2209      	movs	r2, #9
    773e:	3001      	adds	r0, #1
    7740:	f7ff fed4 	bl	74ec <CLI_wrap>
    7744:	4b15      	ldr	r3, [pc, #84]	; (779c <CLI_process+0x1f8>)
    7746:	4605      	mov	r5, r0
    7748:	7818      	ldrb	r0, [r3, #0]
    774a:	2100      	movs	r1, #0
    774c:	3001      	adds	r0, #1
    774e:	2209      	movs	r2, #9
    7750:	f7ff fecc 	bl	74ec <CLI_wrap>
    7754:	4285      	cmp	r5, r0
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
    7756:	bf18      	it	ne
    7758:	7025      	strbne	r5, [r4, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    775a:	f994 0000 	ldrsb.w	r0, [r4]
			prev_buf_pos++;

			break;
		}
	}
}
    775e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
					CLI_retreiveHistory( CLIHistoryCurrent );
    7762:	f7ff bef7 	b.w	7554 <CLI_retreiveHistory>

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    7766:	2200      	movs	r2, #0

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    7768:	1930      	adds	r0, r6, r4

			// Buffer reset
			prev_buf_pos++;
    776a:	3401      	adds	r4, #1

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    776c:	54ca      	strb	r2, [r1, r3]

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );

			// Buffer reset
			prev_buf_pos++;
    776e:	b2e4      	uxtb	r4, r4
		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    7770:	f7fe fd6a 	bl	6248 <Output_putstr>

			// Buffer reset
			prev_buf_pos++;

			break;
    7774:	e756      	b.n	7624 <CLI_process+0x80>
    7776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7778:	1fff96f4 	.word	0x1fff96f4
    777c:	0000b143 	.word	0x0000b143
    7780:	0000b614 	.word	0x0000b614
    7784:	1fff9638 	.word	0x1fff9638
    7788:	1fff924c 	.word	0x1fff924c
    778c:	0000b66b 	.word	0x0000b66b
    7790:	0000b671 	.word	0x0000b671
    7794:	0000816a 	.word	0x0000816a
    7798:	0000b676 	.word	0x0000b676
    779c:	1fff96c8 	.word	0x1fff96c8
    77a0:	1fff969d 	.word	0x1fff969d
    77a4:	1fff924d 	.word	0x1fff924d
    77a8:	1fff9250 	.word	0x1fff9250
    77ac:	0000b600 	.word	0x0000b600
    77b0:	0000b606 	.word	0x0000b606
    77b4:	0000b67a 	.word	0x0000b67a

000077b8 <init_errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Enable pin
	GPIOA_PDDR |= (1<<5);
    77b8:	4a04      	ldr	r2, [pc, #16]	; (77cc <init_errorLED+0x14>)
    77ba:	6813      	ldr	r3, [r2, #0]
    77bc:	f043 0320 	orr.w	r3, r3, #32
    77c0:	6013      	str	r3, [r2, #0]

	// Setup pin - A5 - See Lib/pin_map.mchck for more details on pins
	PORTA_PCR5 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    77c2:	4b03      	ldr	r3, [pc, #12]	; (77d0 <init_errorLED+0x18>)
    77c4:	f44f 72a2 	mov.w	r2, #324	; 0x144
    77c8:	601a      	str	r2, [r3, #0]
    77ca:	4770      	bx	lr
    77cc:	400ff014 	.word	0x400ff014
    77d0:	40049014 	.word	0x40049014

000077d4 <errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Error LED On (A5)
	if ( on ) {
    77d4:	b108      	cbz	r0, 77da <errorLED+0x6>
		GPIOA_PSOR |= (1<<5);
    77d6:	4a04      	ldr	r2, [pc, #16]	; (77e8 <errorLED+0x14>)
    77d8:	e000      	b.n	77dc <errorLED+0x8>
	}
	// Error LED Off
	else {
		GPIOA_PCOR |= (1<<5);
    77da:	4a04      	ldr	r2, [pc, #16]	; (77ec <errorLED+0x18>)
    77dc:	6813      	ldr	r3, [r2, #0]
    77de:	f043 0320 	orr.w	r3, r3, #32
    77e2:	6013      	str	r3, [r2, #0]
    77e4:	4770      	bx	lr
    77e6:	bf00      	nop
    77e8:	400ff004 	.word	0x400ff004
    77ec:	400ff008 	.word	0x400ff008

000077f0 <printstrs>:

// ----- Functions -----

// Multiple string Output
void printstrs( char* first, ... )
{
    77f0:	b40f      	push	{r0, r1, r2, r3}
    77f2:	b507      	push	{r0, r1, r2, lr}
    77f4:	ab04      	add	r3, sp, #16
    77f6:	f853 0b04 	ldr.w	r0, [r3], #4
	// Initialize the variadic function parameter list
	va_list ap;

	// Get the first parameter
	va_start( ap, first );
    77fa:	9301      	str	r3, [sp, #4]
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    77fc:	7803      	ldrb	r3, [r0, #0]
    77fe:	b133      	cbz	r3, 780e <printstrs+0x1e>
	{
		// Print out the given string
		Output_putstr( cur );
    7800:	f7fe fd22 	bl	6248 <Output_putstr>

		// Get the next argument ready
		cur = va_arg( ap, char* );
    7804:	9b01      	ldr	r3, [sp, #4]
    7806:	1d1a      	adds	r2, r3, #4
    7808:	9201      	str	r2, [sp, #4]
    780a:	6818      	ldr	r0, [r3, #0]
    780c:	e7f6      	b.n	77fc <printstrs+0xc>
	// Get the first parameter
	va_start( ap, first );
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    780e:	7843      	ldrb	r3, [r0, #1]
    7810:	2b00      	cmp	r3, #0
    7812:	d1f5      	bne.n	7800 <printstrs+0x10>
    7814:	7883      	ldrb	r3, [r0, #2]
    7816:	2b00      	cmp	r3, #0
    7818:	d1f2      	bne.n	7800 <printstrs+0x10>
		// Get the next argument ready
		cur = va_arg( ap, char* );
	}

	va_end( ap ); // Not required, but good practice
}
    781a:	b003      	add	sp, #12
    781c:	f85d eb04 	ldr.w	lr, [sp], #4
    7820:	b004      	add	sp, #16
    7822:	4770      	bx	lr

00007824 <_print>:
	while ( ( c = pgm_read_byte( s++ ) ) != '\0' )
	{
		Output_putchar( c );
	}
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	Output_putstr( (char*)s );
    7824:	f7fe bd10 	b.w	6248 <Output_putstr>

00007828 <lenStr>:
	}
}


uint16_t lenStr( char* in )
{
    7828:	4602      	mov	r2, r0
    782a:	4613      	mov	r3, r2
    782c:	3201      	adds	r2, #1
	// Iterator
	char *pos;

	// Loop until null is found
	for ( pos = in; *pos; pos++ );
    782e:	7819      	ldrb	r1, [r3, #0]
    7830:	2900      	cmp	r1, #0
    7832:	d1fa      	bne.n	782a <lenStr+0x2>

	// Return the difference between the pointers of in and pos (which is the string length)
	return (pos - in);
    7834:	1a18      	subs	r0, r3, r0
}
    7836:	b280      	uxth	r0, r0
    7838:	4770      	bx	lr

0000783a <revsStr>:
	revsStr(out);
}


void revsStr( char* in )
{
    783a:	b510      	push	{r4, lr}
    783c:	4604      	mov	r4, r0

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    783e:	f7ff fff3 	bl	7828 <lenStr>
    7842:	2300      	movs	r3, #0
    7844:	3801      	subs	r0, #1
    7846:	4283      	cmp	r3, r0
    7848:	da06      	bge.n	7858 <revsStr+0x1e>
	{
		c = in[i];
    784a:	5ce2      	ldrb	r2, [r4, r3]
		in[i] = in[j];
    784c:	5c21      	ldrb	r1, [r4, r0]
    784e:	54e1      	strb	r1, [r4, r3]
		in[j] = c;
    7850:	5422      	strb	r2, [r4, r0]

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    7852:	3301      	adds	r3, #1
    7854:	3801      	subs	r0, #1
    7856:	e7f6      	b.n	7846 <revsStr+0xc>
	{
		c = in[i];
		in[i] = in[j];
		in[j] = c;
	}
}
    7858:	bd10      	pop	{r4, pc}

0000785a <int8ToStr>:



// String Functions
void int8ToStr( uint8_t in, char* out )
{
    785a:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint8_t pos;
	pos = 0;
    785c:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    785e:	230a      	movs	r3, #10
    7860:	fbb0 f4f3 	udiv	r4, r0, r3
    7864:	fb03 0314 	mls	r3, r3, r4, r0
    7868:	1c55      	adds	r5, r2, #1
    786a:	3330      	adds	r3, #48	; 0x30
	}
	while ( (in /= 10) > 0 );
    786c:	f014 00ff 	ands.w	r0, r4, #255	; 0xff
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7870:	548b      	strb	r3, [r1, r2]
    7872:	b2ea      	uxtb	r2, r5
	}
	while ( (in /= 10) > 0 );
    7874:	d1f3      	bne.n	785e <int8ToStr+0x4>

	// Append null
	out[pos] = '\0';
    7876:	5488      	strb	r0, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
}
    7878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    787c:	4608      	mov	r0, r1
    787e:	f7ff bfdc 	b.w	783a <revsStr>

00007882 <printInt8>:



// Number Printing Functions
void printInt8( uint8_t in )
{
    7882:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 3 + 1 for null
	char tmpStr[4];

	// Convert number
	int8ToStr( in, tmpStr );
    7884:	a901      	add	r1, sp, #4
    7886:	f7ff ffe8 	bl	785a <int8ToStr>

	// Print number
	dPrintStr( tmpStr );
    788a:	a801      	add	r0, sp, #4
    788c:	f7fe fcdc 	bl	6248 <Output_putstr>
}
    7890:	b003      	add	sp, #12
    7892:	f85d fb04 	ldr.w	pc, [sp], #4

00007896 <int16ToStr>:
	revsStr(out);
}


void int16ToStr( uint16_t in, char* out )
{
    7896:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint16_t pos;
	pos = 0;
    7898:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    789a:	230a      	movs	r3, #10
    789c:	fbb0 f4f3 	udiv	r4, r0, r3
    78a0:	fb03 0314 	mls	r3, r3, r4, r0
    78a4:	1c55      	adds	r5, r2, #1
    78a6:	3330      	adds	r3, #48	; 0x30
	}
	while ( (in /= 10) > 0 );
    78a8:	b2a0      	uxth	r0, r4
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    78aa:	548b      	strb	r3, [r1, r2]
    78ac:	b2aa      	uxth	r2, r5
	}
	while ( (in /= 10) > 0 );
    78ae:	2800      	cmp	r0, #0
    78b0:	d1f3      	bne.n	789a <int16ToStr+0x4>

	// Append null
	out[pos] = '\0';
    78b2:	5488      	strb	r0, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
}
    78b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    78b8:	4608      	mov	r0, r1
    78ba:	f7ff bfbe 	b.w	783a <revsStr>

000078be <printInt16>:
	// Print number
	dPrintStr( tmpStr );
}

void printInt16( uint16_t in )
{
    78be:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 5 + 1 for null
	char tmpStr[6];

	// Convert number
	int16ToStr( in, tmpStr );
    78c0:	4669      	mov	r1, sp
    78c2:	f7ff ffe8 	bl	7896 <int16ToStr>

	// Print number
	dPrintStr( tmpStr );
    78c6:	4668      	mov	r0, sp
    78c8:	f7fe fcbe 	bl	6248 <Output_putstr>
}
    78cc:	b003      	add	sp, #12
    78ce:	f85d fb04 	ldr.w	pc, [sp], #4

000078d2 <hexToStr_op>:
	revsStr(out);
}


void hexToStr_op( uint16_t in, char* out, uint8_t op )
{
    78d2:	b570      	push	{r4, r5, r6, lr}
	// Position container
	uint16_t pos = 0;
    78d4:	2400      	movs	r4, #0

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
    78d6:	f000 030f 	and.w	r3, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    78da:	2b0a      	cmp	r3, #10
    78dc:	bf34      	ite	cc
    78de:	2630      	movcc	r6, #48	; 0x30
    78e0:	2637      	movcs	r6, #55	; 0x37
    78e2:	1c65      	adds	r5, r4, #1
    78e4:	4433      	add	r3, r6
	}
	while ( (in /= 16) > 0 );
    78e6:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    78e8:	550b      	strb	r3, [r1, r4]
    78ea:	b2ac      	uxth	r4, r5
	}
	while ( (in /= 16) > 0 );
    78ec:	d1f3      	bne.n	78d6 <hexToStr_op+0x4>

	// Output formatting options
	switch ( op )
    78ee:	2a02      	cmp	r2, #2

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    78f0:	4623      	mov	r3, r4
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    78f2:	d00c      	beq.n	790e <hexToStr_op+0x3c>
    78f4:	2a04      	cmp	r2, #4
    78f6:	d00a      	beq.n	790e <hexToStr_op+0x3c>
    78f8:	2a01      	cmp	r2, #1
    78fa:	d10f      	bne.n	791c <hexToStr_op+0x4a>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    78fc:	2278      	movs	r2, #120	; 0x78
    78fe:	550a      	strb	r2, [r1, r4]
    7900:	3401      	adds	r4, #1
		out[pos++] = '0';
    7902:	b2a4      	uxth	r4, r4
    7904:	3302      	adds	r3, #2
    7906:	2230      	movs	r2, #48	; 0x30
    7908:	b29b      	uxth	r3, r3
    790a:	550a      	strb	r2, [r1, r4]
		break;
    790c:	e006      	b.n	791c <hexToStr_op+0x4a>
	case 2: //  8-bit padding
	case 4: // 16-bit padding
		while ( pos < op )
    790e:	4293      	cmp	r3, r2
    7910:	d204      	bcs.n	791c <hexToStr_op+0x4a>
			out[pos++] = '0';
    7912:	1c58      	adds	r0, r3, #1
    7914:	2430      	movs	r4, #48	; 0x30
    7916:	54cc      	strb	r4, [r1, r3]
    7918:	b283      	uxth	r3, r0
    791a:	e7f8      	b.n	790e <hexToStr_op+0x3c>
		break;
	}

	// Append null
	out[pos] = '\0';
    791c:	2200      	movs	r2, #0
    791e:	54ca      	strb	r2, [r1, r3]

	// Reverse the string to the correct order
	revsStr(out);
    7920:	4608      	mov	r0, r1
}
    7922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    7926:	f7ff bf88 	b.w	783a <revsStr>

0000792a <printHex_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex_op( uint16_t in, uint8_t op )
{
    792a:	b507      	push	{r0, r1, r2, lr}
    792c:	460a      	mov	r2, r1
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[7];

	// Convert number
	hexToStr_op( in, tmpStr, op );
    792e:	4669      	mov	r1, sp
    7930:	f7ff ffcf 	bl	78d2 <hexToStr_op>

	// Print number
	dPrintStr( tmpStr );
    7934:	4668      	mov	r0, sp
    7936:	f7fe fc87 	bl	6248 <Output_putstr>
}
    793a:	b003      	add	sp, #12
    793c:	f85d fb04 	ldr.w	pc, [sp], #4

00007940 <hex32ToStr_op>:
	revsStr(out);
}


void hex32ToStr_op( uint32_t in, char* out, uint8_t op )
{
    7940:	b570      	push	{r4, r5, r6, lr}
	// Position container
	uint32_t pos = 0;
    7942:	2300      	movs	r3, #0
    7944:	1e4d      	subs	r5, r1, #1

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
    7946:	f000 040f 	and.w	r4, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    794a:	2c0a      	cmp	r4, #10
    794c:	bf34      	ite	cc
    794e:	2630      	movcc	r6, #48	; 0x30
    7950:	2637      	movcs	r6, #55	; 0x37
    7952:	4434      	add	r4, r6
	}
	while ( (in /= 16) > 0 );
    7954:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7956:	f103 0301 	add.w	r3, r3, #1
    795a:	f805 4f01 	strb.w	r4, [r5, #1]!
	}
	while ( (in /= 16) > 0 );
    795e:	d1f2      	bne.n	7946 <hex32ToStr_op+0x6>

	// Output formatting options
	switch ( op )
    7960:	2a02      	cmp	r2, #2

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7962:	461c      	mov	r4, r3
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    7964:	d00a      	beq.n	797c <hex32ToStr_op+0x3c>
    7966:	2a04      	cmp	r2, #4
    7968:	d008      	beq.n	797c <hex32ToStr_op+0x3c>
    796a:	2a01      	cmp	r2, #1
    796c:	d10e      	bne.n	798c <hex32ToStr_op+0x4c>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    796e:	2278      	movs	r2, #120	; 0x78
    7970:	54ca      	strb	r2, [r1, r3]
		out[pos++] = '0';
    7972:	440b      	add	r3, r1
    7974:	2230      	movs	r2, #48	; 0x30
    7976:	3402      	adds	r4, #2
    7978:	705a      	strb	r2, [r3, #1]
		break;
    797a:	e007      	b.n	798c <hex32ToStr_op+0x4c>
    797c:	440b      	add	r3, r1
	case 2: //  8-bit padding
	case 4: // 16-bit padding
		while ( pos < op )
    797e:	4294      	cmp	r4, r2
    7980:	d204      	bcs.n	798c <hex32ToStr_op+0x4c>
			out[pos++] = '0';
    7982:	2030      	movs	r0, #48	; 0x30
    7984:	3401      	adds	r4, #1
    7986:	f803 0b01 	strb.w	r0, [r3], #1
    798a:	e7f8      	b.n	797e <hex32ToStr_op+0x3e>
		break;
	}

	// Append null
	out[pos] = '\0';
    798c:	2300      	movs	r3, #0
    798e:	550b      	strb	r3, [r1, r4]

	// Reverse the string to the correct order
	revsStr(out);
    7990:	4608      	mov	r0, r1
}
    7992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    7996:	f7ff bf50 	b.w	783a <revsStr>

0000799a <printHex32_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex32_op( uint32_t in, uint8_t op )
{
    799a:	b507      	push	{r0, r1, r2, lr}
    799c:	460a      	mov	r2, r1
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[7];

	// Convert number
	hex32ToStr_op( in, tmpStr, op );
    799e:	4669      	mov	r1, sp
    79a0:	f7ff ffce 	bl	7940 <hex32ToStr_op>

	// Print number
	dPrintStr( tmpStr );
    79a4:	4668      	mov	r0, sp
    79a6:	f7fe fc4f 	bl	6248 <Output_putstr>
}
    79aa:	b003      	add	sp, #12
    79ac:	f85d fb04 	ldr.w	pc, [sp], #4

000079b0 <eqStr>:
	return (pos - in);
}


int16_t eqStr( char* str1, char* str2 )
{
    79b0:	b510      	push	{r4, lr}
    79b2:	4603      	mov	r3, r0
	// Scan each string for NULLs and whether they are the same
	while( *str1 != '\0' && *str1++ == *str2++ );
    79b4:	f810 2b01 	ldrb.w	r2, [r0], #1
    79b8:	b122      	cbz	r2, 79c4 <eqStr+0x14>
    79ba:	f811 4b01 	ldrb.w	r4, [r1], #1
    79be:	4294      	cmp	r4, r2
    79c0:	4603      	mov	r3, r0
    79c2:	d0f6      	beq.n	79b2 <eqStr+0x2>

	// If the strings are still identical (i.e. both NULL), then return -1, otherwise current *str1
	// If *str1 is 0, then str1 ended (and str1 is "like" str2), otherwise strings are different
	return *--str1 == *--str2 ? -1 : *++str1;
    79c4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    79c8:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    79cc:	4290      	cmp	r0, r2
    79ce:	bf14      	ite	ne
    79d0:	7818      	ldrbne	r0, [r3, #0]
    79d2:	f64f 70ff 	movweq	r0, #65535	; 0xffff
}
    79d6:	b200      	sxth	r0, r0
    79d8:	bd10      	pop	{r4, pc}

000079da <numToInt>:

int numToInt( char* in )
{
    79da:	b530      	push	{r4, r5, lr}
    79dc:	4602      	mov	r2, r0
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16
    79de:	240a      	movs	r4, #10
	// Pointers to the LSD (Least Significant Digit) and MSD
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
    79e0:	2501      	movs	r5, #1
    79e2:	4611      	mov	r1, r2
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
    79e4:	f812 3b01 	ldrb.w	r3, [r2], #1
    79e8:	b193      	cbz	r3, 7a10 <numToInt+0x36>
	{
		// Check for positive/negative
		switch ( *lsd++ )
    79ea:	2b2b      	cmp	r3, #43	; 0x2b
    79ec:	4611      	mov	r1, r2
    79ee:	d00d      	beq.n	7a0c <numToInt+0x32>
    79f0:	d802      	bhi.n	79f8 <numToInt+0x1e>
    79f2:	2b20      	cmp	r3, #32
    79f4:	d00a      	beq.n	7a0c <numToInt+0x32>
    79f6:	e008      	b.n	7a0a <numToInt+0x30>
    79f8:	2b2d      	cmp	r3, #45	; 0x2d
    79fa:	d003      	beq.n	7a04 <numToInt+0x2a>
    79fc:	2b78      	cmp	r3, #120	; 0x78
    79fe:	d104      	bne.n	7a0a <numToInt+0x30>
		case '+':
		case ' ':
			msd = lsd;
			break;
		case 'x': // Hex Mode
			base = 0x10;
    7a00:	2410      	movs	r4, #16
			msd = lsd;
			break;
    7a02:	e003      	b.n	7a0c <numToInt+0x32>
		// Check for positive/negative
		switch ( *lsd++ )
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    7a04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    7a08:	e000      	b.n	7a0c <numToInt+0x32>

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
	{
		// Check for positive/negative
		switch ( *lsd++ )
    7a0a:	4601      	mov	r1, r0
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    7a0c:	4608      	mov	r0, r1
    7a0e:	e7e8      	b.n	79e2 <numToInt+0x8>
			break;
		}
	}

	// Process string depending on which base
	switch ( base )
    7a10:	2c0a      	cmp	r4, #10
    7a12:	d003      	beq.n	7a1c <numToInt+0x42>
    7a14:	2c10      	cmp	r4, #16
    7a16:	d11f      	bne.n	7a58 <numToInt+0x7e>
    7a18:	2401      	movs	r4, #1
    7a1a:	e012      	b.n	7a42 <numToInt+0x68>
    7a1c:	2201      	movs	r2, #1
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    7a1e:	4281      	cmp	r1, r0
    7a20:	d91a      	bls.n	7a58 <numToInt+0x7e>
			total += ( (*--lsd) - '0' ) * digit;
    7a22:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    7a26:	3c30      	subs	r4, #48	; 0x30
    7a28:	fb02 3304 	mla	r3, r2, r4, r3
	// Process string depending on which base
	switch ( base )
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    7a2c:	240a      	movs	r4, #10
    7a2e:	4362      	muls	r2, r4
    7a30:	e7f5      	b.n	7a1e <numToInt+0x44>

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
    7a32:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    7a36:	2a39      	cmp	r2, #57	; 0x39
    7a38:	d806      	bhi.n	7a48 <numToInt+0x6e>
    7a3a:	3a30      	subs	r2, #48	; 0x30
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    7a3c:	fb04 3302 	mla	r3, r4, r2, r3
			total += ( (*--lsd) - '0' ) * digit;
		break;

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
    7a40:	0124      	lsls	r4, r4, #4
    7a42:	4281      	cmp	r1, r0
    7a44:	d8f5      	bhi.n	7a32 <numToInt+0x58>
    7a46:	e007      	b.n	7a58 <numToInt+0x7e>
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
    7a48:	2a46      	cmp	r2, #70	; 0x46
    7a4a:	d801      	bhi.n	7a50 <numToInt+0x76>
    7a4c:	3a37      	subs	r2, #55	; 0x37
    7a4e:	e7f5      	b.n	7a3c <numToInt+0x62>
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    7a50:	2a66      	cmp	r2, #102	; 0x66
    7a52:	d8f5      	bhi.n	7a40 <numToInt+0x66>
    7a54:	3a57      	subs	r2, #87	; 0x57
    7a56:	e7f1      	b.n	7a3c <numToInt+0x62>
		break;
	}

	// Propagate sign and return
	return total * sign;
}
    7a58:	fb05 f003 	mul.w	r0, r5, r3
    7a5c:	bd30      	pop	{r4, r5, pc}
    7a5e:	4d4e      	.short	0x4d4e
    7a60:	0a0d2149 	.word	0x0a0d2149
    7a64:	72614800 	.word	0x72614800
    7a68:	61462064 	.word	0x61462064
    7a6c:	21746c75 	.word	0x21746c75
    7a70:	42435320 	.word	0x42435320
    7a74:	5346485f 	.word	0x5346485f
    7a78:	00203a52 	.word	0x00203a52
    7a7c:	6f6d654d 	.word	0x6f6d654d
    7a80:	4d207972 	.word	0x4d207972
    7a84:	67616e61 	.word	0x67616e61
    7a88:	46207265 	.word	0x46207265
    7a8c:	746c7561 	.word	0x746c7561
    7a90:	43532021 	.word	0x43532021
    7a94:	46435f42 	.word	0x46435f42
    7a98:	203a5253 	.word	0x203a5253
    7a9c:	43532000 	.word	0x43532000
    7aa0:	4d4d5f42 	.word	0x4d4d5f42
    7aa4:	203a5241 	.word	0x203a5241
    7aa8:	73754200 	.word	0x73754200
    7aac:	75614620 	.word	0x75614620
    7ab0:	2021746c 	.word	0x2021746c
    7ab4:	5f424353 	.word	0x5f424353
    7ab8:	52534643 	.word	0x52534643
    7abc:	2000203a 	.word	0x2000203a
    7ac0:	5f424353 	.word	0x5f424353
    7ac4:	52414642 	.word	0x52414642
    7ac8:	5500203a 	.word	0x5500203a
    7acc:	65676173 	.word	0x65676173
    7ad0:	75614620 	.word	0x75614620
    7ad4:	2021746c 	.word	0x2021746c
    7ad8:	5f424353 	.word	0x5f424353
    7adc:	52534643 	.word	0x52534643
    7ae0:	203a      	.short	0x203a
    7ae2:	00          	.byte	0x00

00007ae3 <sys_reset_to_loader_magic>:
    7ae3:	ff 00 7f 52 45 53 45 54 20 54 4f 20 4c 4f 41 44     ...RESET TO LOAD
    7af3:	45 52 7f 00 ff 00 e8 fd 00                          ER.......

00007afc <ledWPageCLIDict_DescEntry>:
    7afc:	57 72 69 74 65 20 74 6f 20 67 69 76 65 6e 20 72     Write to given r
    7b0c:	65 67 69 73 74 65 72 20 70 61 67 65 20 73 74 61     egister page sta
    7b1c:	72 74 69 6e 67 20 61 74 20 61 64 64 72 65 73 73     rting at address
    7b2c:	2e 20 69 2e 65 2e 20 30 78 32 20 30 78 32 34 20     . i.e. 0x2 0x24 
    7b3c:	30 78 46 30 20 30 78 31 32 00                       0xF0 0x12.

00007b46 <ledTestCLIDict_DescEntry>:
    7b46:	54 65 73 74 20 6f 75 74 20 74 68 65 20 6c 65 64     Test out the led
    7b56:	20 70 61 67 65 73 2e 00 00 00                        pages....

00007b60 <ledCLIDict>:
    7b60:	b1 7d 00 00 ea 7e 00 00 8d 2c 00 00 b9 7d 00 00     .}...~...,...}..
    7b70:	63 7f 00 00 05 2c 00 00 c1 7d 00 00 f4 7d 00 00     c....,...}...}..
    7b80:	4d 2e 00 00 c9 7d 00 00 cc 7b 00 00 d9 2b 00 00     M....}...{...+..
    7b90:	d2 7d 00 00 ea 7b 00 00 0d 2b 00 00 db 7d 00 00     .}...{...+...}..
    7ba0:	46 7b 00 00 e5 29 00 00 e3 7d 00 00 fc 7a 00 00     F{...)...}...z..
    7bb0:	15 2d 00 00 ec 7d 00 00 b9 7e 00 00 85 29 00 00     .-...}...~...)..
    7bc0:	00 00 00 00 00 00 00 00 00 00 00 00                 ............

00007bcc <ledRPageCLIDict_DescEntry>:
    7bcc:	52 65 61 64 20 74 68 65 20 67 69 76 65 6e 20 72     Read the given r
    7bdc:	65 67 69 73 74 65 72 20 70 61 67 65 2e 00           egister page..

00007bea <ledStartCLIDict_DescEntry>:
    7bea:	44 69 73 61 62 6c 65 20 73 6f 66 74 77 61 72 65     Disable software
    7bfa:	20 73 68 75 74 64 6f 77 6e 2e 00 1b 5b 31 3b 33      shutdown...[1;3
    7c0a:	35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20 44 41     5mDEBUG.[0m - DA
    7c1a:	54 41 3a 20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e     TA: ..[1;33mWARN
    7c2a:	49 4e 47 1b 5b 30 6d 20 2d 20 49 32 43 5f 42 75     ING.[0m - I2C_Bu
    7c3a:	66 66 65 72 50 75 73 68 20 66 61 69 6c 65 64 2c     fferPush failed,
    7c4a:	20 62 75 66 66 65 72 20 66 75 6c 6c 3a 20 00 1b      buffer full: ..
    7c5a:	5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30     [1;5;31mERROR.[0
    7c6a:	6d 20 2d 20 4e 6f 20 62 75 66 66 65 72 20 74 6f     m - No buffer to
    7c7a:	20 70 6f 70 20 61 6e 20 65 6e 74 72 79 20 66 72      pop an entry fr
    7c8a:	6f 6d 2e 2e 2e 20 00 1b 5b 31 3b 35 3b 33 31 6d     om... ..[1;5;31m
    7c9a:	45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 32 43 20     ERROR.[0m - I2C 
    7caa:	4e 41 4b 20 64 65 74 65 63 74 65 64 2e 2e 2e 0d     NAK detected....
    7cba:	0a 00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52     ...[1;5;31mERROR
    7cca:	1b 5b 30 6d 20 2d 20 41 72 62 69 74 72 61 74 69     .[0m - Arbitrati
    7cda:	6f 6e 20 6c 6f 73 74 2e 2e 2e 0d 0a 00 1b 5b 31     on lost.......[1
    7cea:	3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30 6d 20     ;5;31mERROR.[0m 
    7cfa:	2d 20 53 6c 61 76 65 20 41 64 64 72 65 73 73 20     - Slave Address 
    7d0a:	49 32 43 20 4e 41 4b 20 64 65 74 65 63 74 65 64     I2C NAK detected
    7d1a:	2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 35 6d 44 45 42     .......[1;35mDEB
    7d2a:	55 47 1b 5b 30 6d 20 2d 20 41 74 74 65 6d 70 74     UG.[0m - Attempt
    7d3a:	69 6e 67 20 74 6f 20 72 65 61 64 20 62 79 74 65     ing to read byte
    7d4a:	20 2d 20 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47      - ..[1;35mDEBUG
    7d5a:	1b 5b 30 6d 20 2d 20 4e 45 58 54 0d 0a 00 1b 5b     .[0m - NEXT....[
    7d6a:	31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20     1;32mINFO.[0m - 
    7d7a:	53 65 6e 64 69 6e 67 3a 20 00 7c 20 00 4c 45 44     Sending: .| .LED
    7d8a:	5f 63 6f 6e 74 72 6f 6c 5f 63 61 70 61 62 69 6c     _control_capabil
    7d9a:	69 74 79 28 6d 6f 64 65 2c 61 6d 6f 75 6e 74 2c     ity(mode,amount,
    7daa:	69 6e 64 65 78 29 00 69 32 63 52 65 63 76 00 69     index).i2cRecv.i
    7dba:	32 63 53 65 6e 64 00 6c 65 64 43 74 72 6c 00 6c     2cSend.ledCtrl.l
    7dca:	65 64 52 50 61 67 65 00 6c 65 64 53 74 61 72 74     edRPage.ledStart
    7dda:	00 6c 65 64 54 65 73 74 00 6c 65 64 57 50 61 67     .ledTest.ledWPag
    7dea:	65 00 6c 65 64 5a 65 72 6f 00                       e.ledZero.

00007df4 <ledCtrlCLIDict_DescEntry>:
    7df4:	42 61 73 69 63 20 4c 45 44 20 63 6f 6e 74 72 6f     Basic LED contro
    7e04:	6c 2e 20 41 72 67 73 3a 20 3c 6d 6f 64 65 3e 20     l. Args: <mode> 
    7e14:	3c 61 6d 6f 75 6e 74 3e 20 5b 3c 69 6e 64 65 78     <amount> [<index
    7e24:	3e 5d 00                                            >].

00007e27 <LED_defaultBrightness1>:
    7e27:	e8 24 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     .$..............
    7e37:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    7e47:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    7e57:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    7e67:	00 00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    7e77:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    7e87:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    7e97:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    7ea7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    7eb7:	00 00                                               ..

00007eb9 <ledZeroCLIDict_DescEntry>:
    7eb9:	5a 65 72 6f 20 6f 75 74 20 4c 45 44 20 72 65 67     Zero out LED reg
    7ec9:	69 73 74 65 72 20 70 61 67 65 73 20 28 6e 6f 6e     ister pages (non
    7ed9:	2d 63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 29 2e     -configuration).
    7ee9:	00                                                  .

00007eea <i2cRecvCLIDict_DescEntry>:
    7eea:	53 65 6e 64 20 49 32 43 20 73 65 71 75 65 6e 63     Send I2C sequenc
    7efa:	65 20 6f 66 20 62 79 74 65 73 20 61 6e 64 20 65     e of bytes and e
    7f0a:	78 70 65 63 74 20 61 20 72 65 70 6c 79 20 6f 66     xpect a reply of
    7f1a:	20 31 20 62 79 74 65 20 6f 6e 20 74 68 65 20 6c      1 byte on the l
    7f2a:	61 73 74 20 73 65 71 75 65 6e 63 65 2e 0d 0a 09     ast sequence....
    7f3a:	09 55 73 65 20 7c 27 73 20 74 6f 20 73 70 6c 69     .Use |'s to spli
    7f4a:	74 20 73 65 71 75 65 6e 63 65 73 20 77 69 74 68     t sequences with
    7f5a:	20 61 20 73 74 6f 70 2e 00                           a stop..

00007f63 <i2cSendCLIDict_DescEntry>:
    7f63:	53 65 6e 64 20 49 32 43 20 73 65 71 75 65 6e 63     Send I2C sequenc
    7f73:	65 20 6f 66 20 62 79 74 65 73 2e 20 55 73 65 20     e of bytes. Use 
    7f83:	7c 27 73 20 74 6f 20 73 70 6c 69 74 20 73 65 71     |'s to split seq
    7f93:	75 65 6e 63 65 73 20 77 69 74 68 20 61 20 73 74     uences with a st
    7fa3:	6f 70 2e 00                                         op..

00007fa7 <LED_ledEnableMask1>:
    7fa7:	e8 00 ff 00 ff 00 ff 00 ff 00 3f 00 00 00 00 00     ..........?.....
    7fb7:	00 00 00 00                                         ....

00007fbb <ledCLIDictName>:
    7fbb:	49 53 53 49 20 4c 45 44 20 4d 6f 64 75 6c 65 20     ISSI LED Module 
    7fcb:	43 6f 6d 6d 61 6e 64 73 00                          Commands.

00007fd4 <matrixDebugCLIDict_DescEntry>:
    7fd4:	45 6e 61 62 6c 65 73 20 6d 61 74 72 69 78 20 64     Enables matrix d
    7fe4:	65 62 75 67 20 6d 6f 64 65 2c 20 70 72 69 6e 74     ebug mode, print
    7ff4:	73 20 6f 75 74 20 65 61 63 68 20 73 63 61 6e 20     s out each scan 
    8004:	63 6f 64 65 2e 0d 0a 09 09 49 66 20 61 72 67 75     code.....If argu
    8014:	6d 65 6e 74 20 1b 5b 33 35 6d 54 1b 5b 30 6d 20     ment .[35mT.[0m 
    8024:	69 73 20 67 69 76 65 6e 2c 20 70 72 69 6e 74 73     is given, prints
    8034:	20 6f 75 74 20 65 61 63 68 20 73 63 61 6e 20 63      out each scan c
    8044:	6f 64 65 20 73 74 61 74 65 20 74 72 61 6e 73 69     ode state transi
    8054:	74 69 6f 6e 2e 00 1b 5b 31 3b 33 32 6d 49 4e 46     tion...[1;32mINF
    8064:	4f 1b 5b 30 6d 20 2d 20 4d 61 74 72 69 78 20 44     O.[0m - Matrix D
    8074:	65 62 75 67 20 4d 6f 64 65 3a 20 00 1b 5b 31 3b     ebug Mode: ..[1;
    8084:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 43 6f     32mINFO.[0m - Co
    8094:	6c 75 6d 6e 73 3a 20 20 00 1b 5b 31 3b 33 32 6d     lumns:  ..[1;32m
    80a4:	49 4e 46 4f 1b 5b 30 6d 20 2d 20 52 6f 77 73 3a     INFO.[0m - Rows:
    80b4:	20 20 20 20 20 00 1b 5b 31 3b 33 32 6d 49 4e 46          ..[1;32mINF
    80c4:	4f 1b 5b 30 6d 20 2d 20 4d 61 78 20 4b 65 79 73     O.[0m - Max Keys
    80d4:	3a 20 00 1b 5b 31 6d 4f 1b 5b 30 6d 00 1b 5b 31     : ..[1mO.[0m..[1
    80e4:	3b 33 33 6d 50 1b 5b 30 6d 00 1b 5b 31 3b 33 32     ;33mP.[0m..[1;32
    80f4:	6d 48 1b 5b 30 6d 00 1b 5b 31 3b 33 35 6d 52 1b     mH.[0m..[1;35mR.
    8104:	5b 30 6d 00 1b 5b 31 3b 33 31 6d 49 1b 5b 30 6d     [0m..[1;31mI.[0m
    8114:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    8124:	5b 30 6d 20 2d 20 4d 61 74 72 69 78 20 73 63 61     [0m - Matrix sca
    8134:	6e 20 62 75 67 21 21 20 52 65 70 6f 72 74 20 6d     n bug!! Report m
    8144:	65 21 0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     e!....[1;32mINFO
    8154:	1b 5b 30 6d 20 2d 20 4d 61 78 20 73 63 61 6e 73     .[0m - Max scans
    8164:	3a 20 20 20 20 20 20 00 1b 5b 31 3b 33 32 6d 49     :      ..[1;32mI
    8174:	4e 46 4f 1b 5b 30 6d 20 2d 20 50 72 65 76 69 6f     NFO.[0m - Previo
    8184:	75 73 20 73 63 61 6e 73 3a 20 00 1b 5b 31 3b 33     us scans: ..[1;3
    8194:	32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 53 63 61     2mINFO.[0m - Sca
    81a4:	6e 20 4e 75 6d 62 65 72 3a 20 20 20 20 00 3c 6b     n Number:    .<k
    81b4:	65 79 3e 3a 3c 70 72 65 76 69 6f 75 73 20 73 74     ey>:<previous st
    81c4:	61 74 65 3e 3c 63 75 72 72 65 6e 74 20 73 74 61     ate><current sta
    81d4:	74 65 3e 20 3c 61 63 74 69 76 65 20 63 6f 75 6e     te> <active coun
    81e4:	74 3e 20 3c 69 6e 61 63 74 69 76 65 20 63 6f 75     t> <inactive cou
    81f4:	6e 74 3e 00 1b 5b 31 6d 30 78 00 3a 00 20 30 78     nt>..[1m0x.:. 0x
    8204:	00 6d 61 74 72 69 78 44 65 62 75 67 00 6d 61 74     .matrixDebug.mat
    8214:	72 69 78 53 74 61 74 65 00                          rixState.

0000821d <matrixStateCLIDict_DescEntry>:
    821d:	50 72 69 6e 74 73 20 6f 75 74 20 74 68 65 20 63     Prints out the c
    822d:	75 72 72 65 6e 74 20 73 63 61 6e 20 74 61 62 6c     urrent scan tabl
    823d:	65 20 4e 20 74 69 6d 65 73 2e 0d 0a 09 09 20 1b     e N times..... .
    824d:	5b 31 6d 4f 1b 5b 30 6d 20 2d 20 4f 66 66 2c 20     [1mO.[0m - Off, 
    825d:	1b 5b 31 3b 33 33 6d 50 1b 5b 30 6d 20 2d 20 50     .[1;33mP.[0m - P
    826d:	72 65 73 73 2c 20 1b 5b 31 3b 33 32 6d 48 1b 5b     ress, .[1;32mH.[
    827d:	30 6d 20 2d 20 48 6f 6c 64 2c 20 1b 5b 31 3b 33     0m - Hold, .[1;3
    828d:	35 6d 52 1b 5b 30 6d 20 2d 20 52 65 6c 65 61 73     5mR.[0m - Releas
    829d:	65 2c 20 1b 5b 31 3b 33 31 6d 49 1b 5b 30 6d 20     e, .[1;31mI.[0m 
    82ad:	2d 20 49 6e 76 61 6c 69 64 00                       - Invalid.

000082b7 <matrixCLIDictName>:
    82b7:	4d 61 74 72 69 78 20 4d 6f 64 75 6c 65 20 43 6f     Matrix Module Co
    82c7:	6d 6d 61 6e 64 73 00 00 00                          mmands...

000082d0 <matrixCLIDict>:
    82d0:	05 82 00 00 d4 7f 00 00 65 2f 00 00 11 82 00 00     ........e/......
    82e0:	1d 82 00 00 41 2f 00 00 00 00 00 00 00 00 00 00     ....A/..........
    82f0:	00 00 00 00 00 00 00 ff ff ff ff ff ff 3f 3f 3f     .............???
    8300:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    8310:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8320:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    8330:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8340:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    8350:	ff 00 00 00 00 00 00 ff ff ff ff ff ff fc fc fc     ................
    8360:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    8370:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8380:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    8390:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    83a0:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    83b0:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    83c0:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    83d0:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    83e0:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    83f0:	00 00 00 00 00 00 00 ff ff ff ff ff ff 3f 3f 3f     .............???
    8400:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    8410:	3f 00 00 00 00 00 00 ff ff ff ff ff ff e0 e0 e0     ?...............
    8420:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    8430:	e0 00 00 00 00 00 00 07 07 07 07 07 07 07 07 07     ................
    8440:	07 07 07 07 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    8450:	ff 00 00 00 00 00 00 fc fc fc fc fc fc fc fc fc     ................
    8460:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    8470:	ff 00 00 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f     .......?????????
    8480:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    8490:	ff 00 00 00 00 00 00 00 00 00 00 00 00 e0 e0 e0     ................
    84a0:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    84b0:	ff 00 00 00 00 00 00 00 00 00 00 00 00 07 07 07     ................
    84c0:	07 07 07 07 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    84d0:	ff 00 00 00 00 00 00 fc fc fc fc fc fc fc fc fc     ................
    84e0:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    84f0:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8500:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    8510:	ff 00 00 00 00 00 00 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    8520:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    8530:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 07 07 07     ................
    8540:	07 07 07 07 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    8550:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8560:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    8570:	ff 00 00 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f     .......?????????
    8580:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    8590:	ff 00 00 00 00 00 00 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    85a0:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    85b0:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 07 07 07     ................
    85c0:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    85d0:	07 00 00 00 00 00 00 ff ff ff ff ff ff fc fc fc     ................
    85e0:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    85f0:	fc 00 00 00 00 00 00 ff ff ff ff ff ff 3f 3f 3f     .............???
    8600:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    8610:	ff 00 00 00 00 00 00 ff ff ff ff ff ff e0 e0 e0     ................
    8620:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    8630:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 07 07 07     ................
    8640:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    8650:	07 00 00 00 00 00 00 ff ff ff ff ff ff fc fc fc     ................
    8660:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    8670:	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8680:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    8690:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    86a0:	00 00 00 00 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    86b0:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    86c0:	00 00 00 00 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    86d0:	ff 00 00 00 00 00 00 fc fc fc fc fc fc fc fc fc     ................
    86e0:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    86f0:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 3f 3f 3f     .............???
    8700:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    8710:	ff 00 00 00 00 00 00 ff ff ff ff ff ff e0 e0 e0     ................
    8720:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    8730:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 07 07 07     ................
    8740:	07 07 07 07 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    8750:	ff 00 00 00 00 00 00 ff ff ff ff ff ff fc fc fc     ................
    8760:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    8770:	ff 00 00 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f     .......?????????
    8780:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff     ???????????.....
    8790:	ff 00 00 00 00 00 00 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    87a0:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff     ................
    87b0:	ff 00 00 00 00 00 00 ff ff ff ff ff ff 07 07 07     ................
    87c0:	07 07 07 07 07 07 07 07 07 07 07 ff ff ff ff ff     ................
    87d0:	ff 00 00 00 00 00 00 ff ff ff ff ff ff fc fc fc     ................
    87e0:	fc fc fc fc fc fc fc fc fc fc fc ff ff ff ff ff     ................
    87f0:	ff 00 00 00 39 b9 ea aa 8d 8d a8 a8 27 27 a0 1f     ....9.......''..
    8800:	4b 4b 8d 8d b5 34 00 00 42 82 f3 b3 f6 f6 a5 a5     KK...4..B.......
    8810:	49 49 b7 b7 5d 5d 45 85 fc bc f6 b6 2d 2d c1 00     II..]]E.....--..
    8820:	7e 7e 3c 3c 03 83 94 13 f9 b9 ca 09 d3 12 84 84     ~~<<............

00008830 <lcdTestCLIDict_DescEntry>:
    8830:	54 65 73 74 20 6f 75 74 20 74 68 65 20 4c 43 44     Test out the LCD
    8840:	20 64 69 73 70 6c 61 79 2e 00                        display..

0000884a <lcdCLIDictName>:
    884a:	53 54 20 4c 43 44 20 4d 6f 64 75 6c 65 20 43 6f     ST LCD Module Co
    885a:	6d 6d 61 6e 64 73 00 00 00 00                       mmands....

00008864 <lcdCLIDict>:
    8864:	25 89 00 00 4d 89 00 00 4d 35 00 00 2c 89 00 00     %...M...M5..,...
    8874:	91 8b 00 00 71 34 00 00 35 89 00 00 d6 8b 00 00     ....q4..5.......
    8884:	9d 35 00 00 3d 89 00 00 24 8c 00 00 13 37 00 00     .5..=...$....7..
    8894:	45 89 00 00 30 88 00 00 45 36 00 00 00 00 00 00     E...0...E6......
    88a4:	00 00 00 00 00 00 00 00 1b 5b 31 3b 33 32 6d 49     .........[1;32mI
    88b4:	4e 46 4f 1b 5b 30 6d 20 2d 20 53 65 6e 64 69 6e     NFO.[0m - Sendin
    88c4:	67 20 2d 20 00 4c 43 44 5f 6c 61 79 65 72 53 74     g - .LCD_layerSt
    88d4:	61 63 6b 45 78 61 63 74 5f 63 61 70 61 62 69 6c     ackExact_capabil
    88e4:	69 74 79 28 6e 75 6d 2c 6c 61 79 65 72 31 2c 6c     ity(num,layer1,l
    88f4:	61 79 65 72 32 2c 6c 61 79 65 72 33 2c 6c 61 79     ayer2,layer3,lay
    8904:	65 72 34 29 00 4c 43 44 5f 6c 61 79 65 72 53 74     er4).LCD_layerSt
    8914:	61 63 6b 5f 63 61 70 61 62 69 6c 69 74 79 28 29     ack_capability()
    8924:	00 6c 63 64 43 6d 64 00 6c 63 64 43 6f 6c 6f 72     .lcdCmd.lcdColor
    8934:	00 6c 63 64 44 69 73 70 00 6c 63 64 49 6e 69 74     .lcdDisp.lcdInit
    8944:	00 6c 63 64 54 65 73 74 00                          .lcdTest.

0000894d <lcdCmdCLIDict_DescEntry>:
    894d:	53 65 6e 64 20 62 79 74 65 20 76 69 61 20 53 50     Send byte via SP
    895d:	49 2c 20 73 65 63 6f 6e 64 20 61 72 67 75 6d 65     I, second argume
    896d:	6e 74 20 65 6e 61 62 6c 65 73 20 61 30 2e 20 44     nt enables a0. D
    897d:	65 66 61 75 6c 74 73 20 74 6f 20 63 6f 6e 74 72     efaults to contr
    898d:	6f 6c 2e 00                                         ol..

00008991 <STLcdDefaultImage>:
    8991:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    89a1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    89b1:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    89c1:	c0 c0 c0 c0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
    89d1:	ff ff ff ff ff 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    89e1:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    89f1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a01:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a11:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a21:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a31:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8a41:	03 03 03 03 03 00 00 00 00 00 00 00 00 00 00 00     ................
    8a51:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8a61:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a71:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a81:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a91:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8aa1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8ab1:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8ac1:	c0 c0 c0 c0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
    8ad1:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8ae1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8af1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8b01:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8b11:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8b21:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8b31:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8b41:	03 03 03 03 03 00 00 00 00 00 00 00 00 00 00 00     ................
    8b51:	ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8b61:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8b71:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8b81:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00008b91 <lcdColorCLIDict_DescEntry>:
    8b91:	53 65 74 20 62 61 63 6b 6c 69 67 68 74 20 63 6f     Set backlight co
    8ba1:	6c 6f 72 2e 20 33 20 31 36 2d 62 69 74 20 6e 75     lor. 3 16-bit nu
    8bb1:	6d 62 65 72 73 3a 20 52 20 47 20 42 2e 20 69 2e     mbers: R G B. i.
    8bc1:	65 2e 20 30 78 46 46 46 20 30 78 31 34 34 34 20     e. 0xFFF 0x1444 
    8bd1:	30 78 33 32 00                                      0x32.

00008bd6 <lcdDispCLIDict_DescEntry>:
    8bd6:	57 72 69 74 65 20 62 79 74 65 28 73 29 20 74 6f     Write byte(s) to
    8be6:	20 67 69 76 65 6e 20 70 61 67 65 20 73 74 61 72      given page star
    8bf6:	74 69 6e 67 20 61 74 20 67 69 76 65 6e 20 61 64     ting at given ad
    8c06:	64 72 65 73 73 2e 20 69 2e 65 2e 20 30 78 31 20     dress. i.e. 0x1 
    8c16:	30 78 35 20 30 78 46 46 20 30 78 30 30 00           0x5 0xFF 0x00.

00008c24 <lcdInitCLIDict_DescEntry>:
    8c24:	52 65 2d 69 6e 69 74 69 61 6c 69 7a 65 20 74 68     Re-initialize th
    8c34:	65 20 4c 43 44 20 64 69 73 70 6c 61 79 2e 00 00     e LCD display...
    8c44:	f7 91 00 00 02 92 00 00 0c 92 00 00 1a 92 00 00     ................
    8c54:	23 92 00 00 2c 92 00 00 36 92 00 00 47 92 00 00     #...,...6...G...
    8c64:	54 92 00 00 16 01 16 01 01 00 01 05 00 03 16 00     T...............

00008c74 <uartConnectCLIDict>:
    8c74:	60 92 00 00 74 93 00 00 4d 43 00 00 6b 92 00 00     `...t...MC..k...
    8c84:	d4 8c 00 00 11 3a 00 00 76 92 00 00 e0 93 00 00     .....:..v.......
    8c94:	d9 44 00 00 81 92 00 00 ad 92 00 00 49 3b 00 00     .D..........I;..
    8ca4:	8c 92 00 00 fb 92 00 00 e9 3c 00 00 97 92 00 00     .........<......
    8cb4:	39 93 00 00 59 45 00 00 a2 92 00 00 f3 8c 00 00     9...YE..........
    8cc4:	a1 3b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .;..............

00008cd4 <connectDbgCLIDict_DescEntry>:
    8cd4:	54 6f 67 67 6c 65 20 55 41 52 54 43 6f 6e 6e 65     Toggle UARTConne
    8ce4:	63 74 20 64 65 62 75 67 20 6d 6f 64 65 2e 00        ct debug mode..

00008cf3 <connectStsCLIDict_DescEntry>:
    8cf3:	55 41 52 54 43 6f 6e 6e 65 63 74 20 73 74 61 74     UARTConnect stat
    8d03:	75 73 2e 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47     us...[1;35mDEBUG
    8d13:	1b 5b 30 6d 20 2d 20 41 6e 69 6d 61 74 69 6f 6e     .[0m - Animation
    8d23:	0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b     ....[1;32mINFO.[
    8d33:	30 6d 20 2d 20 43 6f 6e 6e 65 63 74 20 44 65 62     0m - Connect Deb
    8d43:	75 67 20 4d 6f 64 65 20 54 6f 67 67 6c 65 00 1b     ug Mode Toggle..
    8d53:	5b 31 3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20     [1;35mDEBUG.[0m 
    8d63:	2d 20 50 45 4e 44 49 4e 47 20 53 45 54 20 2d 3e     - PENDING SET ->
    8d73:	20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47      ..[1;33mWARNING
    8d83:	1b 5b 30 6d 20 2d 20 43 61 62 6c 65 20 46 61 75     .[0m - Cable Fau
    8d93:	6c 74 21 0d 0a 00 20 53 6c 61 76 65 20 00 20 4d     lt!... Slave . M
    8da3:	61 73 74 65 72 20 00 1b 5b 31 3b 33 35 6d 44 45     aster ..[1;35mDE
    8db3:	42 55 47 1b 5b 30 6d 20 2d 20 43 41 42 4c 45 43     BUG.[0m - CABLEC
    8dc3:	48 45 43 4b 20 52 45 43 45 49 56 45 20 2d 20 00     HECK RECEIVE - .
    8dd3:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    8de3:	2d 20 4c 69 73 74 20 6f 66 20 55 41 52 54 43 6f     - List of UARTCo
    8df3:	6e 6e 65 63 74 20 63 6f 6d 6d 61 6e 64 73 00 4d     nnect commands.M
    8e03:	61 73 74 65 72 00 53 6c 61 76 65 00 1b 5b 31 3b     aster.Slave..[1;
    8e13:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 55 41     32mINFO.[0m - UA
    8e23:	52 54 43 6f 6e 6e 65 63 74 20 53 74 61 74 75 73     RTConnect Status
    8e33:	00 0d 0a 44 65 76 69 63 65 20 54 79 70 65 3a 09     ...Device Type:.
    8e43:	00 0d 0a 44 65 76 69 63 65 20 49 64 3a 09 00 0d     ...Device Id:...
    8e53:	0a 4d 61 78 20 49 64 3a 09 00 0d 0a 4d 61 73 74     .Max Id:....Mast
    8e63:	65 72 20 3c 3d 0d 0a 09 53 74 61 74 75 73 3a 09     er <=...Status:.
    8e73:	00 0d 0a 09 46 61 75 6c 74 73 3a 09 00 2f 00 0d     ....Faults:../..
    8e83:	0a 09 52 78 3a 09 00 0d 0a 09 54 78 3a 09 00 0d     ..Rx:.....Tx:...
    8e93:	0a 53 6c 61 76 65 20 3c 3d 0d 0a 09 53 74 61 74     .Slave <=...Stat
    8ea3:	75 73 3a 09 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     us:...[1;32mINFO
    8eb3:	1b 5b 30 6d 20 2d 20 53 65 74 74 69 6e 67 20 64     .[0m - Setting d
    8ec3:	65 76 69 63 65 20 61 73 20 73 6c 61 76 65 2e 00     evice as slave..
    8ed3:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    8ee3:	2d 20 53 65 74 74 69 6e 67 20 64 65 76 69 63 65     - Setting device
    8ef3:	20 61 73 20 6d 61 73 74 65 72 2e 00 1b 5b 31 3b      as master...[1;
    8f03:	33 33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d     33mWARNING.[0m -
    8f13:	20 54 6f 6f 20 6d 75 63 68 20 64 61 74 61 20 74      Too much data t
    8f23:	6f 20 73 65 6e 64 20 6f 6e 20 55 41 52 54 00 2c     o send on UART.,
    8f33:	20 77 61 69 74 69 6e 67 2e 2e 2e 0d 0a 00 20 2b      waiting...... +
    8f43:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    8f53:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 53 63     [0m - Invalid Sc
    8f63:	61 6e 43 6f 64 65 20 64 69 72 65 63 74 69 6f 6e     anCode direction
    8f73:	2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 33 6d 57 41 52     .......[1;33mWAR
    8f83:	4e 49 4e 47 1b 5b 30 6d 20 2d 20 4e 6f 74 20 65     NING.[0m - Not e
    8f93:	6e 6f 75 67 68 20 69 6e 74 65 72 63 6f 6e 6e 65     nough interconne
    8fa3:	63 74 20 6c 61 79 6f 75 74 20 6e 6f 64 65 73 20     ct layout nodes 
    8fb3:	63 6f 6e 66 69 67 75 72 65 64 3a 20 00 1b 5b 31     configured: ..[1
    8fc3:	3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20     ;35mDEBUG.[0m - 
    8fd3:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    8fe3:	5b 30 6d 20 2d 20 54 6f 6f 20 62 69 67 20 6f 66     [0m - Too big of
    8ff3:	20 61 20 63 6f 6d 6d 61 6e 64 20 74 6f 20 66 69      a command to fi
    9003:	74 20 69 6e 74 6f 20 74 68 65 20 62 75 66 66 65     t into the buffe
    9013:	72 2e 2e 2e 00 1b 5b 31 3b 35 3b 33 31 6d 45 52     r.....[1;5;31mER
    9023:	52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76 61 6c 69     ROR.[0m - Invali
    9033:	64 20 55 41 52 54 20 74 6f 20 73 65 6e 64 20 66     d UART to send f
    9043:	72 6f 6d 2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 35 6d     rom.......[1;35m
    9053:	44 45 42 55 47 1b 5b 30 6d 20 2d 20 49 64 52 65     DEBUG.[0m - IdRe
    9063:	71 75 65 73 74 0d 0a 00 1b 5b 31 3b 35 3b 33 31     quest....[1;5;31
    9073:	6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76     mERROR.[0m - Inv
    9083:	61 6c 69 64 20 49 64 52 65 71 75 65 73 74 20 64     alid IdRequest d
    9093:	69 72 65 63 74 69 6f 6e 2e 2e 2e 0d 0a 00 1b 5b     irection.......[
    90a3:	31 3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d     1;35mDEBUG.[0m -
    90b3:	20 49 64 45 6e 75 6d 65 72 61 74 69 6f 6e 0d 0a      IdEnumeration..
    90c3:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    90d3:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 49 64     [0m - Invalid Id
    90e3:	45 6e 75 6d 65 72 61 74 69 6f 6e 20 64 69 72 65     Enumeration dire
    90f3:	63 74 69 6f 6e 2e 2e 2e 0d 0a 00 1b 5b 31 3b 33     ction.......[1;3
    9103:	35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20 49 64     5mDEBUG.[0m - Id
    9113:	52 65 70 6f 72 74 0d 0a 00 1b 5b 31 3b 33 32 6d     Report....[1;32m
    9123:	49 4e 46 4f 1b 5b 30 6d 20 2d 20 49 64 20 52 65     INFO.[0m - Id Re
    9133:	70 6f 72 74 65 64 3a 20 00 1b 5b 31 3b 33 32 6d     ported: ..[1;32m
    9143:	49 4e 46 4f 1b 5b 30 6d 20 2d 20 53 65 6e 64 69     INFO.[0m - Sendi
    9153:	6e 67 20 53 79 6e 63 20 49 64 6c 65 73 2e 2e 2e     ng Sync Idles...
    9163:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    9173:	20 2d 20 52 65 73 65 74 74 69 6e 67 20 55 41 52      - Resetting UAR
    9183:	54 43 6f 6e 6e 65 63 74 20 73 74 61 74 65 2e 2e     TConnect state..
    9193:	2e 00 20 57 61 69 74 20 00 20 53 59 4e 20 00 20     .. Wait . SYN . 
    91a3:	53 4f 48 20 00 20 23 23 23 20 00 20 43 4d 44 20     SOH . ### . CMD 
    91b3:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    91c3:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 55 41     [0m - Invalid UA
    91d3:	52 54 53 74 61 74 75 73 2e 2e 2e 00 54 78 46 49     RTStatus....TxFI
    91e3:	46 4f 20 30 20 2d 20 00 54 78 46 49 46 4f 20 31     FO 0 - .TxFIFO 1
    91f3:	20 2d 20 00 43 61 62 6c 65 43 68 65 63 6b 00 49      - .CableCheck.I
    9203:	64 52 65 71 75 65 73 74 00 49 64 45 6e 75 6d 65     dRequest.IdEnume
    9213:	72 61 74 69 6f 6e 00 49 64 52 65 70 6f 72 74 00     ration.IdReport.
    9223:	53 63 61 6e 43 6f 64 65 00 41 6e 69 6d 61 74 69     ScanCode.Animati
    9233:	6f 6e 00 52 65 6d 6f 74 65 43 61 70 61 62 69 6c     on.RemoteCapabil
    9243:	69 74 79 00 52 65 6d 6f 74 65 4f 75 74 70 75 74     ity.RemoteOutput
    9253:	00 52 65 6d 6f 74 65 49 6e 70 75 74 00 63 6f 6e     .RemoteInput.con
    9263:	6e 65 63 74 43 6d 64 00 63 6f 6e 6e 65 63 74 44     nectCmd.connectD
    9273:	62 67 00 63 6f 6e 6e 65 63 74 49 64 6c 00 63 6f     bg.connectIdl.co
    9283:	6e 6e 65 63 74 4c 73 74 00 63 6f 6e 6e 65 63 74     nnectLst.connect
    9293:	4d 73 74 00 63 6f 6e 6e 65 63 74 52 73 74 00 63     Mst.connectRst.c
    92a3:	6f 6e 6e 65 63 74 53 74 73 00                       onnectSts.

000092ad <connectLstCLIDict_DescEntry>:
    92ad:	4c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 20     Lists available 
    92bd:	55 41 52 54 43 6f 6e 6e 65 63 74 20 63 6f 6d 6d     UARTConnect comm
    92cd:	61 6e 64 73 20 61 6e 64 20 69 6e 64 65 78 20 69     ands and index i
    92dd:	64 00                                               d.

000092df <uartConnectCLIDictName>:
    92df:	55 41 52 54 43 6f 6e 6e 65 63 74 20 4d 6f 64 75     UARTConnect Modu
    92ef:	6c 65 20 43 6f 6d 6d 61 6e 64 73 00                 le Commands.

000092fb <connectMstCLIDict_DescEntry>:
    92fb:	53 65 74 73 20 74 68 65 20 64 65 76 69 63 65 20     Sets the device 
    930b:	61 73 20 6d 61 73 74 65 72 2e 20 55 73 65 20 61     as master. Use a
    931b:	72 67 75 6d 65 6e 74 20 6f 66 20 73 20 74 6f 20     rgument of s to 
    932b:	73 65 74 20 61 73 20 73 6c 61 76 65 2e 00           set as slave..

00009339 <connectRstCLIDict_DescEntry>:
    9339:	52 65 73 65 74 73 20 62 6f 74 68 20 52 78 20 61     Resets both Rx a
    9349:	6e 64 20 54 78 20 63 6f 6e 6e 65 63 74 20 62 75     nd Tx connect bu
    9359:	66 66 65 72 73 20 61 6e 64 20 73 74 61 74 65 20     ffers and state 
    9369:	76 61 72 69 61 62 6c 65 73 2e 00                    variables..

00009374 <connectCmdCLIDict_DescEntry>:
    9374:	53 65 6e 64 73 20 61 20 63 6f 6d 6d 61 6e 64 20     Sends a command 
    9384:	76 69 61 20 55 41 52 54 20 43 6f 6e 6e 65 63 74     via UART Connect
    9394:	2c 20 66 69 72 73 74 20 61 72 67 20 69 73 20 77     , first arg is w
    93a4:	68 69 63 68 20 75 61 72 74 2c 20 6e 65 78 74 20     hich uart, next 
    93b4:	61 72 67 20 69 73 20 74 68 65 20 63 6f 6d 6d 61     arg is the comma
    93c4:	6e 64 2c 20 72 65 73 74 20 61 72 65 20 74 68 65     nd, rest are the
    93d4:	20 61 72 67 75 6d 65 6e 74 73 2e 00                  arguments..

000093e0 <connectIdlCLIDict_DescEntry>:
    93e0:	53 65 6e 64 73 20 4e 20 6e 75 6d 62 65 72 20 6f     Sends N number o
    93f0:	66 20 49 64 6c 65 20 63 6f 6d 6d 61 6e 64 73 2c     f Idle commands,
    9400:	20 32 20 69 73 20 74 68 65 20 64 65 66 61 75 6c      2 is the defaul
    9410:	74 20 76 61 6c 75 65 2c 20 61 6e 64 20 73 68 6f     t value, and sho
    9420:	75 6c 64 20 62 65 20 73 75 66 66 69 63 69 65 6e     uld be sufficien
    9430:	74 20 69 6e 20 6d 6f 73 74 20 63 61 73 65 73 2e     t in most cases.
    9440:	00                                                  .

00009441 <rm17_guide>:
    9441:	01 0e 34 00                                         ..4.

00009445 <rm34_guide>:
    9445:	01 0e 37 00                                         ..7.

00009449 <rm3_guide>:
    9449:	01 0e 04 00                                         ....

0000944d <tm34_guide>:
    944d:	01 00 01 25 00 00 00                                ...%...

00009454 <CapabilitiesList>:
    9454:	31 38 00 00 09 00 00 00 49 39 00 00 00 00 00 00     18......I9......
    9464:	a9 2e 00 00 04 00 00 00 d9 50 00 00 02 00 00 00     .........P......
    9474:	01 51 00 00 02 00 00 00 29 51 00 00 01 00 00 00     .Q......)Q......
    9484:	b1 50 00 00 02 00 00 00 89 50 00 00 03 00 00 00     .P.......P......
    9494:	85 5e 00 00 02 00 00 00 49 5f 00 00 00 00 00 00     .^......I_......
    94a4:	8d 5f 00 00 00 00 00 00 bd 5f 00 00 00 00 00 00     ._......._......
    94b4:	dd 5e 00 00 00 00 00 00 f1 5e 00 00 01 00 00 00     .^.......^......
    94c4:	f1 5f 00 00 01 00 00 00                             ._......

000094cc <rm36_guide>:
    94cc:	01 0e 36 00                                         ..6.

000094d0 <rm60_guide>:
    94d0:	01 0e 26 00                                         ..&.

000094d4 <tm36_guide>:
    94d4:	01 00 01 3b 00                                      ...;.

000094d9 <tm60_guide>:
    94d9:	01 00 01 35 00                                      ...5.

000094de <rm5_guide>:
    94de:	01 0e 18 00                                         ....

000094e2 <rm38_guide>:
    94e2:	01 0e 0f 00                                         ....

000094e6 <rm62_guide>:
    94e6:	01 0e 21 00                                         ..!.

000094ea <tm38_guide>:
    94ea:	01 00 01 52 00                                      ...R.

000094ef <tm62_guide>:
    94ef:	01 00 01 45 00                                      ...E.

000094f4 <rm25_guide>:
    94f4:	01 0e e3 00                                         ....

000094f8 <rm64_guide>:
    94f8:	01 0e 27 00                                         ..'.

000094fc <tm64_guide>:
    94fc:	01 00 01 04 00                                      .....

00009501 <rm35_guide>:
    9501:	01 0e 15 00                                         ....

00009505 <keyReleaseCLIDict_DescEntry>:
    9505:	53 65 6e 64 20 6b 65 79 2d 72 65 6c 65 61 73 65     Send key-release
    9515:	20 65 76 65 6e 74 20 74 6f 20 6d 61 63 72 6f 20      event to macro 
    9525:	6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69 63 61 74     module. Duplicat
    9535:	65 73 20 68 61 76 65 20 75 6e 64 65 66 69 6e 65     es have undefine
    9545:	64 20 62 65 68 61 76 69 6f 75 72 2e 0d 0a 09 09     d behaviour.....
    9555:	1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20 53 63 61     .[35mS10.[0m Sca
    9565:	6e 63 6f 64 65 20 30 78 30 41 00                    ncode 0x0A.

00009570 <default_tl_0x54>:
    9570:	01 00 00 00 15 00 00 00                             ........

00009578 <default_tl_0x1C>:
    9578:	01 00 00 00 3d 00 00 00                             ....=...

00009580 <rm15_guide>:
    9580:	01 0e 17 00                                         ....

00009584 <tm3_guide>:
    9584:	01 00 01 46 00                                      ...F.

00009589 <tm66_guide>:
    9589:	01 00 01 1d 00                                      .....

0000958e <rm19_guide>:
    958e:	01 0e 38 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b     ..8..[1;32mINFO.
    959e:	5b 30 6d 20 2d 20 43 61 70 61 62 69 6c 69 74 69     [0m - Capabiliti
    95ae:	65 73 20 4c 69 73 74 20 00 0d 0a 09 00 1b 5b 31     es List ......[1
    95be:	3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 4b     ;32mINFO.[0m - K
    95ce:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    95de:	20 2d 20 4c 61 79 65 72 20 44 65 62 75 67 20 4d      - Layer Debug M
    95ee:	6f 64 65 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e 46     ode: ..[1;32mINF
    95fe:	4f 1b 5b 30 6d 20 2d 20 53 65 74 74 69 6e 67 20     O.[0m - Setting 
    960e:	4c 61 79 65 72 20 4c 00 20 74 6f 20 2d 20 00 1b     Layer L. to - ..
    961e:	5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d     [1;32mINFO.[0m -
    962e:	20 4d 61 63 72 6f 20 44 65 62 75 67 20 4d 6f 64      Macro Debug Mod
    963e:	65 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b     e: ..[1;32mINFO.
    964e:	5b 30 6d 20 2d 20 4d 61 63 72 6f 20 50 72 6f 63     [0m - Macro Proc
    965e:	65 73 73 69 6e 67 20 4d 6f 64 65 3a 20 00 1b 5b     essing Mode: ..[
    966e:	31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20     1;32mINFO.[0m - 
    967e:	4c 61 79 65 72 20 4c 69 73 74 00 44 3a 20 52 65     Layer List.D: Re
    968e:	6d 6f 74 65 52 65 6c 6f 61 64 20 2b 20 4d 44 45     moteReload + MDE
    969e:	72 67 6f 31 20 2b 20 6c 63 64 46 75 6e 63 4d 61     rgo1 + lcdFuncMa
    96ae:	70 00 20 1b 5b 31 6d 28 64 65 66 61 75 6c 74 29     p. .[1m(default)
    96be:	1b 5b 30 6d 00 0d 0a 09 09 20 4c 61 79 65 72 20     .[0m..... Layer 
    96ce:	53 74 61 74 65 3a 20 00 20 46 69 72 73 74 20 2d     State: . First -
    96de:	3e 20 4c 61 73 74 20 49 6e 64 69 63 65 73 3a 20     > Last Indices: 
    96ee:	00 31 3a 20 64 65 66 61 75 6c 74 00 1b 5b 31 3b     .1: default..[1;
    96fe:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 50 65     32mINFO.[0m - Pe
    970e:	6e 64 69 6e 67 20 4b 65 79 20 45 76 65 6e 74 73     nding Key Events
    971e:	3a 20 00 20 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e     : . : ..[1;32mIN
    972e:	46 4f 1b 5b 30 6d 20 2d 20 50 65 6e 64 69 6e 67     FO.[0m - Pending
    973e:	20 54 72 69 67 67 65 72 20 4d 61 63 72 6f 73 3a      Trigger Macros:
    974e:	20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30      ..[1;32mINFO.[0
    975e:	6d 20 2d 20 50 65 6e 64 69 6e 67 20 52 65 73 75     m - Pending Resu
    976e:	6c 74 20 4d 61 63 72 6f 73 3a 20 00 1b 5b 31 3b     lt Macros: ..[1;
    977e:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 54 72     32mINFO.[0m - Tr
    978e:	69 67 67 65 72 20 4d 61 63 72 6f 73 20 52 61 6e     igger Macros Ran
    979e:	67 65 3a 20 54 30 20 2d 3e 20 54 00 1b 5b 31 3b     ge: T0 -> T..[1;
    97ae:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 52 65     32mINFO.[0m - Re
    97be:	73 75 6c 74 20 20 4d 61 63 72 6f 73 20 52 61 6e     sult  Macros Ran
    97ce:	67 65 3a 20 52 30 20 2d 3e 20 52 00 1b 5b 31 3b     ge: R0 -> R..[1;
    97de:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 54 72     32mINFO.[0m - Tr
    97ee:	69 67 67 65 72 20 3a 20 52 65 73 75 6c 74 20 4d     igger : Result M
    97fe:	61 63 72 6f 20 50 61 69 72 73 00 09 54 00 20 3a     acro Pairs..T. :
    980e:	20 52 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47 1b      R..[1;35mDEBUG.
    981e:	5b 30 6d 20 2d 20 4c 61 79 65 72 20 00 20 30 00     [0m - Layer . 0.
    982e:	4d 61 63 72 6f 5f 6c 61 79 65 72 53 74 61 74 65     Macro_layerState
    983e:	28 6c 61 79 65 72 49 6e 64 65 78 2c 6c 61 79 65     (layerIndex,laye
    984e:	72 53 74 61 74 65 29 00 4d 61 63 72 6f 5f 6c 61     rState).Macro_la
    985e:	79 65 72 53 68 69 66 74 28 6c 61 79 65 72 49 6e     yerShift(layerIn
    986e:	64 65 78 29 00 4d 61 63 72 6f 5f 6c 61 79 65 72     dex).Macro_layer
    987e:	4c 61 74 63 68 28 6c 61 79 65 72 49 6e 64 65 78     Latch(layerIndex
    988e:	29 00 4d 61 63 72 6f 5f 6c 61 79 65 72 4c 6f 63     ).Macro_layerLoc
    989e:	6b 28 6c 61 79 65 72 49 6e 64 65 78 29 00 4d 61     k(layerIndex).Ma
    98ae:	63 72 6f 5f 6c 61 79 65 72 52 6f 74 61 74 65 28     cro_layerRotate(
    98be:	70 72 65 76 69 6f 75 73 29 00 1b 5b 31 3b 35 3b     previous)..[1;5;
    98ce:	33 31 6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 53     31mERROR.[0m - S
    98de:	63 61 6e 20 43 6f 64 65 20 68 61 73 20 6e 6f 20     can Code has no 
    98ee:	64 65 66 69 6e 65 64 20 54 72 69 67 67 65 72 20     defined Trigger 
    98fe:	4d 61 63 72 6f 3a 20 00 1b 5b 31 3b 35 3b 33 31     Macro: ..[1;5;31
    990e:	6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76     mERROR.[0m - Inv
    991e:	61 6c 69 64 20 6b 65 79 20 73 74 61 74 65 20 2d     alid key state -
    992e:	20 00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52      ..[1;5;31mERROR
    993e:	1b 5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 74     .[0m - Invalid t
    994e:	79 70 65 20 2d 20 00 1b 5b 31 3b 33 33 6d 57 41     ype - ..[1;33mWA
    995e:	52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 53 63 61 6e     RNING.[0m - Scan
    996e:	43 6f 64 65 20 69 73 20 6f 75 74 20 6f 66 20 72     Code is out of r
    997e:	61 6e 67 65 2f 6e 6f 74 20 64 65 66 69 6e 65 64     ange/not defined
    998e:	20 2d 20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49      - ..[1;33mWARNI
    999e:	4e 47 1b 5b 30 6d 20 2d 20 53 63 61 6e 43 6f 64     NG.[0m - ScanCod
    99ae:	65 20 69 73 20 6f 75 74 20 6f 66 20 72 61 6e 67     e is out of rang
    99be:	65 2f 6e 6f 74 20 64 65 66 69 6e 65 64 3a 20 00     e/not defined: .
    99ce:	1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b     .[1;5;31mERROR.[
    99de:	30 6d 20 2d 20 4c 45 44 20 53 74 61 74 65 20 54     0m - LED State T
    99ee:	79 70 65 20 2d 20 4e 6f 74 20 69 6d 70 6c 65 6d     ype - Not implem
    99fe:	65 6e 74 65 64 2e 2e 2e 0d 0a 00 1b 5b 31 3b 35     ented.......[1;5
    9a0e:	3b 33 31 6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20     ;31mERROR.[0m - 
    9a1e:	41 6e 61 6c 6f 67 20 53 74 61 74 65 20 54 79 70     Analog State Typ
    9a2e:	65 20 2d 20 4e 6f 74 20 69 6d 70 6c 65 6d 65 6e     e - Not implemen
    9a3e:	74 65 64 2e 2e 2e 0d 0a 00 1b 5b 31 3b 35 3b 33     ted.......[1;5;3
    9a4e:	31 6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 6e     1mERROR.[0m - In
    9a5e:	76 61 6c 69 64 20 53 74 61 74 65 20 54 79 70 65     valid State Type
    9a6e:	2e 20 54 68 69 73 20 69 73 20 61 20 62 75 67 2e     . This is a bug.
    9a7e:	0d 0a 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47 1b     ....[1;35mDEBUG.
    9a8e:	5b 30 6d 20 2d 20 4d 61 63 72 6f 20 53 74 65 70     [0m - Macro Step
    9a9e:	0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b     ....[1;32mINFO.[
    9aae:	30 6d 20 2d 20 54 72 69 67 67 65 72 20 4d 61 63     0m - Trigger Mac
    9abe:	72 6f 20 49 6e 64 65 78 3a 20 00 7c 00 3b 00 0d     ro Index: .|.;..
    9ace:	0a 50 6f 73 69 74 69 6f 6e 3a 20 00 0d 0a 52 65     .Position: ...Re
    9ade:	73 75 6c 74 20 4d 61 63 72 6f 20 49 6e 64 65 78     sult Macro Index
    9aee:	3a 20 00 0d 0a 54 72 69 67 67 65 72 20 4d 61 63     : ...Trigger Mac
    9afe:	72 6f 20 53 74 61 74 65 3a 20 00 57 61 69 74 69     ro State: .Waiti
    9b0e:	6e 67 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b     ng..[1;32mINFO.[
    9b1e:	30 6d 20 2d 20 52 65 73 75 6c 74 20 4d 61 63 72     0m - Result Macr
    9b2e:	6f 20 49 6e 64 65 78 3a 20 00 28 00 2c 00 0d 0a     o Index: .(.,...
    9b3e:	46 69 6e 61 6c 20 54 72 69 67 67 65 72 20 53 74     Final Trigger St
    9b4e:	61 74 65 20 28 53 74 61 74 65 2f 54 79 70 65 29     ate (State/Type)
    9b5e:	3a 20 00 63 61 70 4c 69 73 74 00 63 61 70 53 65     : .capList.capSe
    9b6e:	6c 65 63 74 00 6b 65 79 48 6f 6c 64 00 6b 65 79     lect.keyHold.key
    9b7e:	50 72 65 73 73 00 6b 65 79 52 65 6c 65 61 73 65     Press.keyRelease
    9b8e:	00 6c 61 79 65 72 44 65 62 75 67 00 6c 61 79 65     .layerDebug.laye
    9b9e:	72 4c 69 73 74 00 6c 61 79 65 72 53 74 61 74 65     rList.layerState
    9bae:	00 6d 61 63 72 6f 44 65 62 75 67 00 6d 61 63 72     .macroDebug.macr
    9bbe:	6f 4c 69 73 74 00 6d 61 63 72 6f 50 72 6f 63 00     oList.macroProc.
    9bce:	6d 61 63 72 6f 53 68 6f 77 00 6d 61 63 72 6f 53     macroShow.macroS
    9bde:	74 65 70 00                                         tep.

00009be2 <rm20_guide>:
    9be2:	01 0e 2c 00                                         ..,.

00009be6 <macroProcCLIDict_DescEntry>:
    9be6:	50 61 75 73 65 2f 52 65 73 75 6d 65 20 6d 61 63     Pause/Resume mac
    9bf6:	72 6f 20 70 72 6f 63 65 73 73 69 6e 67 2e 00        ro processing..

00009c05 <tm15_guide>:
    9c05:	01 00 01 53 00                                      ...S.

00009c0a <rm68_guide>:
    9c0a:	01 0e e0 00                                         ....

00009c0e <rm41_guide>:
    9c0e:	01 0e 14 00                                         ....

00009c12 <tm17_guide>:
    9c12:	01 00 01 57 00                                      ...W.

00009c17 <tm68_guide>:
    9c17:	01 00 01 58 00                                      ...X.

00009c1c <tm31_guide>:
    9c1c:	01 00 01 28 00                                      ...(.

00009c21 <keyPressCLIDict_DescEntry>:
    9c21:	53 65 6e 64 20 6b 65 79 2d 70 72 65 73 73 20 65     Send key-press e
    9c31:	76 65 6e 74 73 20 74 6f 20 74 68 65 20 6d 61 63     vents to the mac
    9c41:	72 6f 20 6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69     ro module. Dupli
    9c51:	63 61 74 65 73 20 68 61 76 65 20 75 6e 64 65 66     cates have undef
    9c61:	69 6e 65 64 20 62 65 68 61 76 69 6f 75 72 2e 0d     ined behaviour..
    9c71:	0a 09 09 1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20     ....[35mS10.[0m 
    9c81:	53 63 61 6e 63 6f 64 65 20 30 78 30 41 00           Scancode 0x0A.

00009c8f <macroCLIDictName>:
    9c8f:	4d 61 63 72 6f 20 4d 6f 64 75 6c 65 20 43 6f 6d     Macro Module Com
    9c9f:	6d 61 6e 64 73 00 00 00 00                          mands....

00009ca8 <layer1_tl_0x00>:
    9ca8:	00 00 00 00                                         ....

00009cac <rm43_guide>:
    9cac:	01 0e 1b 00                                         ....

00009cb0 <tm19_guide>:
    9cb0:	01 00 01 2b 00                                      ...+.

00009cb5 <tm43_guide>:
    9cb5:	01 00 01 39 00                                      ...9.

00009cba <rm8_guide>:
    9cba:	01 0e 51 00                                         ..Q.

00009cbe <rm23_guide>:
    9cbe:	01 0e 31 00                                         ..1.

00009cc2 <layerDebugCLIDict_DescEntry>:
    9cc2:	4c 61 79 65 72 20 64 65 62 75 67 20 6d 6f 64 65     Layer debug mode
    9cd2:	2e 20 53 68 6f 77 73 20 6c 61 79 65 72 20 73 74     . Shows layer st
    9ce2:	61 63 6b 20 61 6e 64 20 61 6e 79 20 63 68 61 6e     ack and any chan
    9cf2:	67 65 73 2e 00                                      ges..

00009cf7 <rm54_guide>:
    9cf7:	01 0e 10 00                                         ....

00009cfb <rm7_guide>:
    9cfb:	01 0e e1 00                                         ....

00009cff <rm45_guide>:
    9cff:	01 0e 33 00                                         ..3.

00009d03 <rm37_guide>:
    9d03:	01 0e 19 00                                         ....

00009d07 <tm45_guide>:
    9d07:	01 00 01 4e 00                                      ...N.

00009d0c <default_tl_0x2E>:
    9d0c:	00 00 00 00                                         ....

00009d10 <rm27_guide>:
    9d10:	02 05 00 01 00                                      .....

00009d15 <tm23_guide>:
    9d15:	01 00 01 18 00                                      .....

00009d1a <rm47_guide>:
    9d1a:	01 0e e7 00                                         ....

00009d1e <rm10_guide>:
    9d1e:	01 0e 08 00                                         ....

00009d22 <macroShowCLIDict_DescEntry>:
    9d22:	53 68 6f 77 20 74 68 65 20 6d 61 63 72 6f 20 63     Show the macro c
    9d32:	6f 72 72 65 73 70 6f 6e 64 69 6e 67 20 74 6f 20     orresponding to 
    9d42:	74 68 65 20 67 69 76 65 6e 20 69 6e 64 65 78 2e     the given index.
    9d52:	0d 0a 09 09 1b 5b 33 35 6d 54 31 36 1b 5b 30 6d     .....[35mT16.[0m
    9d62:	20 49 6e 64 65 78 65 64 20 54 72 69 67 67 65 72      Indexed Trigger
    9d72:	20 4d 61 63 72 6f 20 30 78 31 30 2c 20 1b 5b 33      Macro 0x10, .[3
    9d82:	35 6d 52 31 32 1b 5b 30 6d 20 49 6e 64 65 78 65     5mR12.[0m Indexe
    9d92:	64 20 52 65 73 75 6c 74 20 4d 61 63 72 6f 20 30     d Result Macro 0
    9da2:	78 30 43 00                                         x0C.

00009da6 <tm47_guide>:
    9da6:	01 00 01 4b 00                                      ...K.

00009dab <tm10_guide>:
    9dab:	01 00 01 44 00                                      ...D.

00009db0 <tm71_guide>:
    9db0:	01 00 01 2c 00 00 00 00                             ...,....

00009db8 <default_tl_0x02>:
    9db8:	01 00 00 00 06 00 00 00                             ........

00009dc0 <default_tl_0x03>:
    9dc0:	01 00 00 00 0d 00 00 00                             ........

00009dc8 <default_tl_0x04>:
    9dc8:	01 00 00 00 40 00 00 00                             ....@...

00009dd0 <default_tl_0x05>:
    9dd0:	01 00 00 00 45 00 00 00                             ....E...

00009dd8 <default_tl_0x06>:
    9dd8:	01 00 00 00 00 00 00 00                             ........

00009de0 <default_tl_0x07>:
    9de0:	01 00 00 00 34 00 00 00                             ....4...

00009de8 <default_tl_0x08>:
    9de8:	01 00 00 00 39 00 00 00                             ....9...

00009df0 <default_tl_0x09>:
    9df0:	00 00 00 00                                         ....

00009df4 <rm55_guide>:
    9df4:	01 0e 4b 00                                         ..K.

00009df8 <tm1_guide>:
    9df8:	01 00 01 2f 00                                      .../.

00009dfd <rm13_guide>:
    9dfd:	01 0e 25 00                                         ..%.

00009e01 <tm49_guide>:
    9e01:	01 00 01 4f 00                                      ...O.

00009e06 <tm12_guide>:
    9e06:	01 00 01 56 00                                      ...V.

00009e0b <tm73_guide>:
    9e0b:	01 00 01 32 00                                      ...2.

00009e10 <default_tl_0x0A>:
    9e10:	00 00 00 00                                         ....

00009e14 <default_tl_0x0B>:
    9e14:	01 00 00 00 23 00 00 00                             ....#...

00009e1c <default_tl_0x0C>:
    9e1c:	01 00 00 00 30 00 00 00                             ....0...

00009e24 <default_tl_0x0D>:
    9e24:	01 00 00 00 37 00 00 00                             ....7...

00009e2c <default_tl_0x0E>:
    9e2c:	01 00 00 00 20 00 00 00                             .... ...

00009e34 <default_tl_0x0F>:
    9e34:	01 00 00 00 25 00 00 00                             ....%...

00009e3c <InterconnectOffsetList>:
    9e3c:	2d 59 00 00                                         -Y..

00009e40 <ResultMacroList>:
    9e40:	49 a0 00 00 ae a8 00 00 e6 a0 00 00 49 94 00 00     I...........I...
    9e50:	de a0 00 00 de 94 00 00 f4 a2 00 00 fb 9c 00 00     ................
    9e60:	ba 9c 00 00 87 9f 00 00 1e 9d 00 00 64 a4 00 00     ............d...
    9e70:	c8 a3 00 00 fd 9d 00 00 d5 a2 00 00 80 95 00 00     ................
    9e80:	f8 a2 00 00 41 94 00 00 98 a1 00 00 8e 95 00 00     ....A...........
    9e90:	e2 9b 00 00 e5 a7 00 00 7f 9f 00 00 be 9c 00 00     ................
    9ea0:	ef a0 00 00 f4 94 00 00 e2 a2 00 00 10 9d 00 00     ................
    9eb0:	1a a7 00 00 01 a8 00 00 8f a8 00 00 94 a1 00 00     ................
    9ec0:	a6 a8 00 00 e2 a0 00 00 45 94 00 00 01 95 00 00     ........E.......
    9ed0:	cc 94 00 00 03 9d 00 00 e2 94 00 00 a4 a1 00 00     ................
    9ee0:	00 a3 00 00 0e 9c 00 00 54 a3 00 00 ac 9c 00 00     ........T.......
    9ef0:	aa a8 00 00 ff 9c 00 00 d5 a3 00 00 1a 9d 00 00     ................
    9f00:	60 a4 00 00 1c a0 00 00 71 9f 00 00 dc a7 00 00     `.......q.......
    9f10:	91 9f 00 00 fd a7 00 00 f7 9c 00 00 f4 9d 00 00     ................
    9f20:	83 9f 00 00 8c a8 00 00 40 a0 00 00 a2 a8 00 00     ........@.......
    9f30:	d0 94 00 00 d1 a3 00 00 e6 94 00 00 e9 a7 00 00     ................
    9f40:	f8 94 00 00 d9 a2 00 00 64 a2 00 00 fc a2 00 00     ........d.......
    9f50:	0a 9c 00 00                                         ....

00009f54 <tm2_guide>:
    9f54:	01 00 01 16 00                                      .....

00009f59 <tm14_guide>:
    9f59:	01 00 01 2a 00                                      ...*.

00009f5e <tm75_guide>:
    9f5e:	01 00 01 59 00 00                                   ...Y..

00009f64 <default_tl_0x24>:
    9f64:	01 00 00 00 1d 00 00 00                             ........

00009f6c <tm5_guide>:
    9f6c:	01 00 01 43 00                                      ...C.

00009f71 <rm50_guide>:
    9f71:	01 0e 22 00                                         ..".

00009f75 <tm26_guide>:
    9f75:	01 00 01 27 00                                      ...'.

00009f7a <tm50_guide>:
    9f7a:	01 00 01 33 00                                      ...3.

00009f7f <rm22_guide>:
    9f7f:	01 0e 11 00                                         ....

00009f83 <rm56_guide>:
    9f83:	01 0e 35 00                                         ..5.

00009f87 <rm9_guide>:
    9f87:	02 05 01 01 00                                      .....

00009f8c <tm7_guide>:
    9f8c:	01 00 01 47 00                                      ...G.

00009f91 <rm52_guide>:
    9f91:	01 0e 1e 00                                         ....

00009f95 <tm28_guide>:
    9f95:	01 00 01 42 00                                      ...B.

00009f9a <tm52_guide>:
    9f9a:	01 00 01 07 00 00                                   ......

00009fa0 <default_tl_0x2C>:
    9fa0:	01 00 00 00 47 00 00 00                             ....G...

00009fa8 <default_tl_0x10>:
    9fa8:	01 00 00 00 2a 00 00 00                             ....*...

00009fb0 <default_tl_0x11>:
    9fb0:	01 00 00 00 14 00 00 00                             ........

00009fb8 <default_tl_0x12>:
    9fb8:	00 00 00 00                                         ....

00009fbc <default_tl_0x13>:
    9fbc:	00 00 00 00                                         ....

00009fc0 <default_tl_0x14>:
    9fc0:	00 00 00 00                                         ....

00009fc4 <default_tl_0x15>:
    9fc4:	01 00 00 00 19 00 00 00                             ........

00009fcc <default_tl_0x16>:
    9fcc:	01 00 00 00 02 00 00 00                             ........

00009fd4 <default_tl_0x17>:
    9fd4:	01 00 00 00 10 00 00 00                             ........

00009fdc <default_tl_0x18>:
    9fdc:	01 00 00 00 17 00 00 00                             ........

00009fe4 <default_tl_0x19>:
    9fe4:	01 00 00 00 4a 00 00 00                             ....J...

00009fec <tm54_guide>:
    9fec:	01 00 01 30 00 00 00 00                             ...0....

00009ff4 <default_tl_0x1A>:
    9ff4:	01 00 00 00 04 00 00 00                             ........

00009ffc <default_tl_0x1B>:
    9ffc:	01 00 00 00 09 00 00 00                             ........

0000a004 <default_tl_0x1D>:
    a004:	01 00 00 00 42 00 00 00                             ....B...

0000a00c <default_tl_0x1E>:
    a00c:	01 00 00 00 2c 00 00 00                             ....,...

0000a014 <default_tl_0x1F>:
    a014:	01 00 00 00 3a 00 00 00                             ....:...

0000a01c <rm49_guide>:
    a01c:	01 0e 0e 00                                         ....

0000a020 <tm56_guide>:
    a020:	01 00 01 34 00 00 00 00                             ...4....

0000a028 <LayerIndex>:
    a028:	e4 89 ff 1f 89 96 00 00 02 59 00 00 44 8b ff 1f     .........Y..D...
    a038:	ef 96 00 00 00 00 00 00                             ........

0000a040 <rm58_guide>:
    a040:	01 0e 12 00                                         ....

0000a044 <tm0_guide>:
    a044:	01 00 01 06 00                                      .....

0000a049 <rm0_guide>:
    a049:	01 0e 2f 00                                         ../.

0000a04d <tm58_guide>:
    a04d:	01 00 01 1f 00                                      .....

0000a052 <tm21_guide>:
    a052:	01 00 01 54 00                                      ...T.

0000a057 <layerStateCLIDict_DescEntry>:
    a057:	4d 6f 64 69 66 79 20 73 70 65 63 69 66 69 65 64     Modify specified
    a067:	20 69 6e 64 65 78 65 64 20 6c 61 79 65 72 20 73      indexed layer s
    a077:	74 61 74 65 20 3c 6c 61 79 65 72 3e 20 3c 73 74     tate <layer> <st
    a087:	61 74 65 20 62 79 74 65 3e 2e 0d 0a 09 09 1b 5b     ate byte>......[
    a097:	33 35 6d 4c 32 1b 5b 30 6d 20 49 6e 64 65 78 65     35mL2.[0m Indexe
    a0a7:	64 20 4c 61 79 65 72 20 30 78 30 32 0d 0a 09 09     d Layer 0x02....
    a0b7:	30 20 4f 66 66 2c 20 31 20 53 68 69 66 74 2c 20     0 Off, 1 Shift, 
    a0c7:	32 20 4c 61 74 63 68 2c 20 34 20 4c 6f 63 6b 20     2 Latch, 4 Lock 
    a0d7:	53 74 61 74 65 73 00                                States.

0000a0de <rm4_guide>:
    a0de:	01 0e e5 00                                         ....

0000a0e2 <rm33_guide>:
    a0e2:	01 0e 2a 00                                         ..*.

0000a0e6 <rm2_guide>:
    a0e6:	01 0e 0b 00                                         ....

0000a0ea <tm33_guide>:
    a0ea:	01 00 01 51 00                                      ...Q.

0000a0ef <rm24_guide>:
    a0ef:	01 0e 07 00 00                                      .....

0000a0f4 <default_tl_0x20>:
    a0f4:	01 00 00 00 3f 00 00 00                             ....?...

0000a0fc <default_tl_0x21>:
    a0fc:	01 00 00 00 29 00 00 00                             ....)...

0000a104 <default_tl_0x22>:
    a104:	01 00 00 00 2e 00 00 00                             ........

0000a10c <default_tl_0x23>:
    a10c:	01 00 00 00 33 00 00 00                             ....3...

0000a114 <tm35_guide>:
    a114:	01 00 01 0b 00 00 00 00                             ........

0000a11c <default_tl_0x25>:
    a11c:	01 00 00 00 22 00 00 00                             ...."...

0000a124 <default_tl_0x26>:
    a124:	01 00 00 00 0b 00 00 00                             ........

0000a12c <default_tl_0x27>:
    a12c:	01 00 00 00 1a 00 00 00                             ........

0000a134 <default_tl_0x28>:
    a134:	01 00 00 00 1f 00 00 00                             ........

0000a13c <default_tl_0x29>:
    a13c:	01 00 00 00 08 00 00 00                             ........

0000a144 <tm42_guide>:
    a144:	01 00 01 10 00                                      .....

0000a149 <layerListCLIDict_DescEntry>:
    a149:	4c 69 73 74 20 61 76 61 69 6c 61 62 6c 65 20 6c     List available l
    a159:	61 79 65 72 73 2e 00                                ayers..

0000a160 <tm51_guide>:
    a160:	01 00 01 23 00 00 00 00                             ...#....

0000a168 <default_tl_0x2A>:
    a168:	01 00 00 00 0e 00 00 00                             ........

0000a170 <default_tl_0x2B>:
    a170:	01 00 00 00 13 00 00 00                             ........

0000a178 <tm37_guide>:
    a178:	01 00 01 0f 00 00 00 00                             ........

0000a180 <default_tl_0x2D>:
    a180:	00 00 00 00                                         ....

0000a184 <tm61_guide>:
    a184:	01 00 01 1c 00 00 00 00                             ........

0000a18c <default_tl_0x2F>:
    a18c:	01 00 00 00 01 00 00 00                             ........

0000a194 <rm31_guide>:
    a194:	01 0e 4e 00                                         ..N.

0000a198 <rm18_guide>:
    a198:	01 0e e6 00                                         ....

0000a19c <default_tl_0x30>:
    a19c:	01 00 00 00 36 00 00 00                             ....6...

0000a1a4 <rm39_guide>:
    a1a4:	01 0e 1c 00                                         ....

0000a1a8 <tm4_guide>:
    a1a8:	01 00 01 1a 00                                      .....

0000a1ad <tm9_guide>:
    a1ad:	01 00 01 1b 00                                      .....

0000a1b2 <tm39_guide>:
    a1b2:	01 00 01 38 00                                      ...8.

0000a1b7 <tm63_guide>:
    a1b7:	01 00 01 20 00                                      ... .

0000a1bc <macroCLIDict>:
    a1bc:	61 9b 00 00 88 a3 00 00 35 4b 00 00 69 9b 00 00     a.......5K..i...
    a1cc:	59 a7 00 00 b5 4b 00 00 73 9b 00 00 68 a2 00 00     Y....K..s...h...
    a1dc:	cd 53 00 00 7b 9b 00 00 21 9c 00 00 fb 53 00 00     .S..{...!....S..
    a1ec:	84 9b 00 00 05 95 00 00 29 54 00 00 8f 9b 00 00     ........)T......
    a1fc:	c2 9c 00 00 85 4c 00 00 9a 9b 00 00 49 a1 00 00     .....L......I...
    a20c:	7d 4d 00 00 a4 9b 00 00 57 a0 00 00 b5 4c 00 00     }M......W....L..
    a21c:	af 9b 00 00 0f a4 00 00 1d 4d 00 00 ba 9b 00 00     .........M......
    a22c:	0f a8 00 00 5d 4e 00 00 c4 9b 00 00 e6 9b 00 00     ....]N..........
    a23c:	4d 4d 00 00 ce 9b 00 00 22 9d 00 00 59 5d 00 00     MM......"...Y]..
    a24c:	d8 9b 00 00 e3 a3 00 00 8d 4b 00 00 00 00 00 00     .........K......
    a25c:	00 00 00 00 00 00 00 00                             ........

0000a264 <rm66_guide>:
    a264:	01 0e 20 00                                         .. .

0000a268 <keyHoldCLIDict_DescEntry>:
    a268:	53 65 6e 64 20 6b 65 79 2d 68 6f 6c 64 20 65 76     Send key-hold ev
    a278:	65 6e 74 73 20 74 6f 20 74 68 65 20 6d 61 63 72     ents to the macr
    a288:	6f 20 6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69 63     o module. Duplic
    a298:	61 74 65 73 20 68 61 76 65 20 75 6e 64 65 66 69     ates have undefi
    a2a8:	6e 65 64 20 62 65 68 61 76 69 6f 75 72 2e 0d 0a     ned behaviour...
    a2b8:	09 09 1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20 53     ...[35mS10.[0m S
    a2c8:	63 61 6e 63 6f 64 65 20 30 78 30 41 00              cancode 0x0A.

0000a2d5 <rm14_guide>:
    a2d5:	01 0e 52 00                                         ..R.

0000a2d9 <rm65_guide>:
    a2d9:	01 0e e4 00                                         ....

0000a2dd <tm40_guide>:
    a2dd:	01 00 01 3c 00                                      ...<.

0000a2e2 <rm26_guide>:
    a2e2:	01 0e 0c 00                                         ....

0000a2e6 <tm65_guide>:
    a2e6:	01 00 01 49 00 00                                   ...I..

0000a2ec <default_tl_0x3E>:
    a2ec:	01 00 00 00 18 00 00 00                             ........

0000a2f4 <rm6_guide>:
    a2f4:	01 0e 24 00                                         ..$.

0000a2f8 <rm16_guide>:
    a2f8:	01 0e 50 00                                         ..P.

0000a2fc <rm67_guide>:
    a2fc:	01 0e 16 00                                         ....

0000a300 <rm40_guide>:
    a300:	01 0e 05 00                                         ....

0000a304 <tm16_guide>:
    a304:	01 00 01 17 00                                      .....

0000a309 <tm67_guide>:
    a309:	01 00 01 31 00                                      ...1.

0000a30e <tm30_guide>:
    a30e:	01 00 01 4d 00 00                                   ...M..

0000a314 <default_tl_0x31>:
    a314:	01 00 00 00 43 00 00 00                             ....C...

0000a31c <default_tl_0x32>:
    a31c:	01 00 00 00 49 00 00 00                             ....I...

0000a324 <default_tl_0x33>:
    a324:	01 00 00 00 32 00 00 00                             ....2...

0000a32c <default_tl_0x34>:
    a32c:	01 00 00 00 38 00 00 00                             ....8...

0000a334 <default_tl_0x35>:
    a334:	01 00 00 00 3c 00 00 00                             ....<...

0000a33c <default_tl_0x36>:
    a33c:	00 00 00 00                                         ....

0000a340 <default_tl_0x37>:
    a340:	00 00 00 00                                         ....

0000a344 <default_tl_0x38>:
    a344:	01 00 00 00 27 00 00 00                             ....'...

0000a34c <default_tl_0x39>:
    a34c:	01 00 00 00 2b 00 00 00                             ....+...

0000a354 <rm42_guide>:
    a354:	01 0e 1d 00                                         ....

0000a358 <tm18_guide>:
    a358:	01 00 01 3d 00                                      ...=.

0000a35d <tm69_guide>:
    a35d:	01 00 01 05 00                                      .....

0000a362 <tm32_guide>:
    a362:	01 00 01 0e 00 00                                   ......

0000a368 <default_tl_0x3A>:
    a368:	01 00 00 00 16 00 00 00                             ........

0000a370 <default_tl_0x3B>:
    a370:	01 00 00 00 24 00 00 00                             ....$...

0000a378 <default_tl_0x3C>:
    a378:	01 00 00 00 28 00 00 00                             ....(...

0000a380 <default_tl_0x3D>:
    a380:	01 00 00 00 12 00 00 00                             ........

0000a388 <capListCLIDict_DescEntry>:
    a388:	50 72 69 6e 74 73 20 61 6e 20 69 6e 64 65 78 65     Prints an indexe
    a398:	64 20 6c 69 73 74 20 6f 66 20 61 6c 6c 20 6e 6f     d list of all no
    a3a8:	6e 20 55 53 42 20 6b 65 79 63 6f 64 65 20 63 61     n USB keycode ca
    a3b8:	70 61 62 69 6c 69 74 69 65 73 2e 00                 pabilities..

0000a3c4 <default_tl_0x3F>:
    a3c4:	00 00 00 00                                         ....

0000a3c8 <rm12_guide>:
    a3c8:	01 0e 4f 00                                         ..O.

0000a3cc <tm44_guide>:
    a3cc:	01 00 01 1e 00                                      .....

0000a3d1 <rm61_guide>:
    a3d1:	01 0e 2b 00                                         ..+.

0000a3d5 <rm46_guide>:
    a3d5:	01 0e 1f 00                                         ....

0000a3d9 <tm46_guide>:
    a3d9:	01 00 01 22 00                                      ...".

0000a3de <tm70_guide>:
    a3de:	01 00 01 4a 00                                      ...J.

0000a3e3 <macroStepCLIDict_DescEntry>:
    a3e3:	44 6f 20 4e 20 6d 61 63 72 6f 20 70 72 6f 63 65     Do N macro proce
    a3f3:	73 73 69 6e 67 20 73 74 65 70 73 2e 20 44 65 66     ssing steps. Def
    a403:	61 75 6c 74 73 20 74 6f 20 31 2e 00                 aults to 1..

0000a40f <macroDebugCLIDict_DescEntry>:
    a40f:	44 69 73 61 62 6c 65 73 2f 45 6e 61 62 6c 65 73     Disables/Enables
    a41f:	20 73 65 6e 64 69 6e 67 20 55 53 42 20 6b 65 79      sending USB key
    a42f:	63 6f 64 65 73 20 74 6f 20 74 68 65 20 4f 75 74     codes to the Out
    a43f:	70 75 74 20 4d 6f 64 75 6c 65 20 61 6e 64 20 70     put Module and p
    a44f:	72 69 6e 74 73 20 55 2f 4b 20 63 6f 64 65 73 2e     rints U/K codes.
    a45f:	00                                                  .

0000a460 <rm48_guide>:
    a460:	01 0e 30 00                                         ..0.

0000a464 <rm11_guide>:
    a464:	01 0e 28 00                                         ..(.

0000a468 <tm48_guide>:
    a468:	01 00 01 0c 00                                      .....

0000a46d <tm11_guide>:
    a46d:	01 00 01 26 00                                      ...&.

0000a472 <tm72_guide>:
    a472:	01 00 01 55 00 00                                   ...U..

0000a478 <default_tl_0x40>:
    a478:	00 00 00 00                                         ....

0000a47c <default_tl_0x41>:
    a47c:	00 00 00 00                                         ....

0000a480 <default_tl_0x42>:
    a480:	01 00 00 00 1c 00 00 00                             ........

0000a488 <TriggerMacroList>:
    a488:	44 a0 00 00 00 00 00 00 f8 9d 00 00 01 00 00 00     D...............
    a498:	54 9f 00 00 02 00 00 00 84 95 00 00 03 00 00 00     T...............
    a4a8:	a8 a1 00 00 04 00 00 00 6c 9f 00 00 05 00 00 00     ........l.......
    a4b8:	cf a7 00 00 06 00 00 00 8c 9f 00 00 07 00 00 00     ................
    a4c8:	f8 a7 00 00 08 00 00 00 ad a1 00 00 09 00 00 00     ................
    a4d8:	ab 9d 00 00 0a 00 00 00 6d a4 00 00 0b 00 00 00     ........m.......
    a4e8:	06 9e 00 00 0c 00 00 00 10 a7 00 00 0d 00 00 00     ................
    a4f8:	59 9f 00 00 0e 00 00 00 05 9c 00 00 0b 00 00 00     Y...............
    a508:	04 a3 00 00 0f 00 00 00 12 9c 00 00 10 00 00 00     ................
    a518:	58 a3 00 00 11 00 00 00 b0 9c 00 00 12 00 00 00     X...............
    a528:	98 a8 00 00 13 00 00 00 52 a0 00 00 14 00 00 00     ........R.......
    a538:	b7 a8 00 00 15 00 00 00 15 9d 00 00 16 00 00 00     ................
    a548:	1e a7 00 00 17 00 00 00 54 a7 00 00 18 00 00 00     ........T.......
    a558:	75 9f 00 00 14 00 00 00 e0 a7 00 00 19 00 00 00     u...............
    a568:	95 9f 00 00 1a 00 00 00 05 a8 00 00 1b 00 00 00     ................
    a578:	0e a3 00 00 1c 00 00 00 1c 9c 00 00 1d 00 00 00     ................
    a588:	62 a3 00 00 1e 00 00 00 ea a0 00 00 1f 00 00 00     b...............
    a598:	4d 94 00 00 20 00 00 00 14 a1 00 00 21 00 00 00     M... .......!...
    a5a8:	d4 94 00 00 22 00 00 00 78 a1 00 00 23 00 00 00     ...."...x...#...
    a5b8:	ea 94 00 00 20 00 00 00 b2 a1 00 00 21 00 00 00     .... .......!...
    a5c8:	dd a2 00 00 24 00 00 00 9d a8 00 00 25 00 00 00     ....$.......%...
    a5d8:	44 a1 00 00 26 00 00 00 b5 9c 00 00 27 00 00 00     D...&.......'...
    a5e8:	cc a3 00 00 28 00 00 00 07 9d 00 00 29 00 00 00     ....(.......)...
    a5f8:	d9 a3 00 00 2a 00 00 00 a6 9d 00 00 2b 00 00 00     ....*.......+...
    a608:	68 a4 00 00 2c 00 00 00 01 9e 00 00 2d 00 00 00     h...,.......-...
    a618:	7a 9f 00 00 2e 00 00 00 60 a1 00 00 2f 00 00 00     z.......`.../...
    a628:	9a 9f 00 00 30 00 00 00 0a a8 00 00 31 00 00 00     ....0.......1...
    a638:	ec 9f 00 00 32 00 00 00 5c a8 00 00 33 00 00 00     ....2...\...3...
    a648:	20 a0 00 00 34 00 00 00 93 a8 00 00 35 00 00 00      ...4.......5...
    a658:	4d a0 00 00 36 00 00 00 b2 a8 00 00 37 00 00 00     M...6.......7...
    a668:	d9 94 00 00 38 00 00 00 84 a1 00 00 39 00 00 00     ....8.......9...
    a678:	ef 94 00 00 3a 00 00 00 b7 a1 00 00 3b 00 00 00     ....:.......;...
    a688:	fc 94 00 00 3c 00 00 00 e6 a2 00 00 39 00 00 00     ....<.......9...
    a698:	89 95 00 00 3d 00 00 00 09 a3 00 00 3e 00 00 00     ....=.......>...
    a6a8:	17 9c 00 00 3f 00 00 00 5d a3 00 00 40 00 00 00     ....?...]...@...
    a6b8:	de a3 00 00 3d 00 00 00 b0 9d 00 00 41 00 00 00     ....=.......A...
    a6c8:	72 a4 00 00 1d 00 00 00 0b 9e 00 00 42 00 00 00     r...........B...
    a6d8:	15 a7 00 00 43 00 00 00 5e 9f 00 00 44 00 00 00     ....C...^...D...

0000a6e8 <default_tl_0x44>:
    a6e8:	01 00 00 00 0a 00 00 00                             ........

0000a6f0 <default_tl_0x45>:
    a6f0:	01 00 00 00 3e 00 00 00                             ....>...

0000a6f8 <default_tl_0x46>:
    a6f8:	01 00 00 00 03 00 00 00                             ........

0000a700 <default_tl_0x47>:
    a700:	01 00 00 00 07 00 00 00                             ........

0000a708 <default_tl_0x48>:
    a708:	01 00 00 00 3b 00 00 00                             ....;...

0000a710 <tm13_guide>:
    a710:	01 00 01 03 00                                      .....

0000a715 <tm74_guide>:
    a715:	01 00 01 19 00                                      .....

0000a71a <rm28_guide>:
    a71a:	01 0e 0d 00                                         ....

0000a71e <tm24_guide>:
    a71e:	01 00 01 3e 00 00                                   ...>..

0000a724 <default_tl_0x4A>:
    a724:	01 00 00 00 46 00 00 00                             ....F...

0000a72c <default_tl_0x4B>:
    a72c:	01 00 00 00 2f 00 00 00                             ..../...

0000a734 <default_tl_0x4C>:
    a734:	01 00 00 00 35 00 00 00                             ....5...

0000a73c <default_tl_0x4D>:
    a73c:	01 00 00 00 1e 00 00 00                             ........

0000a744 <default_tl_0x4E>:
    a744:	01 00 00 00 2d 00 00 00                             ....-...

0000a74c <default_tl_0x4F>:
    a74c:	01 00 00 00 31 00 00 00                             ....1...

0000a754 <tm25_guide>:
    a754:	01 00 01 15 00                                      .....

0000a759 <capSelectCLIDict_DescEntry>:
    a759:	54 72 69 67 67 65 72 73 20 74 68 65 20 73 70 65     Triggers the spe
    a769:	63 69 66 69 65 64 20 63 61 70 61 62 69 6c 69 74     cified capabilit
    a779:	69 65 73 2e 20 46 69 72 73 74 20 74 77 6f 20 61     ies. First two a
    a789:	72 67 73 20 61 72 65 20 73 74 61 74 65 20 61 6e     rgs are state an
    a799:	64 20 73 74 61 74 65 54 79 70 65 2e 0d 0a 09 09     d stateType.....
    a7a9:	1b 5b 33 35 6d 4b 31 31 1b 5b 30 6d 20 4b 65 79     .[35mK11.[0m Key
    a7b9:	62 6f 61 72 64 20 43 61 70 61 62 69 6c 69 74 79     board Capability
    a7c9:	20 30 78 30 42 00                                    0x0B.

0000a7cf <tm6_guide>:
    a7cf:	01 00 01 02 00                                      .....

0000a7d4 <default_tl_0x43>:
    a7d4:	01 00 00 00 05 00 00 00                             ........

0000a7dc <rm51_guide>:
    a7dc:	01 0e 0a 00                                         ....

0000a7e0 <tm27_guide>:
    a7e0:	01 00 01 50 00                                      ...P.

0000a7e5 <rm21_guide>:
    a7e5:	01 0e 13 00                                         ....

0000a7e9 <rm63_guide>:
    a7e9:	01 0e e2 00 00 00 00                                .......

0000a7f0 <default_tl_0x49>:
    a7f0:	01 00 00 00 41 00 00 00                             ....A...

0000a7f8 <tm8_guide>:
    a7f8:	01 00 01 29 00                                      ...).

0000a7fd <rm53_guide>:
    a7fd:	01 0e 2e 00                                         ....

0000a801 <rm29_guide>:
    a801:	01 0e 2d 00                                         ..-.

0000a805 <tm29_guide>:
    a805:	01 00 01 24 00                                      ...$.

0000a80a <tm53_guide>:
    a80a:	01 00 01 4c 00                                      ...L.

0000a80f <macroListCLIDict_DescEntry>:
    a80f:	4c 69 73 74 20 74 68 65 20 64 65 66 69 6e 65 64     List the defined
    a81f:	20 74 72 69 67 67 65 72 20 61 6e 64 20 72 65 73      trigger and res
    a82f:	75 6c 74 20 6d 61 63 72 6f 73 2e 00 00              ult macros...

0000a83c <default_tl_0x50>:
    a83c:	01 00 00 00 1b 00 00 00                             ........

0000a844 <default_tl_0x51>:
    a844:	01 00 00 00 21 00 00 00                             ....!...

0000a84c <default_tl_0x52>:
    a84c:	01 00 00 00 26 00 00 00                             ....&...

0000a854 <default_tl_0x53>:
    a854:	01 00 00 00 0f 00 00 00                             ........

0000a85c <tm55_guide>:
    a85c:	01 00 01 0d 00 00 00 00                             ........

0000a864 <default_tl_0x55>:
    a864:	01 00 00 00 48 00 00 00                             ....H...

0000a86c <default_tl_0x56>:
    a86c:	01 00 00 00 0c 00 00 00                             ........

0000a874 <default_tl_0x57>:
    a874:	01 00 00 00 11 00 00 00                             ........

0000a87c <default_tl_0x58>:
    a87c:	01 00 00 00 44 00 00 00                             ....D...

0000a884 <default_tl_0x59>:
    a884:	01 00 00 00 4b 00 00 00                             ....K...

0000a88c <rm57_guide>:
    a88c:	01 09 00                                            ...

0000a88f <rm30_guide>:
    a88f:	01 0e 06 00                                         ....

0000a893 <tm57_guide>:
    a893:	01 00 01 08 00                                      .....

0000a898 <tm20_guide>:
    a898:	01 00 01 11 00                                      .....

0000a89d <tm41_guide>:
    a89d:	01 00 01 21 00                                      ...!.

0000a8a2 <rm59_guide>:
    a8a2:	01 0e 1a 00                                         ....

0000a8a6 <rm32_guide>:
    a8a6:	01 0e 29 00                                         ..).

0000a8aa <rm44_guide>:
    a8aa:	01 0e 09 00                                         ....

0000a8ae <rm1_guide>:
    a8ae:	01 0e 23 00                                         ..#.

0000a8b2 <tm59_guide>:
    a8b2:	01 00 01 48 00                                      ...H.

0000a8b7 <tm22_guide>:
    a8b7:	01 00 01 3a 00                                      ...:.

0000a8bc <CSWTCH.65>:
    a8bc:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    a8cc:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    a8dc:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................

0000a8ec <kbdProtocolCLIDict_DescEntry>:
    a8ec:	4b 65 79 62 6f 61 72 64 20 50 72 6f 74 6f 63 6f     Keyboard Protoco
    a8fc:	6c 20 4d 6f 64 65 3a 20 30 20 2d 20 42 6f 6f 74     l Mode: 0 - Boot
    a90c:	2c 20 31 20 2d 20 4f 53 2f 4e 4b 52 4f 20 4d 6f     , 1 - OS/NKRO Mo
    a91c:	64 65 00                                            de.

0000a91f <setKeysCLIDict_DescEntry>:
    a91f:	50 72 65 70 61 72 65 20 61 20 73 70 61 63 65 20     Prepare a space 
    a92f:	73 65 70 61 72 61 74 65 64 20 6c 69 73 74 20 6f     separated list o
    a93f:	66 20 55 53 42 20 63 6f 64 65 73 20 28 64 65 63     f USB codes (dec
    a94f:	69 6d 61 6c 29 2e 20 57 61 69 74 73 20 75 6e 74     imal). Waits unt
    a95f:	69 6c 20 1b 5b 33 35 6d 73 65 6e 64 4b 65 79 73     il .[35msendKeys
    a96f:	1b 5b 30 6d 2e 00                                   .[0m..

0000a975 <outputCLIDictName>:
    a975:	55 53 42 20 4d 6f 64 75 6c 65 20 43 6f 6d 6d 61     USB Module Comma
    a985:	6e 64 73 00                                         nds.

0000a989 <CSWTCH.59>:
    a989:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 02     ................
    a999:	02 02 02 02 02 02 02 03 03 03 03 03 03 03 03 04     ................
    a9a9:	04 04 04 04 04 04 04 05 05 05 05 05 05 05 05        ...............

0000a9b8 <CSWTCH.64>:
    a9b8:	15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16     ................
    a9c8:	17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18     ................
    a9d8:	19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 1a 1a 1a     ................

0000a9e8 <outputCLIDict>:
    a9e8:	58 ad 00 00 ec a8 00 00 bd 5d 00 00 64 ad 00 00     X........]..d...
    a9f8:	91 ad 00 00 41 5e 00 00 70 ad 00 00 ab ad 00 00     ....A^..p.......
    aa08:	e5 5d 00 00 79 ad 00 00 3c aa 00 00 99 5d 00 00     .]..y...<....]..
    aa18:	82 ad 00 00 1f a9 00 00 0d 5e 00 00 8a ad 00 00     .........^......
    aa28:	73 aa 00 00 65 5e 00 00 00 00 00 00 00 00 00 00     s...e^..........
    aa38:	00 00 00 00                                         ....

0000aa3c <sendKeysCLIDict_DescEntry>:
    aa3c:	53 65 6e 64 20 74 68 65 20 70 72 65 70 61 72 65     Send the prepare
    aa4c:	64 20 6c 69 73 74 20 6f 66 20 55 53 42 20 63 6f     d list of USB co
    aa5c:	64 65 73 20 61 6e 64 20 6d 6f 64 69 66 69 65 72     des and modifier
    aa6c:	20 62 79 74 65 2e 00                                 byte..

0000aa73 <setModCLIDict_DescEntry>:
    aa73:	53 65 74 20 74 68 65 20 6d 6f 64 66 69 65 72 20     Set the modfier 
    aa83:	62 79 74 65 3a 0d 0a 09 09 31 20 4c 43 74 72 6c     byte:....1 LCtrl
    aa93:	2c 20 32 20 4c 53 68 66 74 2c 20 34 20 4c 41 6c     , 2 LShft, 4 LAl
    aaa3:	74 2c 20 38 20 4c 47 55 49 2c 20 31 36 20 52 43     t, 8 LGUI, 16 RC
    aab3:	74 72 6c 2c 20 33 32 20 52 53 68 66 74 2c 20 36     trl, 32 RShft, 6
    aac3:	34 20 52 41 6c 74 2c 20 31 32 38 20 52 47 55 49     4 RAlt, 128 RGUI
    aad3:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    aae3:	20 2d 20 4b 65 79 62 6f 61 72 64 20 50 72 6f 74      - Keyboard Prot
    aaf3:	6f 63 6f 6c 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e     ocol: ..[1;32mIN
    ab03:	46 4f 1b 5b 30 6d 20 2d 20 4c 45 44 20 53 74 61     FO.[0m - LED Sta
    ab13:	74 65 3a 20 00 4f 75 74 70 75 74 5f 63 6f 6e 73     te: .Output_cons
    ab23:	43 74 72 6c 53 65 6e 64 28 63 6f 6e 73 43 6f 64     CtrlSend(consCod
    ab33:	65 29 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e     e)..[1;33mWARNIN
    ab43:	47 1b 5b 30 6d 20 2d 20 43 6f 6e 73 75 6d 65 72     G.[0m - Consumer
    ab53:	20 43 6f 6e 74 72 6f 6c 20 69 73 20 6e 6f 74 20      Control is not 
    ab63:	69 6d 70 6c 65 6d 65 6e 74 65 64 20 66 6f 72 20     implemented for 
    ab73:	42 6f 6f 74 20 4d 6f 64 65 0d 0a 00 4f 75 74 70     Boot Mode...Outp
    ab83:	75 74 5f 6e 6f 6e 65 53 65 6e 64 28 29 00 4f 75     ut_noneSend().Ou
    ab93:	74 70 75 74 5f 73 79 73 43 74 72 6c 53 65 6e 64     tput_sysCtrlSend
    aba3:	28 73 79 73 43 6f 64 65 29 00 1b 5b 31 3b 33 33     (sysCode)..[1;33
    abb3:	6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 53     mWARNING.[0m - S
    abc3:	79 73 74 65 6d 20 43 6f 6e 74 72 6f 6c 20 69 73     ystem Control is
    abd3:	20 6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64      not implemented
    abe3:	20 66 6f 72 20 42 6f 6f 74 20 4d 6f 64 65 0d 0a      for Boot Mode..
    abf3:	00 4f 75 74 70 75 74 5f 66 6c 61 73 68 4d 6f 64     .Output_flashMod
    ac03:	65 28 29 00 4f 75 74 70 75 74 5f 6b 62 64 50 72     e().Output_kbdPr
    ac13:	6f 74 6f 63 6f 6c 42 6f 6f 74 28 29 00 4f 75 74     otocolBoot().Out
    ac23:	70 75 74 5f 6b 62 64 50 72 6f 74 6f 63 6f 6c 4e     put_kbdProtocolN
    ac33:	4b 52 4f 28 29 00 4f 75 74 70 75 74 5f 75 73 62     KRO().Output_usb
    ac43:	43 6f 64 65 53 65 6e 64 28 75 73 62 43 6f 64 65     CodeSend(usbCode
    ac53:	29 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47     )..[1;33mWARNING
    ac63:	1b 5b 30 6d 20 2d 20 55 53 42 20 4b 65 79 20 6c     .[0m - USB Key l
    ac73:	69 6d 69 74 20 72 65 61 63 68 65 64 0d 0a 00 1b     imit reached....
    ac83:	5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47 1b 5b 30     [1;33mWARNING.[0
    ac93:	6d 20 2d 20 55 53 42 20 43 6f 64 65 20 61 62 6f     m - USB Code abo
    aca3:	76 65 20 31 30 34 2f 30 78 36 38 20 69 6e 20 42     ve 104/0x68 in B
    acb3:	6f 6f 74 20 4d 6f 64 65 3a 20 00 1b 5b 31 3b 33     oot Mode: ..[1;3
    acc3:	33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20     3mWARNING.[0m - 
    acd3:	55 53 42 20 43 6f 64 65 20 6e 6f 74 20 77 69 74     USB Code not wit
    ace3:	68 69 6e 20 34 2d 34 39 20 28 30 78 34 2d 30 78     hin 4-49 (0x4-0x
    acf3:	33 31 29 2c 20 35 31 2d 31 35 35 20 28 30 78 33     31), 51-155 (0x3
    ad03:	33 2d 30 78 39 42 29 2c 20 31 35 37 2d 31 36 34     3-0x9B), 157-164
    ad13:	20 28 30 78 39 44 2d 30 78 41 34 29 2c 20 31 37      (0x9D-0xA4), 17
    ad23:	36 2d 32 32 31 20 28 30 78 42 30 2d 30 78 44 44     6-221 (0xB0-0xDD
    ad33:	29 20 6f 72 20 32 32 34 2d 32 33 31 20 28 30 78     ) or 224-231 (0x
    ad43:	45 30 2d 30 78 45 37 29 20 4e 4b 52 4f 20 4d 6f     E0-0xE7) NKRO Mo
    ad53:	64 65 3a 20 00 6b 62 64 50 72 6f 74 6f 63 6f 6c     de: .kbdProtocol
    ad63:	00 6f 75 74 70 75 74 44 65 62 75 67 00 72 65 61     .outputDebug.rea
    ad73:	64 4c 45 44 73 00 73 65 6e 64 4b 65 79 73 00 73     dLEDs.sendKeys.s
    ad83:	65 74 4b 65 79 73 00 73 65 74 4d 6f 64 00           etKeys.setMod.

0000ad91 <outputDebugCLIDict_DescEntry>:
    ad91:	54 6f 67 67 6c 65 20 4f 75 74 70 75 74 20 44 65     Toggle Output De
    ada1:	62 75 67 20 6d 6f 64 65 2e 00                       bug mode..

0000adab <readLEDsCLIDict_DescEntry>:
    adab:	52 65 61 64 20 4c 45 44 20 62 79 74 65 3a 0d 0a     Read LED byte:..
    adbb:	09 09 31 20 4e 75 6d 4c 63 6b 2c 20 32 20 43 61     ..1 NumLck, 2 Ca
    adcb:	70 73 4c 63 6b 2c 20 34 20 53 63 72 6c 4c 63 6b     psLck, 4 ScrlLck
    addb:	2c 20 31 36 20 4b 61 6e 61 2c 20 65 74 63 2e 00     , 16 Kana, etc..

0000adeb <CSWTCH.60>:
    adeb:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07 00     ................
    adfb:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07 00     ................
    ae0b:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07        ...............

0000ae1a <CSWTCH.61>:
    ae1a:	06 06 06 06 06 06 06 06 07 07 07 07 07 07 07 07     ................
    ae2a:	08 08 08 08 08 08 08 08 09 09 09 09 09 09 09 09     ................
    ae3a:	0a 0a 0a 0a 0a 0a 0a 0a 0b 0b 0b 0b 0b 0b 0b 0b     ................
    ae4a:	0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d 0d 0d 0d 0d 0d     ................
    ae5a:	0e 0e 0e 0e 0e 0e 0e 0e 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ae6a:	10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11     ................
    ae7a:	12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13     ................

0000ae8a <CSWTCH.62>:
    ae8a:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    ae9a:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    aeaa:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    aeba:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    aeca:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    aeda:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    aeea:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................

0000aefa <CSWTCH.63>:
    aefa:	00 01 02 03 04 05 06 07                             ........

0000af02 <usb_endpoint_config_table>:
    af02:	15 15 15 19 15 15 15 15 00 00                       ..........

0000af0c <usb_descriptor_list>:
    af0c:	00 01 00 00 3e 8e ff 1f 12 00 00 00 00 02 00 00     ....>...........
    af1c:	ac 8c ff 1f c8 00 00 00 00 06 00 00 11 91 ff 1f     ................
    af2c:	01 00 00 00 00 0a 00 00 10 91 ff 1f 01 00 00 00     ................
    af3c:	00 22 00 00 f6 8e ff 1f 3f 00 00 00 00 21 00 00     ."......?....!..
    af4c:	be 8c ff 1f 09 00 00 00 00 22 01 00 4a 8b ff 1f     ........."..J...
    af5c:	7d 00 00 00 00 21 01 00 d7 8c ff 1f 09 00 00 00     }....!..........
    af6c:	00 22 04 00 74 8d ff 1f 76 00 00 00 00 21 04 00     ."..t...v....!..
    af7c:	32 8d ff 1f 09 00 00 00 00 22 05 00 c7 8b ff 1f     2........"......
    af8c:	55 00 00 00 00 21 05 00 4b 8d ff 1f 09 00 00 00     U....!..K.......
    af9c:	00 22 06 00 ea 8d ff 1f 35 00 00 00 00 21 06 00     ."......5....!..
    afac:	64 8d ff 1f 09 00 00 00 00 03 00 00 36 8f ff 1f     d...........6...
    afbc:	00 00 00 00 01 03 09 04 8c 8e ff 1f 00 00 00 00     ................
    afcc:	02 03 09 04 9e 8e ff 1f 00 00 00 00 03 03 09 04     ................
    afdc:	3a 8f ff 1f 00 00 00 00 04 03 09 04 20 8e ff 1f     :........... ...
    afec:	00 00 00 00 05 03 09 04 8e 8c ff 1f 00 00 00 00     ................
    affc:	06 03 09 04 50 8e ff 1f 00 00 00 00 07 03 09 04     ....P...........
    b00c:	1c 8c ff 1f 00 00 00 00 08 03 09 04 68 8c ff 1f     ............h...
    b01c:	00 00 00 00 09 03 09 04 54 8c ff 1f 00 00 00 00     ........T.......
    b02c:	0a 03 09 04 76 8c ff 1f 00 00 00 00 00 00 00 00     ....v...........
    b03c:	00 00 00 00 00 00 00 00 1b 5b 31 3b 33 33 6d 57     .........[1;33mW
    b04c:	41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 43 4c 45     ARNING.[0m - CLE
    b05c:	41 52 5f 46 45 41 54 55 52 45 20 2d 20 44 65 76     AR_FEATURE - Dev
    b06c:	69 63 65 2f 49 6e 74 65 72 66 61 63 65 0d 0a 00     ice/Interface...
    b07c:	1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47 1b 5b     .[1;33mWARNING.[
    b08c:	30 6d 20 2d 20 53 45 54 5f 46 45 41 54 55 52 45     0m - SET_FEATURE
    b09c:	20 2d 20 44 65 76 69 63 65 2f 49 6e 74 65 72 66      - Device/Interf
    b0ac:	61 63 65 0d 0a 00 1b 5b 31 3b 33 33 6d 57 41 52     ace....[1;33mWAR
    b0bc:	4e 49 4e 47 1b 5b 30 6d 20 2d 20 55 6e 6b 6e 6f     NING.[0m - Unkno
    b0cc:	77 6e 20 69 6e 74 65 72 66 61 63 65 20 2d 20 00     wn interface - .
    b0dc:	1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b     .[1;5;31mERROR.[
    b0ec:	30 6d 20 2d 20 55 53 42 20 6e 6f 74 20 63 6f 6e     0m - USB not con
    b0fc:	66 69 67 75 72 65 64 2e 2e 2e 0d 0a 00 1b 5b 31     figured.......[1
    b10c:	3b 33 33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20     ;33mWARNING.[0m 
    b11c:	2d 20 55 53 42 20 54 72 61 6e 73 6d 69 74 20 54     - USB Transmit T
    b12c:	69 6d 65 6f 75 74 2e 2e 2e 0d 0a 00 53 79 73 43     imeout......SysC
    b13c:	74 72 6c 5b 00 5d 20 0d 0a 00 43 6f 6e 73 43 74     trl[.] ...ConsCt
    b14c:	72 6c 5b 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47     rl[..[1;35mDEBUG
    b15c:	1b 5b 30 6d 20 2d 20 42 6f 6f 74 20 55 53 42 3a     .[0m - Boot USB:
    b16c:	20 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47 1b 5b      ..[1;35mDEBUG.[
    b17c:	30 6d 20 2d 20 4e 4b 52 4f 20 55 53 42 3a 20 00     0m - NKRO USB: .
    b18c:	00 00 00 00                                         ....

0000b190 <helpCLIDict_DescEntry>:
    b190:	59 6f 75 27 72 65 20 6c 6f 6f 6b 69 6e 67 20 61     You're looking a
    b1a0:	74 20 69 74 20 3a 50 00                             t it :P.

0000b1a8 <restartCLIDict_DescEntry>:
    b1a8:	53 65 6e 64 73 20 61 20 73 6f 66 74 77 61 72 65     Sends a software
    b1b8:	20 72 65 73 74 61 72 74 2c 20 73 68 6f 75 6c 64      restart, should
    b1c8:	20 62 65 20 73 69 6d 69 6c 61 72 20 74 6f 20 70      be similar to p
    b1d8:	6f 77 65 72 69 6e 67 20 6f 6e 20 74 68 65 20 64     owering on the d
    b1e8:	65 76 69 63 65 2e 00                                evice..

0000b1ef <clearCLIDict_DescEntry>:
    b1ef:	43 6c 65 61 72 20 74 68 65 20 73 63 72 65 65 6e     Clear the screen
    b1ff:	2e 00                                               ..

0000b201 <reloadCLIDict_DescEntry>:
    b201:	53 69 67 6e 61 6c 73 20 6d 69 63 72 6f 63 6f 6e     Signals microcon
    b211:	74 72 6f 6c 6c 65 72 20 74 6f 20 72 65 66 6c 61     troller to refla
    b221:	73 68 2f 72 65 6c 6f 61 64 2e 00                    sh/reload..

0000b22c <versionCLIDict_DescEntry>:
    b22c:	56 65 72 73 69 6f 6e 20 69 6e 66 6f 72 6d 61 74     Version informat
    b23c:	69 6f 6e 20 61 62 6f 75 74 20 74 68 69 73 20 66     ion about this f
    b24c:	69 72 6d 77 61 72 65 2e 00 1b 5b 32 4a 1b 5b 48     irmware...[2J.[H
    b25c:	0d 00 1b 63 00 0d 0a 1b 5b 31 3b 33 32 6d 00 1b     ...c....[1;32m..
    b26c:	5b 30 6d 0d 0a 00 20 1b 5b 33 35 6d 00 20 1b 5b     [0m... .[35m. .[
    b27c:	31 6d 52 65 76 69 73 69 6f 6e 3a 1b 5b 30 6d 20     1mRevision:.[0m 
    b28c:	20 20 20 20 20 61 31 30 61 66 62 63 63 36 61 61          a10afbcc6aa
    b29c:	35 32 65 66 37 65 63 30 31 35 30 38 30 32 31 32     52ef7ec015080212
    b2ac:	36 61 32 65 66 61 30 35 33 65 37 61 38 0d 0a 00     6a2efa053e7a8...
    b2bc:	20 1b 5b 31 6d 42 72 61 6e 63 68 3a 1b 5b 30 6d      .[1mBranch:.[0m
    b2cc:	20 20 20 20 20 20 20 20 6d 61 73 74 65 72 0d 0a             master..
    b2dc:	00 20 1b 5b 31 6d 54 72 65 65 20 53 74 61 74 75     . .[1mTree Statu
    b2ec:	73 3a 1b 5b 30 6d 20 20 20 44 69 72 74 79 0d 0a     s:.[0m   Dirty..
    b2fc:	09 4b 65 79 62 6f 61 72 64 73 2f 63 6d 61 6b 65     .Keyboards/cmake
    b30c:	2e 62 61 73 68 0d 0a 00 20 1b 5b 31 6d 52 65 70     .bash... .[1mRep
    b31c:	6f 20 4f 72 69 67 69 6e 3a 1b 5b 30 6d 20 20 20     o Origin:.[0m   
    b32c:	68 74 74 70 73 3a 2f 2f 67 69 74 68 75 62 2e 63     https://github.c
    b33c:	6f 6d 2f 6b 69 69 62 6f 68 64 2f 63 6f 6e 74 72     om/kiibohd/contr
    b34c:	6f 6c 6c 65 72 0d 0a 00 20 1b 5b 31 6d 43 6f 6d     oller... .[1mCom
    b35c:	6d 69 74 20 44 61 74 65 3a 1b 5b 30 6d 20 20 20     mit Date:.[0m   
    b36c:	32 30 31 35 2d 31 30 2d 31 36 20 31 30 3a 30 32     2015-10-16 10:02
    b37c:	3a 30 31 20 2d 30 37 30 30 0d 0a 00 20 1b 5b 31     :01 -0700... .[1
    b38c:	6d 43 6f 6d 6d 69 74 20 41 75 74 68 6f 72 3a 1b     mCommit Author:.
    b39c:	5b 30 6d 20 4a 61 63 6f 62 20 41 6c 65 78 61 6e     [0m Jacob Alexan
    b3ac:	64 65 72 20 3c 68 61 61 74 61 40 6b 69 69 62 6f     der <haata@kiibo
    b3bc:	68 64 2e 63 6f 6d 3e 0d 0a 00 20 1b 5b 31 6d 42     hd.com>... .[1mB
    b3cc:	75 69 6c 64 20 44 61 74 65 3a 1b 5b 30 6d 20 20     uild Date:.[0m  
    b3dc:	20 20 32 30 31 35 2d 31 31 2d 32 37 20 31 34 3a       2015-11-27 14:
    b3ec:	31 36 3a 30 37 20 2d 30 36 30 30 0d 0a 00 20 1b     16:07 -0600... .
    b3fc:	5b 31 6d 42 75 69 6c 64 20 4f 53 3a 1b 5b 30 6d     [1mBuild OS:.[0m
    b40c:	20 20 20 20 20 20 44 61 72 77 69 6e 2d 31 35 2e           Darwin-15.
    b41c:	32 2e 30 0d 0a 00 20 1b 5b 31 6d 41 72 63 68 69     2.0... .[1mArchi
    b42c:	74 65 63 74 75 72 65 3a 1b 5b 30 6d 20 20 61 72     tecture:.[0m  ar
    b43c:	6d 0d 0a 00 20 1b 5b 31 6d 43 68 69 70 3a 1b 5b     m... .[1mChip:.[
    b44c:	30 6d 20 20 20 20 20 20 20 20 20 20 6d 6b 32 30     0m          mk20
    b45c:	64 78 32 35 36 76 6c 68 37 0d 0a 00 20 1b 5b 31     dx256vlh7... .[1
    b46c:	6d 43 50 55 3a 1b 5b 30 6d 20 20 20 20 20 20 20     mCPU:.[0m       
    b47c:	20 20 20 20 63 6f 72 74 65 78 2d 6d 34 0d 0a 00         cortex-m4...
    b48c:	20 1b 5b 31 6d 44 65 76 69 63 65 3a 1b 5b 30 6d      .[1mDevice:.[0m
    b49c:	20 20 20 20 20 20 20 20 4b 65 79 62 6f 61 72 64             Keyboard
    b4ac:	0d 0a 00 20 1b 5b 31 6d 4d 6f 64 75 6c 65 73 3a     ... .[1mModules:
    b4bc:	1b 5b 30 6d 20 20 20 20 20 20 20 53 63 61 6e 28     .[0m       Scan(
    b4cc:	4d 44 45 72 67 6f 31 29 20 4d 61 63 72 6f 28 50     MDErgo1) Macro(P
    b4dc:	61 72 74 69 61 6c 4d 61 70 29 20 4f 75 74 70 75     artialMap) Outpu
    b4ec:	74 28 70 6a 72 63 55 53 42 29 20 44 65 62 75 67     t(pjrcUSB) Debug
    b4fc:	28 66 75 6c 6c 29 0d 0a 00 20 1b 5b 31 6d 55 6e     (full)... .[1mUn
    b50c:	69 71 75 65 20 49 64 3a 1b 5b 30 6d 20 20 20 20     ique Id:.[0m    
    b51c:	20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30      ..[1;32mINFO.[0
    b52c:	6d 20 2d 20 48 65 78 20 64 65 62 75 67 20 6d 6f     m - Hex debug mo
    b53c:	64 65 20 64 69 73 61 62 6c 65 64 2e 2e 2e 0d 0a     de disabled.....
    b54c:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    b55c:	20 2d 20 48 65 78 20 64 65 62 75 67 20 6d 6f 64      - Hex debug mod
    b56c:	65 20 65 6e 61 62 6c 65 64 2e 2e 2e 0d 0a 00 1b     e enabled.......
    b57c:	5b 00 31 3b 35 3b 33 31 00 45 52 52 4f 52 00 22     [.1;5;31.ERROR."
    b58c:	00 22 20 69 73 20 6e 6f 74 20 61 20 76 61 6c 69     ." is not a vali
    b59c:	64 20 63 6f 6d 6d 61 6e 64 2e 2e 2e 74 79 70 65     d command...type
    b5ac:	20 1b 5b 33 35 6d 68 65 6c 70 1b 5b 30 6d 00 1b      .[35mhelp.[0m..
    b5bc:	5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30     [1;5;31mERROR.[0
    b5cc:	6d 20 2d 20 4d 61 78 20 6e 75 6d 62 65 72 20 6f     m - Max number o
    b5dc:	66 20 64 69 63 74 69 6f 6e 61 72 69 65 73 20 64     f dictionaries d
    b5ec:	65 66 69 6e 65 64 20 61 6c 72 65 61 64 79 2e 2e     efined already..
    b5fc:	2e 0d 0a 00 1b 5b 32 4b 0d 00 1b 5b 31 3b 33 34     .....[2K...[1;34
    b60c:	6d 3a 1b 5b 30 6d 20 00 1b 5b 31 3b 35 3b 33 31     m:.[0m ..[1;5;31
    b61c:	6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 53 65 72     mERROR.[0m - Ser
    b62c:	69 61 6c 20 6c 69 6e 65 20 62 75 66 66 65 72 20     ial line buffer 
    b63c:	69 73 20 66 75 6c 6c 2c 20 64 72 6f 70 70 69 6e     is full, droppin
    b64c:	67 20 63 68 61 72 61 63 74 65 72 20 61 6e 64 20     g character and 
    b65c:	72 65 73 65 74 74 69 6e 67 2e 2e 2e 0d 0a 00 1b     resetting.......
    b66c:	5b 73 0d 0a 00 1b 5b 32 4b 00 1b 5b 75 00 08 20     [s....[2K..[u.. 
    b67c:	08 00 63 6c 65 61 72 00 63 6c 69 44 65 62 75 67     ..clear.cliDebug
    b68c:	00 68 65 6c 70 00 6c 65 64 00 72 65 6c 6f 61 64     .help.led.reload
    b69c:	00 72 65 73 65 74 00 72 65 73 74 61 72 74 00 76     .reset.restart.v
    b6ac:	65 72 73 69 6f 6e 00                                ersion.

0000b6b3 <resetCLIDict_DescEntry>:
    b6b3:	52 65 73 65 74 73 20 74 68 65 20 74 65 72 6d 69     Resets the termi
    b6c3:	6e 61 6c 20 62 61 63 6b 20 74 6f 20 69 6e 69 74     nal back to init
    b6d3:	69 61 6c 20 73 65 74 74 69 6e 67 73 2e 00 00 00     ial settings....
    b6e3:	00                                                  .

0000b6e4 <basicCLIDict>:
    b6e4:	7e b6 00 00 ef b1 00 00 b5 70 00 00 84 b6 00 00     ~........p......
    b6f4:	f7 b7 00 00 6d 72 00 00 8d b6 00 00 90 b1 00 00     ....mr..........
    b704:	cd 70 00 00 92 b6 00 00 50 b7 00 00 7d 71 00 00     .p......P...}q..
    b714:	96 b6 00 00 01 b2 00 00 91 71 00 00 9d b6 00 00     .........q......
    b724:	b3 b6 00 00 c1 70 00 00 a3 b6 00 00 a8 b1 00 00     .....p..........
    b734:	95 71 00 00 ab b6 00 00 2c b2 00 00 99 71 00 00     .q......,....q..
    b744:	00 00 00 00 00 00 00 00 00 00 00 00                 ............

0000b750 <ledCLIDict_DescEntry>:
    b750:	45 6e 61 62 6c 65 73 2f 44 69 73 61 62 6c 65 73     Enables/Disables
    b760:	20 69 6e 64 69 63 61 74 6f 72 20 4c 45 44 2e 20      indicator LED. 
    b770:	54 72 79 20 61 20 63 6f 75 70 6c 65 20 74 69 6d     Try a couple tim
    b780:	65 73 20 6a 75 73 74 20 69 6e 20 63 61 73 65 20     es just in case 
    b790:	74 68 65 20 4c 45 44 20 69 73 20 69 6e 20 61 6e     the LED is in an
    b7a0:	20 6f 64 64 20 73 74 61 74 65 2e 0d 0a 09 09 1b      odd state......
    b7b0:	5b 33 33 6d 57 61 72 6e 69 6e 67 1b 5b 30 6d 3a     [33mWarning.[0m:
    b7c0:	20 4d 61 79 20 61 64 76 65 72 73 65 6c 79 20 61      May adversely a
    b7d0:	66 66 65 63 74 20 73 6f 6d 65 20 6d 6f 64 75 6c     ffect some modul
    b7e0:	65 73 2e 2e 2e 00                                   es....

0000b7e6 <basicCLIDictName>:
    b7e6:	47 65 6e 65 72 61 6c 20 43 6f 6d 6d 61 6e 64 73     General Commands
    b7f6:	00                                                  .

0000b7f7 <cliDebugCLIDict_DescEntry>:
    b7f7:	45 6e 61 62 6c 65 73 2f 44 69 73 61 62 6c 65 73     Enables/Disables
    b807:	20 68 65 78 20 6f 75 74 70 75 74 20 6f 66 20 74      hex output of t
    b817:	68 65 20 6d 6f 73 74 20 72 65 63 65 6e 74 20 63     he most recent c
    b827:	6c 69 20 69 6e 70 75 74 2e 00 00 00 00              li input.....
